ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               CLOCK_SPEED = 24000000
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               ; .include "drivers/4004.inc"
000000r 1               .include "drivers/lcd.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_ADDR_DISABLED = LCD_BASE
000000r 2               LCD_ADDR_ENABLED = LCD_BASE + 1
000000r 2               LCD_DATA_DISABLED = LCD_BASE + 2
000000r 2               LCD_DATA_ENABLED = LCD_BASE + 3
000000r 2               
000000r 2               
000000r 2               ; A0: RS
000000r 2               ; A1: E
000000r 2               
000000r 1               .include "drivers/vga.inc"
000000r 2               VIDEO_BASE = $FFB0
000000r 2               
000000r 2               VIDEO_CTRL = VIDEO_BASE       ;// Formatted as follows |INCR_5|INCR_4|INCR_3|INCR_2|INCR_1|INCR_0|MODE_1|MODE_0|  default to LORES
000000r 2               VIDEO_ADDR_LOW = VIDEO_BASE + 1   ;// also contains the increment ||||ADDR4|ADDR_3|ADDR_2|ADDR_1|ADDR_0|
000000r 2               VIDEO_ADDR_HIGH = VIDEO_BASE + 2
000000r 2               VIDEO_DATA = VIDEO_BASE + 3
000000r 2               VIDEO_IEN = VIDEO_BASE + 4    ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_INTR = VIDEO_BASE + 5   ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_HSCROLL = VIDEO_BASE + 6
000000r 2               VIDEO_VSCROLL = VIDEO_BASE + 7
000000r 2               
000000r 2               VIDEO_HIRES_HCHARS = 80
000000r 2               VIDEO_HIRES_VCHARS = 60
000000r 2               
000000r 1               .include "drivers/keyboard.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               KB_VIA_BASE   = $FF90
000000r 2               KB_PORTB = KB_VIA_BASE
000000r 2               KB_PORTA  = KB_VIA_BASE+1
000000r 2               KB_DDRB = KB_VIA_BASE+2
000000r 2               KB_DDRA = KB_VIA_BASE+3
000000r 2               
000000r 2               
000000r 2               KB_T1CL = KB_VIA_BASE + 4
000000r 2               KB_T1CH = KB_VIA_BASE + 5
000000r 2               KB_T1LL = KB_VIA_BASE + 6
000000r 2               KB_T1LH = KB_VIA_BASE + 7
000000r 2               KB_ACR = KB_VIA_BASE + 11
000000r 2               KB_PCR = KB_VIA_BASE + 12
000000r 2               KB_IFR = KB_VIA_BASE + 13
000000r 2               KB_IER = KB_VIA_BASE + 14
000000r 2               
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_BASE = $FFD0
000000r 2               CF_REG_0 = CF_BASE
000000r 2               CF_REG_1 = CF_BASE + 1
000000r 2               CF_REG_2 = CF_BASE + 2
000000r 2               CF_REG_3 = CF_BASE + 3
000000r 2               CF_REG_4 = CF_BASE + 4
000000r 2               CF_REG_5 = CF_BASE + 5
000000r 2               CF_REG_6 = CF_BASE + 6
000000r 2               CF_REG_7 = CF_BASE + 7
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               
000000r 1               
000000r 1               .include "drivers/zp.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               ; next_addr: .res 1
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               .segment "ZEROPAGE": zeropage
000000r 2               
000000r 2  xx xx        stack_p: .res 2
000002r 2               
000002r 2               
000002r 1               
000002r 1               .segment "BSS"
000000r 1               
000000r 1  xx           lcd_absent: .res 1
000001r 1               
000001r 1  xx           has_acia: .res 1
000002r 1               ; .align  256
000002r 1  xx xx xx xx  FAT_BUFFER: .res $200
000006r 1  xx xx xx xx  
00000Ar 1  xx xx xx xx  
000202r 1               ; .align  256
000202r 1               ;FILE_BUFFER: .res $1000
000202r 1               FILE_BUFFER_END:
000202r 1               
000202r 1               .segment "RODATA"
000000r 1               
000000r 1               .import    copydata
000000r 1               ; .import zerobss
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1               v_reset:
000000r 1               
000000r 1  20 rr rr         JSR     copydata
000003r 1                   ; jsr zerobss
000003r 1               
000003r 1  4C rr rr         jmp kernel_init
000006r 1               
000006r 1               
000006r 1               .include "drivers/acia.s"
000006r 2               .segment "DATA"
000000r 2               
000000r 2               acia_init:
000000r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
000003r 2                                           ; set specific modes and functions
000003r 2  9C rr rr         stz has_acia
000006r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
000008r 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
000008r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
00000Br 2  AD E2 FF         lda ACIA_CMD        ; load command register again
00000Er 2  C9 0B            cmp #$0B                ; if not the same
000010r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000012r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
000015r 2  29 60            and #$60                ; check if present or absent
000017r 2  D0 0A            bne acia_absent
000019r 2  A9 01            lda #1
00001Br 2  8D rr rr         sta has_acia           ; remember that ACIA is here
00001Er 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000020r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000020r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000023r 2               
000023r 2               acia_absent:
000023r 2  A0 14                ldy #20
000025r 2               aa_loop:
000025r 2  20 rr rr             jsr delay_short
000028r 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
00002Br 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
00002Er 2  88                   dey
00002Fr 2  D0 F4                bne aa_loop
000031r 2               aa_end:
000031r 2  60                   rts
000032r 2               
000032r 2               acia_out:
000032r 2  48               pha
000033r 2  5A               phy
000034r 2  8D E0 FF         sta ACIA_DATA
000037r 2  A0 20            ldy #$20            ;minimal delay is $02
000039r 2  20 rr rr         jsr delay_short
00003Cr 2  7A               ply
00003Dr 2  68               pla
00003Er 2  60               rts
00003Fr 2               
00003Fr 2               acia_getc:
00003Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000042r 2  29 08            and #$08                        ; Check if there is character in the receiver
000044r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000046r 2  AD E0 FF         lda ACIA_DATA
000049r 2  38               sec
00004Ar 2  60               rts
00004Br 2               @no_char:
00004Br 2  18               clc
00004Cr 2  60               rts
00004Dr 2               
00004Dr 1               .include "drivers/timer.s"
00004Dr 2               
00004Dr 2               
00004Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00004Dr 2               
00004Dr 2               .segment "ZEROPAGE": zeropage
000002r 2  xx xx xx xx  time: .res 4
000006r 2               
000006r 2               .segment "DATA"
00004Dr 2               
00004Dr 2               timer_init:
00004Dr 2  AD 8E FF         lda IER
000050r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000052r 2  8D 8E FF         sta IER
000055r 2  A9 40            lda #$40        ; timer one free run mode
000057r 2  8D 8B FF         sta ACR
00005Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00005Cr 2  8D 84 FF         sta T1CL
00005Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000061r 2               
000061r 2  8D 85 FF         sta T1CH
000064r 2  A9 00            lda #0              ; reset time variable
000066r 2  85 rr            sta time
000068r 2  85 rr            sta time+1
00006Ar 2  85 rr            sta time+2
00006Cr 2  85 rr            sta time+3
00006Er 2  58               cli
00006Fr 2  60               rts
000070r 2               
000070r 2               
000070r 2               timer_irq:
000070r 2  E6 rr            inc time
000072r 2  F0 01            beq @inc1
000074r 2               @exit1:
000074r 2                   ; this resets the PS/2 temp variables
000074r 2                   ;jsr reset_ps2
000074r 2  60               rts
000075r 2               @inc1:
000075r 2  E6 rr            inc time+1
000077r 2  F0 02            beq @inc2
000079r 2  80 F9            bra @exit1
00007Br 2               @inc2:
00007Br 2  E6 rr            inc time+2
00007Dr 2  F0 02            beq @inc3
00007Fr 2  80 F3            bra @exit1
000081r 2               @inc3:
000081r 2  E6 rr            inc time+3
000083r 2  80 EF            bra @exit1
000085r 2  60               rts
000086r 2               
000086r 1               ; .include "drivers/keyboard.s"
000086r 1               .include "drivers/ps2.s"
000086r 2               ; Copyright 2020 Jonathan Foucher
000086r 2               
000086r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000086r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000086r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000086r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000086r 2               ; is furnished to do so, subject to the following conditions:
000086r 2               
000086r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000086r 2               ; substantial portions of the Software.
000086r 2               
000086r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000086r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000086r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000086r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000086r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000086r 2               ; DEALINGS IN THE SOFTWARE.
000086r 2               
000086r 2               .segment "ZEROPAGE": zeropage
000006r 2               
000006r 2  xx xx xx xx  last_ps2_time: .res 4
00000Ar 2  xx           KB_BUF_W_PTR: .res 1
00000Br 2  xx           KB_BUF_R_PTR: .res 1
00000Cr 2  xx           control_keys: .res 1
00000Dr 2  xx           character: .res 1
00000Er 2               
00000Er 2               .segment "BSS"
000202r 2  xx xx xx xx  KB_BUF: .res 128
000206r 2  xx xx xx xx  
00020Ar 2  xx xx xx xx  
000282r 2  xx           KB_STATE: .res 1
000283r 2  xx           KB_TEMP: .res 1
000284r 2  xx           KB_PARITY: .res 1
000285r 2  xx           KB_BIT: .res 1
000286r 2  xx           KB_INIT_STATE: .res 1
000287r 2  xx           KB_INIT_WAIT: .res 1
000288r 2  xx           ready: .res 1
000289r 2  xx           to_send: .res 1
00028Ar 2  xx           ignore_next: .res 1
00028Br 2               
00028Br 2               .segment "RODATA"
000000r 2               
000000r 2               .include "drivers/keycodes.s"
000000r 3               
000000r 3               
000000r 3               ASCIITBL:
000000r 3  00               .byte $00               ; 00 no key pressed
000001r 3  89               .byte $89               ; 01 F9
000002r 3  87               .byte $87               ; 02 relocated F7
000003r 3  85               .byte $85               ; 03 F5
000004r 3  83               .byte $83               ; 04 F3
000005r 3  81               .byte $81               ; 05 F1
000006r 3  82               .byte $82               ; 06 F2
000007r 3  8C               .byte $8C               ; 07 F12
000008r 3  00               .byte $00               ; 08
000009r 3  8A               .byte $8A               ; 09 F10
00000Ar 3  88               .byte $88               ; 0A F8
00000Br 3  86               .byte $86               ; 0B F6
00000Cr 3  84               .byte $84               ; 0C F4
00000Dr 3  09               .byte $09               ; 0D tab
00000Er 3  60               .byte $60               ; 0E `~
00000Fr 3  8F               .byte $8F               ; 0F relocated Print Screen key
000010r 3  03               .byte $03               ; 10 relocated Pause/Break key
000011r 3  A0               .byte $A0               ; 11 left alt (right alt too)
000012r 3  00               .byte $00               ; 12 left shift
000013r 3  E0               .byte $E0               ; 13 relocated Alt release code
000014r 3  00               .byte $00               ; 14 left ctrl (right ctrl too)
000015r 3  71               .byte $71               ; 15 qQ
000016r 3  31               .byte $31               ; 16 1!
000017r 3  00               .byte $00               ; 17
000018r 3  00               .byte $00               ; 18
000019r 3  00               .byte $00               ; 19
00001Ar 3  7A               .byte $7A               ; 1A zZ
00001Br 3  73               .byte $73               ; 1B sS
00001Cr 3  61               .byte $61               ; 1C aA
00001Dr 3  77               .byte $77               ; 1D wW
00001Er 3  32               .byte $32               ; 1E 2@
00001Fr 3  A1               .byte $A1               ; 1F Windows 98 menu key (left side)
000020r 3  02               .byte $02               ; 20 relocated ctrl-break key
000021r 3  63               .byte $63               ; 21 cC
000022r 3  78               .byte $78               ; 22 xX
000023r 3  64               .byte $64               ; 23 dD
000024r 3  65               .byte $65               ; 24 eE
000025r 3  34               .byte $34               ; 25 4$
000026r 3  33               .byte $33               ; 26 3#
000027r 3  A2               .byte $A2               ; 27 Windows 98 menu key (right side)
000028r 3  00               .byte $00               ; 28
000029r 3  20               .byte $20               ; 29 space
00002Ar 3  76               .byte $76               ; 2A vV
00002Br 3  66               .byte $66               ; 2B fF
00002Cr 3  74               .byte $74               ; 2C tT
00002Dr 3  72               .byte $72               ; 2D rR
00002Er 3  35               .byte $35               ; 2E 5%
00002Fr 3  A3               .byte $A3               ; 2F Windows 98 option key (right click, right side)
000030r 3  00               .byte $00               ; 30
000031r 3  6E               .byte $6E               ; 31 nN
000032r 3  62               .byte $62               ; 32 bB
000033r 3  68               .byte $68               ; 33 hH
000034r 3  67               .byte $67               ; 34 gG
000035r 3  79               .byte $79               ; 35 yY
000036r 3  36               .byte $36               ; 36 6^
000037r 3  00               .byte $00               ; 37
000038r 3  00               .byte $00               ; 38
000039r 3  00               .byte $00               ; 39
00003Ar 3  6D               .byte $6D               ; 3A mM
00003Br 3  6A               .byte $6A               ; 3B jJ
00003Cr 3  75               .byte $75               ; 3C uU
00003Dr 3  37               .byte $37               ; 3D 7&
00003Er 3  38               .byte $38               ; 3E 8*
00003Fr 3  00               .byte $00               ; 3F
000040r 3  00               .byte $00               ; 40
000041r 3  2C               .byte $2C               ; 41 ,<
000042r 3  6B               .byte $6B               ; 42 kK
000043r 3  69               .byte $69               ; 43 iI
000044r 3  6F               .byte $6F               ; 44 oO
000045r 3  30               .byte $30               ; 45 0)
000046r 3  39               .byte $39               ; 46 9(
000047r 3  00               .byte $00               ; 47
000048r 3  00               .byte $00               ; 48
000049r 3  2E               .byte $2E               ; 49 .>
00004Ar 3  2F               .byte $2F               ; 4A /?
00004Br 3  6C               .byte $6C               ; 4B lL
00004Cr 3  3B               .byte $3B               ; 4C ;:
00004Dr 3  70               .byte $70               ; 4D pP
00004Er 3  2D               .byte $2D               ; 4E -_
00004Fr 3  00               .byte $00               ; 4F
000050r 3  00               .byte $00               ; 50
000051r 3  00               .byte $00               ; 51
000052r 3  27               .byte $27               ; 52 '"
000053r 3  00               .byte $00               ; 53
000054r 3  5B               .byte $5B               ; 54 [{
000055r 3  3D               .byte $3D               ; 55 =+
000056r 3  00               .byte $00               ; 56
000057r 3  00               .byte $00               ; 57
000058r 3  00               .byte $00               ; 58 caps
000059r 3  00               .byte $00               ; 59 r shift
00005Ar 3  0D               .byte $0D               ; 5A <Enter>
00005Br 3  5D               .byte $5D               ; 5B ]}
00005Cr 3  00               .byte $00               ; 5C
00005Dr 3  5C               .byte $5C               ; 5D \|
00005Er 3  00               .byte $00               ; 5E
00005Fr 3  00               .byte $00               ; 5F
000060r 3  00               .byte $00               ; 60
000061r 3  00               .byte $00               ; 61
000062r 3  00               .byte $00               ; 62
000063r 3  00               .byte $00               ; 63
000064r 3  00               .byte $00               ; 64
000065r 3  00               .byte $00               ; 65
000066r 3  08               .byte $08               ; 66 bkspace
000067r 3  00               .byte $00               ; 67
000068r 3  00               .byte $00               ; 68
000069r 3  31               .byte $31               ; 69 kp 1
00006Ar 3  2F               .byte $2f               ; 6A kp / converted from E04A in code
00006Br 3  34               .byte $34               ; 6B kp 4
00006Cr 3  37               .byte $37               ; 6C kp 7
00006Dr 3  00               .byte $00               ; 6D
00006Er 3  00               .byte $00               ; 6E
00006Fr 3  00               .byte $00               ; 6F
000070r 3  30               .byte $30               ; 70 kp 0
000071r 3  2E               .byte $2E               ; 71 kp .
000072r 3  32               .byte $32               ; 72 kp 2
000073r 3  35               .byte $35               ; 73 kp 5
000074r 3  36               .byte $36               ; 74 kp 6
000075r 3  38               .byte $38               ; 75 kp 8
000076r 3  1B               .byte $1B               ; 76 esc
000077r 3  00               .byte $00               ; 77 num lock
000078r 3  8B               .byte $8B               ; 78 F11
000079r 3  2B               .byte $2B               ; 79 kp +
00007Ar 3  33               .byte $33               ; 7A kp 3
00007Br 3  2D               .byte $2D               ; 7B kp -
00007Cr 3  2A               .byte $2A               ; 7C kp *
00007Dr 3  39               .byte $39               ; 7D kp 9
00007Er 3  8D               .byte $8D               ; 7E scroll lock
00007Fr 3  00               .byte $00               ; 7F
000080r 3                   ;
000080r 3                   ; Table for shifted scancodes
000080r 3                   ;
000080r 3  00               .byte $00               ; 80
000081r 3  C9               .byte $C9               ; 81 F9
000082r 3  C7               .byte $C7               ; 82 relocated F7
000083r 3  C5               .byte $C5               ; 83 F5 (F7 actual scancode=83)
000084r 3  C3               .byte $C3               ; 84 F3
000085r 3  C1               .byte $C1               ; 85 F1
000086r 3  C2               .byte $C2               ; 86 F2
000087r 3  CC               .byte $CC               ; 87 F12
000088r 3  00               .byte $00               ; 88
000089r 3  CA               .byte $CA               ; 89 F10
00008Ar 3  C8               .byte $C8               ; 8A F8
00008Br 3  C6               .byte $C6               ; 8B F6
00008Cr 3  C4               .byte $C4               ; 8C F4
00008Dr 3  09               .byte $09               ; 8D tab
00008Er 3  7E               .byte $7E               ; 8E `~
00008Fr 3  CF               .byte $CF               ; 8F relocated Print Screen key
000090r 3  03               .byte $03               ; 90 relocated Pause/Break key
000091r 3  A0               .byte $A0               ; 91 left alt (right alt)
000092r 3  00               .byte $00               ; 92 left shift
000093r 3  E0               .byte $E0               ; 93 relocated Alt release code
000094r 3  00               .byte $00               ; 94 left ctrl (and right ctrl)
000095r 3  51               .byte $51               ; 95 qQ
000096r 3  21               .byte $21               ; 96 1!
000097r 3  00               .byte $00               ; 97
000098r 3  00               .byte $00               ; 98
000099r 3  00               .byte $00               ; 99
00009Ar 3  5A               .byte $5A               ; 9A zZ
00009Br 3  53               .byte $53               ; 9B sS
00009Cr 3  41               .byte $41               ; 9C aA
00009Dr 3  57               .byte $57               ; 9D wW
00009Er 3  40               .byte $40               ; 9E 2@
00009Fr 3  E1               .byte $E1               ; 9F Windows 98 menu key (left side)
0000A0r 3  02               .byte $02               ; A0 relocated ctrl-break key
0000A1r 3  43               .byte $43               ; A1 cC
0000A2r 3  58               .byte $58               ; A2 xX
0000A3r 3  44               .byte $44               ; A3 dD
0000A4r 3  45               .byte $45               ; A4 eE
0000A5r 3  24               .byte $24               ; A5 4$
0000A6r 3  23               .byte $23               ; A6 3#
0000A7r 3  E2               .byte $E2               ; A7 Windows 98 menu key (right side)
0000A8r 3  00               .byte $00               ; A8
0000A9r 3  20               .byte $20               ; A9 space
0000AAr 3  56               .byte $56               ; AA vV
0000ABr 3  46               .byte $46               ; AB fF
0000ACr 3  54               .byte $54               ; AC tT
0000ADr 3  52               .byte $52               ; AD rR
0000AEr 3  25               .byte $25               ; AE 5%
0000AFr 3  E3               .byte $E3               ; AF Windows 98 option key (right click, right side)
0000B0r 3  00               .byte $00               ; B0
0000B1r 3  4E               .byte $4E               ; B1 nN
0000B2r 3  42               .byte $42               ; B2 bB
0000B3r 3  48               .byte $48               ; B3 hH
0000B4r 3  47               .byte $47               ; B4 gG
0000B5r 3  59               .byte $59               ; B5 yY
0000B6r 3  5E               .byte $5E               ; B6 6^
0000B7r 3  00               .byte $00               ; B7
0000B8r 3  00               .byte $00               ; B8
0000B9r 3  00               .byte $00               ; B9
0000BAr 3  4D               .byte $4D               ; BA mM
0000BBr 3  4A               .byte $4A               ; BB jJ
0000BCr 3  55               .byte $55               ; BC uU
0000BDr 3  26               .byte $26               ; BD 7&
0000BEr 3  2A               .byte $2A               ; BE 8*
0000BFr 3  00               .byte $00               ; BF
0000C0r 3  00               .byte $00               ; C0
0000C1r 3  3C               .byte $3C               ; C1 ,<
0000C2r 3  4B               .byte $4B               ; C2 kK
0000C3r 3  49               .byte $49               ; C3 iI
0000C4r 3  4F               .byte $4F               ; C4 oO
0000C5r 3  29               .byte $29               ; C5 0)
0000C6r 3  28               .byte $28               ; C6 9(
0000C7r 3  00               .byte $00               ; C7
0000C8r 3  00               .byte $00               ; C8
0000C9r 3  3E               .byte $3E               ; C9 .>
0000CAr 3  3F               .byte $3F               ; CA /?
0000CBr 3  4C               .byte $4C               ; CB lL
0000CCr 3  3A               .byte $3A               ; CC ;:
0000CDr 3  50               .byte $50               ; CD pP
0000CEr 3  5F               .byte $5F               ; CE -_
0000CFr 3  00               .byte $00               ; CF
0000D0r 3  00               .byte $00               ; D0
0000D1r 3  00               .byte $00               ; D1
0000D2r 3  22               .byte $22               ; D2 '"
0000D3r 3  00               .byte $00               ; D3
0000D4r 3  7B               .byte $7B               ; D4 [{
0000D5r 3  2B               .byte $2B               ; D5 =+
0000D6r 3  00               .byte $00               ; D6
0000D7r 3  00               .byte $00               ; D7
0000D8r 3  00               .byte $00               ; D8 caps
0000D9r 3  00               .byte $00               ; D9 r shift
0000DAr 3  0D               .byte $0D               ; DA <Enter>
0000DBr 3  7D               .byte $7D               ; DB ]}
0000DCr 3  00               .byte $00               ; DC
0000DDr 3  7C               .byte $7C               ; DD \|
0000DEr 3  00               .byte $00               ; DE
0000DFr 3  00               .byte $00               ; DF
0000E0r 3  00               .byte $00               ; E0
0000E1r 3  00               .byte $00               ; E1
0000E2r 3  00               .byte $00               ; E2
0000E3r 3  00               .byte $00               ; E3
0000E4r 3  00               .byte $00               ; E4
0000E5r 3  00               .byte $00               ; E5
0000E6r 3  08               .byte $08               ; E6 bkspace
0000E7r 3  00               .byte $00               ; E7
0000E8r 3  00               .byte $00               ; E8
0000E9r 3  91               .byte $91               ; E9 kp 1
0000EAr 3  2F               .byte $2f               ; EA kp / converted from E04A in code
0000EBr 3  94               .byte $94               ; EB kp 4
0000ECr 3  97               .byte $97               ; EC kp 7
0000EDr 3  00               .byte $00               ; ED
0000EEr 3  00               .byte $00               ; EE
0000EFr 3  00               .byte $00               ; EF
0000F0r 3  90               .byte $90               ; F0 kp 0
0000F1r 3  7F               .byte $7F               ; F1 kp .
0000F2r 3  92               .byte $92               ; F2 kp 2
0000F3r 3  95               .byte $95               ; F3 kp 5
0000F4r 3  96               .byte $96               ; F4 kp 6
0000F5r 3  98               .byte $98               ; F5 kp 8
0000F6r 3  1B               .byte $1B               ; F6 esc
0000F7r 3  00               .byte $00               ; F7 num lock
0000F8r 3  CB               .byte $CB               ; F8 F11
0000F9r 3  2B               .byte $2B               ; F9 kp +
0000FAr 3  93               .byte $93               ; FA kp 3
0000FBr 3  2D               .byte $2D               ; FB kp -
0000FCr 3  2A               .byte $2A               ; FC kp *
0000FDr 3  99               .byte $99               ; FD kp 9
0000FEr 3  CD               .byte $CD               ; FE scroll lock
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 2               
0000FFr 2               .segment "DATA"
000086r 2               
000086r 2               ps2_init:
000086r 2  78             sei ; prevent interrupts while initializing
000087r 2               kb_conn_msg:
000087r 2  A2 00          ldx #0
000089r 2               kb_conn_loop:
000089r 2  BD rr rr       lda kb_conn_msg_text,x
00008Cr 2  F0 1A          beq kb_conn_msg_end
00008Er 2  20 rr rr       jsr kernel_putc
000091r 2  E8             inx
000092r 2  80 F5          bra kb_conn_loop
000094r 2  44 65 74 65  kb_conn_msg_text: .byte "Detecting keyboard", $0D, $00
000098r 2  63 74 69 6E  
00009Cr 2  67 20 6B 65  
0000A8r 2               kb_conn_msg_end:
0000A8r 2               
0000A8r 2  AD 8E FF       lda IER
0000ABr 2  09 88          ora #$88      ;enable interrupt on neg transition on CB2
0000ADr 2  8D 8E FF       sta IER
0000B0r 2               
0000B0r 2  A9 00          lda #0
0000B2r 2  8D 8C FF       sta PCR
0000B5r 2  8D rr rr       sta KB_TEMP
0000B8r 2  8D rr rr       sta KB_BIT
0000BBr 2  8D rr rr       sta KB_STATE
0000BEr 2  8D rr rr       sta to_send
0000C1r 2  8D rr rr       sta KB_PARITY
0000C4r 2  85 rr          sta KB_BUF_W_PTR
0000C6r 2  85 rr          sta KB_BUF_R_PTR
0000C8r 2  8D rr rr       sta KB_INIT_STATE
0000CBr 2  8D rr rr       sta KB_INIT_WAIT
0000CEr 2  8D rr rr       sta ready
0000D1r 2  8D rr rr       sta ignore_next
0000D4r 2  85 rr          sta character
0000D6r 2  20 rr rr       jsr clear_buffer
0000D9r 2               
0000D9r 2                 ; jsr kb_reset
0000D9r 2                 ; jsr kb_leds
0000D9r 2                 ; jsr kb_leds_data
0000D9r 2               
0000D9r 2                 ; jmp done_init
0000D9r 2               
0000D9r 2  A9 00          lda #KB_INIT_STATE_RESET
0000DBr 2  8D rr rr       sta KB_INIT_STATE
0000DEr 2  58             cli           ;enable interrupts
0000DFr 2               
0000DFr 2               @wait1:
0000DFr 2  A0 0A          ldy #10
0000E1r 2  20 rr rr       jsr delay
0000E4r 2  EE rr rr       inc KB_INIT_WAIT
0000E7r 2  F0 1C          beq done_init     ; nothing to show yet
0000E9r 2  AD rr rr       lda to_send
0000ECr 2  D0 F1          bne @wait1       ; do nothing while sending
0000EEr 2               
0000EEr 2                 ;jsr lcd_print
0000EEr 2               
0000EEr 2  AE rr rr       ldx KB_INIT_STATE
0000F1r 2  E0 00          cpx #KB_INIT_STATE_RESET
0000F3r 2  F0 06          beq @do_reset
0000F5r 2  E0 01          cpx #KB_INIT_STATE_RESET_ACK
0000F7r 2  F0 0C          beq done_init
0000F9r 2                 ; beq @self_test_ok  ; Wait for 256 loops with nothing. if still nothing, reset keyboard
0000F9r 2               
0000F9r 2  80 0A          bra done_init
0000FBr 2                 ;sta PORTA
0000FBr 2                 ; wait for keyboard self test (#$AA)
0000FBr 2               
0000FBr 2               @do_reset:
0000FBr 2  20 rr rr       jsr kb_reset
0000FEr 2  A9 01          lda #KB_INIT_STATE_RESET_ACK  ; next state should be an acknowledgment
000100r 2  8D rr rr       sta KB_INIT_STATE
000103r 2  80 DA          bra @wait1
000105r 2               
000105r 2               
000105r 2               done_init:
000105r 2  A9 00          lda #0
000107r 2  8D 82 FF       sta DDRB
00010Ar 2  8D 8C FF       sta PCR
00010Dr 2  8D rr rr       sta ignore_next
000110r 2  8D rr rr       sta ready
000113r 2  85 rr          sta control_keys
000115r 2  8D rr rr       sta to_send
000118r 2  8D rr rr       sta ready
00011Br 2  85 rr          sta character
00011Dr 2  8D rr rr       sta KB_TEMP
000120r 2  8D rr rr       sta KB_INIT_STATE
000123r 2  8D rr rr       sta KB_BIT
000126r 2  8D rr rr       sta KB_STATE
000129r 2  85 rr          sta KB_BUF_W_PTR
00012Br 2  85 rr          sta KB_BUF_R_PTR
00012Dr 2  58             cli ; enable interrupts again
00012Er 2  60             rts
00012Fr 2               
00012Fr 2               
00012Fr 2               kb_reset:
00012Fr 2  A9 00          lda #0
000131r 2  8D rr rr       sta KB_INIT_WAIT
000134r 2  A9 F0          lda #$F0
000136r 2  8D 81 FF       sta PORTA
000139r 2  78             sei                   ;disable interrupts
00013Ar 2  20 rr rr       jsr prepare_send
00013Dr 2  A9 FF          lda #$FF
00013Fr 2  8D rr rr       sta to_send
000142r 2  58             cli                   ; enable interrupts
000143r 2  60             rts
000144r 2               
000144r 2               no_kb_msg:
000144r 2  A2 00          ldx #0
000146r 2               no_kb_loop:
000146r 2  BD rr rr       lda no_kb_msg_text,x
000149r 2  F0 BA          beq done_init
00014Br 2  20 rr rr       jsr kernel_putc
00014Er 2  E8             inx
00014Fr 2  80 F5          bra no_kb_loop
000151r 2  4E 6F 20 6B  no_kb_msg_text: .byte "No keyboard connected", $0D, $00
000155r 2  65 79 62 6F  
000159r 2  61 72 64 20  
000168r 2               
000168r 2               
000168r 2               prepare_send:
000168r 2  48             pha
000169r 2  5A             phy
00016Ar 2                 ; ready to send, pull clock low for a while
00016Ar 2  A9 C0          lda #$C0
00016Cr 2  8D 8C FF       sta PCR       ;set CB2 low
00016Fr 2                 ;delay
00016Fr 2  A0 80          ldy #$80
000171r 2  20 rr rr       jsr delay
000174r 2                 ; delay end
000174r 2                 ; pull data low now
000174r 2  AD 80 FF       lda PORTB
000177r 2  29 7F          and #($FF^DATA)
000179r 2  8D 80 FF       sta PORTB
00017Cr 2  AD 82 FF       lda DDRB
00017Fr 2  09 80          ora #DATA   ;data as output to set it low
000181r 2  8D 82 FF       sta DDRB
000184r 2  A0 40          ldy #$40
000186r 2  20 rr rr       jsr delay
000189r 2  A9 01          lda #KB_STATE_DATA    ; no start bit when sending
00018Br 2  8D rr rr       sta KB_STATE
00018Er 2                 ; release clock
00018Er 2  A9 00          lda #0
000190r 2  8D rr rr       sta to_send
000193r 2  8D rr rr       sta KB_PARITY
000196r 2  8D 8C FF       sta PCR       ;set CB2 to negative edge input
000199r 2               
000199r 2  7A             ply
00019Ar 2  68             pla
00019Br 2  60             rts
00019Cr 2               
00019Cr 2               
00019Cr 2               reset_ps2:          ; routine called during a timer interrupt to check
00019Cr 2  48             pha
00019Dr 2                                   ; if the elasped time since the last ps2 interrupt allows us to reset it
00019Dr 2  A5 rr          lda time+3
00019Fr 2  C5 rr          cmp last_ps2_time+3
0001A1r 2  90 16          bcc @reset
0001A3r 2  A5 rr          lda time+2
0001A5r 2  C5 rr          cmp last_ps2_time+2
0001A7r 2  90 10          bcc @reset
0001A9r 2  A5 rr          lda time+1
0001ABr 2  C5 rr          cmp last_ps2_time+1
0001ADr 2  90 0A          bcc @reset
0001AFr 2  A5 rr          lda time
0001B1r 2  69 01          adc #$1
0001B3r 2  C5 rr          cmp last_ps2_time
0001B5r 2  90 02          bcc @reset
0001B7r 2               @exit2:
0001B7r 2  68             pla
0001B8r 2  60             rts
0001B9r 2               @reset:
0001B9r 2  A9 00          lda #0
0001BBr 2  8D rr rr       sta KB_TEMP
0001BEr 2  8D rr rr       sta KB_BIT
0001C1r 2  8D rr rr       sta KB_STATE
0001C4r 2  85 rr          sta KB_BUF_W_PTR
0001C6r 2  85 rr          sta KB_BUF_R_PTR
0001C8r 2  F0 ED          beq @exit2
0001CAr 2               
0001CAr 2               clear_buffer:
0001CAr 2  DA             phx
0001CBr 2  A2 FF          ldx #$ff
0001CDr 2               @clear_loop:
0001CDr 2  9E rr rr       stz KB_BUF, x
0001D0r 2  CA             dex
0001D1r 2  D0 FA          bne @clear_loop
0001D3r 2  FA             plx
0001D4r 2  60             rts
0001D5r 2               
0001D5r 2               
0001D5r 2               ps2_get_char:
0001D5r 2               
0001D5r 2  DA               phx                             ; save X
0001D6r 2  A6 rr            ldx KB_BUF_R_PTR                ; check the keyboard buffer
0001D8r 2  BD rr rr         lda KB_BUF, x
0001DBr 2  F0 0B            beq no_ps2_char_available       ; exit if nothing found
0001DDr 2  9E rr rr         stz KB_BUF, x                   ; if there was a character, reset this buffer cell
0001E0r 2  E6 rr            inc KB_BUF_R_PTR                ; and increment the read pointer
0001E2r 2               
0001E2r 2  38               sec                             ; mark character present
0001E3r 2  FA               plx                             ; restore X
0001E4r 2  20 rr rr         jsr check_ctrl_c
0001E7r 2  60               rts                             ; return
0001E8r 2               no_ps2_char_available:                  ; no keyboard char
0001E8r 2  E6 rr            inc KB_BUF_R_PTR                ; increment read pointer for next time
0001EAr 2  FA               plx                             ; restore X
0001EBr 2  18               clc
0001ECr 2  60               rts
0001EDr 2                 .include "ps2_irq.s"
0001EDr 3               ; Copyright 2020 Jonathan Foucher
0001EDr 3               
0001EDr 3               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
0001EDr 3               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
0001EDr 3               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
0001EDr 3               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
0001EDr 3               ; is furnished to do so, subject to the following conditions:
0001EDr 3               
0001EDr 3               ; The above copyright notice and this permission notice shall be included in all copies or
0001EDr 3               ; substantial portions of the Software.
0001EDr 3               
0001EDr 3               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
0001EDr 3               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
0001EDr 3               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
0001EDr 3               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
0001EDr 3               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0001EDr 3               ; DEALINGS IN THE SOFTWARE.
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               ps2_irq:
0001EDr 3  48               pha
0001EEr 3  DA               phx
0001EFr 3  AD rr rr         lda to_send
0001F2r 3  D0 25            bne @willsend
0001F4r 3  AD rr rr         lda KB_STATE            ; which state ?
0001F7r 3  C9 00            cmp #KB_STATE_START
0001F9r 3  F0 0F            beq @start        ; start bit
0001FBr 3               
0001FBr 3  C9 01            cmp #KB_STATE_DATA             ; get data bits
0001FDr 3  F0 1D            beq @data
0001FFr 3               
0001FFr 3  C9 02            cmp #KB_STATE_PARITY             ; this is the parity bit
000201r 3  F0 3A            beq @parity
000203r 3               
000203r 3  C9 03            cmp #KB_STATE_STOP      ; stop bit
000205r 3  F0 3D            beq @stop
000207r 3  4C rr rr         jmp @exit
00020Ar 3               
00020Ar 3               @start:
00020Ar 3  A9 01            lda #KB_STATE_DATA
00020Cr 3  8D rr rr         sta KB_STATE        ; next state will be to get data
00020Fr 3  A9 00            lda #0
000211r 3  8D rr rr         sta KB_TEMP
000214r 3  8D rr rr         sta KB_BIT
000217r 3  80 65            bra @exit
000219r 3               @willsend:
000219r 3  4C rr rr         jmp @sending
00021Cr 3               @data:
00021Cr 3  AD 80 FF         lda PORTB       ; get the bit of data from PORTB bit 7
00021Fr 3  29 80            and #$80
000221r 3  0D rr rr         ora KB_TEMP     ; OR it with existing temp data
000224r 3  8D rr rr         sta KB_TEMP     ; save it
000227r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
00022Ar 3  AD rr rr         lda KB_BIT
00022Dr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
00022Fr 3  F0 05            beq @next_state_parity
000231r 3  4E rr rr         lsr KB_TEMP     ; if not last bit, shift KB_TEMP right to prepare for next bit
000234r 3               
000234r 3  80 48            bra @exit
000236r 3               
000236r 3               @next_state_parity:
000236r 3  A9 02            lda #KB_STATE_PARITY    ;next state is parity
000238r 3  8D rr rr         sta KB_STATE
00023Br 3  80 41            bra @exit
00023Dr 3               
00023Dr 3               @parity:
00023Dr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
00023Fr 3  8D rr rr         sta KB_STATE
000242r 3  80 3A            bra @exit
000244r 3               
000244r 3               @stop:
000244r 3  A9 00            lda #KB_STATE_START
000246r 3  8D rr rr         sta KB_STATE
000249r 3  AD rr rr         lda ignore_next
00024Cr 3  D0 45            bne @ignored
00024Er 3                   ; Save key to character buffer
00024Er 3  AE rr rr         ldx KB_TEMP
000251r 3  E0 AA            cpx #$AA
000253r 3  F0 32            beq @init
000255r 3  E0 FA            cpx #$FA
000257r 3  F0 2E            beq @init
000259r 3  E0 F0            cpx #$F0
00025Br 3  F0 2F            beq @ignore_next
00025Dr 3  E0 12            cpx #LSHIFT_KEY
00025Fr 3  F0 4F            beq @shift_pressed
000261r 3  E0 59            cpx #RSHIFT_KEY
000263r 3  F0 4B            beq @shift_pressed
000265r 3  A5 rr            lda control_keys
000267r 3  29 01            and #SHIFT
000269r 3  D0 09            bne @shifted
00026Br 3               @unshifted:
00026Br 3                   ;stx PORTA
00026Br 3  BD rr rr         lda ASCIITBL, x
00026Er 3               
00026Er 3  C9 1B            cmp #$1B             ; reset if escape pressed
000270r 3  F0 12            beq @esc
000272r 3  80 03            bra @output
000274r 3               @shifted:
000274r 3  BD rr rr         lda ASCIITBL+128, x
000277r 3               @output:
000277r 3  A6 rr            ldx KB_BUF_W_PTR
000279r 3  9D rr rr         sta KB_BUF, x
00027Cr 3                   ;sta PORTA
00027Cr 3  E6 rr            inc KB_BUF_W_PTR
00027Er 3               
00027Er 3               @exit:
00027Er 3  2C 80 FF         bit PORTB
000281r 3  FA               plx
000282r 3  68               pla
000283r 3  60               rts
000284r 3               @esc:
000284r 3  4C rr rr         jmp v_reset
000287r 3               @init:
000287r 3  8E rr rr         stx ready
00028Ar 3  80 F2            bra @exit
00028Cr 3               
00028Cr 3               @ignore_next:
00028Cr 3  A9 01            lda #1
00028Er 3  8D rr rr         sta ignore_next
000291r 3  80 EB            bra @exit
000293r 3               
000293r 3               @ignored:
000293r 3  AE rr rr         ldx KB_TEMP
000296r 3  E0 12            cpx #LSHIFT_KEY
000298r 3  F0 0B            beq @shift_released
00029Ar 3  E0 59            cpx #RSHIFT_KEY
00029Cr 3  F0 07            beq @shift_released
00029Er 3  A9 00            lda #0
0002A0r 3  8D rr rr         sta ignore_next
0002A3r 3  80 D9            bra @exit
0002A5r 3               
0002A5r 3               @shift_released:
0002A5r 3  A9 00            lda #0
0002A7r 3  8D rr rr         sta ignore_next
0002AAr 3  A9 00            lda #0
0002ACr 3  85 rr            sta control_keys
0002AEr 3  80 CE            bra @exit
0002B0r 3               
0002B0r 3               @shift_pressed:
0002B0r 3  A5 rr            lda control_keys
0002B2r 3  09 01            ora #SHIFT
0002B4r 3  85 rr            sta control_keys
0002B6r 3  80 C6            bra @exit
0002B8r 3               
0002B8r 3               @sending:
0002B8r 3                   ; lda #1
0002B8r 3                   ; sta PORTA
0002B8r 3                   ; data pin of DDRB should be set as output by prepare_send
0002B8r 3  AD rr rr         lda KB_STATE                ; which state ?
0002BBr 3  C9 01            cmp #KB_STATE_DATA          ; send data bits
0002BDr 3  F0 0A            beq @sending_data
0002BFr 3  C9 02            cmp #KB_STATE_PARITY        ; this is the parity bit
0002C1r 3  F0 33            beq @sending_parity
0002C3r 3  C9 03            cmp #KB_STATE_STOP          ; stop bit
0002C5r 3  F0 56            beq @sending_stop
0002C7r 3  80 B5            bra @exit
0002C9r 3               
0002C9r 3               
0002C9r 3               @sending_data:
0002C9r 3                   ; lda #4
0002C9r 3                   ; sta PORTA
0002C9r 3  AD rr rr         lda to_send       ; get the bit of data from memory
0002CCr 3  29 01            and #$01          ; get only bottom bit
0002CEr 3  F0 0D            beq @send_zero
0002D0r 3               
0002D0r 3               @send_one:
0002D0r 3  AD 80 FF         lda PORTB
0002D3r 3  09 80            ora #$80
0002D5r 3  8D 80 FF         sta PORTB
0002D8r 3  EE rr rr         inc KB_PARITY
0002DBr 3  80 08            bra @sending_done
0002DDr 3               @send_zero:
0002DDr 3  AD 80 FF         lda PORTB
0002E0r 3  29 7F            and #$7F
0002E2r 3  8D 80 FF         sta PORTB
0002E5r 3               @sending_done:
0002E5r 3                   ; lda #2
0002E5r 3                   ; sta PORTA
0002E5r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0002E8r 3  AD rr rr         lda KB_BIT
0002EBr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0002EDr 3  4C rr rr         jmp @next_state_parity
0002F0r 3  4E rr rr         lsr to_send
0002F3r 3  18               clc
0002F4r 3  80 88            bra @exit
0002F6r 3               
0002F6r 3               @sending_parity:
0002F6r 3                   ; lda #5
0002F6r 3                   ; sta PORTA
0002F6r 3  AD rr rr         lda KB_PARITY
0002F9r 3  29 01            and #$01
0002FBr 3  F0 10            beq @odd_parity     ; send zero if odd parity
0002FDr 3  AD 80 FF         lda PORTB
000300r 3  09 80            ora #$80            ; send one if even
000302r 3  8D 80 FF         sta PORTB
000305r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000307r 3  8D rr rr         sta KB_STATE
00030Ar 3  4C rr rr         jmp @exit
00030Dr 3               @odd_parity:
00030Dr 3  AD 80 FF         lda PORTB
000310r 3  29 7F            and #$7F
000312r 3  8D 80 FF         sta PORTB
000315r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000317r 3  8D rr rr         sta KB_STATE
00031Ar 3  4C rr rr         jmp @exit
00031Dr 3               
00031Dr 3               @sending_stop:
00031Dr 3                   ; lda #6
00031Dr 3                   ; sta PORTA
00031Dr 3  A9 00            lda #KB_STATE_START     ; set it back to start in case we are receivin next
00031Fr 3  8D rr rr         sta KB_STATE
000322r 3  A9 00            lda #0
000324r 3  8D rr rr         sta to_send
000327r 3  8D rr rr         sta KB_BIT
00032Ar 3  8D rr rr         sta KB_PARITY
00032Dr 3  AD 82 FF         lda DDRB        ; set PORTB back to input
000330r 3  29 7F            and #$7F
000332r 3  8D 82 FF         sta DDRB
000335r 3  4C rr rr         jmp @exit
000338r 3               
000338r 2               
000338r 1               .include "drivers/delayroutines.s"
000338r 2               ; Copyright 2020 Jonathan Foucher
000338r 2               
000338r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000338r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000338r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000338r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000338r 2               ; is furnished to do so, subject to the following conditions:
000338r 2               
000338r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000338r 2               ; substantial portions of the Software.
000338r 2               
000338r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000338r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000338r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000338r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000338r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000338r 2               ; DEALINGS IN THE SOFTWARE.
000338r 2               
000338r 2               .segment "CODE"
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               ; .include "drivers/4004.s"
00002Dr 1               .include "drivers/cf.s"
00002Dr 2               
00002Dr 2               CF_BUF = FAT_BUFFER
00002Dr 2               CF_ADDRESS = $FFD0
00002Dr 2               
00002Dr 2               .segment "ZEROPAGE": zeropage
00000Er 2               ; CF_BUF_PTR: .res 2
00000Er 2               ; CF_ADDRESS: .res 2
00000Er 2               
00000Er 2               .segment "BSS"
00028Br 2               
00028Br 2  xx xx xx xx  CF_LBA: .res 4
00028Fr 2  xx xx xx xx  CF_PART_START: .res 4
000293r 2  xx           CF_SEC_PER_CLUS: .res 1     ; $8
000294r 2  xx xx        CF_CURRENT_CLUSTER: .res 2
000296r 2  xx xx        CF_ROOT_ENT_CNT: .res 2     ; $200
000298r 2  xx xx        CF_ROOT_DIR_SECS: .res 2    ; $02
00029Ar 2  xx xx        CF_FAT_SEC_CNT: .res 2      ; $F5
00029Cr 2  xx xx        CF_FIRST_DATA_SEC: .res 2   ; $020B
00029Er 2  xx xx        CF_FIRST_ROOT_SEC: .res 2   ; $01EB
0002A0r 2  xx xx xx xx  CF_CURRENT_DIR: .res 12
0002A4r 2  xx xx xx xx  
0002A8r 2  xx xx xx xx  
0002ACr 2               
0002ACr 2               .segment "DATA"
000338r 2               
000338r 2               
000338r 2               cf_wait:
000338r 2                   ; phy
000338r 2                   ; ldy #7
000338r 2               @wait_loop:
000338r 2                   ; lda (CF_ADDRESS), y
000338r 2  AD D7 FF         lda CF_ADDRESS + 7
00033Br 2  29 80            and #$80
00033Dr 2  D0 F9            bne @wait_loop
00033Fr 2                   ; ply
00033Fr 2  60               rts
000340r 2               
000340r 2               
000340r 2               cf_init:
000340r 2                   ; phy
000340r 2  A9 04            lda #$4
000342r 2                   ; ldy #7
000342r 2                   ; sta (CF_ADDRESS),y
000342r 2  8D D7 FF         sta CF_ADDRESS + 7
000345r 2  20 rr rr         jsr cf_wait
000348r 2  A9 E0            lda #$E0
00034Ar 2                   ; ldy #6
00034Ar 2                   ; sta (CF_ADDRESS),y
00034Ar 2  8D D6 FF         sta CF_ADDRESS + 6
00034Dr 2  A9 01            lda #$1
00034Fr 2                   ; ldy #1
00034Fr 2                   ; sta (CF_ADDRESS),y
00034Fr 2  8D D1 FF         sta CF_ADDRESS + 1
000352r 2  A9 EF            lda #$EF
000354r 2                   ; ldy #7
000354r 2                   ; sta (CF_ADDRESS),y
000354r 2  8D D7 FF         sta CF_ADDRESS + 7
000357r 2  20 rr rr         jsr cf_wait
00035Ar 2  20 rr rr         jsr cf_err
00035Dr 2                   ; ply
00035Dr 2  60               rts
00035Er 2               
00035Er 2               
00035Er 2               ; cf_read:
00035Er 2               ;     phy
00035Er 2               ;     ldy #0
00035Er 2               ; @readloop:
00035Er 2               ;     ; phy
00035Er 2               ;     ; ldy #7
00035Er 2               ;     ; lda (CF_ADDRESS), y
00035Er 2               ;     lda CF_ADDRESS + 7
00035Er 2               ;     and #8
00035Er 2               ;     beq @exit
00035Er 2               ;     ; jsr cf_wait
00035Er 2               ;     ; ldy #0
00035Er 2               ;     ; lda (CF_ADDRESS), y
00035Er 2               ;     lda CF_ADDRESS
00035Er 2               ;     ; ply
00035Er 2               ;     sta (CF_BUF_PTR), y
00035Er 2               ;     ; jsr cf_wait
00035Er 2               ;     iny
00035Er 2               ;     bne @readloop
00035Er 2               ;     ; if y wraps around to zero, increment buffer page
00035Er 2               ;     inc CF_BUF_PTR+1
00035Er 2               ;     bra @readloop
00035Er 2               ; @exit:
00035Er 2               ;     ; we only come here because we read an & 8 from REG 7
00035Er 2               ;     ; ply
00035Er 2               ;     dec CF_BUF_PTR+1
00035Er 2               ;     ply
00035Er 2               ;     rts
00035Er 2               
00035Er 2               ; : cfread 0 buffptr ! begin cfwait cfreg7 c@ 8 and while cfreg0 c@ cfbuffer buffptr @ + c! buffptr @ 1 + buffptr ! repeat ;
00035Er 2               
00035Er 2               cf_read:
00035Er 2  DA               phx
00035Fr 2  A2 00            ldx #0
000361r 2               @loop1:
000361r 2  20 rr rr         jsr cf_wait
000364r 2                   ; lda CF_ADDRESS + 7
000364r 2                   ; and #8
000364r 2                   ; beq @exit
000364r 2  AD D0 FF         lda CF_ADDRESS
000367r 2  9D rr rr         sta FAT_BUFFER, x
00036Ar 2  E8               inx
00036Br 2  D0 F4            bne @loop1
00036Dr 2               @loop2:
00036Dr 2  20 rr rr         jsr cf_wait
000370r 2                   ; lda CF_ADDRESS + 7
000370r 2                   ; and #8
000370r 2                   ; beq @exit
000370r 2  AD D0 FF         lda CF_ADDRESS
000373r 2  9D rr rr         sta FAT_BUFFER+256, x
000376r 2  E8               inx
000377r 2  D0 F4            bne @loop2
000379r 2               @exit:
000379r 2  FA               plx
00037Ar 2  60               rts
00037Br 2               
00037Br 2               cf_set_lba:
00037Br 2                   ; phy
00037Br 2  AD rr rr         lda CF_LBA
00037Er 2                   ; ldy #3
00037Er 2                   ; sta (CF_ADDRESS),y
00037Er 2  8D D3 FF         sta CF_ADDRESS + 3
000381r 2  AD rr rr         lda CF_LBA + 1
000384r 2                   ; ldy #4
000384r 2                   ; sta (CF_ADDRESS), y
000384r 2  8D D4 FF         sta CF_ADDRESS + 4
000387r 2  AD rr rr         lda CF_LBA + 2
00038Ar 2                   ; ldy #5
00038Ar 2                   ; sta (CF_ADDRESS), y
00038Ar 2  8D D5 FF         sta CF_ADDRESS + 5
00038Dr 2  AD rr rr         lda CF_LBA + 3
000390r 2  29 0F            and #$0F
000392r 2  09 E0            ora #$E0
000394r 2                   ; ldy #6
000394r 2                   ; sta (CF_ADDRESS), y
000394r 2  8D D6 FF         sta CF_ADDRESS + 6
000397r 2                   ; ply
000397r 2  60               rts
000398r 2               
000398r 2               cf_read_sector:
000398r 2                   ; phy
000398r 2                   ; buffer should be set in CF_BUF_PTR
000398r 2  20 rr rr         jsr cf_set_lba
00039Br 2  A9 01            lda #1
00039Dr 2                   ; ldy #2
00039Dr 2                   ; sta (CF_ADDRESS), y
00039Dr 2  8D D2 FF         sta CF_ADDRESS + 2
0003A0r 2  20 rr rr         jsr cf_wait
0003A3r 2  A9 20            lda #CF_READ_SECTOR_COMMAND
0003A5r 2                   ; ldy #7
0003A5r 2                   ; sta (CF_ADDRESS), y
0003A5r 2  8D D7 FF         sta CF_ADDRESS + 7
0003A8r 2  20 rr rr         jsr cf_wait
0003ABr 2  20 rr rr         jsr cf_read
0003AEr 2  20 rr rr         jsr cf_err
0003B1r 2                   ; ply
0003B1r 2  60               rts
0003B2r 2               
0003B2r 2               cf_err:
0003B2r 2                   ; phy
0003B2r 2  20 rr rr         jsr cf_wait
0003B5r 2                   ; ldy #7
0003B5r 2                   ; lda (CF_ADDRESS), y
0003B5r 2  AD D7 FF         lda CF_ADDRESS + 7
0003B8r 2  29 01            and #$01
0003BAr 2  F0 05            beq @exit
0003BCr 2               @exit_fail:
0003BCr 2  A9 21            lda #'!'
0003BEr 2  20 rr rr         jsr kernel_putc
0003C1r 2               @exit:
0003C1r 2                   ; ply
0003C1r 2  60               rts
0003C2r 2               
0003C2r 2               cf_info:
0003C2r 2               
0003C2r 2               
0003C2r 2               cf_end:
0003C2r 2               
0003C2r 2               
0003C2r 1               .include "drivers/lcd.s"
0003C2r 2               .segment "ZEROPAGE": zeropage
00000Er 2  xx           LCD_BUF_W_PTR: .res 1
00000Fr 2  xx           LCD_BUF_R_PTR: .res 1
000010r 2  xx           lcd_pos: .res 1
000011r 2               
000011r 2               .segment "BSS"
0002ACr 2  xx xx xx xx  LCD_BUF: .res 128
0002B0r 2  xx xx xx xx  
0002B4r 2  xx xx xx xx  
00032Cr 2               
00032Cr 2               .segment "DATA"
0003C2r 2               
0003C2r 2               ; initialize the LCD in 8 bit mode
0003C2r 2               lcd_init:
0003C2r 2  20 rr rr         jsr buf_clr
0003C5r 2  A9 00            lda #0
0003C7r 2  8D rr rr         sta lcd_absent
0003CAr 2  85 rr            sta LCD_BUF_W_PTR
0003CCr 2  85 rr            sta LCD_BUF_R_PTR
0003CEr 2  85 rr            sta lcd_pos
0003D0r 2               
0003D0r 2               
0003D0r 2  A0 FF            ldy #$FF
0003D2r 2  20 rr rr         jsr delay
0003D5r 2               
0003D5r 2  A9 38            LDA #$38            ;function set: 8 bit
0003D7r 2  20 rr rr         jsr lcd_inst
0003DAr 2               
0003DAr 2               
0003DAr 2  A0 FF            ldy #$FF
0003DCr 2  20 rr rr         jsr delay
0003DFr 2               
0003DFr 2  A9 0F            LDA #$0F            ;display on, cursor on, blink on
0003E1r 2  20 rr rr         jsr lcd_inst
0003E4r 2               
0003E4r 2                   ;entry mode set
0003E4r 2  A9 06            LDA #$06
0003E6r 2  20 rr rr         jsr lcd_inst
0003E9r 2               
0003E9r 2                   ;clear display
0003E9r 2  A9 01            LDA #$01
0003EBr 2  20 rr rr         jsr lcd_inst
0003EEr 2               
0003EEr 2  A0 FF            ldy #$ff            ; wait a while
0003F0r 2  20 rr rr         jsr delay
0003F3r 2                   ;set dram address to start of screen
0003F3r 2  A9 80            LDA #$80
0003F5r 2  20 rr rr         jsr lcd_inst
0003F8r 2               
0003F8r 2  A0 FF            ldy #$ff            ; wait a while
0003FAr 2  20 rr rr         jsr delay
0003FDr 2               
0003FDr 2               
0003FDr 2  60               RTS
0003FEr 2               
0003FEr 2               ; Send an instruction in 8 bit mode
0003FEr 2               lcd_inst:
0003FEr 2  5A               phy
0003FFr 2  8D C1 FF         sta LCD_ADDR_ENABLED
000402r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
000404r 2  20 rr rr         jsr delay_short
000407r 2  8D C0 FF         sta LCD_ADDR_DISABLED
00040Ar 2  A0 20            ldy #$20                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
00040Cr 2  20 rr rr         jsr delay_short
00040Fr 2  7A               ply
000410r 2  60               rts
000411r 2               
000411r 2               lcd_send:
000411r 2  8D C3 FF         sta LCD_DATA_ENABLED
000414r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
000416r 2  20 rr rr         jsr delay_short
000419r 2  8D C2 FF         sta LCD_DATA_DISABLED
00041Cr 2  A0 20            ldy #$20                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
00041Er 2  20 rr rr         jsr delay_short
000421r 2  60               rts
000422r 2               
000422r 2               ; Sends the character in A to the display
000422r 2               lcd_print:               ; 8 bit data in A
000422r 2  5A               phy
000423r 2  DA               phx
000424r 2  48               pha
000425r 2  C9 0A            cmp #$0A
000427r 2  F0 67            beq @next_line
000429r 2  C9 0D            cmp #$0D
00042Br 2  F0 63            beq @next_line
00042Dr 2  C9 08            cmp #$08            ;backspace
00042Fr 2  F0 1F            beq @backspace
000431r 2               
000431r 2  20 rr rr         jsr lcd_send
000434r 2  A6 rr            ldx lcd_pos
000436r 2  9D rr rr         sta LCD_BUF, x
000439r 2               
000439r 2  E8               inx
00043Ar 2                   ; Check at which position we are and change line if necessary
00043Ar 2  86 rr            stx lcd_pos
00043Cr 2               
00043Cr 2  E0 14            cpx #20
00043Er 2  F0 2A            beq @line_2
000440r 2  E0 28            cpx #40
000442r 2  F0 31            beq @line_3
000444r 2  E0 3C            cpx #60
000446r 2  F0 38            beq @line_4
000448r 2  E0 50            cpx #80
00044Ar 2  F0 3F            beq @clr
00044Cr 2               
00044Cr 2               @continue:
00044Cr 2  68               pla
00044Dr 2  FA               plx
00044Er 2  7A               ply
00044Fr 2  60               rts
000450r 2               
000450r 2               ; LCD adressing http://web.alfredstate.edu/faculty/weimandn/lcd/lcd_addressing/lcd_addressing_index.html
000450r 2               @backspace:
000450r 2  A9 10            lda #$10            ; shift cursor left
000452r 2  20 rr rr         jsr lcd_inst
000455r 2  A9 20            lda #$20            ; print a space to erase previous char
000457r 2  20 rr rr         jsr lcd_send
00045Ar 2               
00045Ar 2  A9 10            lda #$10            ; shift cursor left
00045Cr 2  20 rr rr         jsr lcd_inst
00045Fr 2  C6 rr            dec lcd_pos
000461r 2  A6 rr            ldx lcd_pos         ; save in buffer
000463r 2  A9 20            lda #$20
000465r 2  9D rr rr         sta LCD_BUF,x
000468r 2  80 E2            bra @continue
00046Ar 2               @line_2:
00046Ar 2  A9 14            lda #20
00046Cr 2  85 rr            sta lcd_pos
00046Er 2  A9 C0            lda #$C0
000470r 2  20 rr rr         jsr lcd_inst
000473r 2  80 D7            bra @continue
000475r 2               
000475r 2               @line_3:
000475r 2  A9 28            lda #40
000477r 2  85 rr            sta lcd_pos
000479r 2  A9 94            lda #$94
00047Br 2  20 rr rr         jsr lcd_inst
00047Er 2  80 CC            bra @continue
000480r 2               
000480r 2               @line_4:
000480r 2  A9 3C            lda #60
000482r 2  85 rr            sta lcd_pos
000484r 2  A9 D4            lda #$D4
000486r 2  20 rr rr         jsr lcd_inst
000489r 2  80 C1            bra @continue
00048Br 2               @clr:
00048Br 2                   ; lda #0
00048Br 2                   ; sta lcd_pos
00048Br 2                   ; lda #$80
00048Br 2                   ; jsr lcd_inst
00048Br 2  20 rr rr         jsr lcd_scroll_up
00048Er 2  80 BC            bra @continue
000490r 2               
000490r 2               @next_line:
000490r 2  A6 rr            ldx lcd_pos            ;get current position
000492r 2  E0 50            cpx #80
000494r 2  F0 F5            beq @clr
000496r 2  E0 3C            cpx #60
000498r 2  F0 E6            beq @line_4
00049Ar 2  E0 28            cpx #40
00049Cr 2  F0 D7            beq @line_3
00049Er 2  E0 14            cpx #20
0004A0r 2  F0 C8            beq @line_2
0004A2r 2  E8               inx
0004A3r 2  86 rr            stx lcd_pos
0004A5r 2  A9 20            lda #$20
0004A7r 2  20 rr rr         jsr lcd_send
0004AAr 2  9D rr rr         sta LCD_BUF, x
0004ADr 2  80 E1            bra @next_line
0004AFr 2               
0004AFr 2               lcd_scroll_up:
0004AFr 2  48               pha                     ; save registers
0004B0r 2  5A               phy
0004B1r 2  DA               phx
0004B2r 2  A9 80            lda #$80                ; set LCD address to start
0004B4r 2  20 rr rr         jsr lcd_inst
0004B7r 2               
0004B7r 2  A2 14            ldx #20                 ; start getting characters at the start of the second line
0004B9r 2               @scroll_loop:
0004B9r 2  BD rr rr         lda LCD_BUF, X          ; load from buffer
0004BCr 2  20 rr rr         jsr lcd_send            ; send to display
0004BFr 2  A8               tay                     ; save current character in Y
0004C0r 2  E0 4F            cpx #79                 ; update LCD address if necessary
0004C2r 2  F0 4A            beq @scline_4
0004C4r 2  E0 3B            cpx #59
0004C6r 2  F0 3F            beq @scline_3
0004C8r 2  E0 27            cpx #39
0004CAr 2  F0 34            beq @scline_2
0004CCr 2               @sccontinue:                ; return from updating LCD address
0004CCr 2  8A               txa                     ; copy X to A to be able to subtract from it
0004CDr 2  38               sec                     ; set carry before subtraction
0004CEr 2  E9 14            sbc #20                 ; subtract 20 to get where to put this character
0004D0r 2  AA               tax                     ; put the result in X
0004D1r 2  98               tya                     ; restore character from Y
0004D2r 2  9D rr rr         sta LCD_BUF, X          ; store char in buffer
0004D5r 2  8A               txa                     ; copy X to A to be able to add to it
0004D6r 2  18               clc
0004D7r 2  69 14            adc #20                 ; add 20 to restore X
0004D9r 2  AA               tax                     ; put the result back in X
0004DAr 2  E8               inx                     ; increment X to prepare to get next char
0004DBr 2  E0 50            cpx #80                 ; if not at end of buffer
0004DDr 2  90 DA            bcc @scroll_loop        ; do next char
0004DFr 2                   ; fill the last line with spaces
0004DFr 2  A9 D4            lda #$D4                ; set address to last line
0004E1r 2  20 rr rr         jsr lcd_inst
0004E4r 2  A9 20            lda #$20
0004E6r 2  A2 3C            ldx #60
0004E8r 2               @last_line_loop:
0004E8r 2  9D rr rr         sta LCD_BUF, x
0004EBr 2  20 rr rr         jsr lcd_send
0004EEr 2  E8               inx
0004EFr 2  E0 50            cpx #80                 ; if not at end of buffer
0004F1r 2  90 F5            bcc @last_line_loop     ; do next char
0004F3r 2               
0004F3r 2                   ;finally, place the cursor at the start of the last line
0004F3r 2  A9 3C            lda #60
0004F5r 2  85 rr            sta lcd_pos
0004F7r 2  A9 D4            lda #$D4
0004F9r 2  20 rr rr         jsr lcd_inst
0004FCr 2  FA               plx                     ; restore everything as it was
0004FDr 2  7A               ply
0004FEr 2  68               pla
0004FFr 2  60               rts
000500r 2               
000500r 2               @scline_2:
000500r 2  A9 C0            lda #$C0
000502r 2  20 rr rr         jsr lcd_inst
000505r 2  80 C5            bra @sccontinue
000507r 2               
000507r 2               @scline_3:
000507r 2  A9 94            lda #$94
000509r 2  20 rr rr         jsr lcd_inst
00050Cr 2  80 BE            bra @sccontinue
00050Er 2               
00050Er 2               @scline_4:
00050Er 2  A9 D4            lda #$D4
000510r 2  20 rr rr         jsr lcd_inst
000513r 2  80 B7            bra @sccontinue
000515r 2               
000515r 2               lcd_clear:
000515r 2  48               PHA
000516r 2                   ;clear display
000516r 2  A9 01            LDA #$01
000518r 2  20 rr rr         jsr lcd_inst
00051Br 2                   ;set dram address
00051Br 2  A9 80            LDA #$80
00051Dr 2  20 rr rr         jsr lcd_inst
000520r 2  68               PLA
000521r 2  60               RTS
000522r 2               
000522r 2               
000522r 2               buf_clr:
000522r 2  48               pha
000523r 2  DA               phx
000524r 2  A2 80            ldx #$80
000526r 2  A9 20            lda #$20
000528r 2               buf_clr_loop:
000528r 2  9D rr rr         sta LCD_BUF,X
00052Br 2  CA               dex
00052Cr 2  D0 FA            bne buf_clr_loop
00052Er 2  FA               plx
00052Fr 2  68               pla
000530r 2  60               rts
000531r 2               
000531r 1               ; .include "drivers/spi.s"
000531r 1               ; .include "drivers/sd.s"
000531r 1               ; .include "drivers/vga.s"
000531r 1               ; .include "drivers/fat32.s"
000531r 1               
000531r 1               .include "../../forth.s"
000531r 2               .include "macros.s"
000531r 3               .macro  printascii   addr
000531r 3               .local @loop
000531r 3               .local @done
000531r 3                   phx
000531r 3                   ldx #0
000531r 3               @loop:
000531r 3                   lda addr,x
000531r 3                   beq @done
000531r 3                   jsr kernel_putc
000531r 3                   inx
000531r 3                   bra @loop
000531r 3               @done:
000531r 3                   plx
000531r 3               .endmacro
000531r 3               
000531r 3               .macro  cp16   src, dest
000531r 3                   lda src
000531r 3                   sta dest
000531r 3                   lda src + 1
000531r 3                   sta dest + 1
000531r 3               .endmacro
000531r 3               
000531r 3               .macro printstr addr, len
000531r 3               .repeat len, I
000531r 3               lda addr + I
000531r 3               jsr kernel_putc
000531r 3               .endrepeat
000531r 3               .endmacro
000531r 3               
000531r 3               .macro asl16 src
000531r 3                   asl src
000531r 3                   rol src + 1
000531r 3               .endmacro
000531r 3               
000531r 3               .macro lsr16 src
000531r 3                   lsr src + 1
000531r 3                   ror src
000531r 3               .endmacro
000531r 3               
000531r 3               .macro inc16 src
000531r 3                   inc src       ;Increment the LSB
000531r 3                   bne @done       ;If the result was not zero we're done
000531r 3                   inc src+1       ;Increment the MSB if LSB wrapped round
000531r 3               @done:
000531r 3               .endmacro
000531r 3               
000531r 3               .macro dec16 src
000531r 3                   lda src
000531r 3                   bne @skip
000531r 3                   dec src + 1
000531r 3               @skip:
000531r 3                   dec src
000531r 3               .endmacro
000531r 3               
000531r 3               .macro add16 first, second, result
000531r 3                   CLC             ;Ensure carry is clear
000531r 3                   LDA first+0       ;Add the two least significant bytes
000531r 3                   ADC second+0
000531r 3                   STA result+0       ;... and store the result
000531r 3                   LDA first+1       ;Add the two most significant bytes
000531r 3                   ADC second+1       ;... and any propagated carry bit
000531r 3                   STA result+1       ;... and store the result
000531r 3               .endmacro
000531r 3               
000531r 3               
000531r 3               
000531r 3               .macro push_axy
000531r 3               	pha		; push accumulator to stack
000531r 3               	phx
000531r 3                   phy
000531r 3               .endmacro
000531r 3               
000531r 3               .macro pull_axy
000531r 3               	ply		; pull y from stack
000531r 3               	plx		; pull x from stack
000531r 3               	pla		; pull a from stack
000531r 3               .endmacro
000531r 3               
000531r 3               
000531r 3               .macro push_ax
000531r 3               	pha
000531r 3               	phx
000531r 3               .endmacro
000531r 3               
000531r 3               
000531r 3               .macro pull_ax
000531r 3               	pla
000531r 3               	plx
000531r 3               .endmacro
000531r 3               
000531r 3               .macro push_ay
000531r 3               	pha
000531r 3               	phy
000531r 3               .endmacro
000531r 3               
000531r 3               
000531r 3               .macro pull_ay
000531r 3               	pla
000531r 3               	ply
000531r 3               .endmacro
000531r 3               
000531r 3               
000531r 3               .macro mov16 SRC, DEST
000531r 3               	lda SRC
000531r 3               	sta DEST
000531r 3               	lda SRC+1
000531r 3               	sta DEST+1
000531r 3               .endmacro
000531r 3               
000531r 3               .macro mov32 SRC, DEST
000531r 3               	lda SRC
000531r 3               	sta DEST
000531r 3               	lda SRC+1
000531r 3               	sta DEST+1
000531r 3               	lda SRC+2
000531r 3               	sta DEST+2
000531r 3               	lda SRC+3
000531r 3               	sta DEST+3
000531r 3               .endmacro
000531r 3               
000531r 2               
000531r 2               
000531r 2               ; Definitions for Tali Forth 2
000531r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
000531r 2               ; First version: 01. Apr 2016 (Liara Forth)
000531r 2               ; This version: 29. Jan 2020
000531r 2               
000531r 2               ; This file is included by taliforth.asm. These are the general
000531r 2               ; definitions; platform-specific definitions such as the
000531r 2               ; memory map are kept in the platform folder.
000531r 2               
000531r 2               stack0 =    $0100   ; location of the stack
000531r 2               
000531r 2               ; User Variables:
000531r 2               ; Block variables
000531r 2               blk_offset =  0        ; BLK : UP + 0
000531r 2               scr_offset =  2        ; SCR : UP + 2
000531r 2               
000531r 2               
000531r 2               
000531r 2               ; Wordlists
000531r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
000531r 2               num_wordlists_offset =  5
000531r 2                                          ; #WORDLISTS (byte) : UP + 5
000531r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
000531r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
000531r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
000531r 2                                          ;          (Number of wordlists in search order)
000531r 2               search_order_offset =  31
000531r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
000531r 2                                          ; Allowing for 9 to keep offsets even.
000531r 2               max_wordlists =  12    ; Maximum number of wordlists supported
000531r 2                                          ; 4 Tali built-ins + 8 user wordlists
000531r 2               
000531r 2               ; Buffer variables
000531r 2               blkbuffer_offset =     40   ; Address of buffer
000531r 2               buffblocknum_offset =  42   ; Block number current in buffer
000531r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
000531r 2               
000531r 2               ; Block I/O vectors
000531r 2               blockread_offset =     46   ; Vector to block reading routine
000531r 2               blockwrite_offset =    48   ; Vector to block writing routine
000531r 2               
000531r 2               
000531r 2               ; ASCII CHARACTERS
000531r 2               AscCC =   $03  ; break (CTRL-c)
000531r 2               AscBELL = $07  ; bell sound
000531r 2               AscBS =   $08  ; backspace
000531r 2               AscLF =   $0a  ; line feed
000531r 2               AscCR =   $0d  ; carriage return
000531r 2               AscESC =  $1b  ; escape
000531r 2               AscSP =   $20  ; space
000531r 2               AscDEL =  $7f  ; delete (CTRL-h)
000531r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
000531r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
000531r 2               
000531r 2               ; DICTIONARY FLAGS
000531r 2               ; The first three bits are currently unused
000531r 2               CO = 1  ; Compile Only
000531r 2               AN = 2  ; Always Native Compile
000531r 2               IM = 4  ; Immediate Word
000531r 2               NN = 8  ; Never Native Compile
000531r 2               UF = 16 ; Includes Underflow Check (RESERVED)
000531r 2               HC = 32 ; Word has Code Field Area (CFA)
000531r 2               
000531r 2               
000531r 2               ; VARIOUS
000531r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
000531r 2               
000531r 2               ; END
000531r 2               
000531r 2               .segment "ZEROPAGE": zeropage
000011r 2               ; ZERO PAGE ADDRESSES/VARIABLES
000011r 2               
000011r 2               ; These are kept at the top of Zero Page, with the most important variables at
000011r 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
000011r 2               ; an overflow, the lower, less important variables will be clobbered first,
000011r 2               ; giving the system a chance to recover. In other words, they are part of the
000011r 2               ; floodplain.
000011r 2               
000011r 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
000011r 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
000011r 2               
000011r 2  xx xx        cp: .res 2   ; Compiler Pointer
000013r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000015r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000017r 2                                          ; a :NONAME declared word (see status)
000017r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000019r 2  xx xx        cib: .res 2   ; address of current input buffer
00001Br 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Dr 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Fr 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
000021r 2  xx xx        output: .res 2  ; vector for EMIT
000023r 2  xx xx        input: .res 2  ; vector for KEY
000025r 2  xx xx        havekey: .res 2  ; vector for KEY?
000027r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000029r 2  xx xx        base: .res 2  ; number radix, default decimal
00002Br 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Dr 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Fr 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
000031r 2  xx xx        status: .res 2  ; internal status information
000033r 2                                          ; (used by : :NONAME ; ACCEPT)
000033r 2                                          ; Bit 7 = Redefined word message postpone
000033r 2                                          ;         When set before calling CREATE, it will
000033r 2                                          ;         not print the "redefined xxxx" message if
000033r 2                                          ;         the word exists. Instead, this bit will
000033r 2                                          ;         be reused and after CREATE has run, it will
000033r 2                                          ;         be set if the word was redefined and 0 if
000033r 2                                          ;         not. This bit should be 0 when not in use.
000033r 2                                          ; Bit 6 = 1 for normal ":" definitions
000033r 2                                          ;         WORKWORD contains nt of word being compiled
000033r 2                                          ;       = 0 for :NONAME definitions
000033r 2                                          ;         WORKWORD contains xt of word being compiled
000033r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000033r 2                                          ;       = 0 for NUMBER returning a single word
000033r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000033r 2                                          ;       = 0 CTRL-n recalls previous history
000033r 2                                          ; Bit 2 = Current history buffer msb
000033r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000033r 2                                          ; Bit 0 = Current history buffer lsb
000033r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000033r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000035r 2  xx xx        tmp1: .res 2  ; temporary storage
000037r 2  xx xx        tmp2: .res 2  ; temporary storage
000039r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
00003Br 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Dr 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Fr 2  xx xx        editor1: .res 2  ; temporary for editors
000041r 2  xx xx        editor2: .res 2  ; temporary for editors
000043r 2  xx xx        editor3: .res 2  ; temporary for editors
000045r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000047r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
00004Br 2  xx xx xx xx  
00004Fr 2               
00004Fr 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
00032Cr 2  xx xx xx xx  hist_buff: .res $400
000330r 2  xx xx xx xx  
000334r 2  xx xx xx xx  
00072Cr 2  xx xx xx xx  buffer0: .res $100
000730r 2  xx xx xx xx  
000734r 2  xx xx xx xx  
00082Cr 2               
00082Cr 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
000531r 2               
000531r 2               ; .include "fat16.s"
000531r 2               
000531r 2               forth:
000531r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
000531r 3               ; Low-level Forth word routines
000531r 3               ; Tali Forth 2 for the 65c02
000531r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
000531r 3               ; First version: 19. Jan 2014
000531r 3               ; This version: 03. Jan 2018
000531r 3               
000531r 3               ; This list is ordered alphabetically by the names of the words, not their
000531r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
000531r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
000531r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
000531r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
000531r 3               
000531r 3               ;       TBA --> fragment --> coded --> tested --> auto
000531r 3               
000531r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
000531r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
000531r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
000531r 3               
000531r 3               ; ## COLD ( -- ) "Reset the Forth system"
000531r 3               ; ## "cold"  tested  Tali Forth
000531r 3               ;       """Reset the Forth system. Does not restart the kernel,
000531r 3               ;       use the 65c02 reset for that. Flows into ABORT.
000531r 3               ;       """
000531r 3               xt_cold:
000531r 3  D8                           cld
000532r 3               
000532r 3                               ; Set the OUTPUT vector to the default kernel_putc
000532r 3                               ; We do this really early so we can print error messages
000532r 3                               ; during debugging
000532r 3  A9 rr                        lda #<kernel_putc
000534r 3  85 rr                        sta output
000536r 3  A9 rr                        lda #>kernel_putc
000538r 3  85 rr                        sta output+1
00053Ar 3               
00053Ar 3                               ; Load all of the important zero page variables from ROM
00053Ar 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
00053Cr 3               
00053Cr 3               @load_zp_loop:
00053Cr 3                               ; This loop loads them back to front. We can use X here
00053Cr 3                               ; because Tali hasn't started using the stack yet.
00053Cr 3  BD rr rr                     lda cold_zp_table,x
00053Fr 3  95 rr                        sta cp,x
000541r 3  CA                           dex
000542r 3  D0 F8                        bne @load_zp_loop
000544r 3               
000544r 3                               ; Copy the 0th element.
000544r 3  AD rr rr                     lda cold_zp_table
000547r 3  85 rr                        sta cp
000549r 3                               ; Initialize 65c02 stack (Return Stack)
000549r 3  A2 rr                        ldx #rsp0
00054Br 3  9A                           txs
00054Cr 3               
00054Cr 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
00054Cr 3                               ; can load high-level words with EVALUATE
00054Cr 3  A2 rr                        ldx #dsp0
00054Er 3               
00054Er 3               
00054Er 3                               ; Initialize the user variables.
00054Er 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
000550r 3  A9 00                        lda #0
000552r 3               
000552r 3               @load_user_vars_loop:
000552r 3                               ; Like the zero page variables, these are initialized
000552r 3                               ; back to front.
000552r 3  B9 rr rr                     lda cold_user_table,y
000555r 3  91 rr                        sta (up),y
000557r 3  88                           dey
000558r 3  D0 F8                        bne @load_user_vars_loop
00055Ar 3               
00055Ar 3                               ; Copy the 0th element.
00055Ar 3  AD rr rr                     lda cold_user_table
00055Dr 3  92 rr                        sta (up)
00055Fr 3  20 rr rr                     jsr xt_cr
000562r 3               
000562r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
000562r 3                               ; you do not have any high-level words, this part can be
000562r 3                               ; commented out.
000562r 3  CA                           dex
000563r 3  CA                           dex
000564r 3  CA                           dex
000565r 3  CA                           dex
000566r 3               
000566r 3               
000566r 3                               ; start address goes NOS
000566r 3  A9 rr                        lda #<forth_words_start
000568r 3  95 02                        sta 2,x
00056Ar 3  A9 rr                        lda #>forth_words_start
00056Cr 3  95 03                        sta 3,x
00056Er 3               
00056Er 3                               ; length goes TOS
00056Er 3  A9 rr                        lda #<forth_words_end
000570r 3  38                           sec
000571r 3  E9 rr                        sbc #<forth_words_start
000573r 3  95 00                        sta 0,x
000575r 3               
000575r 3  A9 rr                        lda #>forth_words_end
000577r 3  E9 rr                        sbc #>forth_words_start
000579r 3  95 01                        sta 1,x
00057Br 3               
00057Br 3               
00057Br 3  20 rr rr                     jsr xt_evaluate
00057Er 3               
00057Er 3                               ; Now define any user words via EVALUATE. If you do not have
00057Er 3                               ; any user-defined words, this part can be commented out as
00057Er 3                               ; well.
00057Er 3  CA                           dex
00057Fr 3  CA                           dex
000580r 3  CA                           dex
000581r 3  CA                           dex
000582r 3               
000582r 3               
000582r 3                               ; start address goes NOS
000582r 3  A9 rr                        lda #<user_words_start
000584r 3  95 02                        sta 2,x
000586r 3  A9 rr                        lda #>user_words_start
000588r 3  95 03                        sta 3,x
00058Ar 3               
00058Ar 3                               ; length goes TOS
00058Ar 3  A9 rr                        lda #<user_words_end
00058Cr 3  38                           sec
00058Dr 3  E9 rr                        sbc #<user_words_start
00058Fr 3  95 00                        sta 0,x
000591r 3               
000591r 3  A9 rr                        lda #>user_words_end
000593r 3  E9 rr                        sbc #>user_words_start
000595r 3  95 01                        sta 1,x
000597r 3               
000597r 3  20 rr rr                     jsr xt_evaluate
00059Ar 3               
00059Ar 3                               ; Initialize all of the history buffers by putting a zero in
00059Ar 3                               ; each length byte.
00059Ar 3  9C rr rr                     stz hist_buff
00059Dr 3  9C rr rr                     stz hist_buff+$80
0005A0r 3  9C rr rr                     stz hist_buff+$100
0005A3r 3  9C rr rr                     stz hist_buff+$180
0005A6r 3  9C rr rr                     stz hist_buff+$200
0005A9r 3  9C rr rr                     stz hist_buff+$280
0005ACr 3  9C rr rr                     stz hist_buff+$300
0005AFr 3  9C rr rr                     stz hist_buff+$380
0005B2r 3               
0005B2r 3               
0005B2r 3                               ; fall through to ABORT
0005B2r 3               
0005B2r 3               
0005B2r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
0005B2r 3               ; ## "abort"  tested  ANS core
0005B2r 3                       ; """https://forth-standard.org/standard/core/ABORT
0005B2r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
0005B2r 3                       ; subroutine if we want to because we are going to reset the 65c02's
0005B2r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
0005B2r 3                       ; actually delete the stuff on the Data Stack.
0005B2r 3                       ; """
0005B2r 3               xt_abort:
0005B2r 3  A2 rr                        ldx #dsp0
0005B4r 3               
0005B4r 3                               ; fall through to QUIT
0005B4r 3               
0005B4r 3               
0005B4r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
0005B4r 3               ; ## "quit"  tested  ANS core
0005B4r 3                       ; """https://forth-standard.org/standard/core/QUIT
0005B4r 3                       ; Rest the input and start command loop
0005B4r 3                       ; """
0005B4r 3               
0005B4r 3               xt_quit:
0005B4r 3                               ; Clear the Return Stack. This is a little screwed up
0005B4r 3                               ; because the 65c02 can only set the Return Stack via X,
0005B4r 3                               ; which is our Data Stack pointer. The ANS specification
0005B4r 3                               ; demands, however, that ABORT reset the Data Stack pointer
0005B4r 3  8A                           txa             ; Save the DSP that we just defined
0005B5r 3  A2 rr                        ldx #rsp0
0005B7r 3  9A                           txs
0005B8r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
0005B9r 3               
0005B9r 3                               ; make sure instruction pointer is empty
0005B9r 3  64 rr                        stz ip
0005BBr 3  64 rr                        stz ip+1
0005BDr 3               
0005BDr 3                               ; SOURCE-ID is zero (keyboard input)
0005BDr 3  64 rr                        stz insrc
0005BFr 3  64 rr                        stz insrc+1
0005C1r 3               
0005C1r 3                               ; STATE is zero (interpret, not compile)
0005C1r 3  64 rr                        stz state
0005C3r 3  64 rr                        stz state+1
0005C5r 3               @get_line:
0005C5r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
0005C7r 3  85 rr                        sta cib
0005C9r 3  A9 rr                        lda #>buffer0
0005CBr 3  85 rr                        sta cib+1
0005CDr 3               
0005CDr 3                               ; Size of current input buffer (CIB) is zero
0005CDr 3  64 rr                        stz ciblen
0005CFr 3  64 rr                        stz ciblen+1
0005D1r 3               
0005D1r 3                               ; Accept a line from the current import source. This is how
0005D1r 3                               ; modern Forths to it.
0005D1r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0005D4r 3               
0005D4r 3                               ; Test flag: LSB of TOS
0005D4r 3  B5 00                        lda 0,x
0005D6r 3  D0 05                        bne @success
0005D8r 3               
0005D8r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
0005D8r 3                               ; need to print an error message and reset the machine. We
0005D8r 3                               ; don't need to save TOS because we're going to clobber it
0005D8r 3                               ; anyway when we go back to ABORT.
0005D8r 3  A9 06                        lda #err_refill
0005DAr 3  4C rr rr                     jmp error
0005DDr 3               
0005DDr 3               @success:
0005DDr 3                               ; Assume we have successfully accepted a string of input from
0005DDr 3                               ; a source, with address cib and length of input in ciblen. We
0005DDr 3                               ; arrive here still with the TRUE flag from REFILL as TOS
0005DDr 3  E8                           inx                     ; drop
0005DEr 3  E8                           inx
0005DFr 3               
0005DFr 3                               ; Main compile/execute routine
0005DFr 3  20 rr rr                     jsr interpret
0005E2r 3               
0005E2r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
0005E2r 3                               ; overflow because it is so rare
0005E2r 3  E0 rr                        cpx #dsp0
0005E4r 3  F0 05                        beq @stack_ok
0005E6r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
0005E8r 3               
0005E8r 3  4C rr rr                     jmp underflow_error
0005EBr 3               
0005EBr 3               @stack_ok:
0005EBr 3                               ; Display system prompt if all went well. If we're interpreting,
0005EBr 3                               ; this is " ok", if we're compiling, it's " compiled". Note
0005EBr 3                               ; space at beginning of the string.
0005EBr 3  A5 rr                        lda state
0005EDr 3  F0 02                        beq @print
0005EFr 3               
0005EFr 3  A9 01                        lda #1                  ; number for "compile" string
0005F1r 3               @print:
0005F1r 3  20 rr rr                     jsr print_string
0005F4r 3               
0005F4r 3                               ; Awesome line, everybody! Now get the next one.
0005F4r 3  80 CF                        bra @get_line
0005F6r 3               
0005F6r 3               z_cold:
0005F6r 3               z_abort:
0005F6r 3               z_quit:         ; no RTS required
0005F6r 3               
0005F6r 3               
0005F6r 3               
0005F6r 3               ; This table holds all of the initial values for the variables in zero page.
0005F6r 3               ; This table is used by COLD.
0005F6r 3               cold_zp_table:
0005F6r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
0005F8r 3                                               ; block buffer
0005F8r 3  rr rr                .word dictionary_start  ; dp
0005FAr 3  00 00                .word 0                 ; workword
0005FCr 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0005FEr 3  rr rr                .word buffer0           ; cib
000600r 3  00 00                .word 0                 ; ciblen
000602r 3  00 00                .word 0                 ; toin
000604r 3  00 00                .word 0                 ; ip
000606r 3  rr rr                .word kernel_putc       ; output
000608r 3  rr rr                .word kernel_getc       ; input
00060Ar 3  00 00                .word 0                 ; havekey
00060Cr 3  00 00                .word 0                 ; state (0 = interpret)
00060Er 3  0A 00                .word 10                ; base
000610r 3  14 00                .word 20                ; nc-limit
000612r 3  00 00                .word 0                 ; uf_strip (off by default)
000614r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
000616r 3                                               ; available RAM)
000616r 3  00 00                .word 0                 ; status
000618r 3               cold_zp_table_end:
000618r 3               
000618r 3               ; No further ZP variables are initialized. The variables past this point are
000618r 3               ; all temporaries.
000618r 3               
000618r 3               ; This table holds the inital values for the user variables. This table is
000618r 3               ; used by COLD.
000618r 3               cold_user_table:
000618r 3  00 00                .word 0                         ; BLK
00061Ar 3  00 00                .word 0                         ; SCR
00061Cr 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
00061Dr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
00061Er 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
000620r 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
000622r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
000624r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
000626r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
00062Ar 3  00 00 00 00  
00062Er 3  00 00 00 00  
000636r 3  01                   .byte 1                         ; #ORDER
000637r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
00063Br 3  00 00 00 00  
00063Fr 3  00           
000640r 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
000642r 3  00 00                .word 0                         ; block in buffer
000644r 3  00 00                .word 0                         ; buffer status (not in use)
000646r 3  rr rr                .word xt_block_word_error       ; block-read vector
000648r 3  rr rr                .word xt_block_word_error       ; block-write vector
00064Ar 3               cold_user_table_end:
00064Ar 3               
00064Ar 3               
00064Ar 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
00064Ar 3               ; ## "abort""  tested  ANS core
00064Ar 3                       ; """https://forth-standard.org/standard/core/ABORTq
00064Ar 3                       ; Abort and print a string.
00064Ar 3                       ; """
00064Ar 3               
00064Ar 3               xt_abort_quote:
00064Ar 3                               ; save the string
00064Ar 3  20 rr rr                     jsr xt_s_quote          ; S"
00064Dr 3               
00064Dr 3                               ; compile run-time part
00064Dr 3  A0 rr                        ldy #>abort_quote_runtime
00064Fr 3  A9 rr                        lda #<abort_quote_runtime
000651r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
000654r 3               
000654r 3  60           z_abort_quote:  rts
000655r 3               
000655r 3               
000655r 3               abort_quote_runtime:
000655r 3                       ; """Runtime aspect of ABORT_QUOTE"""
000655r 3               
000655r 3                               ; We arrive here with ( f addr u )
000655r 3  B5 04                        lda 4,x
000657r 3  15 05                        ora 5,x
000659r 3  F0 09                        beq @done       ; if FALSE, we're done
00065Br 3               
00065Br 3                               ; We're true, so print string and ABORT. We follow Gforth
00065Br 3                               ; in going to a new line after the string
00065Br 3  20 rr rr                     jsr xt_type
00065Er 3  20 rr rr                     jsr xt_cr
000661r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
000664r 3               @done:
000664r 3                               ; Drop three entries from the Data Stack
000664r 3  8A                           txa
000665r 3  18                           clc
000666r 3  69 06                        adc #6
000668r 3  AA                           tax
000669r 3               
000669r 3  60                           rts
00066Ar 3               
00066Ar 3               
00066Ar 3               
00066Ar 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
00066Ar 3               ; ## "abs"  auto  ANS core
00066Ar 3                       ; """https://forth-standard.org/standard/core/ABS
00066Ar 3                       ; Return the absolute value of a number.
00066Ar 3                       ; """
00066Ar 3               
00066Ar 3               xt_abs:
00066Ar 3  20 rr rr                     jsr underflow_1
00066Dr 3               
00066Dr 3  B5 01                        lda 1,x
00066Fr 3  10 0D                        bpl @done       ; positive number, easy money!
000671r 3               
000671r 3                               ; negative: calculate 0 - n
000671r 3  38                           sec
000672r 3  A9 00                        lda #0
000674r 3  F5 00                        sbc 0,x         ; LSB
000676r 3  95 00                        sta 0,x
000678r 3               
000678r 3  A9 00                        lda #0          ; MSB
00067Ar 3  F5 01                        sbc 1,x
00067Cr 3  95 01                        sta 1,x
00067Er 3               
00067Er 3               @done:
00067Er 3  60           z_abs:          rts
00067Fr 3               
00067Fr 3               
00067Fr 3               
00067Fr 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
00067Fr 3               ; ## "accept"  auto  ANS core
00067Fr 3                       ; """https://forth-standard.org/standard/core/ACCEPT
00067Fr 3                       ; Receive a string of at most n1 characters, placing them at
00067Fr 3                       ; addr. Return the actual number of characters as n2. Characters
00067Fr 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
00067Fr 3                       ; modern Forths.
00067Fr 3                       ; """
00067Fr 3               
00067Fr 3               xt_accept:
00067Fr 3  20 rr rr                     jsr underflow_2
000682r 3               
000682r 3                               ; Abort if we were asked to receive 0 chars
000682r 3  B5 00                        lda 0,x
000684r 3  15 01                        ora 1,x
000686r 3  D0 09                        bne @not_zero
000688r 3               
000688r 3  E8                           inx
000689r 3  E8                           inx
00068Ar 3  74 00                        stz 0,x
00068Cr 3  74 01                        stz 1,x
00068Er 3               
00068Er 3  4C rr rr                     jmp accept_done
000691r 3               
000691r 3               @not_zero:
000691r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000693r 3  85 rr                        sta tmp2
000695r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000697r 3               
000697r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000699r 3  85 rr                        sta tmp1
00069Br 3  B5 03                        lda 3,x
00069Dr 3  85 rr                        sta tmp1+1
00069Fr 3               
00069Fr 3  E8                           inx
0006A0r 3  E8                           inx
0006A1r 3               
0006A1r 3  A0 00                        ldy #0
0006A3r 3               
0006A3r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
0006A3r 3                               ; from bit 2 to 3 is OK)
0006A3r 3  A5 rr                        lda status
0006A5r 3  29 F7                        and #$f7
0006A7r 3               
0006A7r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0006A7r 3  1A                           inc
0006A8r 3               
0006A8r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
0006A8r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
0006A8r 3                               ; received and won't be used to calculate the history buffer
0006A8r 3                               ; offset.
0006A8r 3  09 08                        ora #$08
0006AAr 3  85 rr                        sta status
0006ACr 3               
0006ACr 3               accept_loop:
0006ACr 3                               ; Out of the box, py65mon catches some CTRL sequences such as
0006ACr 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
0006ACr 3                               ; vt100 terminal clears the screen automatically.
0006ACr 3               
0006ACr 3                               ; This is the internal version of KEY without all the mucking
0006ACr 3                               ; about with the Data Stack while still using the input vector
0006ACr 3  20 rr rr                     jsr key_a
0006AFr 3               
0006AFr 3                               ; We quit on both line feed and carriage return
0006AFr 3  C9 0A                        cmp #AscLF
0006B1r 3  F0 20                        beq @eol
0006B3r 3  C9 0D                        cmp #AscCR
0006B5r 3  F0 1C                        beq @eol
0006B7r 3               
0006B7r 3                               ; BACKSPACE and DEL do the same thing for the moment
0006B7r 3  C9 08                        cmp #AscBS
0006B9r 3  F0 22                        beq @backspace
0006BBr 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
0006BDr 3  F0 1E                        beq @backspace
0006BFr 3               
0006BFr 3                               ; Check for CTRL-p and CTRL-n to recall input history
0006BFr 3  C9 10                        cmp #AscCP
0006C1r 3  F0 36                        beq @ctrl_p
0006C3r 3  C9 0E                        cmp #AscCN
0006C5r 3  F0 44                        beq @ctrl_n
0006C7r 3               
0006C7r 3                               ; That's enough for now. Save and echo character.
0006C7r 3  91 rr                        sta (tmp1),y
0006C9r 3  C8                           iny
0006CAr 3               
0006CAr 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
0006CAr 3  20 rr rr                     jsr emit_a
0006CDr 3               
0006CDr 3  C4 rr                        cpy tmp2        ; reached character limit?
0006CFr 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
0006D1r 3  80 03                        bra @buffer_full
0006D3r 3               
0006D3r 3               @eol:
0006D3r 3  20 rr rr                     jsr xt_space    ; print final space
0006D6r 3               
0006D6r 3               @buffer_full:
0006D6r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
0006D6r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
0006D8r 3  74 01                        stz 1,x         ; we only accept 256 chars
0006DAr 3               
0006DAr 3  4C rr rr                     jmp accept_done
0006DDr 3               
0006DDr 3               @backspace:
0006DDr 3                               ; Handle backspace and delete kex, which currently do the same
0006DDr 3                               ; thing
0006DDr 3  C0 00                        cpy #0          ; buffer empty?
0006DFr 3  D0 06                        bne @1
0006E1r 3               
0006E1r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
0006E3r 3  20 rr rr                     jsr emit_a
0006E6r 3  C8                           iny
0006E7r 3               @1:
0006E7r 3  88                           dey
0006E8r 3  A9 08                        lda #AscBS      ; move back one
0006EAr 3  20 rr rr                     jsr emit_a
0006EDr 3  A9 20                        lda #AscSP      ; print a space (rubout)
0006EFr 3  20 rr rr                     jsr emit_a
0006F2r 3  A9 08                        lda #AscBS      ; move back over space
0006F4r 3  20 rr rr                     jsr emit_a
0006F7r 3               
0006F7r 3  80 B3                        bra accept_loop
0006F9r 3               
0006F9r 3               @ctrl_p:
0006F9r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
0006F9r 3               
0006F9r 3                               ; Select the previous buffer
0006F9r 3  A5 rr                        lda status
0006FBr 3               
0006FBr 3                               ; Check for 0 (need to wrap back to 7)
0006FBr 3  29 07                        and #7
0006FDr 3  D0 08                        bne @ctrl_p_dec
0006FFr 3               
0006FFr 3                               ; We need to wrap back to 7.
0006FFr 3  A5 rr                        lda status
000701r 3  09 07                        ora #7
000703r 3  85 rr                        sta status
000705r 3  80 11                        bra @recall_history
000707r 3               
000707r 3               @ctrl_p_dec:
000707r 3                               ; It's safe to decrement the buffer index directly.
000707r 3  C6 rr                        dec status
000709r 3  80 0D                        bra @recall_history
00070Br 3               
00070Br 3               @ctrl_n:
00070Br 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
00070Br 3                               ; the next buffer Check bit 3. If it's set, this is the first
00070Br 3                               ; time CTRL-n has been pressed and we should select the CURRENT
00070Br 3                               ; history buffer.
00070Br 3  A9 08                        lda #$8
00070Dr 3  24 rr                        bit status
00070Fr 3  D0 07                        bne @recall_history
000711r 3               
000711r 3                               ; This isn't the first time CTRL-n has been pressed, select the
000711r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
000711r 3  A5 rr                        lda status
000713r 3  29 F7                        and #$f7
000715r 3               
000715r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000715r 3  1A                           inc
000716r 3               
000716r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
000716r 3                               ; be cleared below.
000716r 3  85 rr                        sta status
000718r 3               
000718r 3                               ; Falls through to @recall_history
000718r 3               
000718r 3               @recall_history:
000718r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
000718r 3  A9 08                        lda #%00001000
00071Ar 3  14 rr                        trb status
00071Cr 3               
00071Cr 3  20 rr rr                     jsr total_recall
00071Fr 3               
00071Fr 3                               ; tmp3 now has the address of the previous history buffer.
00071Fr 3                               ; First byte of buffer is length. Clear the line by sending
00071Fr 3                               ; CR, Y spaces, then CR.
00071Fr 3  A9 0D                        lda #AscCR
000721r 3  20 rr rr                     jsr emit_a
000724r 3               
000724r 3               input_clear:
000724r 3  C0 00                        cpy #0
000726r 3  F0 08                        beq input_cleared
000728r 3               
000728r 3  A9 20                        lda #AscSP
00072Ar 3  20 rr rr                     jsr emit_a
00072Dr 3  88                           dey
00072Er 3  80 F4                        bra input_clear
000730r 3               
000730r 3               input_cleared:
000730r 3  A9 0D                        lda #AscCR
000732r 3  20 rr rr                     jsr emit_a
000735r 3               
000735r 3                               ; Save the history length byte into histinfo+1
000735r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
000735r 3  B1 rr                        lda (tmp3),y
000737r 3  85 rr                        sta status+1
000739r 3               
000739r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
000739r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
000739r 3                               ; buffer)
000739r 3  E6 rr                        inc tmp3
00073Br 3  D0 02                        bne @2           ; Increment the upper byte on carry.
00073Dr 3  E6 rr                        inc tmp3+1
00073Fr 3               @2:
00073Fr 3                               ; Copy the history buffer into the input buffer,
00073Fr 3                               ; sending the characters to the output as we go.
00073Fr 3  A9 0D                        lda #AscCR
000741r 3  20 rr rr                     jsr emit_a
000744r 3               
000744r 3               @history_loop:
000744r 3                               ; See if we have reached the end of the history buffer.
000744r 3  C4 rr                        cpy status+1
000746r 3  D0 03                        bne @3
000748r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
00074Br 3               @3:
00074Br 3                               ; See if we have reached the end of the input buffer.
00074Br 3                               ; (only comparing to lower byte as we currently limit
00074Br 3                               ; to 255 characters max)
00074Br 3  C4 rr                        cpy tmp2
00074Dr 3  F0 0A                        beq @hist_filled_buffer
00074Fr 3               
00074Fr 3                               ; Copy a character and echo.
00074Fr 3  B1 rr                        lda (tmp3),y
000751r 3  91 rr                        sta (tmp1),y
000753r 3  20 rr rr                     jsr emit_a
000756r 3               
000756r 3                               ; Move to the next character.
000756r 3  C8                           iny
000757r 3  80 EB                        bra @history_loop
000759r 3               
000759r 3               @hist_filled_buffer:
000759r 3                               ; We don't want a history recall to EOL our buffer,
000759r 3                               ; so back up one character and return to editing.
000759r 3  88                           dey
00075Ar 3  4C rr rr                     jmp accept_loop
00075Dr 3               accept_done:
00075Dr 3               @done:
00075Dr 3                               ; Copy the input buffer into the currently
00075Dr 3                               ; selected history buffer.
00075Dr 3  20 rr rr                     jsr total_recall
000760r 3  85 rr                        sta status+1
000762r 3               
000762r 3                               ; Also save it in the first buffer byte.
000762r 3  A0 00                        ldy #0
000764r 3  91 rr                        sta (tmp3),y
000766r 3               
000766r 3                               ; Move path the count to the data bytes
000766r 3  E6 rr                        inc tmp3
000768r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
00076Ar 3  E6 rr                        inc tmp3+1
00076Cr 3               @4:
00076Cr 3                               ; Copy the characters from the input buffer to the
00076Cr 3                               ; history buffer.
00076Cr 3               
00076Cr 3               @save_history_loop:
00076Cr 3  C4 rr                        cpy status+1
00076Er 3  F0 07                        beq @save_history_done
000770r 3               
000770r 3  B1 rr                        lda (tmp1),y
000772r 3  91 rr                        sta (tmp3),y
000774r 3  C8                           iny
000775r 3  80 F5                        bra @save_history_loop
000777r 3               
000777r 3               @save_history_done:
000777r 3               z_accept:
000777r 3  60                           rts
000778r 3               
000778r 3               total_recall:
000778r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
000778r 3               
000778r 3                               ; Generate the address of the buffer in tmp3. Start with the
000778r 3                               ; base address.
000778r 3  A9 rr                        lda #<hist_buff
00077Ar 3  85 rr                        sta tmp3
00077Cr 3  A9 rr                        lda #>hist_buff
00077Er 3  85 rr                        sta tmp3+1
000780r 3               
000780r 3                               ; This is a bit annoying as some bits go into each byte.
000780r 3                               ; .....xxx gets put into address like ......xx x.......
000780r 3  A5 rr                        lda status
000782r 3  6A                           ror
000783r 3  29 03                        and #3
000785r 3  18                           clc
000786r 3  65 rr                        adc tmp3+1
000788r 3  85 rr                        sta tmp3+1
00078Ar 3               
00078Ar 3  A5 rr                        lda status
00078Cr 3  6A                           ror             ; Rotate through carry into msb.
00078Dr 3  6A                           ror
00078Er 3  29 80                        and #$80
000790r 3  18                           clc
000791r 3  65 rr                        adc tmp3
000793r 3  85 rr                        sta tmp3
000795r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000797r 3  E6 rr                        inc tmp3+1
000799r 3               @1:
000799r 3                               ; Save the current length of the input buffer in
000799r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000799r 3  98                           tya
00079Ar 3  C9 80                        cmp #$80
00079Cr 3  90 02                        bcc @2
00079Er 3  A9 7F                        lda #$7F
0007A0r 3               @2:
0007A0r 3  60                           rts
0007A1r 3               
0007A1r 3               
0007A1r 3               
0007A1r 3               
0007A1r 3               
0007A1r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
0007A1r 3               ; ## "action-of"  auto  ANS core ext
0007A1r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
0007A1r 3               
0007A1r 3               xt_action_of:
0007A1r 3                               ; This is a state aware word with differet behavior
0007A1r 3                               ; when used while compiling vs interpreting.
0007A1r 3                               ; Check STATE
0007A1r 3  A5 rr                        lda state
0007A3r 3  05 rr                        ora state+1
0007A5r 3  F0 0C                        beq @interpreting
0007A7r 3               
0007A7r 3               @compiling:
0007A7r 3                               ; Run ['] to compile the xt of the next word
0007A7r 3                               ; as a literal.
0007A7r 3  20 rr rr                     jsr xt_bracket_tick
0007AAr 3               
0007AAr 3                               ; Postpone DEFER@ by compiling a JSR to it.
0007AAr 3  A0 rr                        ldy #>xt_defer_fetch
0007ACr 3  A9 rr                        lda #<xt_defer_fetch
0007AEr 3  20 rr rr                     jsr cmpl_subroutine
0007B1r 3  80 06                        bra @done
0007B3r 3               
0007B3r 3               @interpreting:
0007B3r 3  20 rr rr                     jsr xt_tick
0007B6r 3  20 rr rr                     jsr xt_defer_fetch
0007B9r 3               
0007B9r 3               @done:
0007B9r 3  60           z_action_of:           rts
0007BAr 3               
0007BAr 3               
0007BAr 3               
0007BAr 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
0007BAr 3               ; ## "again"  tested  ANS core ext
0007BAr 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
0007BAr 3               
0007BAr 3               xt_again:
0007BAr 3  20 rr rr                     jsr underflow_1
0007BDr 3               
0007BDr 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
0007BDr 3                               ; so we have the range and don't have to calculate the
0007BDr 3                               ; offset.
0007BDr 3  A0 00                        ldy #0
0007BFr 3  A9 4C                        lda #$4C        ; JMP
0007C1r 3  91 rr                        sta (cp),y
0007C3r 3  C8                           iny
0007C4r 3               
0007C4r 3  B5 00                        lda 0,x         ; LSB of address
0007C6r 3  91 rr                        sta (cp),y
0007C8r 3  C8                           iny
0007C9r 3               
0007C9r 3  B5 01                        lda 1,x         ; MSB of address
0007CBr 3  91 rr                        sta (cp),y
0007CDr 3  C8                           iny
0007CEr 3               
0007CEr 3                               ; Allot the space we just used
0007CEr 3  98                           tya
0007CFr 3  18                           clc
0007D0r 3  65 rr                        adc cp
0007D2r 3  85 rr                        sta cp
0007D4r 3  90 02                        bcc @done
0007D6r 3  E6 rr                        inc cp+1
0007D8r 3               @done:
0007D8r 3  E8                           inx
0007D9r 3  E8                           inx
0007DAr 3               
0007DAr 3  60           z_again:        rts
0007DBr 3               
0007DBr 3               
0007DBr 3               
0007DBr 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
0007DBr 3               ; ## "align"  auto  ANS core
0007DBr 3                       ; """https://forth-standard.org/standard/core/ALIGN
0007DBr 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
0007DBr 3                       ; routine as well, and also does nothing
0007DBr 3                       ; """
0007DBr 3               
0007DBr 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
0007DBr 3               ; ## "aligned"  auto  ANS core
0007DBr 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
0007DBr 3               
0007DBr 3               xt_align:
0007DBr 3               xt_aligned:
0007DBr 3               z_align:
0007DBr 3  60           z_aligned:      rts             ; stripped out during native compile
0007DCr 3               
0007DCr 3               
0007DCr 3               
0007DCr 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
0007DCr 3               ; ## "allot"  auto  ANS core
0007DCr 3                       ; """https://forth-standard.org/standard/core/ALLOT
0007DCr 3                       ; Reserve a certain number of bytes (not cells) or release them.
0007DCr 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
0007DCr 3                       ; to the beginning of the Dictionary. If n is positive (the most
0007DCr 3                       ; common case), reserve n bytes, but not past the end of the
0007DCr 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
0007DCr 3                       ; """
0007DCr 3               
0007DCr 3               xt_allot:
0007DCr 3  20 rr rr                     jsr underflow_1
0007DFr 3               
0007DFr 3                               ; Releasing memory is going to be a very rare operation,
0007DFr 3                               ; so we check for it at the beginning and try to make
0007DFr 3                               ; the most common case as fast as possible
0007DFr 3  B5 01                        lda 1,x
0007E1r 3  30 22                        bmi @release
0007E3r 3               
0007E3r 3                               ; Common case: We are reserving memory, not releasing it
0007E3r 3  18                           clc
0007E4r 3  A5 rr                        lda cp
0007E6r 3  75 00                        adc 0,x
0007E8r 3  85 rr                        sta cp
0007EAr 3               
0007EAr 3  A5 rr                        lda cp+1
0007ECr 3  75 01                        adc 1,x
0007EEr 3  85 rr                        sta cp+1
0007F0r 3               
0007F0r 3                               ; Wait, did we just grant more space than we have? This is
0007F0r 3                               ; a check we only do here, not for other situations like cmpl_a
0007F0r 3                               ; where smaller amounts are reserved.
0007F0r 3  A0 FF                        ldy #<cp_end
0007F2r 3  C4 rr                        cpy cp
0007F4r 3  A9 7F                        lda #>cp_end
0007F6r 3  E5 rr                        sbc cp+1
0007F8r 3  B0 48                        bcs @done               ; we're fine.
0007FAr 3               
0007FAr 3                               ; Oops, that was too much, we're beyond the end of
0007FAr 3                               ; legal Dictionary RAM. Reduce to max memory and report
0007FAr 3                               ; an error
0007FAr 3  84 rr                        sty cp                  ; still #<cp_end
0007FCr 3  A9 7F                        lda #>cp_end
0007FEr 3  85 rr                        sta cp+1
000800r 3               
000800r 3  A9 00                        lda #err_allot
000802r 3  4C rr rr                     jmp error
000805r 3               
000805r 3               @release:
000805r 3                  		; The ANS standard doesn't really say what to do if too much
000805r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
000805r 3                               ; even an official test. Gforth is little help either. The good
000805r 3                               ; news is, this is going to be a rare case. We want to use as
000805r 3                               ; few bytes as possible.
000805r 3               
000805r 3                               ; What we do is let the user free anything up to the beginning
000805r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
000805r 3                               ; their own risk. This means that the Dictionary pointer DP
000805r 3                               ; might end up pointing to garbage. However, an attempt to
000805r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
000805r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
000805r 3                               ; an error message.
000805r 3               
000805r 3                               ; We arrive here with ( n ) which is negative. First step,
000805r 3                               ; subtract the number TOS from the CP for a new CP
000805r 3  CA                           dex
000806r 3  CA                           dex
000807r 3  A5 rr                        lda cp
000809r 3  95 00                        sta 0,x
00080Br 3  A5 rr                        lda cp+1
00080Dr 3  95 01                        sta 1,x
00080Fr 3               
00080Fr 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
000812r 3               
000812r 3                               ; Second step, see if we've gone too far. We compare the new
000812r 3                               ; CP on TOS (which, if we've really screwed up, might be
000812r 3                               ; negative) with CP0. This is a signed comparison
000812r 3  CA                           dex
000813r 3  CA                           dex                             ; new CP now NOS
000814r 3  A9 rr                        lda #<cp0
000816r 3  95 00                        sta 0,x
000818r 3  A9 rr                        lda #>cp0
00081Ar 3  95 01                        sta 1,x                         ; CP0 is TOS
00081Cr 3               
00081Cr 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
00081Fr 3               
00081Fr 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
00081Fr 3                               ; This means we want Z=1 or N=1
00081Fr 3  F0 17                        beq @nega_done
000821r 3  30 15                        bmi @nega_done
000823r 3               
000823r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
000823r 3                               ; word in ROM (should be DROP), and abort with an error
000823r 3  A9 rr                        lda #<cp0
000825r 3  85 rr                        sta cp
000827r 3  A9 rr                        lda #>cp0
000829r 3  85 rr                        sta cp+1
00082Br 3               
00082Br 3  A9 rr                        lda #<dictionary_start
00082Dr 3  85 rr                        sta dp
00082Fr 3  A9 rr                        lda #>dictionary_start
000831r 3  85 rr                        sta dp+1
000833r 3               
000833r 3  A9 0A                        lda #err_negallot
000835r 3  4C rr rr                     jmp error
000838r 3               
000838r 3               @nega_done:
000838r 3                               ; Save new CP, which is NOS
000838r 3  B5 02                        lda 2,x
00083Ar 3  85 rr                        sta cp
00083Cr 3  B5 03                        lda 3,x
00083Er 3  85 rr                        sta cp+1
000840r 3               
000840r 3  E8                           inx
000841r 3  E8                           inx                     ; drop through to @done
000842r 3               @done:
000842r 3  E8                           inx
000843r 3  E8                           inx
000844r 3               z_allot:
000844r 3  60                           rts
000845r 3               
000845r 3               
000845r 3               
000845r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
000845r 3               ; ## "allow-native"  auto  Tali Forth
000845r 3               xt_allow_native:
000845r 3  20 rr rr                     jsr current_to_dp
000848r 3  A0 01                        ldy #1          ; offset for status byte
00084Ar 3  B1 rr                        lda (dp),y
00084Cr 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
00084Er 3  91 rr                        sta (dp),y
000850r 3               z_allow_native:
000850r 3  60                           rts
000851r 3               
000851r 3               
000851r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
000851r 3               ; ## "also"  auto  ANS search ext
000851r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
000851r 3               xt_also:
000851r 3  20 rr rr                     jsr xt_get_order
000854r 3  20 rr rr                     jsr xt_over
000857r 3  20 rr rr                     jsr xt_swap
00085Ar 3  20 rr rr                     jsr xt_one_plus
00085Dr 3  20 rr rr                     jsr xt_set_order
000860r 3               
000860r 3  60           z_also:         rts
000861r 3               
000861r 3               
000861r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
000861r 3               ; ## "always-native"  auto  Tali Forth
000861r 3               xt_always_native:
000861r 3  20 rr rr                     jsr current_to_dp
000864r 3  A0 01                        ldy #1          ; offset for status byte
000866r 3  B1 rr                        lda (dp),y
000868r 3  09 02                        ora #AN         ; Make sure AN flag is set
00086Ar 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
00086Cr 3  91 rr                        sta (dp),y
00086Er 3               z_always_native:
00086Er 3  60                           rts
00086Fr 3               
00086Fr 3               
00086Fr 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
00086Fr 3               ; ## "and"  auto  ANS core
00086Fr 3                       ; """https://forth-standard.org/standard/core/AND"""
00086Fr 3               xt_and:
00086Fr 3  20 rr rr                     jsr underflow_2
000872r 3               
000872r 3  B5 00                        lda 0,x
000874r 3  35 02                        and 2,x
000876r 3  95 02                        sta 2,x
000878r 3               
000878r 3  B5 01                        lda 1,x
00087Ar 3  35 03                        and 3,x
00087Cr 3  95 03                        sta 3,x
00087Er 3               
00087Er 3  E8                           inx
00087Fr 3  E8                           inx
000880r 3               
000880r 3  60           z_and:          rts
000881r 3               
000881r 3               
000881r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
000881r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
000881r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
000881r 3                       ; assembler words to the search order so they can be used.
000881r 3                       ; See the tutorial on Wordlists and the Search Order for
000881r 3                       ; more information.
000881r 3                       ;
000881r 3                       ; This is a dummy entry, the code is shared with TWO
000881r 3                       ; """
000881r 3               
000881r 3               
000881r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
000881r 3               ; ## "at-xy"  tested  ANS facility
000881r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
000881r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
000881r 3                       ; ANSI code is ESC[<n>;<m>H
000881r 3                       ;
000881r 3                       ; Do not use U. to print the numbers because the
000881r 3                       ; trailing space will not work with xterm
000881r 3                       ; """
000881r 3               xt_at_xy:
000881r 3  20 rr rr                     jsr underflow_2
000884r 3               
000884r 3  A9 1B                        lda #AscESC
000886r 3  20 rr rr                     jsr emit_a
000889r 3  A9 5B                        lda #$5B        ; ASCII for "["
00088Br 3  20 rr rr                     jsr emit_a
00088Er 3  20 rr rr                     jsr print_u
000891r 3  A9 3B                        lda #$3B        ; ASCII for ";"
000893r 3  20 rr rr                     jsr emit_a
000896r 3  20 rr rr                     jsr print_u
000899r 3  A9 48                        lda #'H'
00089Br 3  20 rr rr                     jsr emit_a
00089Er 3               
00089Er 3  60           z_at_xy:        rts
00089Fr 3               
00089Fr 3               
00089Fr 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
00089Fr 3               ; ## "\"  auto  ANS core ext
00089Fr 3                       ; """https://forth-standard.org/standard/core/bs"""
00089Fr 3               xt_backslash:
00089Fr 3  A5 rr                        lda ciblen
0008A1r 3  85 rr                        sta toin
0008A3r 3  A5 rr                        lda ciblen+1
0008A5r 3  85 rr                        sta toin+1
0008A7r 3               
0008A7r 3  60           z_backslash:    rts
0008A8r 3               
0008A8r 3               
0008A8r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
0008A8r 3               ; ## "base"  auto  ANS core
0008A8r 3                       ; """https://forth-standard.org/standard/core/BASE
0008A8r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
0008A8r 3                       ; ingore the MSB
0008A8r 3                       ; """
0008A8r 3               xt_base:
0008A8r 3  CA                           dex
0008A9r 3  CA                           dex
0008AAr 3  A9 rr                        lda #<base
0008ACr 3  95 00                        sta 0,x         ; LSB
0008AEr 3  74 01                        stz 1,x         ; MSB is always 0
0008B0r 3               
0008B0r 3  60           z_base:         rts
0008B1r 3               
0008B1r 3               
0008B1r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
0008B1r 3               ; ## "begin"  auto  ANS core
0008B1r 3                       ; """https://forth-standard.org/standard/core/BEGIN
0008B1r 3                       ;
0008B1r 3                       ; This is just an immediate version of here which could just
0008B1r 3                       ; as well be coded in Forth as
0008B1r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
0008B1r 3                       ; Since this is a compiling word, we don't care that much about
0008B1r 3                       ; about speed
0008B1r 3                       ; """
0008B1r 3               
0008B1r 3               xt_begin:
0008B1r 3  20 rr rr                     jsr xt_here
0008B4r 3  60           z_begin:        rts
0008B5r 3               
0008B5r 3               
0008B5r 3               
0008B5r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
0008B5r 3               ; ## "bell"  tested  Tali Forth
0008B5r 3               xt_bell:
0008B5r 3  A9 07                        lda #7          ; ASCII value for BELl
0008B7r 3  20 rr rr                     jsr emit_a
0008BAr 3               
0008BAr 3  60           z_bell:         rts
0008BBr 3               
0008BBr 3               
0008BBr 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
0008BBr 3               ; ## "bl"  auto  ANS core
0008BBr 3                       ; """https://forth-standard.org/standard/core/BL"""
0008BBr 3               
0008BBr 3               xt_bl:
0008BBr 3  CA                           dex
0008BCr 3  CA                           dex
0008BDr 3  A9 20                        lda #AscSP
0008BFr 3  95 00                        sta 0,x
0008C1r 3  74 01                        stz 1,x
0008C3r 3               
0008C3r 3  60           z_bl:           rts
0008C4r 3               
0008C4r 3               
0008C4r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
0008C4r 3               ; ## "block"  auto  ANS block
0008C4r 3                       ; """https://forth-standard.org/standard/block/BLK"""
0008C4r 3               xt_blk:
0008C4r 3                               ; BLK is at UP + blk_offset
0008C4r 3  CA                           dex
0008C5r 3  CA                           dex
0008C6r 3  18                           clc
0008C7r 3  A5 rr                        lda up
0008C9r 3  69 00                        adc #blk_offset ; Add offset
0008CBr 3  95 00                        sta 0,x
0008CDr 3  A5 rr                        lda up+1
0008CFr 3  69 00                        adc #0          ; Adding carry
0008D1r 3  95 01                        sta 1,x
0008D3r 3               
0008D3r 3  60           z_blk:          rts
0008D4r 3               
0008D4r 3               
0008D4r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
0008D4r 3               ; ## "blkbuffer"  auto  Tali block
0008D4r 3               xt_blkbuffer:
0008D4r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
0008D4r 3                               ; Unlike some of the other user variables, we actually
0008D4r 3                               ; want to push the address stored here, which will
0008D4r 3                               ; point to somewhere outside of the user variables.
0008D4r 3  CA                           dex
0008D5r 3  CA                           dex
0008D6r 3                               ; Put the address on the stack.
0008D6r 3  A0 28                        ldy #blkbuffer_offset
0008D8r 3  B1 rr                        lda (up),y
0008DAr 3  95 00                        sta 0,x
0008DCr 3  C8                           iny             ; Move along to the next byte
0008DDr 3  B1 rr                        lda (up),y
0008DFr 3  95 01                        sta 1,x
0008E1r 3               
0008E1r 3  60           z_blkbuffer:    rts
0008E2r 3               
0008E2r 3               
0008E2r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
0008E2r 3               ; ## "block"  auto  ANS block
0008E2r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
0008E2r 3               
0008E2r 3               xt_block:
0008E2r 3               
0008E2r 3                               ; See if the block requested is the same as the one we
0008E2r 3                               ; currently have in the buffer. Check the LSB.
0008E2r 3  A0 2A                        ldy #buffblocknum_offset
0008E4r 3  B1 rr                        lda (up),y
0008E6r 3  D5 00                        cmp 0,x
0008E8r 3  D0 0F                        bne @not_in_buffer
0008EAr 3               
0008EAr 3                               ; Check the MSB.
0008EAr 3  C8                           iny
0008EBr 3  B1 rr                        lda (up),y
0008EDr 3  D5 01                        cmp 1,x
0008EFr 3  D0 08                        bne @not_in_buffer
0008F1r 3               
0008F1r 3                               ; The block is in the buffer. See if the buffer is in use.
0008F1r 3  A0 2C                        ldy #buffstatus_offset
0008F3r 3  B1 rr                        lda (up),y
0008F5r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
0008F7r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
0008F9r 3                                               ; @done will replace the block# with the
0008F9r 3                                               ; buffer address.
0008F9r 3               @not_in_buffer:
0008F9r 3                               ; Check the buffer status
0008F9r 3  A0 2C                        ldy #buffstatus_offset
0008FBr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0008FDr 3  C9 03                        cmp #3          ; LSB is needed.
0008FFr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000901r 3               
000901r 3                               ; We need to save the block.
000901r 3  20 rr rr                     jsr xt_blkbuffer
000904r 3  20 rr rr                     jsr xt_buffblocknum
000907r 3  20 rr rr                     jsr xt_fetch
00090Ar 3  20 rr rr                     jsr xt_block_write
00090Dr 3               
00090Dr 3               @buffer_available:
00090Dr 3                               ; Save the block number.
00090Dr 3  A0 2A                        ldy #buffblocknum_offset
00090Fr 3  B5 00                        lda 0,x
000911r 3  91 rr                        sta (up),y
000913r 3  C8                           iny
000914r 3  B5 01                        lda 1,x
000916r 3  91 rr                        sta (up),y
000918r 3               
000918r 3                               ; Get the requested block.
000918r 3  20 rr rr                     jsr xt_blkbuffer
00091Br 3  20 rr rr                     jsr xt_swap
00091Er 3  20 rr rr                     jsr xt_block_read
000921r 3               
000921r 3                               ; Mark the buffer as clean and in-use.
000921r 3  A9 01                        lda #1
000923r 3  A0 2C                        ldy #buffstatus_offset
000925r 3  91 rr                        sta (up),y
000927r 3               
000927r 3                               ; Make room on the stack for the return address.
000927r 3  CA                           dex
000928r 3  CA                           dex
000929r 3               
000929r 3               @done:
000929r 3                               ; It's in the buffer. Return the buffer address.
000929r 3  A0 28                        ldy #blkbuffer_offset
00092Br 3  B1 rr                        lda (up),y
00092Dr 3  95 00                        sta 0,x
00092Fr 3  C8                           iny
000930r 3  B1 rr                        lda (up),y
000932r 3  95 01                        sta 1,x
000934r 3               
000934r 3  60           z_block:        rts
000935r 3               
000935r 3               
000935r 3               
000935r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
000935r 3               ; ## "block-ramdrive-init"  auto  Tali block
000935r 3                       ; """Create a RAM drive, with the given number of
000935r 3                       ; blocks, in the dictionary along with setting up the block words to
000935r 3                       ; use it.  The read/write routines do not provide bounds checking.
000935r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
000935r 3                       ; """
000935r 3               
000935r 3               xt_block_ramdrive_init:
000935r 3  20 rr rr                     jsr underflow_1
000938r 3               
000938r 3                               ; Store the string to run here as a string literal.
000938r 3                               ; See SLITERAL for the format information. This way, we
000938r 3                               ; don't have the words defined below in the Dictionary until
000938r 3                               ; we really use them.
000938r 3  4C rr rr                     jmp @after_ramdrive_code
00093Br 3               
00093Br 3               @ramdrive_code:
00093Br 3  62 61 73 65          .byte "base @ swap decimal"
00093Fr 3  20 40 20 73  
000943r 3  77 61 70 20  
00094Er 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
000952r 3  34 20 2A     
000955r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
000959r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
00095Dr 3  66 65 72 3A  
000961r 3  20 72 61 6D  
00096Ar 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
00096Ar 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
00096Er 3  6C 6F 63 6B  
000972r 3  2D 72 65 61  
000980r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000984r 3  64 72 69 76  
000988r 3  65 20 73 77  
0009A8r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
0009ACr 3  6C 6F 63 6B  
0009B0r 3  2D 77 72 69  
0009BFr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
0009C3r 3  64 72 69 76  
0009C7r 3  65 20 73 77  
0009E2r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
0009E6r 3  6C 6F 63 6B  
0009EAr 3  2D 72 65 61  
000A0Cr 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
000A10r 3  6C 6F 63 6B  
000A14r 3  2D 77 72 69  
000A38r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000A3Cr 3  64 72 69 76  
000A40r 3  65 20 73 77  
000A53r 3               
000A53r 3               @after_ramdrive_code:
000A53r 3  20 rr rr                     jsr sliteral_runtime
000A56r 3               
000A56r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000A5Ar 3               
000A5Ar 3                               ; The address and length of the ramdrive code is now on the
000A5Ar 3                               ; stack. Call EVALUATE to run it.
000A5Ar 3  20 rr rr                     jsr xt_evaluate
000A5Dr 3               
000A5Dr 3               z_block_ramdrive_init:
000A5Dr 3  60                           rts
000A5Er 3               
000A5Er 3               
000A5Er 3               
000A5Er 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000A5Er 3               ; ## "block-read"  auto  Tali block
000A5Er 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000A5Er 3                       ; with their own version to read a block from storage.
000A5Er 3                       ; The stack parameters are ( buffer_address block# -- ).
000A5Er 3                       ; """
000A5Er 3               xt_block_read:
000A5Er 3                               ; Execute the BLOCK-READ-VECTOR
000A5Er 3  A0 2E                        ldy #blockread_offset
000A60r 3  B1 rr                        lda (up),y
000A62r 3  85 rr                        sta tmp1
000A64r 3  C8                           iny
000A65r 3  B1 rr                        lda (up),y
000A67r 3  85 rr                        sta tmp1+1
000A69r 3               
000A69r 3  6C rr rr                     jmp (tmp1)
000A6Cr 3               
000A6Cr 3               z_block_read:   ; No RTS needed
000A6Cr 3               
000A6Cr 3               
000A6Cr 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000A6Cr 3               ; ## "block-read-vector"  auto  Tali block
000A6Cr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000A6Cr 3                       ; with their own version to read a block from storage.
000A6Cr 3                       ; This word gives the address of the vector so it can be replaced.
000A6Cr 3                       ; """
000A6Cr 3               xt_block_read_vector:
000A6Cr 3                               ; Get the BLOCK-READ-VECTOR address
000A6Cr 3  CA                           dex
000A6Dr 3  CA                           dex
000A6Er 3  18                           clc
000A6Fr 3  A5 rr                        lda up
000A71r 3  69 2E                        adc #blockread_offset
000A73r 3  95 00                        sta 0,x
000A75r 3  A5 rr                        lda up+1
000A77r 3  69 00                        adc #0          ; Add carry
000A79r 3  95 01                        sta 1,x
000A7Br 3               
000A7Br 3               z_block_read_vector:
000A7Br 3  60                           rts
000A7Cr 3               
000A7Cr 3               
000A7Cr 3               ; This is the default error message the vectored words BLOCK-READ and
000A7Cr 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000A7Cr 3               xt_block_word_error:
000A7Cr 3  A9 0C                        lda #err_blockwords
000A7Er 3  4C rr rr                     jmp error       ; no RTS needed
000A81r 3               z_block_word_error:
000A81r 3               
000A81r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000A81r 3               ; ## "block-write"  auto  Tali block
000A81r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000A81r 3                       ; with their own version to write a block to storage.
000A81r 3                       ; The stack parameters are ( buffer_address block# -- ).
000A81r 3                       ; """
000A81r 3               xt_block_write:
000A81r 3                               ; Execute the BLOCK-READ-VECTOR
000A81r 3  A0 30                        ldy #blockwrite_offset
000A83r 3  B1 rr                        lda (up),y
000A85r 3  85 rr                        sta tmp1
000A87r 3  C8                           iny
000A88r 3  B1 rr                        lda (up),y
000A8Ar 3  85 rr                        sta tmp1+1
000A8Cr 3  6C rr rr                     jmp (tmp1)
000A8Fr 3               
000A8Fr 3               z_block_write:  ; No RTS needed
000A8Fr 3               
000A8Fr 3               
000A8Fr 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000A8Fr 3               ; ## "block-write-vector"  auto  Tali block
000A8Fr 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000A8Fr 3                       ; with their own version to write a block to storage.
000A8Fr 3                       ; This word gives the address of the vector so it can be replaced.
000A8Fr 3                       ; """
000A8Fr 3               xt_block_write_vector:
000A8Fr 3                               ; Get the BLOCK-WRITE-VECTOR address
000A8Fr 3  CA                           dex
000A90r 3  CA                           dex
000A91r 3  18                           clc
000A92r 3  A5 rr                        lda up
000A94r 3  69 30                        adc #blockwrite_offset
000A96r 3  95 00                        sta 0,x
000A98r 3  A5 rr                        lda up+1
000A9Ar 3  69 00                        adc #0          ; Add carry
000A9Cr 3  95 01                        sta 1,x
000A9Er 3               
000A9Er 3               z_block_write_vector:
000A9Er 3  60                           rts
000A9Fr 3               
000A9Fr 3               
000A9Fr 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000A9Fr 3               ; ## "bounds"  auto  Gforth
000A9Fr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000A9Fr 3                       ; Given a string, return the correct Data Stack parameters for
000A9Fr 3                       ; a DO/LOOP loop over its characters. This is realized as
000A9Fr 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000A9Fr 3                       ; """
000A9Fr 3               xt_bounds:
000A9Fr 3  20 rr rr                     jsr underflow_2
000AA2r 3               
000AA2r 3  18                           clc
000AA3r 3  B5 00                        lda 0,x                 ; LSB u
000AA5r 3  B4 02                        ldy 2,x                 ; LSB addr
000AA7r 3  75 02                        adc 2,x
000AA9r 3  95 02                        sta 2,x                 ; LSB addr+u
000AABr 3  94 00                        sty 0,x
000AADr 3               
000AADr 3  B5 01                        lda 1,x                 ; MSB u
000AAFr 3  B4 03                        ldy 3,x                 ; MSB addr
000AB1r 3  75 03                        adc 3,x
000AB3r 3  95 03                        sta 3,x                 ; MSB addr+u
000AB5r 3  94 01                        sty 1,x
000AB7r 3               
000AB7r 3  60           z_bounds:       rts
000AB8r 3               
000AB8r 3               
000AB8r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000AB8r 3               ; ## "[char]"  auto  ANS core
000AB8r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000AB8r 3                       ; Compile the ASCII value of a character as a literal. This is an
000AB8r 3                       ; immediate, compile-only word.
000AB8r 3                       ;
000AB8r 3                       ; A definition given in
000AB8r 3                       ; http://forth-standard.org/standard/implement is
000AB8r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000AB8r 3                       ; """
000AB8r 3               xt_bracket_char:
000AB8r 3  20 rr rr                     jsr xt_char
000ABBr 3  20 rr rr                     jsr xt_literal
000ABEr 3  60           z_bracket_char: rts
000ABFr 3               
000ABFr 3               
000ABFr 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000ABFr 3               ; ## "[']"  auto  ANS core
000ABFr 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000ABFr 3               xt_bracket_tick:
000ABFr 3  20 rr rr                     jsr xt_tick
000AC2r 3  20 rr rr                     jsr xt_literal
000AC5r 3  60           z_bracket_tick: rts
000AC6r 3               
000AC6r 3               
000AC6r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000AC6r 3               ; ## "buffblocknum"  auto  Tali block
000AC6r 3               xt_buffblocknum:
000AC6r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000AC6r 3  CA                           dex
000AC7r 3  CA                           dex
000AC8r 3  18                           clc
000AC9r 3  A5 rr                        lda up
000ACBr 3  69 2A                        adc #buffblocknum_offset        ; Add offset
000ACDr 3  95 00                        sta 0,x
000ACFr 3  A5 rr                        lda up+1
000AD1r 3  69 00                        adc #0                          ; Adding carry
000AD3r 3  95 01                        sta 1,x
000AD5r 3               
000AD5r 3  60           z_buffblocknum: rts
000AD6r 3               
000AD6r 3               
000AD6r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000AD6r 3               ; ## "buffer"  auto  ANS block
000AD6r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000AD6r 3               
000AD6r 3               xt_buffer:
000AD6r 3                               ; Check the buffer status
000AD6r 3  A0 2C                        ldy #buffstatus_offset
000AD8r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000ADAr 3  C9 03                        cmp #3          ; LSB is needed.
000ADCr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000ADEr 3               
000ADEr 3                               ; We need to save the block.
000ADEr 3  20 rr rr                     jsr xt_blkbuffer
000AE1r 3  20 rr rr                     jsr xt_buffblocknum
000AE4r 3  20 rr rr                     jsr xt_fetch
000AE7r 3  20 rr rr                     jsr xt_block_write
000AEAr 3               
000AEAr 3               @buffer_available:
000AEAr 3                               ; Save the block number.
000AEAr 3  A0 2A                        ldy #buffblocknum_offset
000AECr 3  B5 00                        lda 0,x
000AEEr 3  91 rr                        sta (up),y
000AF0r 3  C8                           iny
000AF1r 3  B5 01                        lda 1,x
000AF3r 3  91 rr                        sta (up),y
000AF5r 3               
000AF5r 3                               ; Mark the buffer as clean and in-use.
000AF5r 3  A9 01                        lda #1
000AF7r 3  A0 2C                        ldy #buffstatus_offset
000AF9r 3  91 rr                        sta (up),y
000AFBr 3               
000AFBr 3               @done:
000AFBr 3                               ; Return the buffer address.
000AFBr 3  A0 28                        ldy #blkbuffer_offset
000AFDr 3  B1 rr                        lda (up),y
000AFFr 3  95 00                        sta 0,x
000B01r 3  C8                           iny
000B02r 3  B1 rr                        lda (up),y
000B04r 3  95 01                        sta 1,x
000B06r 3               
000B06r 3  60           z_buffer:       rts
000B07r 3               
000B07r 3               
000B07r 3               
000B07r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000B07r 3               ; ## "buffer:"  auto  ANS core ext
000B07r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000B07r 3                               ; Create a buffer of size u that puts its address on the stack
000B07r 3                               ; when its name is used.
000B07r 3                               ; """
000B07r 3               xt_buffer_colon:
000B07r 3  20 rr rr                     jsr xt_create
000B0Ar 3  20 rr rr                     jsr xt_allot
000B0Dr 3  60           z_buffer_colon: rts
000B0Er 3               
000B0Er 3               
000B0Er 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000B0Er 3               ; ## "buffstatus"  auto  Tali block
000B0Er 3               xt_buffstatus:
000B0Er 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000B0Er 3  CA                           dex
000B0Fr 3  CA                           dex
000B10r 3  18                           clc
000B11r 3  A5 rr                        lda up
000B13r 3  69 2C                        adc #buffstatus_offset  ; Add offset
000B15r 3  95 00                        sta 0,x
000B17r 3  A5 rr                        lda up+1
000B19r 3  69 00                        adc #0                  ; Adding carry
000B1Br 3  95 01                        sta 1,x
000B1Dr 3               
000B1Dr 3  60           z_buffstatus:   rts
000B1Er 3               
000B1Er 3               
000B1Er 3               ; ## BYE ( -- ) "Break"
000B1Er 3               ; ## "bye"  tested  ANS tools ext
000B1Er 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000B1Er 3               
000B1Er 3               xt_bye:
000B1Er 3                               ;brk
000B1Er 3  4C rr rr                     jmp platform_bye
000B21r 3               z_bye:          ;rts             ; never reached
000B21r 3               
000B21r 3               
000B21r 3               
000B21r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000B21r 3               ; ## "c,"  auto  ANS core
000B21r 3                       ; """https://forth-standard.org/standard/core/CComma"""
000B21r 3               
000B21r 3               xt_c_comma:
000B21r 3  20 rr rr                     jsr underflow_1
000B24r 3               
000B24r 3  B5 00                        lda 0,x
000B26r 3  20 rr rr                     jsr cmpl_a
000B29r 3               
000B29r 3  E8                           inx
000B2Ar 3  E8                           inx
000B2Br 3               
000B2Br 3  60           z_c_comma:      rts
000B2Cr 3               
000B2Cr 3               
000B2Cr 3               
000B2Cr 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000B2Cr 3               ; ## "c@"  auto  ANS core
000B2Cr 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000B2Cr 3               xt_c_fetch:
000B2Cr 3  20 rr rr                     jsr underflow_1
000B2Fr 3               
000B2Fr 3  A1 00                        lda (0,x)
000B31r 3  95 00                        sta 0,x
000B33r 3  74 01                        stz 1,x         ; Ignore LSB
000B35r 3               
000B35r 3  60           z_c_fetch:      rts
000B36r 3               
000B36r 3               
000B36r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000B36r 3               ; ## "c!"  auto  ANS core
000B36r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000B36r 3               xt_c_store:
000B36r 3  20 rr rr                     jsr underflow_2
000B39r 3               
000B39r 3  B5 02                        lda 2,x
000B3Br 3  81 00                        sta (0,x)
000B3Dr 3               
000B3Dr 3  E8                           inx
000B3Er 3  E8                           inx
000B3Fr 3  E8                           inx
000B40r 3  E8                           inx
000B41r 3               
000B41r 3  60           z_c_store:      rts
000B42r 3               
000B42r 3               
000B42r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000B42r 3               ; ## "case"  auto  ANS core ext
000B42r 3                       ; """http://forth-standard.org/standard/core/CASE
000B42r 3                       ;
000B42r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000B42r 3                       ; """
000B42r 3               
000B42r 3               
000B42r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000B42r 3               ; ## "cell+"  auto  ANS core
000B42r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000B42r 3                       ; Add the number of bytes ("address units") that one cell needs.
000B42r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000B42r 3                       ; """
000B42r 3               
000B42r 3               xt_cell_plus:
000B42r 3  20 rr rr                     jsr underflow_1
000B45r 3               
000B45r 3  F6 00                        inc 0,x
000B47r 3  D0 02                        bne @1
000B49r 3  F6 01                        inc 1,x
000B4Br 3               @1:
000B4Br 3  F6 00                        inc 0,x
000B4Dr 3  D0 02                        bne @done
000B4Fr 3  F6 01                        inc 1,x
000B51r 3               @done:
000B51r 3  60           z_cell_plus:    rts
000B52r 3               
000B52r 3               
000B52r 3               
000B52r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000B52r 3               ; ## "cells"  auto  ANS core
000B52r 3                       ; """https://forth-standard.org/standard/core/CELLS
000B52r 3                       ;
000B52r 3                       ; Dummy entry for the CELLS word, the code is the same as for
000B52r 3                       ; 2*, which is where the header directs us to
000B52r 3                       ; """
000B52r 3               
000B52r 3               
000B52r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000B52r 3               ; ## "char"  auto  ANS core
000B52r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000B52r 3               
000B52r 3               xt_char:
000B52r 3                               ; get character from string, returns ( addr u )
000B52r 3  20 rr rr                     jsr xt_parse_name
000B55r 3               
000B55r 3                               ; if we got back a zero, we have a problem
000B55r 3  B5 00                        lda 0,x
000B57r 3  15 01                        ora 1,x
000B59r 3  D0 05                        bne @not_empty
000B5Br 3               
000B5Br 3  A9 05                        lda #err_noname
000B5Dr 3  4C rr rr                     jmp error
000B60r 3               
000B60r 3               @not_empty:
000B60r 3  E8                           inx             ; drop number of characters, leave addr
000B61r 3  E8                           inx
000B62r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000B64r 3  95 00                        sta 0,x
000B66r 3  74 01                        stz 1,x         ; MSB is always zero
000B68r 3               
000B68r 3  60           z_char:         rts
000B69r 3               
000B69r 3               
000B69r 3               
000B69r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000B69r 3               ; ## "char+"  auto  ANS core
000B69r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000B69r 3                       ;
000B69r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000B69r 3                       ; """
000B69r 3               
000B69r 3               
000B69r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000B69r 3               ; ## "chars"  auto  ANS core
000B69r 3                       ; """https://forth-standard.org/standard/core/CHARS
000B69r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000B69r 3                       ; machine, this does absolutely nothing and is included for
000B69r 3                       ; compatibility with other Forth versions
000B69r 3                       ; """
000B69r 3               
000B69r 3               xt_chars:
000B69r 3                               ; Checking for underflow seems a bit stupid because this
000B69r 3                               ; routine does nothing on this machine. However, the user
000B69r 3                               ; should be warned that there is something wrong with the
000B69r 3                               ; code if this occurs.
000B69r 3  20 rr rr                     jsr underflow_1
000B6Cr 3               
000B6Cr 3  60           z_chars:        rts
000B6Dr 3               
000B6Dr 3               
000B6Dr 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000B6Dr 3               ; ## "cleave"  auto  Tali Forth
000B6Dr 3               
000B6Dr 3                       ; """Given a range of memory with words delimited by whitespace,return
000B6Dr 3                       ; the first word at the top of the stack and the rest of the word
000B6Dr 3                       ; following it.
000B6Dr 3                       ;
000B6Dr 3                       ; Example:
000B6Dr 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000B6Dr 3                       ; s" w1" cleave        -> "" "w1"
000B6Dr 3                       ;
000B6Dr 3                       ; Since it will be used in loops a lot, we want it to work in pure
000B6Dr 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000B6Dr 3                       ; strip leading delimiters.
000B6Dr 3                       ; """
000B6Dr 3               
000B6Dr 3               xt_cleave:
000B6Dr 3  20 rr rr                     jsr underflow_2
000B70r 3               
000B70r 3                               ; We arrive here with ( addr u ). We need to strip any leading
000B70r 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000B70r 3                               ; remember how many spaces were stripped. This means we can't
000B70r 3                               ; calculate the length of the remainder. Fortunately, Tali
000B70r 3                               ; Forth has just the word we need for this:
000B70r 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000B73r 3               
000B73r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000B73r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000B73r 3                               ; We get around this by cheating: We place ( addr u ) in the
000B73r 3                               ; input buffer and then call PARSE-NAME.
000B73r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000B76r 3               
000B76r 3  B5 00                        lda 0,x         ; u is new ciblen
000B78r 3  85 rr                        sta ciblen
000B7Ar 3  B5 01                        lda 1,x
000B7Cr 3  85 rr                        sta ciblen+1
000B7Er 3               
000B7Er 3  B5 02                        lda 2,x         ; addr is new cib
000B80r 3  85 rr                        sta cib
000B82r 3  B5 03                        lda 3,x
000B84r 3  85 rr                        sta cib+1
000B86r 3               
000B86r 3  64 rr                        stz toin        ; >IN pointer is zero
000B88r 3  64 rr                        stz toin+1
000B8Ar 3               
000B8Ar 3                               ; PARSE-NAME gives us back the substring of the first word
000B8Ar 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000B8Dr 3               
000B8Dr 3                               ; If we were given an empty string, then we're done. It's the
000B8Dr 3                               ; resposibility of the user to catch this as a sign to end the
000B8Dr 3                               ; any loop
000B8Dr 3  B5 00                        lda 0,x
000B8Fr 3  15 01                        ora 1,x
000B91r 3  F0 23                        beq @done
000B93r 3               
000B93r 3                               ; Now we have to adjust the original string
000B93r 3  B5 04                        lda 4,x         ; LSB of original u
000B95r 3  38                           sec
000B96r 3  F5 00                        sbc 0,x
000B98r 3  95 04                        sta 4,x
000B9Ar 3               
000B9Ar 3  B5 05                        lda 5,x         ; MSB of original u
000B9Cr 3  F5 01                        sbc 1,x
000B9Er 3  95 05                        sta 5,x
000BA0r 3               
000BA0r 3  B5 06                        lda 6,x         ; LSB of original addr
000BA2r 3  18                           clc
000BA3r 3  75 00                        adc 0,x
000BA5r 3  95 06                        sta 6,x
000BA7r 3               
000BA7r 3  B5 07                        lda 7,x         ; MSB of original addr
000BA9r 3  75 01                        adc 1,x
000BABr 3  95 07                        sta 7,x
000BADr 3               
000BADr 3                               ; There is one small problem: PARSE-NAME will probably have
000BADr 3                               ; left the string with the rest of the words with leading
000BADr 3                               ; delimiters. We use our magic -LEADING again
000BADr 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000BB0r 3  20 rr rr                     jsr xt_minus_leading
000BB3r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000BB6r 3               @done:
000BB6r 3                               ; Restore input
000BB6r 3  20 rr rr                     jsr xt_r_to_input
000BB9r 3               
000BB9r 3  60           z_cleave:       rts
000BBAr 3               
000BBAr 3               
000BBAr 3               
000BBAr 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000BBAr 3               ; ## "cmove"  auto  ANS string
000BBAr 3                       ; """https://forth-standard.org/standard/string/CMOVE
000BBAr 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000BBAr 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000BBAr 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000BBAr 3                       ; "move left".
000BBAr 3                       ;
000BBAr 3                       ; There are no official tests for this word.
000BBAr 3                       ; """
000BBAr 3               
000BBAr 3               xt_cmove:
000BBAr 3  20 rr rr                     jsr underflow_3
000BBDr 3               
000BBDr 3                               ; move destination address to where we can work with it
000BBDr 3  B5 02                        lda 2,x
000BBFr 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000BC1r 3  B5 03                        lda 3,x
000BC3r 3  85 rr                        sta tmp2+1
000BC5r 3               
000BC5r 3                               ; move source address to where we can work with it
000BC5r 3  B5 04                        lda 4,x
000BC7r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000BC9r 3  B5 05                        lda 5,x
000BCBr 3  85 rr                        sta tmp1+1
000BCDr 3               
000BCDr 3  A0 00                        ldy #0
000BCFr 3  B5 01                        lda 1,x         ; number of whole pages to move
000BD1r 3  F0 0F                        beq @dopartial
000BD3r 3               
000BD3r 3               @page:
000BD3r 3  B1 rr                        lda (tmp1),y
000BD5r 3  91 rr                        sta (tmp2),y
000BD7r 3  C8                           iny
000BD8r 3  D0 F9                        bne @page
000BDAr 3               
000BDAr 3  E6 rr                        inc tmp1+1
000BDCr 3  E6 rr                        inc tmp2+1
000BDEr 3  D6 01                        dec 1,x
000BE0r 3  D0 F1                        bne @page
000BE2r 3               
000BE2r 3               @dopartial:
000BE2r 3  B5 00                        lda 0,x         ; length of last page
000BE4r 3  F0 09                        beq @done
000BE6r 3               
000BE6r 3               @partial:
000BE6r 3  B1 rr                        lda (tmp1),y
000BE8r 3  91 rr                        sta (tmp2),y
000BEAr 3  C8                           iny
000BEBr 3               
000BEBr 3  D6 00                        dec 0,x
000BEDr 3  D0 F7                        bne @partial
000BEFr 3               
000BEFr 3               @done:          ; clear the stack
000BEFr 3  8A                           txa
000BF0r 3  18                           clc
000BF1r 3  69 06                        adc #6
000BF3r 3  AA                           tax
000BF4r 3               
000BF4r 3  60           z_cmove:        rts
000BF5r 3               
000BF5r 3               
000BF5r 3               
000BF5r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000BF5r 3               ; ## "cmove>"  auto  ANS string
000BF5r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000BF5r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000BF5r 3                       ; Routines", p. 201, where it is called "move right".
000BF5r 3                       ;
000BF5r 3                       ; There are no official tests for this word.
000BF5r 3                       ; """
000BF5r 3               
000BF5r 3               xt_cmove_up:
000BF5r 3  20 rr rr                     jsr underflow_3
000BF8r 3               
000BF8r 3                               ; Move destination address to where we can work with it
000BF8r 3  B5 02                        lda 2,x
000BFAr 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000BFCr 3  B5 03                        lda 3,x
000BFEr 3  18                           clc
000BFFr 3  75 01                        adc 1,x
000C01r 3  85 rr                        sta tmp2+1      ; point to last page of destination
000C03r 3               
000C03r 3                               ; Move source address to where we can work with it
000C03r 3  B5 04                        lda 4,x
000C05r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000C07r 3  B5 05                        lda 5,x
000C09r 3  18                           clc
000C0Ar 3  75 01                        adc 1,x
000C0Cr 3  85 rr                        sta tmp1+1      ; point to last page of source
000C0Er 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000C10r 3               
000C10r 3                               ; Move the last partial page first
000C10r 3  B4 00                        ldy 0,x         ; length of last page
000C12r 3  F0 0E                        beq @nopartial
000C14r 3               
000C14r 3               @outerloop:
000C14r 3  88                           dey
000C15r 3  F0 07                        beq @finishpage
000C17r 3               
000C17r 3               @innerloop:
000C17r 3  B1 rr                        lda (tmp1),y
000C19r 3  91 rr                        sta (tmp2),y
000C1Br 3  88                           dey
000C1Cr 3  D0 F9                        bne @innerloop
000C1Er 3               
000C1Er 3               @finishpage:
000C1Er 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000C20r 3  92 rr                        sta (tmp2)
000C22r 3               
000C22r 3               @nopartial:
000C22r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000C24r 3  C6 rr                        dec tmp2+1
000C26r 3  D6 01                        dec 1,x
000C28r 3  D0 EA                        bne @outerloop
000C2Ar 3               @done:
000C2Ar 3                               ; clear up the stack and leave
000C2Ar 3  8A                           txa
000C2Br 3  18                           clc
000C2Cr 3  69 06                        adc #6
000C2Er 3  AA                           tax
000C2Fr 3               
000C2Fr 3  60           z_cmove_up:     rts
000C30r 3               
000C30r 3               
000C30r 3               
000C30r 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000C30r 3               ; ## ":"  auto  ANS core
000C30r 3                       ; """https://forth-standard.org/standard/core/Colon
000C30r 3                       ;
000C30r 3                       ; Use the CREATE routine and fill in the rest by hand.
000C30r 3                       ; """
000C30r 3               
000C30r 3               xt_colon:
000C30r 3                               ; If we're already in the compile state, complain
000C30r 3                               ; and quit
000C30r 3  A5 rr                        lda state
000C32r 3  05 rr                        ora state+1
000C34r 3  F0 05                        beq @1
000C36r 3               
000C36r 3  A9 07                        lda #err_state
000C38r 3  4C rr rr                     jmp error
000C3Br 3               @1:
000C3Br 3                               ; switch to compile state
000C3Br 3  C6 rr                        dec state
000C3Dr 3  C6 rr                        dec state+1
000C3Fr 3               
000C3Fr 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000C3Fr 3                               ; word
000C3Fr 3  A9 40                        lda #%01000000
000C41r 3  04 rr                        tsb status
000C43r 3               
000C43r 3                               ; CREATE is going to change the DP to point to the new word's
000C43r 3                               ; header. While this is fine for (say) variables, it would mean
000C43r 3                               ; that FIND-NAME etc would find a half-finished word when
000C43r 3                               ; looking in the Dictionary. To prevent this, we save the old
000C43r 3                               ; version of DP and restore it later. The new DP is placed in
000C43r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000C43r 3  20 rr rr                     jsr current_to_dp
000C46r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000C48r 3  48                           pha
000C49r 3  A5 rr                        lda dp
000C4Br 3  48                           pha
000C4Cr 3               
000C4Cr 3                               ; Tell create not to print warning for duplicate name.
000C4Cr 3  A9 80                        lda #%10000000
000C4Er 3  04 rr                        tsb status
000C50r 3               
000C50r 3  20 rr rr                     jsr xt_create
000C53r 3               
000C53r 3                               ; Get the nt (not the xt!) of the new word as described above.
000C53r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000C53r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000C56r 3  A5 rr                        lda dp
000C58r 3  85 rr                        sta workword
000C5Ar 3  A5 rr                        lda dp+1
000C5Cr 3  85 rr                        sta workword+1
000C5Er 3               
000C5Er 3                               ; Restore original DP
000C5Er 3  68                           pla
000C5Fr 3  85 rr                        sta dp
000C61r 3  68                           pla
000C62r 3  85 rr                        sta dp+1
000C64r 3  20 rr rr                     jsr dp_to_current
000C67r 3               
000C67r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000C67r 3                               ; back up three bytes and overwrite that.
000C67r 3  A5 rr                        lda cp
000C69r 3  38                           sec
000C6Ar 3  E9 03                        sbc #3
000C6Cr 3  85 rr                        sta cp
000C6Er 3  B0 02                        bcs @done
000C70r 3  C6 rr                        dec cp+1
000C72r 3               @done:
000C72r 3  60           z_colon:        rts
000C73r 3               
000C73r 3               
000C73r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000C73r 3               ; ## ":NONAME"  auto  ANS core
000C73r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000C73r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000C73r 3                       ; """
000C73r 3               
000C73r 3               xt_colon_noname:
000C73r 3                               ; If we're already in the compile state, complain
000C73r 3                               ; and quit
000C73r 3  A5 rr                        lda state
000C75r 3  05 rr                        ora state+1
000C77r 3  F0 05                        beq @1
000C79r 3               
000C79r 3  A9 07                        lda #err_state
000C7Br 3  4C rr rr                     jmp error
000C7Er 3               @1:
000C7Er 3                               ; switch to compile state
000C7Er 3  C6 rr                        dec state
000C80r 3  C6 rr                        dec state+1
000C82r 3               
000C82r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000C82r 3                               ; a :NONAME word.
000C82r 3  A9 40                        lda #%01000000
000C84r 3  14 rr                        trb status
000C86r 3               
000C86r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000C86r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000C86r 3                               ; nt and they will modify their behavior.
000C86r 3  A5 rr                        lda cp
000C88r 3  85 rr                        sta workword
000C8Ar 3  A5 rr                        lda cp+1
000C8Cr 3  85 rr                        sta workword+1
000C8Er 3               @done:
000C8Er 3  60           z_colon_noname:        rts
000C8Fr 3               
000C8Fr 3               
000C8Fr 3               
000C8Fr 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000C8Fr 3               ; ## ","  auto  ANS core
000C8Fr 3                       ; """https://forth-standard.org/standard/core/Comma
000C8Fr 3                       ; Store TOS at current place in memory.
000C8Fr 3                       ;
000C8Fr 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000C8Fr 3                       ; """
000C8Fr 3               
000C8Fr 3               xt_comma:
000C8Fr 3  20 rr rr                     jsr underflow_1
000C92r 3               
000C92r 3  B5 00                        lda 0,x
000C94r 3  92 rr                        sta (cp)
000C96r 3               
000C96r 3  E6 rr                        inc cp
000C98r 3  D0 02                        bne @1
000C9Ar 3  E6 rr                        inc cp+1
000C9Cr 3               @1:
000C9Cr 3  B5 01                        lda 1,x
000C9Er 3  92 rr                        sta (cp)
000CA0r 3               
000CA0r 3  E6 rr                        inc cp
000CA2r 3  D0 02                        bne @done
000CA4r 3  E6 rr                        inc cp+1
000CA6r 3               @done:
000CA6r 3  E8                           inx
000CA7r 3  E8                           inx
000CA8r 3               
000CA8r 3  60           z_comma:        rts
000CA9r 3               
000CA9r 3               
000CA9r 3               
000CA9r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000CA9r 3               ; ## "compare"   auto  ANS string
000CA9r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000CA9r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000CA9r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000CA9r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000CA9r 3                       ; that entirely matches the beginning of the other string, but is
000CA9r 3                       ; shorter, is considered less than the longer string.
000CA9r 3                       ; """
000CA9r 3               
000CA9r 3               xt_compare:
000CA9r 3  20 rr rr                     jsr underflow_4
000CACr 3               
000CACr 3                               ; Load the two string addresses into tmp1 and tmp2.
000CACr 3  B5 02                        lda 2,x
000CAEr 3  85 rr                        sta tmp2
000CB0r 3  B5 03                        lda 3,x
000CB2r 3  85 rr                        sta tmp2+1
000CB4r 3  B5 06                        lda 6,x
000CB6r 3  85 rr                        sta tmp1
000CB8r 3  B5 07                        lda 7,x
000CBAr 3  85 rr                        sta tmp1+1
000CBCr 3                               ; The counts will be used in-place on the stack.
000CBCr 3               
000CBCr 3               @compare_loop:
000CBCr 3                               ; Check to see if we are out of letters.
000CBCr 3               
000CBCr 3                               ; Check string1
000CBCr 3  B5 04                        lda 4,x
000CBEr 3  15 05                        ora 5,x
000CC0r 3  F0 2C                        beq @str1_done
000CC2r 3               
000CC2r 3                               ; Check string2
000CC2r 3  B5 00                        lda 0,x
000CC4r 3  15 01                        ora 1,x
000CC6r 3  F0 3A                        beq @greater    ; Str2 empty first
000CC8r 3               
000CC8r 3               @check_letter:
000CC8r 3                               ; Both strings have at least one letter left.
000CC8r 3                               ; Check the letters against each other.
000CC8r 3  B2 rr                        lda (tmp1)
000CCAr 3  D2 rr                        cmp (tmp2)
000CCCr 3  90 26                        bcc @less
000CCEr 3  D0 32                        bne @greater
000CD0r 3               @next_letter:
000CD0r 3                               ; Move both tmp pointers and decrement the counts
000CD0r 3                               ; on the stack.
000CD0r 3                               ; Increment tmp1
000CD0r 3  E6 rr                        inc tmp1
000CD2r 3  D0 02                        bne @1
000CD4r 3  E6 rr                        inc tmp1+1
000CD6r 3               @1:
000CD6r 3                               ; Increment tmp2
000CD6r 3  E6 rr                        inc tmp2
000CD8r 3  D0 02                        bne @2
000CDAr 3  E6 rr                        inc tmp2+1
000CDCr 3               @2:
000CDCr 3                               ; Decrement count1 on the stack.
000CDCr 3  B5 04                        lda 4,x
000CDEr 3  D0 02                        bne @3
000CE0r 3  D6 05                        dec 5,x
000CE2r 3               @3:
000CE2r 3  D6 04                        dec 4,x
000CE4r 3               
000CE4r 3                               ; Decrement count2 on the stack.
000CE4r 3  B5 00                        lda 0,x
000CE6r 3  D0 02                        bne @4
000CE8r 3  D6 01                        dec 1,x
000CEAr 3               @4:
000CEAr 3  D6 00                        dec 0,x
000CECr 3               
000CECr 3                               ; Loop around and check again.
000CECr 3  80 CE                        bra @compare_loop
000CEEr 3               
000CEEr 3               @str1_done:
000CEEr 3                               ; String 1 is out of letters. Check string 2.
000CEEr 3  B5 00                        lda 0,x
000CF0r 3  15 01                        ora 1,x
000CF2r 3  F0 08                        beq @equal      ; Both out of letters
000CF4r 3               
000CF4r 3                               ; Falls into less (str1 is out but str2 has more)
000CF4r 3               @less:
000CF4r 3                               ; Return -1
000CF4r 3  A9 FF                        lda #$FF
000CF6r 3  95 06                        sta 6,x
000CF8r 3  95 07                        sta 7,x
000CFAr 3  80 0C                        bra @done
000CFCr 3               @equal:
000CFCr 3                               ; Return 0
000CFCr 3  74 06                        stz 6,x
000CFEr 3  74 07                        stz 7,x
000D00r 3  80 06                        bra @done
000D02r 3               @greater:
000D02r 3                               ; Return 1
000D02r 3  A9 01                        lda #1
000D04r 3  95 06                        sta 6,x
000D06r 3  74 07                        stz 7,x
000D08r 3                               ; Falls into @done
000D08r 3               @done:
000D08r 3                               ; Remove all but the result from the stack.
000D08r 3  8A                           txa
000D09r 3  18                           clc
000D0Ar 3  69 06                        adc #6
000D0Cr 3  AA                           tax
000D0Dr 3               
000D0Dr 3  60           z_compare:      rts
000D0Er 3               
000D0Er 3               
000D0Er 3               
000D0Er 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000D0Er 3               ; ## "compile,"  auto  ANS core ext
000D0Er 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000D0Er 3                       ; Compile the given xt in the current word definition. It is an
000D0Er 3                       ; error if we are not in the compile state. Because we are using
000D0Er 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000D0Er 3                       ; the traditional way. By default, native compiled is allowed, unless
000D0Er 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000D0Er 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000D0Er 3                       ; is too large to be natively coded: If the size is larger than
000D0Er 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000D0Er 3                       ; Native) flag is set, the word is always natively compiled.
000D0Er 3                       ; """
000D0Er 3               
000D0Er 3               xt_compile_comma:
000D0Er 3  20 rr rr                     jsr underflow_1
000D11r 3               
000D11r 3                               ; See if this is an Always Native (AN) word by checking the
000D11r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000D11r 3                               ; the Return Stack
000D11r 3  B5 01                        lda 1,x                 ; MSB
000D13r 3  48                           pha
000D14r 3  B5 00                        lda 0,x
000D16r 3  48                           pha                     ; LSB
000D17r 3               
000D17r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000D1Ar 3               
000D1Ar 3                               ; See if this xt even has an nt.
000D1Ar 3  B5 00                        lda 0,x
000D1Cr 3  15 01                        ora 1,x
000D1Er 3  D0 03                        bne @check_nt
000D20r 3               
000D20r 3                               ; No nt in dictionary. Just compile as a JSR.
000D20r 3  4C rr rr                     jmp @compile_as_jump
000D23r 3               
000D23r 3               @check_nt:
000D23r 3                               ; put nt away for safe keeping
000D23r 3  B5 00                        lda 0,x
000D25r 3  85 rr                        sta tmptos
000D27r 3  B5 01                        lda 1,x
000D29r 3  85 rr                        sta tmptos+1
000D2Br 3               
000D2Br 3                               ; status byte is one further down
000D2Br 3  F6 00                        inc 0,x
000D2Dr 3  D0 02                        bne @1
000D2Fr 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000D31r 3               @1:
000D31r 3  A1 00                        lda (0,x)
000D33r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000D35r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000D37r 3  F0 0D                        beq @compile_check
000D39r 3               
000D39r 3                               ; We're natively compiling no matter what. Get length and
000D39r 3                               ; compile in code. Get the original nt back
000D39r 3  A5 rr                        lda tmptos
000D3Br 3  95 00                        sta 0,x
000D3Dr 3  A5 rr                        lda tmptos+1
000D3Fr 3  95 01                        sta 1,x
000D41r 3               
000D41r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000D44r 3               
000D44r 3  80 27                        bra @compile_as_code
000D46r 3               
000D46r 3               @compile_check:
000D46r 3                               ; See if Native Compile is even alowed by checking the NN
000D46r 3                               ; flag
000D46r 3  A5 rr                        lda tmp3
000D48r 3  29 08                        and #NN
000D4Ar 3  F0 03                        beq @check_size_limit
000D4Cr 3               
000D4Cr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000D4Fr 3               
000D4Fr 3               @check_size_limit:
000D4Fr 3                               ; Native compile is a legal option, but we need to see what
000D4Fr 3                               ; limit the user set for size (in nc_limit)
000D4Fr 3  A5 rr                        lda tmptos
000D51r 3  95 00                        sta 0,x
000D53r 3  A5 rr                        lda tmptos+1
000D55r 3  95 01                        sta 1,x
000D57r 3               
000D57r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000D5Ar 3               
000D5Ar 3                               ; Check the wordsize MSB against the user-defined limit.
000D5Ar 3  B5 01                        lda 1,x
000D5Cr 3  C5 rr                        cmp nc_limit+1
000D5Er 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000D60r 3  D0 08                        bne @jumpto_compile_as_jump
000D62r 3               
000D62r 3                               ; Check the wordsize LSB against the user-defined limit.
000D62r 3  B5 00                        lda 0,x
000D64r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000D66r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000D68r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000D6Ar 3               
000D6Ar 3               @jumpto_compile_as_jump:
000D6Ar 3                               ; If the wordsize is greater than the user-defined
000D6Ar 3                               ; limit, it will be compiled as a subroutine jump.
000D6Ar 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000D6Dr 3               
000D6Dr 3               @compile_as_code:
000D6Dr 3                               ; We arrive here with the length of the word's code TOS and
000D6Dr 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000D6Dr 3                               ; on the data stack
000D6Dr 3  CA                           dex
000D6Er 3  CA                           dex                     ; ( -- u ? )
000D6Fr 3  CA                           dex
000D70r 3  CA                           dex                     ; ( -- u ? ? )
000D71r 3               
000D71r 3  B5 04                        lda 4,x
000D73r 3  95 00                        sta 0,x                 ; LSB of u
000D75r 3  B5 05                        lda 5,x
000D77r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000D79r 3               
000D79r 3  68                           pla
000D7Ar 3  95 04                        sta 4,x                 ; LSB of xt
000D7Cr 3  68                           pla
000D7Dr 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000D7Fr 3               
000D7Fr 3  A5 rr                        lda cp                  ; LSB of cp
000D81r 3  95 02                        sta 2,x
000D83r 3  A5 rr                        lda cp+1
000D85r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000D87r 3               
000D87r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000D87r 3               
000D87r 3                               ; Native compiling allows us to strip the stack antics off
000D87r 3                               ; a number of words that use the Return Stack such as >R, R>,
000D87r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000D87r 3                               ; xt with the contents of the table
000D87r 3  A0 00                        ldy #0
000D89r 3               
000D89r 3               @strip_loop:
000D89r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000D8Cr 3  D5 04                        cmp 4,x                 ; LSB of xt
000D8Er 3  D0 07                        bne @next_entry
000D90r 3               
000D90r 3                               ; LSB is the same, test MSB
000D90r 3  B9 rr rr                     lda @strip_table+1,y
000D93r 3  D5 05                        cmp 5,x
000D95r 3  F0 0C                        beq @found_entry
000D97r 3               
000D97r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000D97r 3                               ; so we can use the next step for both cases
000D97r 3               @next_entry:
000D97r 3                               ; Not a word that needs stripping, so check next entry in table
000D97r 3                               ; Let's see if we're done with the table (marked by zero entry)
000D97r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000D9Ar 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000D9Dr 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000D9Fr 3               
000D9Fr 3  C8                           iny
000DA0r 3  C8                           iny
000DA1r 3  80 E6                        bra @strip_loop
000DA3r 3               @found_entry:
000DA3r 3                               ; This word is one of the ones that needs to have its size
000DA3r 3                               ; adjusted during native compile. We find the values in the
000DA3r 3                               ; next table with the same index, which is Y. However, Y is
000DA3r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000DA3r 3                               ; halve the index before we can use it.
000DA3r 3  98                           tya
000DA4r 3  4A                           lsr
000DA5r 3  A8                           tay
000DA6r 3               
000DA6r 3                               ; Get the adjustment out of the size table. We were clever
000DA6r 3                               ; enough to make sure the cut on both ends of the code is
000DA6r 3                               ; is the same size.
000DA6r 3  B9 rr rr                     lda @strip_size,y
000DA9r 3  85 rr                        sta tmptos              ; save a copy
000DABr 3               
000DABr 3                               ; Adjust xt: Start later
000DABr 3  18                           clc
000DACr 3  75 04                        adc 4,x
000DAEr 3  95 04                        sta 4,x
000DB0r 3  90 02                        bcc @2
000DB2r 3  F6 05                        inc 5,x                 ; we just care about the carry
000DB4r 3               @2:
000DB4r 3               
000DB4r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000DB4r 3                               ; bottom of the code, we have to double the value
000DB4r 3  06 rr                        asl tmptos
000DB6r 3               
000DB6r 3  38                           sec
000DB7r 3  B5 00                        lda 0,x
000DB9r 3  E5 rr                        sbc tmptos
000DBBr 3  95 00                        sta 0,x
000DBDr 3  B0 02                        bcs @3
000DBFr 3  D6 01                        dec 1,x                 ; we just care about the borrow
000DC1r 3               @3:
000DC1r 3                               ; drop through to underflow check stripping
000DC1r 3               
000DC1r 3               @underflow_strip:
000DC1r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000DC1r 3               
000DC1r 3                               ; The user can choose to remove the unterflow testing in those
000DC1r 3                               ; words that have the UF flag. This shortens the word by
000DC1r 3                               ; 3 bytes if there is no underflow.
000DC1r 3               
000DC1r 3                               ; See if the user wants underflow stripping turned on
000DC1r 3  A5 rr                        lda uf_strip
000DC3r 3  05 rr                        ora uf_strip+1
000DC5r 3  F0 1C                        beq @specials_done
000DC7r 3               
000DC7r 3                               ; See if this word even contains underflow checking
000DC7r 3  A5 rr                        lda tmp3
000DC9r 3  29 10                        and #UF
000DCBr 3  F0 16                        beq @specials_done
000DCDr 3               
000DCDr 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000DCDr 3                               ; long. Note hat PICK is a special case.
000DCDr 3               
000DCDr 3                               ; Adjust xt: Start later
000DCDr 3  18                           clc
000DCEr 3  B5 04                        lda 4,x
000DD0r 3  69 03                        adc #3
000DD2r 3  95 04                        sta 4,x
000DD4r 3  90 02                        bcc @4
000DD6r 3  F6 05                        inc 5,x                  ; we just care about the carry
000DD8r 3               @4:
000DD8r 3                               ; Adjust u: End earlier
000DD8r 3  38                           sec
000DD9r 3  B5 00                        lda 0,x
000DDBr 3  E9 03                        sbc #3
000DDDr 3  95 00                        sta 0,x
000DDFr 3  B0 02                        bcs @5
000DE1r 3  D6 01                        dec 1,x                  ; we just care about the borrow
000DE3r 3               @5:
000DE3r 3               
000DE3r 3                               ; --- END OF SPECIAL CASES ---
000DE3r 3               @specials_done:
000DE3r 3                               ; Store size of area to be copied for calculation of
000DE3r 3                               ; new CP. We have to do this after all of the special cases
000DE3r 3                               ; because they might change the size
000DE3r 3  B5 01                        lda 1,x                 ; MSB
000DE5r 3  48                           pha
000DE6r 3  B5 00                        lda 0,x                 ; LSB
000DE8r 3  48                           pha
000DE9r 3               
000DE9r 3                               ; Enough of this, let's move those bytes already! We have
000DE9r 3                               ; ( xt cp u ) on the stack at this point
000DE9r 3  20 rr rr                     jsr xt_move
000DECr 3               
000DECr 3                               ; Update CP
000DECr 3  18                           clc
000DEDr 3  68                           pla                     ; LSB
000DEEr 3  65 rr                        adc cp
000DF0r 3  85 rr                        sta cp
000DF2r 3               
000DF2r 3  68                           pla                     ; MSB
000DF3r 3  65 rr                        adc cp+1
000DF5r 3  85 rr                        sta cp+1
000DF7r 3               
000DF7r 3  80 2C                        bra @done
000DF9r 3               
000DF9r 3               @strip_table:
000DF9r 3                              ; List of words we strip the Return Stack antics from
000DF9r 3                              ; during native compile, zero terminated. The index here
000DF9r 3                              ; must be the same as for the sizes
000DF9r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000DFDr 3  rr rr        
000DFFr 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000E03r 3  00 00        
000E05r 3               
000E05r 3               @strip_size:
000E05r 3                               ; List of bytes to be stripped from the words that get their
000E05r 3                               ; Return Stack antics removed during native compile. Index must
000E05r 3                               ; be the same as for the xts. Zero terminated.
000E05r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000E09r 3  06 00        
000E0Br 3               
000E0Br 3               @compile_as_jump:
000E0Br 3                               ; Compile xt as a subroutine jump
000E0Br 3  A9 20                        lda #$20
000E0Dr 3  92 rr                        sta (cp)
000E0Fr 3               
000E0Fr 3  A0 01                        ldy #1
000E11r 3  68                           pla             ; LSB
000E12r 3  91 rr                        sta (cp),y
000E14r 3  C8                           iny
000E15r 3  68                           pla             ; MSB
000E16r 3  91 rr                        sta (cp),y
000E18r 3               
000E18r 3                               ; allot space we just used
000E18r 3  A9 03                        lda #3
000E1Ar 3  18                           clc
000E1Br 3  65 rr                        adc cp
000E1Dr 3  85 rr                        sta cp
000E1Fr 3  90 02                        bcc @6
000E21r 3  E6 rr                        inc cp+1
000E23r 3               @6:
000E23r 3  E8                           inx             ; drop xt
000E24r 3  E8                           inx
000E25r 3               @done:
000E25r 3               z_compile_comma:
000E25r 3  60                           rts
000E26r 3               
000E26r 3               
000E26r 3               
000E26r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000E26r 3               ; ## "compile-only"  tested  Tali Forth
000E26r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000E26r 3                       ; word.
000E26r 3                       ;
000E26r 3                       ; The alternative way to do this is to define a word
000E26r 3                       ; ?COMPILE that makes sure  we're in compile mode
000E26r 3                       ; """
000E26r 3               
000E26r 3               xt_compile_only:
000E26r 3  20 rr rr                     jsr current_to_dp
000E29r 3  A0 01                        ldy #1          ; offset for status byte
000E2Br 3  B1 rr                        lda (dp),y
000E2Dr 3  09 01                        ora #CO        ; make sure bit 7 is set
000E2Fr 3  91 rr                        sta (dp),y
000E31r 3               
000E31r 3  60           z_compile_only: rts
000E32r 3               
000E32r 3               
000E32r 3               
000E32r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000E32r 3               ; ## "constant"  auto  ANS core
000E32r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000E32r 3                       ;
000E32r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000E32r 3                       ; more in assembler and let CREATE do the heavy lifting.
000E32r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000E32r 3                       ; a primer on how this works in various Forths. This is the
000E32r 3                       ; same code as VALUE in our case.
000E32r 3                       ; """
000E32r 3               xt_value:
000E32r 3               xt_constant:
000E32r 3  20 rr rr                     jsr underflow_1
000E35r 3               
000E35r 3  20 rr rr                     jsr xt_create
000E38r 3               
000E38r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000E38r 3                               ; but we want DOCONST for constants. Go back two bytes and
000E38r 3                               ; replace the subroutine jump target
000E38r 3  38                           sec
000E39r 3  A5 rr                        lda cp
000E3Br 3  E9 02                        sbc #2
000E3Dr 3  85 rr                        sta tmp1
000E3Fr 3  A5 rr                        lda cp+1
000E41r 3  E9 00                        sbc #0
000E43r 3  85 rr                        sta tmp1+1
000E45r 3               
000E45r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000E47r 3  92 rr                        sta (tmp1)
000E49r 3  A0 01                        ldy #1
000E4Br 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000E4Dr 3  91 rr                        sta (tmp1),y
000E4Fr 3               
000E4Fr 3                               ; Now we save the constant number itself in the next cell
000E4Fr 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000E52r 3               
000E52r 3               adjust_z:
000E52r 3                               ; Now the length of the complete word (z_word) has increased by
000E52r 3                               ; two. We need to update that number or else words such as SEE
000E52r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000E52r 3                               ; VALUE and DEFER
000E52r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000E55r 3               
000E55r 3                               ; z_word is six bytes further down
000E55r 3  B5 00                        lda 0,x
000E57r 3  85 rr                        sta tmp1
000E59r 3  B5 01                        lda 1,x
000E5Br 3  85 rr                        sta tmp1+1
000E5Dr 3               
000E5Dr 3  A0 06                        ldy #6
000E5Fr 3  B1 rr                        lda (tmp1),y
000E61r 3  18                           clc
000E62r 3  69 02                        adc #2
000E64r 3  91 rr                        sta (tmp1),y
000E66r 3  C8                           iny
000E67r 3  B1 rr                        lda (tmp1),y
000E69r 3  69 00                        adc #0                  ; only need carry
000E6Br 3  91 rr                        sta (tmp1),y
000E6Dr 3               
000E6Dr 3  E8                           inx
000E6Er 3  E8                           inx
000E6Fr 3               
000E6Fr 3               z_value:
000E6Fr 3  60           z_constant:     rts
000E70r 3               
000E70r 3               
000E70r 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000E70r 3               ; ## "count"  auto  ANS core
000E70r 3                       ; """https://forth-standard.org/standard/core/COUNT
000E70r 3                       ; Convert old-style character string to address-length pair. Note
000E70r 3                       ; that the length of the string c-addr is stored in character length
000E70r 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000E70r 3                       ; though COUNT can also be used to step through a string character by
000E70r 3                       ; character.
000E70r 3                       ; """
000E70r 3               xt_count:
000E70r 3  20 rr rr                     jsr underflow_1
000E73r 3               
000E73r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000E75r 3  A8                           tay
000E76r 3               
000E76r 3                               ; move start address up by one
000E76r 3  F6 00                        inc 0,x         ; LSB
000E78r 3  D0 02                        bne @1
000E7Ar 3  F6 01                        inc 1,x         ; MSB
000E7Cr 3               
000E7Cr 3                               ; save number of characters to stack
000E7Cr 3               @1:
000E7Cr 3  98                           tya
000E7Dr 3  CA                           dex
000E7Er 3  CA                           dex
000E7Fr 3  95 00                        sta 0,x         ; LSB
000E81r 3  74 01                        stz 1,x         ; MSB, always zero
000E83r 3               
000E83r 3  60           z_count:        rts
000E84r 3               
000E84r 3               
000E84r 3               ; ## CR ( -- ) "Print a line feed"
000E84r 3               ; ## "cr"  auto  ANS core
000E84r 3                       ; """https://forth-standard.org/standard/core/CR"""
000E84r 3               xt_cr:
000E84r 3  A9 0A                        lda #AscLF
000E86r 3  20 rr rr                     jsr emit_a
000E89r 3  60           z_cr:           rts
000E8Ar 3               
000E8Ar 3               
000E8Ar 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000E8Ar 3               ; ## "create"  auto  ANS core
000E8Ar 3                       ; """https://forth-standard.org/standard/core/CREATE
000E8Ar 3                       ;
000E8Ar 3                       ; See the drawing in headers.asm for details on the header
000E8Ar 3                       ; """
000E8Ar 3               
000E8Ar 3               xt_create:
000E8Ar 3                               ; get string
000E8Ar 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000E8Dr 3               
000E8Dr 3                               ; if we were given an empty string, we complain and quit
000E8Dr 3  B5 00                        lda 0,x
000E8Fr 3  15 01                        ora 1,x
000E91r 3  D0 05                        bne @got_name
000E93r 3               
000E93r 3  A9 05                        lda #err_noname
000E95r 3  4C rr rr                     jmp error
000E98r 3               
000E98r 3               @got_name:
000E98r 3                               ; Enforce maximal length of string by overwriting the MSB of
000E98r 3                               ; the length. There is a possible error here: If the string
000E98r 3                               ; is exactly 255 chars long, then a lot of the following
000E98r 3                               ; additions will fail because of wrapping
000E98r 3  74 01                        stz 1,x
000E9Ar 3               
000E9Ar 3                               ; Check to see if this name already exists.
000E9Ar 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000E9Dr 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000EA0r 3               
000EA0r 3  B5 00                        lda 0,x
000EA2r 3  15 01                        ora 1,x
000EA4r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000EA6r 3               
000EA6r 3                               ; This name already exists.  See if we are supposed to print
000EA6r 3                               ; the message for it.
000EA6r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000EA7r 3  E8                           inx
000EA8r 3               
000EA8r 3                               ; Check bit 7
000EA8r 3  24 rr                        bit status
000EAAr 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000EACr 3               
000EACr 3                               ; We aren't supposed to print the redefined message ourselves,
000EACr 3                               ; but we should indicate that it is redefined (for ; to print
000EACr 3                               ; later).
000EACr 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000EAEr 3  05 rr                        ora status
000EB0r 3  85 rr                        sta status
000EB2r 3  80 18                        bra @process_name
000EB4r 3               
000EB4r 3               @redefined_name:
000EB4r 3                               ; Print the message that the name is redefined.
000EB4r 3  A9 02                        lda #str_redefined
000EB6r 3  20 rr rr                     jsr print_string_no_lf
000EB9r 3               
000EB9r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000EBCr 3  20 rr rr                     jsr xt_type
000EBFr 3  20 rr rr                     jsr xt_space
000EC2r 3               
000EC2r 3  80 08                        bra @process_name
000EC4r 3               
000EC4r 3               @new_name:
000EC4r 3  E8                           inx                     ; Drop flag (0) from find-name.
000EC5r 3  E8                           inx
000EC6r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000EC8r 3  25 rr                        and status
000ECAr 3  85 rr                        sta status
000ECCr 3               
000ECCr 3               @process_name:
000ECCr 3  B5 00                        lda 0,x
000ECEr 3  85 rr                        sta tmp2                ; store length of string in tmp2
000ED0r 3               
000ED0r 3                               ; remember the first free byte of memory as the start of
000ED0r 3                               ; the new word
000ED0r 3  A5 rr                        lda cp
000ED2r 3  85 rr                        sta tmp1
000ED4r 3  A5 rr                        lda cp+1
000ED6r 3  85 rr                        sta tmp1+1
000ED8r 3               
000ED8r 3                               ; We need 8 bytes plus the length of the string for our new header.
000ED8r 3                               ; This is also the offset for the start of the code field (the
000ED8r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000ED8r 3                               ; just allot the space afterwards
000ED8r 3  B5 00                        lda 0,x
000EDAr 3  18                           clc
000EDBr 3  69 08                        adc #8
000EDDr 3  85 rr                        sta tmp3                ; total header length
000EDFr 3               
000EDFr 3                               ; We need three more bytes for for the hardcoded code field
000EDFr 3                               ; area (CFA), the "payload" of the word which by default will
000EDFr 3                               ; be a subroutine jump to DOVAR
000EDFr 3  18                           clc
000EE0r 3  69 03                        adc #3
000EE2r 3               
000EE2r 3                               ; We overwrite the length of the string returned by PARSE-NAME
000EE2r 3                               ; and then call ALLOT
000EE2r 3  95 00                        sta 0,x
000EE4r 3  74 01                        stz 1,x         ; max header size is 255 chars
000EE6r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000EE9r 3               
000EE9r 3                               ; Get the CURRENT dictionary pointer.
000EE9r 3  20 rr rr                     jsr current_to_dp
000EECr 3               
000EECr 3                               ; Now we walk through the header with Y as the index, adding
000EECr 3                               ; information byte-by-byte
000EECr 3  A0 00                        ldy #0
000EEEr 3               
000EEEr 3                               ; HEADER BYTE 0: Length of string
000EEEr 3  A5 rr                        lda tmp2
000EF0r 3  91 rr                        sta (tmp1),y
000EF2r 3               
000EF2r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000EF2r 3                               ; to "never native", user will have to decide if they should
000EF2r 3                               ; be inlined
000EF2r 3  A9 08                        lda #NN
000EF4r 3               
000EF4r 3                               ; Also, words defined by CREATE are marked in the header has
000EF4r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000EF4r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000EF4r 3                               ; correctly with DOES> and CREATE. See the discussion at
000EF4r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000EF4r 3  09 20                        ora #HC
000EF6r 3  C8                           iny
000EF7r 3  91 rr                        sta (tmp1),y
000EF9r 3  C8                           iny
000EFAr 3               
000EFAr 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000EFAr 3                               ; in the Dictionary
000EFAr 3  A5 rr                        lda dp
000EFCr 3  91 rr                        sta (tmp1),y
000EFEr 3  C8                           iny
000EFFr 3  A5 rr                        lda dp+1
000F01r 3  91 rr                        sta (tmp1),y
000F03r 3  C8                           iny
000F04r 3               
000F04r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000F04r 3  A5 rr                        lda tmp1+1
000F06r 3  85 rr                        sta dp+1
000F08r 3  A5 rr                        lda tmp1
000F0Ar 3  85 rr                        sta dp
000F0Cr 3               
000F0Cr 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000F0Cr 3                               ; This begins after the header so we take the length of the
000F0Cr 3                               ; header, which we cleverly saved in tmp3, and use it as an
000F0Cr 3                               ; offset to the address of the start of the word. We come here
000F0Cr 3                               ; with tmp1 in A
000F0Cr 3  18                           clc
000F0Dr 3  65 rr                        adc tmp3        ; add total header length
000F0Fr 3  91 rr                        sta (tmp1),y
000F11r 3  48                           pha             ; we need this in the next step
000F12r 3  C8                           iny
000F13r 3               
000F13r 3  A5 rr                        lda tmp1+1
000F15r 3  69 00                        adc #0          ; only need the carry
000F17r 3  91 rr                        sta (tmp1),y
000F19r 3  C8                           iny
000F1Ar 3               
000F1Ar 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000F1Ar 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000F1Ar 3                               ; bytes down, and then one more byte so that the z_ label points
000F1Ar 3                               ; to the (still fictional) RTS instruction for correct compilation
000F1Ar 3  68                           pla             ; LSB of "z_" address
000F1Br 3  18                           clc
000F1Cr 3  69 03                        adc #3
000F1Er 3  91 rr                        sta (tmp1),y
000F20r 3               
000F20r 3  88                           dey             ; get the MSB of xt back
000F21r 3  B1 rr                        lda (tmp1),y
000F23r 3  69 00                        adc #0          ; only need the carry
000F25r 3  C8                           iny
000F26r 3  C8                           iny
000F27r 3  91 rr                        sta (tmp1),y
000F29r 3  C8                           iny
000F2Ar 3               
000F2Ar 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000F2Ar 3                               ; length in tmp2. We subtract 8 from the address so we can
000F2Ar 3                               ; use the same loop index, which is already 8 byte ahead at
000F2Ar 3                               ; this point
000F2Ar 3  B5 00                        lda 0,x
000F2Cr 3  38                           sec
000F2Dr 3  E9 08                        sbc #8
000F2Fr 3  85 rr                        sta tmptos
000F31r 3               
000F31r 3  B5 01                        lda 1,x
000F33r 3  E9 00                        sbc #0          ; only need carry
000F35r 3  85 rr                        sta tmptos+1
000F37r 3               
000F37r 3               @name_loop:
000F37r 3  B1 rr                        lda (tmptos),y
000F39r 3               
000F39r 3                               ; Make sure it goes into the dictionary in lower case.
000F39r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000F3Br 3  B0 07                        bcs @store_name
000F3Dr 3  C9 41                        cmp #$41        ; ASCII 'A'
000F3Fr 3  90 03                        bcc @store_name
000F41r 3               
000F41r 3                               ; An uppercase letter has been located. Make it
000F41r 3                               ; lowercase.
000F41r 3  18                           clc
000F42r 3  69 20                        adc #$20
000F44r 3               
000F44r 3                               ; Fall into @store_name.
000F44r 3               
000F44r 3               @store_name:
000F44r 3  91 rr                        sta (tmp1),y
000F46r 3  C8                           iny
000F47r 3  C6 rr                        dec tmp2
000F49r 3  D0 EC                        bne @name_loop
000F4Br 3               
000F4Br 3                               ; After thename string comes the code field, starting at the
000F4Br 3                               ; current xt of this word, which is initially a jump to the
000F4Br 3                               ; subroutine to DOVAR. We code this jump by hand
000F4Br 3  A9 20                        lda #$20        ; opcode of JSR
000F4Dr 3  91 rr                        sta (tmp1),y
000F4Fr 3  C8                           iny
000F50r 3  A9 rr                        lda #<dovar
000F52r 3  91 rr                        sta (tmp1),y
000F54r 3  C8                           iny
000F55r 3  A9 rr                        lda #>dovar
000F57r 3  91 rr                        sta (tmp1),y
000F59r 3               
000F59r 3                               ; Update the CURRENT wordlist with the new DP.
000F59r 3                               ; We do this down here because this routine uses Y.
000F59r 3  20 rr rr                     jsr dp_to_current
000F5Cr 3               
000F5Cr 3                               ; And we're done. Restore stack
000F5Cr 3  E8                           inx
000F5Dr 3  E8                           inx
000F5Er 3               
000F5Er 3  60           z_create:       rts
000F5Fr 3               
000F5Fr 3               
000F5Fr 3               
000F5Fr 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000F5Fr 3               ; ## "d-"  auto  ANS double
000F5Fr 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000F5Fr 3               
000F5Fr 3               xt_d_minus:
000F5Fr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000F62r 3               
000F62r 3  38                           sec
000F63r 3               
000F63r 3  B5 06                        lda 6,x         ; LSB of lower word
000F65r 3  F5 02                        sbc 2,x
000F67r 3  95 06                        sta 6,x
000F69r 3               
000F69r 3  B5 07                        lda 7,x         ; MSB of lower word
000F6Br 3  F5 03                        sbc 3,x
000F6Dr 3  95 07                        sta 7,x
000F6Fr 3               
000F6Fr 3  B5 04                        lda 4,x         ; LSB of upper word
000F71r 3  F5 00                        sbc 0,x
000F73r 3  95 04                        sta 4,x
000F75r 3               
000F75r 3  B5 05                        lda 5,x         ; MSB of upper word
000F77r 3  F5 01                        sbc 1,x
000F79r 3  95 05                        sta 5,x
000F7Br 3               
000F7Br 3  E8                           inx
000F7Cr 3  E8                           inx
000F7Dr 3  E8                           inx
000F7Er 3  E8                           inx
000F7Fr 3               
000F7Fr 3  60           z_d_minus:      rts
000F80r 3               
000F80r 3               
000F80r 3               
000F80r 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000F80r 3               ; ## "d+"  auto  ANS double
000F80r 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000F80r 3               
000F80r 3               xt_d_plus:
000F80r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000F83r 3               
000F83r 3  18                           clc
000F84r 3  B5 02                        lda 2,x         ; LSB of lower word
000F86r 3  75 06                        adc 6,x
000F88r 3  95 06                        sta 6,x
000F8Ar 3               
000F8Ar 3  B5 03                        lda 3,x         ; MSB of lower word
000F8Cr 3  75 07                        adc 7,x
000F8Er 3  95 07                        sta 7,x
000F90r 3               
000F90r 3  B5 00                        lda 0,x         ; LSB of upper word
000F92r 3  75 04                        adc 4,x
000F94r 3  95 04                        sta 4,x
000F96r 3               
000F96r 3  B5 01                        lda 1,x         ; MSB of upper word
000F98r 3  75 05                        adc 5,x
000F9Ar 3  95 05                        sta 5,x
000F9Cr 3               
000F9Cr 3  E8                           inx
000F9Dr 3  E8                           inx
000F9Er 3  E8                           inx
000F9Fr 3  E8                           inx
000FA0r 3               
000FA0r 3  60           z_d_plus:       rts
000FA1r 3               
000FA1r 3               
000FA1r 3               
000FA1r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000FA1r 3               ; ## "d>s"  auto  ANS double
000FA1r 3                       ; """https://forth-standard.org/standard/double/DtoS
000FA1r 3                       ; Though this is basically just DROP, we keep it
000FA1r 3                       ; separate so we can test for underflow
000FA1r 3                       ; """
000FA1r 3               
000FA1r 3               xt_d_to_s:
000FA1r 3  20 rr rr                     jsr underflow_2
000FA4r 3               
000FA4r 3  E8                           inx
000FA5r 3  E8                           inx
000FA6r 3               
000FA6r 3  60           z_d_to_s:       rts
000FA7r 3               
000FA7r 3               
000FA7r 3               
000FA7r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000FA7r 3               ; ## "dabs"  auto  ANS double
000FA7r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000FA7r 3               
000FA7r 3               xt_dabs:
000FA7r 3  20 rr rr                     jsr underflow_2 ; double number
000FAAr 3               
000FAAr 3  B5 01                        lda 1,x         ; MSB of high cell
000FACr 3  10 17                        bpl @done       ; positive, we get off light
000FAEr 3               
000FAEr 3                               ; negative, calculate 0 - d
000FAEr 3  A0 00                        ldy #0
000FB0r 3  38                           sec
000FB1r 3               
000FB1r 3  98                           tya
000FB2r 3  F5 02                        sbc 2,x         ; LSB of low cell
000FB4r 3  95 02                        sta 2,x
000FB6r 3               
000FB6r 3  98                           tya
000FB7r 3  F5 03                        sbc 3,x         ; MSB of low cell
000FB9r 3  95 03                        sta 3,x
000FBBr 3               
000FBBr 3  98                           tya
000FBCr 3  F5 00                        sbc 0,x         ; LSB of high cell
000FBEr 3  95 00                        sta 0,x
000FC0r 3               
000FC0r 3  98                           tya
000FC1r 3  F5 01                        sbc 1,x         ; MSB of high cell
000FC3r 3  95 01                        sta 1,x
000FC5r 3               @done:
000FC5r 3  60           z_dabs:         rts
000FC6r 3               
000FC6r 3               
000FC6r 3               
000FC6r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000FC6r 3               ; ## "decimal"  auto  ANS core
000FC6r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000FC6r 3               xt_decimal:
000FC6r 3  A9 0A                        lda #10
000FC8r 3  85 rr                        sta base
000FCAr 3  64 rr                        stz base+1              ; paranoid
000FCCr 3               
000FCCr 3  60           z_decimal:      rts
000FCDr 3               
000FCDr 3               
000FCDr 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000FCDr 3               ; ## "defer"  auto  ANS core ext
000FCDr 3                       ; """https://forth-standard.org/standard/core/DEFER
000FCDr 3                       ; Reserve an name that can be linked to various xt by IS.
000FCDr 3                       ;
000FCDr 3                       ; The ANS reference implementation is
000FCDr 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000FCDr 3                       ; But we use this routine as a low-level word so things go faster
000FCDr 3               
000FCDr 3               xt_defer:
000FCDr 3  20 rr rr                     jsr xt_create
000FD0r 3               
000FD0r 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000FD0r 3                               ; but we actually want DODEFER this time. Go back two
000FD0r 3                               ; bytes and repace the subroutine jump target
000FD0r 3  A5 rr                        lda cp          ; LSB
000FD2r 3  38                           sec
000FD3r 3  E9 02                        sbc #2
000FD5r 3  85 rr                        sta tmp1
000FD7r 3               
000FD7r 3  A5 rr                        lda cp+1        ; MSB
000FD9r 3  E9 00                        sbc #0          ; we only care about the borrow
000FDBr 3  85 rr                        sta tmp1+1
000FDDr 3               
000FDDr 3                               ; Save the target address
000FDDr 3  A0 00                        ldy #0
000FDFr 3  A9 rr                        lda #<dodefer   ; LSB
000FE1r 3  91 rr                        sta (tmp1),y
000FE3r 3  C8                           iny
000FE4r 3  A9 rr                        lda #>dodefer   ; MSB
000FE6r 3  91 rr                        sta (tmp1),y
000FE8r 3               
000FE8r 3               
000FE8r 3                               ; DODEFER executes the next address it finds after
000FE8r 3                               ; its call. As default, we include the error
000FE8r 3                               ; "Defer not defined"
000FE8r 3  A9 rr                        lda #<defer_error
000FEAr 3  92 rr                        sta (cp)
000FECr 3  E6 rr                        inc cp
000FEEr 3  D0 02                        bne @1
000FF0r 3  E6 rr                        inc cp+1
000FF2r 3               @1:
000FF2r 3  A9 rr                        lda #>defer_error
000FF4r 3  92 rr                        sta (cp)
000FF6r 3  E6 rr                        inc cp
000FF8r 3  D0 02                        bne @2
000FFAr 3  E6 rr                        inc cp+1
000FFCr 3               @2:
000FFCr 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000FFFr 3               
000FFFr 3  60           z_defer:        rts
001000r 3               
001000r 3               
001000r 3               
001000r 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
001000r 3               ; ## "defer@"  auto  ANS core ext
001000r 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
001000r 3               
001000r 3               xt_defer_fetch:
001000r 3                               ; No underflow checking as >BODY does it.
001000r 3  20 rr rr                     jsr xt_to_body
001003r 3  20 rr rr                     jsr xt_fetch
001006r 3  60           z_defer_fetch:  rts
001007r 3               
001007r 3               
001007r 3               
001007r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
001007r 3               ; ## "defer!"  auto  ANS core ext
001007r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
001007r 3               
001007r 3               xt_defer_store:
001007r 3                               ; No underflow checking as >BODY and ! do it.
001007r 3  20 rr rr                     jsr xt_to_body
00100Ar 3  20 rr rr                     jsr xt_store
00100Dr 3  60           z_defer_store:  rts
00100Er 3               
00100Er 3               
00100Er 3               
00100Er 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
00100Er 3               ; ## "definitions" auto ANS search
00100Er 3               xt_definitions:
00100Er 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
001010r 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
001012r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
001014r 3  91 rr                        sta (up),y
001016r 3  60           z_definitions:  rts
001017r 3               
001017r 3               
001017r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
001017r 3               ; ## "depth"  auto  ANS core
001017r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
001017r 3               xt_depth:
001017r 3  A9 rr                        lda #dsp0
001019r 3  86 rr                        stx tmpdsp
00101Br 3  38                           sec
00101Cr 3  E5 rr                        sbc tmpdsp
00101Er 3               
00101Er 3                               ; divide by two because each cell is two bytes
00101Er 3  4A                           lsr
00101Fr 3               
00101Fr 3  CA                           dex
001020r 3  CA                           dex
001021r 3  95 00                        sta 0,x
001023r 3  74 01                        stz 1,x
001025r 3               
001025r 3  60           z_depth:        rts
001026r 3               
001026r 3               
001026r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
001026r 3               ; ## "digit?"  auto  Tali Forth
001026r 3                       ; """Inspired by the pForth instruction DIGIT, see
001026r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001026r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
001026r 3                       ; pForth, we get the base (radix) ourselves instead of having the
001026r 3                       ; user provide it. There is no standard name for this routine, which
001026r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
001026r 3                       ; """
001026r 3               
001026r 3               xt_digit_question:
001026r 3  20 rr rr                     jsr underflow_1
001029r 3               
001029r 3                               ; one way or another, we're going to need room for the
001029r 3                               ; flag on the stack
001029r 3  CA                           dex
00102Ar 3  CA                           dex
00102Br 3  74 00                        stz 0,x                 ; default flag is failure
00102Dr 3  74 01                        stz 1,x
00102Fr 3  74 03                        stz 3,x                 ; paranoid
001031r 3               
001031r 3                               ; Check the character, now in the LSB of NOS. First, make
001031r 3                               ; sure we're not below the ASCII code for "0"
001031r 3  B5 02                        lda 2,x
001033r 3  C9 30                        cmp #'0'
001035r 3  90 23                        bcc @done               ; failure flag already set
001037r 3               
001037r 3                               ; Next, see if we are below "9", because that would make
001037r 3                               ; this a normal number
001037r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
001039r 3  90 12                        bcc @checkbase
00103Br 3               
00103Br 3                               ; Well, then let's see if this is the gap between "9" and "A"
00103Br 3                               ; so we can treat the whole range as a number
00103Br 3  C9 41                        cmp #'A'
00103Dr 3  90 1B                        bcc @done               ; failure flag is already set
00103Fr 3               
00103Fr 3                               ; probably a letter, so we make sure it is uppercase
00103Fr 3  C9 61                        cmp #'a'
001041r 3  90 07                        bcc @case_done          ; not lower case, too low
001043r 3  C9 7B                        cmp #'z'+1
001045r 3  B0 03                        bcs @case_done          ; not lower case, too high
001047r 3               
001047r 3  18                           clc                     ; just right
001048r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
00104Ar 3               
00104Ar 3               @case_done:
00104Ar 3                               ; get rid of the gap between "9" and "A" so we can treat
00104Ar 3                               ; the whole range as one number
00104Ar 3  38                           sec
00104Br 3  E9 07                        sbc #7                  ; fall through to @checkbase
00104Dr 3               
00104Dr 3               @checkbase:
00104Dr 3                               ; we have a number, now see if it falls inside the range
00104Dr 3                               ; provided by BASE
00104Dr 3  38                           sec
00104Er 3  E9 30                        sbc #'0'                 ; this is also the conversion step
001050r 3  C5 rr                        cmp base
001052r 3  B0 06                        bcs @done               ; already have false flag
001054r 3               
001054r 3                               ; Found a legal number
001054r 3  95 02                        sta 2,x                 ; put number in NOS
001056r 3  D6 00                        dec 0,x                 ; set success flag
001058r 3  D6 01                        dec 1,x
00105Ar 3               
00105Ar 3               @done:
00105Ar 3               z_digit_question:
00105Ar 3  60                           rts
00105Br 3               
00105Br 3               
00105Br 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
00105Br 3               ; ## "disasm"  tested  Tali Forth
00105Br 3                       ; """Convert a segment of memory to assembler output. This
00105Br 3                       ; word is vectored so people can add their own disassembler.
00105Br 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
00105Br 3                       ; code, see the section on The Disassembler in the manual and
00105Br 3                       ; the file disassembler.asm for more details.
00105Br 3                       ; """
00105Br 3               xt_disasm:
00105Br 3  20 rr rr                     jsr underflow_2
00105Er 3                           .ifdef disassembler
00105Er 3                               jsr disassembler
00105Er 3                           .endif
00105Er 3               
00105Er 3  60           z_disasm:       rts
00105Fr 3               
00105Fr 3               
00105Fr 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
00105Fr 3               ; ## "dnegate"  auto  ANS double
00105Fr 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
00105Fr 3               xt_dnegate:
00105Fr 3  20 rr rr                     jsr underflow_2 ; double number
001062r 3               
001062r 3  A0 00             		ldy #0
001064r 3  38                           sec
001065r 3               
001065r 3  98                           tya
001066r 3  F5 02                        sbc 2,x         ; LSB of low cell
001068r 3  95 02                        sta 2,x
00106Ar 3               
00106Ar 3  98                           tya
00106Br 3  F5 03                        sbc 3,x         ; MSB of low cell
00106Dr 3  95 03                        sta 3,x
00106Fr 3               
00106Fr 3  98                           tya
001070r 3  F5 00                        sbc 0,x         ; LSB of high cell
001072r 3  95 00                        sta 0,x
001074r 3               
001074r 3  98                           tya
001075r 3  F5 01                        sbc 1,x         ; MSB of high cell
001077r 3  95 01                        sta 1,x
001079r 3               
001079r 3  60           z_dnegate:      rts
00107Ar 3               
00107Ar 3               
00107Ar 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
00107Ar 3               ; ## "?do"  auto  ANS core ext
00107Ar 3                       ; """https://forth-standard.org/standard/core/qDO"""
00107Ar 3               xt_question_do:
00107Ar 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
00107Ar 3                               ; to mark which is which
00107Ar 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
00107Cr 3  85 rr                        sta tmp1
00107Er 3  80 02                        bra do_common           ; skip flag for DO
001080r 3               
001080r 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
001080r 3               ; ## "do"  auto  ANS core
001080r 3                       ; """https://forth-standard.org/standard/core/DO
001080r 3                       ;
001080r 3                       ; Compile-time part of DO. Could be realized in Forth as
001080r 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
001080r 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
001080r 3                       ; a routine that pushes the end address to the Return Stack at run
001080r 3                       ; time. This is based on a suggestion by Garth Wilson, see
001080r 3                       ; the Control Flow section of the manual for details.
001080r 3                       ;
001080r 3                       ; This may not be native compile. Don't check for a stack underflow
001080r 3                       ; """
001080r 3               
001080r 3               xt_do:
001080r 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
001080r 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
001082r 3               do_common:
001082r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
001082r 3                               ; compile the address we need to LDA at runtime
001082r 3  CA                           dex
001083r 3  CA                           dex
001084r 3  A5 rr                        lda cp
001086r 3  95 00                        sta 0,x                 ; LSB
001088r 3  A5 rr                        lda cp+1
00108Ar 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
00108Cr 3               
00108Cr 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
00108Cr 3                               ; replace by the actual LDA/PHA instructions
00108Cr 3  A9 05                        lda #5                  ; we don't really care about the value,
00108Er 3  A8                           tay                     ; so we use 5 to be tricky
00108Fr 3               @loop:
00108Fr 3  91 rr                        sta (cp),y
001091r 3  88                           dey
001092r 3  10 FB                        bpl @loop
001094r 3               
001094r 3                               ; update CP
001094r 3  1A                           inc             ; we used 5 as a dummy value, this is why
001095r 3  18                           clc
001096r 3  65 rr                        adc cp
001098r 3  85 rr                        sta cp
00109Ar 3  90 02                        bcc @1
00109Cr 3  E6 rr                        inc cp+1
00109Er 3               @1:
00109Er 3                               ; compile the (?DO) portion of ?DO if appropriate
00109Er 3  A5 rr                        lda tmp1
0010A0r 3  F0 17                        beq @compile_do
0010A2r 3               
0010A2r 3                               ; We came from ?DO, so compile its runtime first. We do
0010A2r 3                               ; this with a quick loop because we know it has to be
0010A2r 3                               ; Always Native anyway
0010A2r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
0010A4r 3  5A                           phy             ; save counter to calculate new CP
0010A5r 3               @2:
0010A5r 3  B9 rr rr                     lda question_do_runtime,y
0010A8r 3  91 rr                        sta (cp),y
0010AAr 3  88                           dey
0010ABr 3  10 F8                        bpl @2
0010ADr 3               
0010ADr 3                               ; adjust CP
0010ADr 3  68                           pla             ; retrieve counter
0010AEr 3  18                           clc
0010AFr 3  65 rr                        adc cp
0010B1r 3  85 rr                        sta cp
0010B3r 3  A5 rr                        lda cp+1
0010B5r 3  69 00                        adc #0          ; only care about carry
0010B7r 3  85 rr                        sta cp+1        ; fall through to @compile_do
0010B9r 3               
0010B9r 3               @compile_do:
0010B9r 3                               ; compile runtime part of DO.
0010B9r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
0010BBr 3  5A                           phy             ; save counter to calculate new CP
0010BCr 3               @3:
0010BCr 3  B9 rr rr                     lda do_runtime,y
0010BFr 3  91 rr                        sta (cp),y
0010C1r 3  88                           dey
0010C2r 3  10 F8                        bpl @3
0010C4r 3               
0010C4r 3                               ; adjust CP
0010C4r 3  68                           pla             ; retrieve counter
0010C5r 3  18                           clc
0010C6r 3  65 rr                        adc cp
0010C8r 3  85 rr                        sta cp
0010CAr 3  A5 rr                        lda cp+1
0010CCr 3  69 00                        adc #0          ; only care about carry
0010CEr 3  85 rr                        sta cp+1
0010D0r 3               
0010D0r 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
0010D0r 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
0010D0r 3                               ; do with the HERE we're saving for LEAVE
0010D0r 3  CA                           dex
0010D1r 3  CA                           dex
0010D2r 3  A5 rr                        lda cp          ; LSB
0010D4r 3  95 00                        sta 0,x
0010D6r 3  A5 rr                        lda cp+1        ; MSB
0010D8r 3  95 01                        sta 1,x
0010DAr 3               z_question_do:
0010DAr 3  60           z_do:           rts
0010DBr 3               
0010DBr 3               
0010DBr 3               do_runtime:
0010DBr 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
0010DBr 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
0010DBr 3                       ; the FIG Forth loop (you can see which version you have by running
0010DBr 3                       ; a loop with start and limit as the same value, for instance
0010DBr 3                       ; 0 0 DO -- these will walk through the number space). We use a
0010DBr 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
0010DBr 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
0010DBr 3                       ; for further discussion of this. The source given there for
0010DBr 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
0010DBr 3                       ; in some Forths. Usually, we would define this as a separate word
0010DBr 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
0010DBr 3                       ; However, we can do it faster if we just copy the bytes
0010DBr 3                       ; of this routine with a simple loop in DO.
0010DBr 3                       ; """
0010DBr 3                               ; First step: create fudge factor (FUFA) by subtracting the
0010DBr 3                               ; limit from $8000, the number that will trip the overflow
0010DBr 3                               ; flag
0010DBr 3  38                           sec
0010DCr 3  A9 00                        lda #0
0010DEr 3  F5 02                        sbc 2,x         ; LSB of limit
0010E0r 3  95 02                        sta 2,x         ; save FUFA for later use
0010E2r 3               
0010E2r 3  A9 80                        lda #$80
0010E4r 3  F5 03                        sbc 3,x         ; MSB of limit
0010E6r 3  95 03                        sta 3,x         ; save FUFA for later use
0010E8r 3  48                           pha             ; FUFA replaces limit on R stack
0010E9r 3  B5 02                        lda 2,x         ; LSB of limit
0010EBr 3  48                           pha
0010ECr 3               
0010ECr 3                               ; Second step: index is FUFA plus original index
0010ECr 3  18                           clc
0010EDr 3  B5 00                        lda 0,x         ; LSB of original index
0010EFr 3  75 02                        adc 2,x         ; add LSB of FUFA
0010F1r 3  95 00                        sta 0,x
0010F3r 3  B5 01                        lda 1,x         ; MSB of orginal index
0010F5r 3  75 03                        adc 3,x         ; add MSB of FUFA
0010F7r 3  48                           pha
0010F8r 3  B5 00                        lda 0,x         ; LSB of index
0010FAr 3  48                           pha
0010FBr 3               
0010FBr 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
0010FBr 3                               ; use it later. Clean the Data Stack
0010FBr 3  E8                           inx
0010FCr 3  E8                           inx
0010FDr 3  E8                           inx
0010FEr 3  E8                           inx             ; no RTS because this is copied into code
0010FFr 3               do_runtime_end:
0010FFr 3               
0010FFr 3               question_do_runtime:
0010FFr 3               
0010FFr 3                       ; """This is called (?DO) in some Forths. See the explanation at
0010FFr 3                       ; do_runtime for the background on this design
0010FFr 3                       ; """
0010FFr 3                               ; see if TOS and NOS are equal. Change this to assembler
0010FFr 3                               ; for speed
0010FFr 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
001102r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
001105r 3               
001105r 3  B5 00                        lda 0,x
001107r 3  15 01                        ora 1,x
001109r 3  F0 06                        beq @do_do
00110Br 3               
00110Br 3                               ; We're equal, so dump everything and jump beyond the loop.
00110Br 3                               ; But first, dump six entries off of the Data Stack
00110Br 3  8A                           txa
00110Cr 3  18                           clc
00110Dr 3  69 06                        adc #6
00110Fr 3  AA                           tax
001110r 3               
001110r 3                               ; Then abort the whole loop
001110r 3  60                           rts
001111r 3               @do_do:
001111r 3  E8                           inx             ; clear flag from EQUAL off stack
001112r 3  E8                           inx             ; no RTS because this is copied into code
001113r 3               question_do_runtime_end:
001113r 3               
001113r 3               
001113r 3               
001113r 3               ; ## DOES ( -- ) "Add payload when defining new words"
001113r 3               ; ## "does>"  auto  ANS core
001113r 3                       ; """https://forth-standard.org/standard/core/DOES
001113r 3                       ; Create the payload for defining new defining words. See
001113r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
001113r 3                       ; the Developer Guide in the manual for a discussion of
001113r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
001113r 3                       ; """
001113r 3               
001113r 3               xt_does:
001113r 3                               ; compile a subroutine jump to runtime of DOES>
001113r 3  A0 rr                        ldy #>does_runtime
001115r 3  A9 rr                        lda #<does_runtime
001117r 3  20 rr rr                     jsr cmpl_subroutine
00111Ar 3               
00111Ar 3                               ; compile a subroutine jump to DODOES. In traditional
00111Ar 3                               ; terms, this is the Code Field Area (CFA) of the new
00111Ar 3                               ; word
00111Ar 3  A0 rr                        ldy #>dodoes
00111Cr 3  A9 rr                        lda #<dodoes
00111Er 3  20 rr rr                     jsr cmpl_subroutine
001121r 3               
001121r 3  60           z_does:         rts
001122r 3               
001122r 3               
001122r 3               does_runtime:
001122r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
001122r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
001122r 3                       ; address that contains a subroutine jump to DODOES. We don't
001122r 3                       ; jump to DODOES directly because we need to work our magic with
001122r 3                       ; the return addresses. This routine is also known as "(DOES)" in
001122r 3                       ; other Forths
001122r 3                       ; """
001122r 3               
001122r 3  7A                           ply             ; LSB
001123r 3  68                           pla             ; MSB
001124r 3               
001124r 3  C8                           iny
001125r 3  D0 01                        bne @1
001127r 3  1A                           inc
001128r 3               @1:
001128r 3  84 rr                        sty tmp1
00112Ar 3  85 rr                        sta tmp1+1
00112Cr 3               
00112Cr 3                               ; CREATE has also already modified the DP to point to the new
00112Cr 3                               ; word. We have no idea which instructions followed the CREATE
00112Cr 3                               ; command if there is a DOES> so the CP could point anywhere
00112Cr 3                               ; by now. The address of the word's xt is four bytes down.
00112Cr 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
00112Fr 3  A5 rr                        lda dp
001131r 3  18                           clc
001132r 3  69 04                        adc #4
001134r 3  85 rr                        sta tmp2
001136r 3  A5 rr                        lda dp+1
001138r 3  69 00                        adc #0          ; we only care about the carry
00113Ar 3  85 rr                        sta tmp2+1
00113Cr 3               
00113Cr 3                               ; Now we get that address and add one byte to skip over the JSR
00113Cr 3                               ; opcode
00113Cr 3  B2 rr                        lda (tmp2)
00113Er 3  18                           clc
00113Fr 3  69 01                        adc #1
001141r 3  85 rr                        sta tmp3
001143r 3  A0 01                        ldy #1
001145r 3  B1 rr                        lda (tmp2),y
001147r 3  69 00                        adc #0          ; we only care about the carry
001149r 3  85 rr                        sta tmp3+1
00114Br 3               
00114Br 3                               ; Replace the DOVAR address with our own
00114Br 3  A5 rr                        lda tmp1        ; LSB
00114Dr 3  92 rr                        sta (tmp3)
00114Fr 3  A5 rr                        lda tmp1+1
001151r 3  91 rr                        sta (tmp3),y    ; Y is still 1
001153r 3               
001153r 3                               ; Since we removed the return address that brought us here, we
001153r 3                               ; go back to whatever the main routine was. Otherwise, we we
001153r 3                               ; smash into the subroutine jump to DODOES.
001153r 3  60                           rts
001154r 3               
001154r 3               
001154r 3               
001154r 3               ; ## DOT ( u -- ) "Print TOS"
001154r 3               ; ## "."  auto  ANS core
001154r 3                       ; """https://forth-standard.org/standard/core/d"""
001154r 3               
001154r 3               xt_dot:
001154r 3  20 rr rr                     jsr underflow_1
001157r 3               
001157r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
00115Ar 3  20 rr rr                     jsr xt_abs                      ; ( n u )
00115Dr 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
001160r 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
001163r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
001166r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
001169r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
00116Cr 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
00116Fr 3  20 rr rr                     jsr xt_type
001172r 3  20 rr rr                     jsr xt_space
001175r 3               
001175r 3  60           z_dot:          rts
001176r 3               
001176r 3               
001176r 3               
001176r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
001176r 3               ; ## ".("  auto  ANS core
001176r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
001176r 3               
001176r 3               xt_dot_paren:
001176r 3                               ; Put a right paren on the stack.
001176r 3  CA                           dex
001177r 3  CA                           dex
001178r 3  A9 29                        lda #41     ; Right parenthesis
00117Ar 3  95 00                        sta 0,x
00117Cr 3  74 01                        stz 1,x
00117Er 3               
00117Er 3  20 rr rr                     jsr xt_parse
001181r 3  20 rr rr                     jsr xt_type
001184r 3               
001184r 3  60           z_dot_paren:    rts
001185r 3               
001185r 3               
001185r 3               
001185r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
001185r 3               ; ## ".""  auto  ANS core ext
001185r 3                       ; """https://forth-standard.org/standard/core/Dotq
001185r 3                       ; Compile string that is printed during run time. ANS Forth wants
001185r 3                       ; this to be compile-only, even though everybody and their friend
001185r 3                       ; uses it for everything. We follow the book here, and recommend
001185r 3                       ; `.(` for general printing.
001185r 3                       ; """
001185r 3               
001185r 3               xt_dot_quote:
001185r 3                               ; we let S" do the heavy lifting. Since we're in
001185r 3                               ; compile mode, it will save the string and reproduce it
001185r 3                               ; during runtime
001185r 3  20 rr rr                     jsr xt_s_quote
001188r 3               
001188r 3                               ; We then let TYPE do the actual printing
001188r 3  A0 rr                        ldy #>xt_type
00118Ar 3  A9 rr                        lda #<xt_type
00118Cr 3  20 rr rr                     jsr cmpl_subroutine
00118Fr 3               
00118Fr 3  60           z_dot_quote:    rts
001190r 3               
001190r 3               
001190r 3               
001190r 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
001190r 3               ; ## ".r"  tested  ANS core ext
001190r 3                       ; """https://forth-standard.org/standard/core/DotR
001190r 3                       ;
001190r 3                       ; Based on the Forth code
001190r 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
001190r 3                       ; """
001190r 3               
001190r 3               xt_dot_r:
001190r 3  20 rr rr                     jsr underflow_2
001193r 3               
001193r 3  20 rr rr                     jsr xt_to_r
001196r 3  20 rr rr                     jsr xt_dup
001199r 3  20 rr rr                     jsr xt_abs
00119Cr 3  20 rr rr                     jsr xt_zero
00119Fr 3  20 rr rr                     jsr xt_less_number_sign
0011A2r 3  20 rr rr                     jsr xt_number_sign_s
0011A5r 3  20 rr rr                     jsr xt_rot
0011A8r 3  20 rr rr                     jsr xt_sign
0011ABr 3  20 rr rr                     jsr xt_number_sign_greater
0011AEr 3  20 rr rr                     jsr xt_r_from
0011B1r 3  20 rr rr                     jsr xt_over
0011B4r 3  20 rr rr                     jsr xt_minus
0011B7r 3  20 rr rr                     jsr xt_spaces
0011BAr 3  20 rr rr                     jsr xt_type
0011BDr 3               
0011BDr 3  60           z_dot_r:        rts
0011BEr 3               
0011BEr 3               
0011BEr 3               
0011BEr 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
0011BEr 3               ; ## ".s"  tested  ANS tools
0011BEr 3                       ; """https://forth-standard.org/standard/tools/DotS
0011BEr 3                       ; Print content of Data Stack non-distructively. We follow the format
0011BEr 3                       ; of Gforth and print the number of elements first in brackets,
0011BEr 3                       ; followed by the Data Stack content (if any).
0011BEr 3                       ;
0011BEr 3                       ; Since this is for humans, we don't have to worry about speed.
0011BEr 3                       ; """
0011BEr 3               
0011BEr 3               xt_dot_s:
0011BEr 3  20 rr rr                     jsr xt_depth    ; ( -- u )
0011C1r 3               
0011C1r 3                               ; Print stack depth in brackets
0011C1r 3  A9 3C                        lda #$3c        ; ASCII for "<"
0011C3r 3  20 rr rr                     jsr emit_a
0011C6r 3               
0011C6r 3                               ; We keep a copy of the number of the things on the stack
0011C6r 3                               ; to use as a counter later down. This assumes that there
0011C6r 3                               ; are less than 255 elements on the stack
0011C6r 3  B5 00                        lda 0,x
0011C8r 3  48                           pha
0011C9r 3               
0011C9r 3                               ; print unsigned number without the trailing space
0011C9r 3  CA                           dex             ; DUP
0011CAr 3  CA                           dex
0011CBr 3  95 00                        sta 0,x
0011CDr 3  74 01                        stz 1,x
0011CFr 3               
0011CFr 3  20 rr rr                     jsr print_u
0011D2r 3               
0011D2r 3  A9 3E                        lda #$3e        ; ASCII for ">"
0011D4r 3  20 rr rr                     jsr emit_a
0011D7r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
0011D9r 3  20 rr rr                     jsr emit_a
0011DCr 3               
0011DCr 3  E8                           inx
0011DDr 3  E8                           inx
0011DEr 3               
0011DEr 3                               ; There will be lots of cases where the stack is empty. If that
0011DEr 3                               ; is so, get out of here quickly
0011DEr 3  E0 rr                        cpx #dsp0
0011E0r 3  F0 1E                        beq @done
0011E2r 3               
0011E2r 3               @have_stack:
0011E2r 3                               ; We have at least one element on the stack. The depth of the
0011E2r 3                               ; stack is on the stack, we can use it as a counter. We go
0011E2r 3                               ; from bottom to top
0011E2r 3  7A                           ply
0011E3r 3               
0011E3r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
0011E5r 3  85 rr                        sta tmp3
0011E7r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
0011E9r 3               @loop:
0011E9r 3  CA                           dex
0011EAr 3  CA                           dex
0011EBr 3               
0011EBr 3  B2 rr                        lda (tmp3)
0011EDr 3  95 01                        sta 1,x
0011EFr 3  C6 rr                        dec tmp3
0011F1r 3               
0011F1r 3  B2 rr                        lda (tmp3)
0011F3r 3  95 00                        sta 0,x
0011F5r 3  C6 rr                        dec tmp3
0011F7r 3  5A                           phy
0011F8r 3               
0011F8r 3  20 rr rr                     jsr xt_dot
0011FBr 3               
0011FBr 3  7A                           ply
0011FCr 3  88                           dey
0011FDr 3  D0 EA                        bne @loop
0011FFr 3               
0011FFr 3  48                           pha             ; dummy to balance stack
001200r 3               @done:
001200r 3  68                           pla
001201r 3  60           z_dot_s:        rts
001202r 3               
001202r 3               
001202r 3               
001202r 3               ; ## D_DOT ( d -- ) "Print double"
001202r 3               ; ## "d."  tested  ANS double
001202r 3                       ; """http://forth-standard.org/standard/double/Dd"""
001202r 3                       ;
001202r 3                       ; From the Forth code:
001202r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
001202r 3                       ; """
001202r 3               
001202r 3               xt_d_dot:
001202r 3  20 rr rr                     jsr underflow_2
001205r 3               
001205r 3  20 rr rr                     jsr xt_tuck
001208r 3  20 rr rr                     jsr xt_dabs
00120Br 3  20 rr rr                     jsr xt_less_number_sign
00120Er 3  20 rr rr                     jsr xt_number_sign_s
001211r 3  20 rr rr                     jsr xt_rot
001214r 3  20 rr rr                     jsr xt_sign
001217r 3  20 rr rr                     jsr xt_number_sign_greater
00121Ar 3  20 rr rr                     jsr xt_type
00121Dr 3  20 rr rr                     jsr xt_space
001220r 3               
001220r 3  60           z_d_dot:        rts
001221r 3               
001221r 3               
001221r 3               
001221r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
001221r 3               ; ## "d.r"  tested  ANS double
001221r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
001221r 3                       ; Based on the Forth code
001221r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
001221r 3                       ; """
001221r 3               
001221r 3               xt_d_dot_r:
001221r 3  20 rr rr                     jsr underflow_3
001224r 3                               ; From the forth code:
001224r 3  20 rr rr                     jsr xt_to_r
001227r 3  20 rr rr                     jsr xt_tuck
00122Ar 3  20 rr rr                     jsr xt_dabs
00122Dr 3  20 rr rr                     jsr xt_less_number_sign
001230r 3  20 rr rr                     jsr xt_number_sign_s
001233r 3  20 rr rr                     jsr xt_rot
001236r 3  20 rr rr                     jsr xt_sign
001239r 3  20 rr rr                     jsr xt_number_sign_greater
00123Cr 3  20 rr rr                     jsr xt_r_from
00123Fr 3  20 rr rr                     jsr xt_over
001242r 3  20 rr rr                     jsr xt_minus
001245r 3  20 rr rr                     jsr xt_spaces
001248r 3  20 rr rr                     jsr xt_type
00124Br 3               
00124Br 3  60           z_d_dot_r:      rts
00124Cr 3               
00124Cr 3               
00124Cr 3               
00124Cr 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
00124Cr 3               ; ## "drop"  auto  ANS core
00124Cr 3                       ; """https://forth-standard.org/standard/core/DROP"""
00124Cr 3               xt_drop:
00124Cr 3  20 rr rr                     jsr underflow_1
00124Fr 3               
00124Fr 3  E8                           inx
001250r 3  E8                           inx
001251r 3               
001251r 3  60           z_drop:         rts
001252r 3               
001252r 3               
001252r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
001252r 3               ; ## "dump"  tested  ANS tools
001252r 3                       ; """https://forth-standard.org/standard/tools/DUMP
001252r 3                       ;
001252r 3                       ; DUMP's exact output is defined as "implementation dependent".
001252r 3                       ; This is in assembler because it is
001252r 3                       ; useful for testing and development, so we want to have it work
001252r 3                       ; as soon as possible. Uses TMP2
001252r 3                       ; """
001252r 3               
001252r 3               xt_dump:
001252r 3  20 rr rr                     jsr underflow_2
001255r 3               @row:
001255r 3                               ; start counter for 16 numbers per row
001255r 3  A0 10                        ldy #16
001257r 3               
001257r 3                               ; We use TMP2 as the index for the ASCII characters
001257r 3                               ; that we print at the and of the hex block. We
001257r 3                               ; start saving them at HERE (CP)
001257r 3  64 rr                        stz tmp2
001259r 3               
001259r 3  20 rr rr                     jsr xt_cr
00125Cr 3               
00125Cr 3                               ; print address number
00125Cr 3  B5 03                        lda 3,x
00125Er 3  20 rr rr                     jsr byte_to_ascii
001261r 3  B5 02                        lda 2,x
001263r 3  20 rr rr                     jsr byte_to_ascii
001266r 3               
001266r 3  20 rr rr                     jsr xt_space
001269r 3  20 rr rr                     jsr xt_space
00126Cr 3               @loop:
00126Cr 3                               ; if there are zero bytes left to display, we're done
00126Cr 3  B5 00                        lda 0,x
00126Er 3  15 01                        ora 1,x
001270r 3  F0 39                        beq @all_printed
001272r 3               
001272r 3                               ; dump the contents
001272r 3  A1 02                        lda (2,x)
001274r 3  48                           pha                     ; byte_to_ascii destroys A
001275r 3  20 rr rr                     jsr byte_to_ascii
001278r 3  20 rr rr                     jsr xt_space
00127Br 3  68                           pla
00127Cr 3               
00127Cr 3                               ; Handle ASCII printing
00127Cr 3  20 rr rr                     jsr is_printable
00127Fr 3  B0 02                        bcs @printable
001281r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
001283r 3               @printable:
001283r 3  5A                           phy                     ; save counter
001284r 3  A4 rr                        ldy tmp2
001286r 3  91 rr                        sta (cp),y
001288r 3  E6 rr                        inc tmp2
00128Ar 3  7A                           ply
00128Br 3               
00128Br 3                               ; extra space after eight bytes
00128Br 3  C0 09                        cpy #9
00128Dr 3  D0 03                        bne @next_char
00128Fr 3  20 rr rr                     jsr xt_space
001292r 3               
001292r 3               @next_char:
001292r 3  F6 02                        inc 2,x
001294r 3  D0 02                        bne @counter
001296r 3  F6 03                        inc 3,x
001298r 3               
001298r 3               @counter:
001298r 3                               ; loop counter
001298r 3  B5 00                        lda 0,x
00129Ar 3  D0 02                        bne @1
00129Cr 3  D6 01                        dec 1,x
00129Er 3               @1:
00129Er 3  D6 00                        dec 0,x
0012A0r 3  88                           dey
0012A1r 3  D0 C9                        bne @loop               ; next byte
0012A3r 3               
0012A3r 3                               ; Done with one line, print the ASCII version of these
0012A3r 3                               ; characters
0012A3r 3  20 rr rr                     jsr xt_space
0012A6r 3  20 rr rr                     jsr print_ascii
0012A9r 3               
0012A9r 3  80 AA                        bra @row                ; new row
0012ABr 3               
0012ABr 3               @all_printed:
0012ABr 3                               ; See if there are any ASCII characters in the buffer
0012ABr 3                               ; left to print
0012ABr 3  A5 rr                        lda tmp2
0012ADr 3  F0 06                        beq @done
0012AFr 3               
0012AFr 3                               ; In theory, we could try to make the ASCII part line
0012AFr 3                               ; up with the line before it. But that is a hassle (we
0012AFr 3                               ; use three bytes for each missed hex entry, and
0012AFr 3                               ; then there is the gap after eight entries) and it
0012AFr 3                               ; makes it harder to read. We settle for one extra
0012AFr 3                               ; space instead for the moment
0012AFr 3  20 rr rr                     jsr xt_space
0012B2r 3  20 rr rr                     jsr print_ascii
0012B5r 3               @done:
0012B5r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
0012B8r 3  60           z_dump:         rts
0012B9r 3               
0012B9r 3               
0012B9r 3               print_ascii:
0012B9r 3                               ; Print the ASCII characters that we have saved from
0012B9r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
0012B9r 3                               ; is not compiled (DUMP is probably never compiled anyway)
0012B9r 3                               ; but we keep it inside the scope of DUMP.
0012B9r 3  A0 00                        ldy #0
0012BBr 3               @ascii_loop:
0012BBr 3  B1 rr                        lda (cp),y
0012BDr 3  20 rr rr                     jsr emit_a
0012C0r 3  C8                           iny
0012C1r 3               
0012C1r 3                               ; extra space after eight chars
0012C1r 3  C0 08                        cpy #8
0012C3r 3  D0 03                        bne @1
0012C5r 3  20 rr rr                     jsr xt_space
0012C8r 3               @1:
0012C8r 3  C6 rr                        dec tmp2
0012CAr 3  D0 EF                        bne @ascii_loop
0012CCr 3               
0012CCr 3  60                           rts
0012CDr 3               
0012CDr 3               
0012CDr 3               
0012CDr 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
0012CDr 3               ; ## "dup"  auto  ANS core
0012CDr 3                       ; """https://forth-standard.org/standard/core/DUP"""
0012CDr 3               xt_dup:
0012CDr 3  20 rr rr                     jsr underflow_1
0012D0r 3               
0012D0r 3  CA                           dex
0012D1r 3  CA                           dex
0012D2r 3               
0012D2r 3  B5 02                        lda 2,x         ; LSB
0012D4r 3  95 00                        sta 0,x
0012D6r 3  B5 03                        lda 3,x         ; MSB
0012D8r 3  95 01                        sta 1,x
0012DAr 3               
0012DAr 3  60           z_dup:          rts
0012DBr 3               
0012DBr 3               
0012DBr 3               ; ## ED ( -- u ) "Line-based editor"
0012DBr 3               ; ## "ed"  fragment  Tali Forth
0012DBr 3                       ; """Start the line-based editor ed6502. See separate file
0012DBr 3                       ; ed.asm or the manual for details.
0012DBr 3                       ; """
0012DBr 3               xt_ed:
0012DBr 3                           .ifdef ed6502
0012DBr 3                               jsr ed6502      ; kept in separate file
0012DBr 3                           .endif
0012DBr 3               
0012DBr 3  60           z_ed:           rts
0012DCr 3               
0012DCr 3               
0012DCr 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
0012DCr 3               ; ## "editor-wordlist"  tested  Tali Editor
0012DCr 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
0012DCr 3                       ; words to the search order so they can be used.  This will need
0012DCr 3                       ; to be done before any of the words marked "Tali Editor" can be
0012DCr 3                       ; used.  See the tutorial on Wordlists and the Search Order for
0012DCr 3                       ; more information.
0012DCr 3               
0012DCr 3                       ;
0012DCr 3                       ; This is a dummy entry, the code is shared with ONE
0012DCr 3                       ; """
0012DCr 3               
0012DCr 3               
0012DCr 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
0012DCr 3               ; ## "else"  auto  ANS core
0012DCr 3                       ; """http://forth-standard.org/standard/core/ELSE
0012DCr 3                       ;
0012DCr 3                       ; The code is shared with ENDOF
0012DCr 3                       ; """
0012DCr 3               
0012DCr 3               xt_else:
0012DCr 3               xt_endof:
0012DCr 3                               ; Put an unconditional branch.
0012DCr 3  A0 rr                        ldy #>branch_runtime
0012DEr 3  A9 rr                        lda #<branch_runtime
0012E0r 3  20 rr rr                     jsr cmpl_subroutine
0012E3r 3               
0012E3r 3                               ; Put the address of the branch address on the stack.
0012E3r 3  20 rr rr                     jsr xt_here
0012E6r 3               
0012E6r 3                               ; Use zero for the branch address for now.
0012E6r 3                               ; THEN will fill it in later.
0012E6r 3  20 rr rr                     jsr xt_zero
0012E9r 3  20 rr rr                     jsr xt_comma
0012ECr 3               
0012ECr 3                               ; Get the address to jump to (just after the
0012ECr 3                               ; unconditional branch) for the IF to jump to
0012ECr 3                               ; when false.
0012ECr 3  20 rr rr                     jsr xt_here
0012EFr 3  20 rr rr                     jsr xt_rot
0012F2r 3               
0012F2r 3                               ; Update the original if 0branch address.
0012F2r 3  20 rr rr                     jsr xt_store
0012F5r 3               z_else:
0012F5r 3               z_endof:
0012F5r 3  60                           rts
0012F6r 3               
0012F6r 3               
0012F6r 3               
0012F6r 3               branch_runtime:
0012F6r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
0012F6r 3                       ; formally part of a separate word BRANCH which was later removed.
0012F6r 3                       ; """
0012F6r 3               
0012F6r 3                               ; The address on the Return Stack points to the last byte
0012F6r 3                               ; of the JSR address, one byte below the branch literal
0012F6r 3  68                           pla
0012F7r 3  85 rr                        sta tmpbranch
0012F9r 3  68                           pla
0012FAr 3  85 rr                        sta tmpbranch+1
0012FCr 3               
0012FCr 3                               ; Keep in mind: the address we just popped points one byte
0012FCr 3                               ; lower than the branch literal we want to grab
0012FCr 3  A0 01                        ldy #1
0012FEr 3  B1 rr                        lda (tmpbranch),y  ; LSB
001300r 3  85 rr                        sta tmp1
001302r 3  C8                           iny
001303r 3  B1 rr                        lda (tmpbranch),y  ; MSB
001305r 3  85 rr                        sta tmp1+1
001307r 3               
001307r 3  6C rr rr                     jmp (tmp1)
00130Ar 3               
00130Ar 3               
00130Ar 3               
00130Ar 3               ; ## EMIT ( char -- ) "Print character to current output"
00130Ar 3               ; ## "emit"  auto  ANS core
00130Ar 3                       ; """https://forth-standard.org/standard/core/EMIT
00130Ar 3                       ; Run-time default for EMIT. The user can revector this by changing
00130Ar 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
00130Ar 3                       ; do not check to see if we have been given a valid ASCII character.
00130Ar 3                       ; Don't make this native compile.
00130Ar 3                       ; """
00130Ar 3               
00130Ar 3               xt_emit:
00130Ar 3  20 rr rr                     jsr underflow_1
00130Dr 3               
00130Dr 3  B5 00                        lda 0,x
00130Fr 3  E8                           inx
001310r 3  E8                           inx
001311r 3               
001311r 3               emit_a:
001311r 3                       ; We frequently want to print the character in A without fooling
001311r 3                       ; around with the Data Stack. This is emit_a's job, which still
001311r 3                       ; allows the output to be vectored. Call it with JSR as you
001311r 3                       ; would XT_EMIT
001311r 3  6C rr rr                     jmp (output)            ; JSR/RTS
001314r 3               
001314r 3               z_emit:         ; never reached
001314r 3               
001314r 3               
001314r 3               
001314r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
001314r 3               ; ## "empty-buffers"  tested  ANS block ext
001314r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
001314r 3               xt_empty_buffers:
001314r 3                               ; Set the buffer status to empty.
001314r 3  A0 2C                        ldy #buffstatus_offset
001316r 3  A9 00                        lda #0
001318r 3  91 rr                        sta (up),y      ; Only LSB is used.
00131Ar 3               z_empty_buffers:
00131Ar 3  60                           rts
00131Br 3               
00131Br 3               
00131Br 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
00131Br 3               ; ## "endcase"  auto  ANS core ext
00131Br 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
00131Br 3               
00131Br 3               xt_endcase:
00131Br 3                               ; Postpone DROP to remove the item
00131Br 3                               ; being checked.
00131Br 3  A0 rr                        ldy #>xt_drop
00131Dr 3  A9 rr                        lda #<xt_drop
00131Fr 3  20 rr rr                     jsr cmpl_subroutine
001322r 3               
001322r 3                               ; There are a number of address (of branches that need their
001322r 3                               ; jump addressed filled in with the address of right here).
001322r 3                               ; Keep calling THEN to deal with them until we reach the
001322r 3                               ; 0 that CASE put on the stack at the beginning.
001322r 3               @endcase_loop:
001322r 3                               ; Check for 0 on the stack.
001322r 3  B5 00                        lda 0,x
001324r 3  15 01                        ora 1,x
001326r 3  F0 05                        beq @done
001328r 3               
001328r 3  20 rr rr                     jsr xt_then
00132Br 3  80 F5                        bra @endcase_loop
00132Dr 3               @done:
00132Dr 3                               ; Remove the 0 from the stack.
00132Dr 3  E8                           inx
00132Er 3  E8                           inx
00132Fr 3  60           z_endcase:      rts
001330r 3               
001330r 3               
001330r 3               
001330r 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
001330r 3               ; ## "endof"  auto  ANS core ext
001330r 3                       ; """http://forth-standard.org/standard/core/ENDOF
001330r 3                       ; This is a dummy entry, the code is shared with ELSE
001330r 3                       ; """
001330r 3               
001330r 3               
001330r 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
001330r 3               ; ## "environment?"  auto  ANS core
001330r 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
001330r 3                       ;
001330r 3                       ; By ANS definition, we use upper-case strings here, see the
001330r 3                       ; string file for details. This can be realized as a high-level
001330r 3                       ; Forth word as
001330r 3                       ;
001330r 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
001330r 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
001330r 3                       ; HEX
001330r 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
001330r 3                       ; CASE
001330r 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
001330r 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
001330r 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
001330r 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
001330r 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
001330r 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
001330r 3                       ; S" MAX-D"              STRING_OF
001330r 3                                                    ; 7FFFFFFF. TRUE ENDOF
001330r 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
001330r 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
001330r 3                       ; S" MAX-UD"             STRING_OF
001330r 3                                                    ; FFFFFFFF. TRUE ENDOF
001330r 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
001330r 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
001330r 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
001330r 3                       ; ENDCASE ;
001330r 3                       ;
001330r 3                       ; but that uses lots of memory and increases the start up time. This
001330r 3                       ; word is rarely used so we can try to keep it short at the expense
001330r 3                       ; of speed.
001330r 3                       ; """
001330r 3               
001330r 3               xt_environment_q:
001330r 3  20 rr rr                     jsr underflow_1
001333r 3               
001333r 3                               ; This code is table-driven: We walk through the list of
001333r 3                               ; strings until we find one that matches, and then we take
001333r 3                               ; the equivalent data from the results table. This is made
001333r 3                               ; a bit harder by the fact that some of these return a
001333r 3                               ; double-cell number and some a single-cell one.
001333r 3               
001333r 3                               ; We will walk through the table with variables that return
001333r 3                               ; a single-cell result
001333r 3  A0 00                        ldy #00                 ; counter for table
001335r 3               
001335r 3                               ; We use a flag on the the stack to signal if we have a single-cell
001335r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
001335r 3                               ; double-cell.
001335r 3  5A                           phy
001336r 3               @table_loop:
001336r 3                               ; We arrived here with the address of the string to be checked
001336r 3                               ; on the stack. We make a copy. Index is in Y
001336r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
001339r 3               
001339r 3                               ; We do our work on the TOS to speed things up
001339r 3  CA                           dex
00133Ar 3  CA                           dex                     ; ( addr u addr u ? )
00133Br 3               
00133Br 3                               ; Get address of string to check from table
00133Br 3  B9 rr rr                     lda env_table_single,y
00133Er 3  95 00                        sta 0,x
001340r 3  C8                           iny
001341r 3  B9 rr rr                     lda env_table_single,y
001344r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
001346r 3  C8                           iny
001347r 3               
001347r 3                               ; See if this is the last entry. The LSB is still in A
001347r 3  15 00                        ora 0,x
001349r 3  F0 4D                        beq @table_done
00134Br 3               
00134Br 3                               ; We have a string entry. The address there is stored in
00134Br 3                               ; old-style address format, that is, the first byte is the
00134Br 3                               ; length of the string
00134Br 3  5A                           phy                     ; save Y, which is used by COUNT
00134Cr 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
00134Fr 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
001352r 3  7A                           ply
001353r 3               
001353r 3                               ; If we found a match (flag is zero -- COMPARE is weird
001353r 3                               ; that way), return the result
001353r 3  B5 00                        lda 0,x
001355r 3  15 01                        ora 1,x
001357r 3  F0 04                        beq @got_result
001359r 3               
001359r 3                               ; Flag is not zero, so not a perfect match, so try next
001359r 3                               ; word
001359r 3  E8                           inx                     ; DROP, now ( addr u )
00135Ar 3  E8                           inx
00135Br 3               
00135Br 3  80 D9                        bra @table_loop
00135Dr 3               
00135Dr 3               @got_result:
00135Dr 3                               ; We arrive here with ( addr u -1 ) and know that we've found
00135Dr 3                               ; a match. The index of the match+2 is in Y.
00135Dr 3  E8                           inx                     ; drop flag, now ( addr u )
00135Er 3  E8                           inx
00135Fr 3  88                           dey                     ; go back to index we had
001360r 3  88                           dey
001361r 3               
001361r 3                               ; See if this is a single-cell word.
001361r 3  68                           pla
001362r 3  D0 0D                        bne @double_result
001364r 3               
001364r 3                               ; Single-cell result
001364r 3  B9 rr rr                     lda env_results_single,y
001367r 3  95 02                        sta 2,x
001369r 3  C8                           iny
00136Ar 3  B9 rr rr                     lda env_results_single,y
00136Dr 3  95 03                        sta 3,x                 ; ( res u )
00136Fr 3               
00136Fr 3  80 1F                        bra @set_flag
001371r 3               
001371r 3               @double_result:
001371r 3                               ; This is a double-celled result, which means we have to
001371r 3                               ; fool around with the index some more. We also need a
001371r 3                               ; further cell on the stack
001371r 3  CA                           dex                     ; ( addr u ? )
001372r 3  CA                           dex
001373r 3               
001373r 3                               ; We have 11 single-cell words we check, plus the 0000 as
001373r 3                               ; a marker for the end of the table, so we arrive here
001373r 3                               ; with Y as 22 or more. To get the index for the double-
001373r 3                               ; cell words, we move the result
001373r 3  98                           tya
001374r 3  38                           sec
001375r 3  E9 18                        sbc #24
001377r 3               
001377r 3                               ; We have four bytes per entry in the table, but the index
001377r 3                               ; keeps increasing by two, so we only have to multiply by
001377r 3                               ; two (shift left once) to get the right result
001377r 3  0A                           asl
001378r 3  A8                           tay
001379r 3               
001379r 3  B9 rr rr                     lda env_results_double,y
00137Cr 3  95 02                        sta 2,x
00137Er 3  C8                           iny
00137Fr 3  B9 rr rr                     lda env_results_double,y
001382r 3  95 03                        sta 3,x                 ; ( res u ? )
001384r 3  C8                           iny
001385r 3               
001385r 3  B9 rr rr                     lda env_results_double,y
001388r 3  95 04                        sta 4,x
00138Ar 3  C8                           iny
00138Br 3  B9 rr rr                     lda env_results_double,y
00138Er 3  95 05                        sta 5,x                 ; ( res res ? )
001390r 3               
001390r 3                               ; fall through to @set_flag
001390r 3               @set_flag:
001390r 3  A9 FF                        lda #$ff
001392r 3  95 00                        sta 0,x
001394r 3  95 01                        sta 1,x                 ; ( res f )
001396r 3               
001396r 3  80 14                        bra @done
001398r 3               @table_done:
001398r 3                               ; We're done with a table, because the entry was a zero.
001398r 3                               ; We arrive here with ( addr u addr u 0 )
001398r 3               
001398r 3                               ; We take the flag from stack and increase it by one. If the
001398r 3                               ; flag is zero, we have just completed the single-cell number
001398r 3                               ; strings, so we in increase the flag and try again. Otherwise,
001398r 3                               ; we're done with the double-cell table without having found
001398r 3                               ; a match, and we're done
001398r 3  68                           pla
001399r 3  D0 09                        bne @no_match
00139Br 3               
00139Br 3                               ; Flag is zero, increase it to one and start over to check
00139Br 3                               ; double-cell values
00139Br 3  1A                           inc
00139Cr 3  48                           pha
00139Dr 3               
00139Dr 3  8A                           txa
00139Er 3  18                           clc
00139Fr 3  69 06                        adc #6                  ; skip six bytes
0013A1r 3  AA                           tax                     ; ( addr u )
0013A2r 3               
0013A2r 3  80 92                        bra @table_loop
0013A4r 3               @no_match:
0013A4r 3                               ; Bummer, not found. We arrive here with
0013A4r 3                               ; ( addr u addr u 0 ) and need to return just a zero
0013A4r 3  8A                           txa
0013A5r 3  18                           clc
0013A6r 3  69 0A                        adc #10
0013A8r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
0013A9r 3               
0013A9r 3  20 rr rr                     jsr xt_false
0013ACr 3               @done:
0013ACr 3               z_environment_q:
0013ACr 3  60                           rts
0013ADr 3               
0013ADr 3               
0013ADr 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
0013ADr 3               ; results and one for the double-celled results. The zero cell at the
0013ADr 3               ; end of each table marks its, uh, end. The strings themselves are defined
0013ADr 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
0013ADr 3               ; have to adapt the result code for double printout, where we subtract 22
0013ADr 3               ; (two bytes each single-cell string and two bytes for the end-of-table
0013ADr 3               ; marker 0000
0013ADr 3               env_table_single:
0013ADr 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
0013B1r 3  rr rr rr rr  
0013B5r 3  rr rr        
0013B7r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
0013BBr 3  rr rr rr rr  
0013BFr 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
0013C3r 3  00 00        
0013C5r 3               
0013C5r 3               env_table_double:
0013C5r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
0013C9r 3  00 00        
0013CBr 3               
0013CBr 3               env_results_single:
0013CBr 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
0013CDr 3  FF 00                .word $00FF     ; /HOLD
0013CFr 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
0013D1r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
0013D3r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
0013D5r 3  FF 00                .word $00FF     ; MAX-CHAR
0013D7r 3  FF 7F                .word $7FFF     ; MAX-N
0013D9r 3  FF FF                .word $FFFF     ; MAX-U
0013DBr 3  80 00                .word $0080     ; RETURN-STACK-CELLS
0013DDr 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
0013DFr 3  09 00                .word $0009     ; WORDLISTS
0013E1r 3               
0013E1r 3               env_results_double:
0013E1r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
0013E5r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
0013E9r 3               
0013E9r 3               
0013E9r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
0013E9r 3               ; ## "="  auto  ANS core
0013E9r 3                       ; """https://forth-standard.org/standard/core/Equal"""
0013E9r 3               
0013E9r 3               xt_equal:
0013E9r 3  20 rr rr                     jsr underflow_2
0013ECr 3               
0013ECr 3  B5 00                        lda 0,x                 ; LSB
0013EEr 3  D5 02                        cmp 2,x
0013F0r 3  D0 0A                        bne @false
0013F2r 3               
0013F2r 3  B5 01                        lda 1,x                 ; MSB
0013F4r 3  D5 03                        cmp 3,x
0013F6r 3  D0 04                        bne @false
0013F8r 3               
0013F8r 3  A9 FF                        lda #$ff
0013FAr 3  80 02                        bra @done
0013FCr 3               
0013FCr 3  A9 00        @false:         lda #0                  ; drop thru to done
0013FEr 3               
0013FEr 3  95 02        @done:          sta 2,x
001400r 3  95 03                        sta 3,x
001402r 3               
001402r 3  E8                           inx
001403r 3  E8                           inx
001404r 3               
001404r 3  60           z_equal:        rts
001405r 3               
001405r 3               
001405r 3               
001405r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
001405r 3               ; ## "blank"  auto  ANS string
001405r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
001405r 3               xt_blank:
001405r 3                               ; We don't check for underflow here because
001405r 3                               ; we deal with that in FILL
001405r 3  CA                           dex
001406r 3  CA                           dex
001407r 3  A9 20                        lda #AscSP
001409r 3  95 00                        sta 0,x
00140Br 3  74 01                        stz 1,x
00140Dr 3               
00140Dr 3  80 06                        bra xt_fill     ; skip over code for ERASE
00140Fr 3               
00140Fr 3               
00140Fr 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
00140Fr 3               ; ## "erase"  auto  ANS core ext
00140Fr 3                       ; """https://forth-standard.org/standard/core/ERASE
00140Fr 3                       ; Note that ERASE works with "address" units
00140Fr 3                       ; (bytes), not cells.
00140Fr 3                       ; """
00140Fr 3               
00140Fr 3               xt_erase:
00140Fr 3                               ; We don't check for underflow here because
00140Fr 3                               ; we deal with that in FILL
00140Fr 3  CA                           dex
001410r 3  CA                           dex
001411r 3  74 00                        stz 0,x
001413r 3  74 01                        stz 1,x
001415r 3               
001415r 3                               ; fall through to FILL
001415r 3               
001415r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
001415r 3               ; ## "fill"  auto  ANS core
001415r 3                       ; """https://forth-standard.org/standard/core/FILL
001415r 3                       ; Fill u bytes of memory with char starting at addr. Note that
001415r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
001415r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
001415r 3                       ; happens when we reach the end of the address space
001415r 3                       ; """
001415r 3               xt_fill:
001415r 3  20 rr rr                     jsr underflow_3
001418r 3               
001418r 3                               ; We use tmp1 to hold the address
001418r 3  B5 04                        lda 4,x         ; LSB
00141Ar 3  85 rr                        sta tmp1
00141Cr 3  B5 05                        lda 5,x
00141Er 3  85 rr                        sta tmp1+1
001420r 3               
001420r 3                               ; We use tmp2 to hold the counter
001420r 3  B5 02                        lda 2,x
001422r 3  85 rr                        sta tmp2
001424r 3  B5 03                        lda 3,x
001426r 3  85 rr                        sta tmp2+1
001428r 3               
001428r 3                               ; We use Y to hold the character
001428r 3  B5 00                        lda 0,x
00142Ar 3  A8                           tay
00142Br 3               @loop:
00142Br 3                               ; Unfortunately, we also need to make sure that we don't
00142Br 3                               ; write further than the end of the RAM. So RAM_END must
00142Br 3                               ; be larger or equal to the current address
00142Br 3  A9 80                        lda #>ram_end           ; MSB
00142Dr 3  C5 rr                        cmp tmp1+1
00142Fr 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
001431r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
001433r 3               
001433r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
001435r 3  C5 rr                        cmp tmp1
001437r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
001439r 3               
001439r 3               @check_counter:
001439r 3                               ; See if our counter has reached zero
001439r 3  A5 rr                        lda tmp2
00143Br 3  05 rr                        ora tmp2+1
00143Dr 3  F0 13                        beq @done
00143Fr 3               
00143Fr 3                               ; We're not in ROM and we still have stuff on the counter, so
00143Fr 3                               ; let's actually do what we came here to do
00143Fr 3  98                           tya
001440r 3  92 rr                        sta (tmp1)
001442r 3               
001442r 3                               ; Adjust the counter
001442r 3  A5 rr                        lda tmp2
001444r 3  D0 02                        bne @1
001446r 3  C6 rr                        dec tmp2+1
001448r 3  C6 rr        @1:               dec tmp2
00144Ar 3               
00144Ar 3                               ; Next address
00144Ar 3  E6 rr                        inc tmp1
00144Cr 3  D0 DD                        bne @loop
00144Er 3  E6 rr                        inc tmp1+1
001450r 3               
001450r 3  80 D9                        bra @loop
001452r 3               
001452r 3               @done:
001452r 3                               ; Drop three cells off the Data Stack. This uses one byte
001452r 3                               ; less than six times INX
001452r 3  8A                           txa
001453r 3  18                           clc
001454r 3  69 06                        adc #6
001456r 3  AA                           tax
001457r 3               z_blank:
001457r 3               z_erase:
001457r 3  60           z_fill:         rts
001458r 3               
001458r 3               
001458r 3               
001458r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
001458r 3               ; ## "execute"  auto  ANS core
001458r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
001458r 3               xt_execute:
001458r 3  20 rr rr                     jsr underflow_1
00145Br 3               
00145Br 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
00145Er 3               
00145Er 3  60           z_execute:      rts
00145Fr 3               
00145Fr 3               doexecute:
00145Fr 3  B5 00                        lda 0,x
001461r 3  85 rr                        sta ip
001463r 3  B5 01                        lda 1,x
001465r 3  85 rr                        sta ip+1
001467r 3               
001467r 3  E8                           inx
001468r 3  E8                           inx
001469r 3               
001469r 3                               ; we don't need a RTS here because we highjack the RTS of
001469r 3                               ; the word we're calling to get back to xt_execute
001469r 3  6C rr rr                     jmp (ip)
00146Cr 3               
00146Cr 3               ; end of doexecute
00146Cr 3               
00146Cr 3               
00146Cr 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
00146Cr 3               ; ## "execute-parsing"  auto  Gforth
00146Cr 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
00146Cr 3                       ; Execute the parsing word defined by the execution token (xt) on the
00146Cr 3                       ; string as if it were passed on the command line. See the file
00146Cr 3                       ; tests/tali.fs for examples.
00146Cr 3                       ;
00146Cr 3                       ; Note that this word is coded completely
00146Cr 3                       ; different in its Gforth version, see the file execute-parsing.fs
00146Cr 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
00146Cr 3                       ; """
00146Cr 3               xt_execute_parsing:
00146Cr 3  20 rr rr                     jsr underflow_3
00146Fr 3               
00146Fr 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
001472r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
001475r 3               
001475r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
001477r 3  85 rr                        sta ciblen
001479r 3  B5 01                        lda 1,x
00147Br 3  85 rr                        sta ciblen+1
00147Dr 3               
00147Dr 3  B5 02                        lda 2,x                 ; NOS is new cib
00147Fr 3  85 rr                        sta cib
001481r 3  B5 03                        lda 3,x
001483r 3  85 rr                        sta cib+1
001485r 3               
001485r 3  64 rr                        stz toin                ; Set >IN to zero
001487r 3  64 rr                        stz toin+1
001489r 3               
001489r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
00148Cr 3  20 rr rr                     jsr xt_execute
00148Fr 3               
00148Fr 3  20 rr rr                     jsr xt_r_to_input
001492r 3               
001492r 3               z_execute_parsing:
001492r 3  60                           rts
001493r 3               
001493r 3               
001493r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
001493r 3               ; ## "exit"  auto  ANS core
001493r 3                       ; """https://forth-standard.org/standard/core/EXIT
001493r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
001493r 3                       ; we we might have put on the Return Stack off as well. This should
001493r 3                       ; be natively compiled.
001493r 3                       ; """
001493r 3               
001493r 3               xt_exit:
001493r 3  60                           rts             ; keep before z_exit
001494r 3               z_exit:                         ; never reached
001494r 3               
001494r 3               
001494r 3               
001494r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
001494r 3               ; ## "false"  auto  ANS core ext
001494r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
001494r 3               xt_false:
001494r 3  CA                           dex
001495r 3  CA                           dex
001496r 3  74 00                        stz 0,x
001498r 3  74 01                        stz 1,x
00149Ar 3               
00149Ar 3  60           z_false:        rts
00149Br 3               
00149Br 3               
00149Br 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
00149Br 3               ; ## "@"  auto  ANS core
00149Br 3                       ; """https://forth-standard.org/standard/core/Fetch"""
00149Br 3               xt_fetch:
00149Br 3  20 rr rr                     jsr underflow_1
00149Er 3               
00149Er 3  A1 00                        lda (0,x)               ; LSB
0014A0r 3  A8                           tay
0014A1r 3  F6 00                        inc 0,x
0014A3r 3  D0 02                        bne @1
0014A5r 3  F6 01                        inc 1,x
0014A7r 3               @1:
0014A7r 3  A1 00                        lda (0,x)               ; MSB
0014A9r 3  95 01                        sta 1,x
0014ABr 3  94 00                        sty 0,x
0014ADr 3               
0014ADr 3  60           z_fetch:        rts
0014AEr 3               
0014AEr 3               
0014AEr 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
0014AEr 3               ; ## "find"  auto  ANS core
0014AEr 3                       ; """https://forth-standard.org/standard/core/FIND
0014AEr 3                       ; Included for backwards compatibility only, because it still
0014AEr 3                       ; can be found in so may examples. It should, however, be replaced
0014AEr 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
0014AEr 3                       ; flag if not found in the Dictionary, or the xt with a flag to
0014AEr 3                       ; indicate if this is immediate or not. FIND is a wrapper around
0014AEr 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
0014AEr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
0014AEr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0014AEr 3                       ; """
0014AEr 3               
0014AEr 3               xt_find:
0014AEr 3  20 rr rr                     jsr underflow_1
0014B1r 3               
0014B1r 3                               ; Save address in case conversion fails. We use the
0014B1r 3                               ; Return Stack instead of temporary variables like TMP1
0014B1r 3                               ; because this is shorter and anybody still using FIND
0014B1r 3                               ; can't be worried about speed anyway
0014B1r 3  B5 01                        lda 1,x                 ; MSB
0014B3r 3  48                           pha
0014B4r 3  B5 00                        lda 0,x                 ; LSB
0014B6r 3  48                           pha
0014B7r 3               
0014B7r 3                               ; Convert ancient-type counted string address to
0014B7r 3                               ; modern format
0014B7r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
0014BAr 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
0014BDr 3               
0014BDr 3  B5 00                        lda 0,x
0014BFr 3  15 01                        ora 1,x
0014C1r 3  D0 0B                        bne @found_word
0014C3r 3               
0014C3r 3                               ; No word found. Return address of the string and a false
0014C3r 3                               ; flag
0014C3r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
0014C6r 3               
0014C6r 3                               ; The address needs to be restored.
0014C6r 3  68                           pla                     ; LSB of address
0014C7r 3  95 02                        sta 2,x
0014C9r 3  68                           pla
0014CAr 3  95 03                        sta 3,x                 ; MSB of address
0014CCr 3               
0014CCr 3  80 27                        bra @done               ; ( addr 0 )
0014CEr 3               
0014CEr 3               @found_word:
0014CEr 3                               ; We don't need the address after all, dump it
0014CEr 3  68                           pla
0014CFr 3  68                           pla
0014D0r 3               
0014D0r 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
0014D0r 3                               ; convert the return values to FIND's format
0014D0r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0014D3r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
0014D6r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
0014D9r 3               
0014D9r 3  A0 00                        ldy #0                  ; Prepare flag
0014DBr 3               
0014DBr 3                               ; The flags are in the second byte of the header
0014DBr 3  F6 00                        inc 0,x
0014DDr 3  D0 02                        bne @1
0014DFr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
0014E1r 3               @1:
0014E1r 3  A1 00                        lda (0,x)               ; ( xt char )
0014E3r 3  29 04                        and #IM
0014E5r 3  D0 08                        bne @immediate          ; bit set, we're immediate
0014E7r 3               
0014E7r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0014E9r 3  95 00                        sta 0,x
0014EBr 3  95 01                        sta 1,x
0014EDr 3  80 06                        bra @done
0014EFr 3               
0014EFr 3               @immediate:
0014EFr 3  A9 01                        lda #1                  ; We're immediate, return 1
0014F1r 3  95 00                        sta 0,x
0014F3r 3  74 01                        stz 1,x
0014F5r 3               @done:
0014F5r 3  60           z_find:         rts
0014F6r 3               
0014F6r 3               
0014F6r 3               
0014F6r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
0014F6r 3               ; ## "find-name"  auto  Gforth
0014F6r 3               
0014F6r 3               xt_find_name:
0014F6r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0014F6r 3                       ; Given a string, find the Name Token (nt) of a word or return
0014F6r 3                       ; zero if the word is not in the dictionary. We use this instead of
0014F6r 3                       ; ancient FIND to look up words in the Dictionary passed by
0014F6r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
0014F6r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
0014F6r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0014F6r 3                       ; FIND calls this word
0014F6r 3                       ; """
0014F6r 3  20 rr rr                     jsr underflow_2
0014F9r 3               
0014F9r 3                               ; check for special case of an empty string (length zero)
0014F9r 3  B5 00                        lda 0,x
0014FBr 3  15 01                        ora 1,x
0014FDr 3  D0 03                        bne @nonempty
0014FFr 3               
0014FFr 3  4C rr rr                     jmp @fail_done
001502r 3               
001502r 3               @nonempty:
001502r 3                               ; Set up for traversing the wordlist search order.
001502r 3  64 rr                        stz tmp3                ; Start at the beginning
001504r 3               
001504r 3               @wordlist_loop:
001504r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
001506r 3  A5 rr                        lda tmp3
001508r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
00150Ar 3  D0 03                        bne @have_string
00150Cr 3               
00150Cr 3                               ; We ran out of wordlists to search.
00150Cr 3  4C rr rr                     jmp @fail_done
00150Fr 3               
00150Fr 3               @have_string:
00150Fr 3                               ; set up first loop iteration
00150Fr 3               
00150Fr 3                               ; Get the current wordlist id
00150Fr 3  18                           clc             ; SEARCH-ORDER is array of bytes.
001510r 3  69 1F                        adc #search_order_offset
001512r 3  A8                           tay
001513r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
001515r 3                                               ; into the cell array WORDLISTS
001515r 3               
001515r 3                               ; Get the DP for that wordlist.
001515r 3  0A                           asl                     ; Turn offset into cells offset.
001516r 3  18                           clc
001517r 3  69 06                        adc #wordlists_offset
001519r 3  A8                           tay
00151Ar 3  B1 rr                        lda (up),y
00151Cr 3  85 rr                        sta tmp1
00151Er 3  C8                           iny
00151Fr 3  B1 rr                        lda (up),y
001521r 3  85 rr                        sta tmp1+1
001523r 3               
001523r 3  B5 02                        lda 2,x                 ; Address of mystery string
001525r 3  85 rr                        sta tmp2
001527r 3  B5 03                        lda 3,x
001529r 3  85 rr                        sta tmp2+1
00152Br 3               
00152Br 3               @loop:
00152Br 3                               ; first quick test: Are strings the same length?
00152Br 3  B2 rr                        lda (tmp1)
00152Dr 3  D5 00                        cmp 0,x
00152Fr 3  D0 54                        bne @next_entry
001531r 3               
001531r 3               @compare_string:
001531r 3                               ; are the same length, so we now have to compare each
001531r 3                               ; character
001531r 3               
001531r 3                               ; second quick test: Is the first character the same?
001531r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001533r 3               
001533r 3                               ; Lowercase the incoming charcter.
001533r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001535r 3  B0 07                        bcs @compare_first
001537r 3  C9 41                        cmp #$41        ; ASCII 'A'
001539r 3  90 03                        bcc @compare_first
00153Br 3               
00153Br 3                               ; An uppercase letter has been located.  Make it
00153Br 3                               ; lowercase.
00153Br 3  18                           clc
00153Cr 3  69 20                        adc #$20
00153Er 3               
00153Er 3               @compare_first:
00153Er 3  A0 08                        ldy #8          ; Offset in nt to name
001540r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001542r 3  D0 41                        bne @next_entry
001544r 3               
001544r 3                               ; String length is the same and the first character is the
001544r 3                               ; same. If the length of the string is 1, we're already done
001544r 3  B5 00                        lda 0,x
001546r 3  3A                           dec
001547r 3  F0 2C                        beq @success
001549r 3               
001549r 3                               ; No such luck: The strings are the same length and the first
001549r 3                               ; char is the same, but the word is more than one char long.
001549r 3                               ; So we suck it up and compare every single character. We go
001549r 3                               ; from back to front, because words like CELLS and CELL+ would
001549r 3                               ; take longer otherwise. We can also shorten the loop by one
001549r 3                               ; because we've already compared the first char.
001549r 3               
001549r 3                               ; The string of the word we're testing against is 8 bytes down
001549r 3  A5 rr                        lda tmp1
00154Br 3  48                           pha             ; Preserve tmp1 on the return stack.
00154Cr 3  18                           clc
00154Dr 3  69 08                        adc #8
00154Fr 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001551r 3  A5 rr                        lda tmp1+1
001553r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001554r 3  69 00                        adc #0          ; we only need the carry
001556r 3  85 rr                        sta tmp1+1
001558r 3               
001558r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
00155Ar 3  88                           dey
00155Br 3               
00155Br 3               @string_loop:
00155Br 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
00155Dr 3               
00155Dr 3                               ; Lowercase the incoming charcter.
00155Dr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
00155Fr 3  B0 07                        bcs @check_char
001561r 3  C9 41                        cmp #$41        ; ASCII 'A'
001563r 3  90 03                        bcc @check_char
001565r 3               
001565r 3                               ; An uppercase letter has been located.  Make it
001565r 3                               ; lowercase.
001565r 3  18                           clc
001566r 3  69 20                        adc #$20
001568r 3               
001568r 3               @check_char:
001568r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
00156Ar 3  D0 13                        bne @next_entry_tmp1
00156Cr 3               
00156Cr 3  88                           dey
00156Dr 3  D0 EC                        bne @string_loop
00156Fr 3               
00156Fr 3               @success_tmp1:
00156Fr 3  68                           pla             ; Restore tmp1 from the return stack.
001570r 3  85 rr                        sta tmp1+1
001572r 3  68                           pla
001573r 3  85 rr                        sta tmp1
001575r 3               
001575r 3               @success:
001575r 3                               ; The strings match. Put correct nt NOS, because we'll drop
001575r 3                               ; TOS before we leave
001575r 3  A5 rr                        lda tmp1
001577r 3  95 02                        sta 2,x
001579r 3  A5 rr                        lda tmp1+1
00157Br 3  95 03                        sta 3,x
00157Dr 3               
00157Dr 3  80 20                        bra @done
00157Fr 3               
00157Fr 3               @next_entry_tmp1:
00157Fr 3  68                           pla             ; Restore tmp1 from the return stack.
001580r 3  85 rr                        sta tmp1+1
001582r 3  68                           pla
001583r 3  85 rr                        sta tmp1
001585r 3               
001585r 3               @next_entry:
001585r 3                               ; Not the same, so we get the next word. Next header
001585r 3                               ; address is two bytes down
001585r 3  A0 02                        ldy #2
001587r 3  B1 rr                        lda (tmp1),y
001589r 3  48                           pha
00158Ar 3  C8                           iny
00158Br 3  B1 rr                        lda (tmp1),y
00158Dr 3  85 rr                        sta tmp1+1
00158Fr 3  68                           pla
001590r 3  85 rr                        sta tmp1
001592r 3               
001592r 3                               ; If we got a zero, we've walked the whole Dictionary and
001592r 3                               ; return as a failure, otherwise try again
001592r 3  05 rr                        ora tmp1+1
001594r 3  D0 95                        bne @loop
001596r 3               
001596r 3                               ; Move on to the next wordlist in the search order.
001596r 3  E6 rr                        inc tmp3
001598r 3  4C rr rr                     jmp @wordlist_loop
00159Br 3               
00159Br 3               @fail_done:
00159Br 3  74 02                        stz 2,x         ; failure flag
00159Dr 3  74 03                        stz 3,x
00159Fr 3               @done:
00159Fr 3  E8                           inx
0015A0r 3  E8                           inx
0015A1r 3               
0015A1r 3  60           z_find_name:    rts
0015A2r 3               
0015A2r 3               
0015A2r 3               
0015A2r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
0015A2r 3               ; ## "flush"  auto  ANS block
0015A2r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
0015A2r 3               xt_flush:
0015A2r 3  20 rr rr                     jsr xt_save_buffers
0015A5r 3               
0015A5r 3                               ; Set the buffer status to empty.
0015A5r 3  A0 2C                        ldy #buffstatus_offset
0015A7r 3  A9 00                        lda #0
0015A9r 3  91 rr                        sta (up),y      ; Only LSB is used.
0015ABr 3               z_flush:
0015ABr 3  60                           rts
0015ACr 3               
0015ACr 3               
0015ACr 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
0015ACr 3               ; ## "fm/mod"  auto  ANS core
0015ACr 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
0015ACr 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
0015ACr 3                       ;
0015ACr 3                       ; There are various ways to realize this. We follow EForth with
0015ACr 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
0015ACr 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
0015ACr 3                       ; See (http://www.forth.org/eforth.html). However you can also
0015ACr 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
0015ACr 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
0015ACr 3                       ; """
0015ACr 3               
0015ACr 3               xt_fm_slash_mod:
0015ACr 3  20 rr rr                     jsr underflow_3
0015AFr 3               
0015AFr 3                               ; if sign of n1 is negative, negate both n1 and d
0015AFr 3  64 rr                        stz tmp2        ; default: n is positive
0015B1r 3  B5 01                        lda 1,x         ; MSB of n1
0015B3r 3  10 0E                        bpl @check_d
0015B5r 3               
0015B5r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
0015B7r 3  20 rr rr                     jsr xt_negate   ; NEGATE
0015BAr 3  20 rr rr                     jsr xt_to_r     ; >R
0015BDr 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
0015C0r 3  20 rr rr                     jsr xt_r_from   ; R>
0015C3r 3               
0015C3r 3               @check_d:
0015C3r 3                               ; If d is negative, add n1 to high cell of d
0015C3r 3  B5 03                        lda 3,x         ; MSB of high word of d
0015C5r 3  10 0D                        bpl @multiply
0015C7r 3               
0015C7r 3  18                           clc
0015C8r 3  B5 00                        lda 0,x         ; LSB of n1
0015CAr 3  75 02                        adc 2,x         ; LSB of dh
0015CCr 3  95 02                        sta 2,x
0015CEr 3               
0015CEr 3  B5 01                        lda 1,x         ; MSB of n1
0015D0r 3  75 03                        adc 3,x         ; MSB of dh
0015D2r 3  95 03                        sta 3,x
0015D4r 3               
0015D4r 3               @multiply:
0015D4r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
0015D7r 3               
0015D7r 3                               ; if n was negative, negate the result
0015D7r 3  A5 rr                        lda tmp2
0015D9r 3  F0 07                        beq @done
0015DBr 3               
0015DBr 3  E8                           inx             ; pretend that we SWAP
0015DCr 3  E8                           inx
0015DDr 3  20 rr rr                     jsr xt_negate
0015E0r 3  CA                           dex
0015E1r 3  CA                           dex
0015E2r 3               @done:
0015E2r 3  60           z_fm_slash_mod: rts
0015E3r 3               
0015E3r 3               
0015E3r 3               
0015E3r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
0015E3r 3               ; ## "forth"  auto  ANS search ext
0015E3r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
0015E3r 3               xt_forth:
0015E3r 3  A0 1F                        ldy #search_order_offset
0015E5r 3  A9 00                        lda #0          ; The WID for Forth is 0.
0015E7r 3               
0015E7r 3  91 rr                        sta (up),y
0015E9r 3               z_forth:
0015E9r 3  60                           rts
0015EAr 3               
0015EAr 3               
0015EAr 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
0015EAr 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
0015EAr 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
0015EAr 3               load_evaluate:
0015EAr 3                               ; Set a flag (using tmp1) to not zero BLK
0015EAr 3  A9 FF                        lda #$FF
0015ECr 3  85 rr                        sta tmp1
0015EEr 3  80 11                        bra load_evaluate_start
0015F0r 3               
0015F0r 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
0015F0r 3               ; ## "evaluate"  auto  ANS core
0015F0r 3                       ; """https://forth-standard.org/standard/core/EVALUATE
0015F0r 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
0015F0r 3                       ; After processing the line, revert to old input source. We use this
0015F0r 3                       ; to compile high-level Forth words and user-defined words during
0015F0r 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
0015F0r 3                       ; accept more than 255 characters here, even though it's a pain in
0015F0r 3                       ; the 8-bit.
0015F0r 3                       ; """
0015F0r 3               
0015F0r 3               xt_evaluate:
0015F0r 3  20 rr rr                     jsr underflow_2
0015F3r 3               
0015F3r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
0015F3r 3                               ; and will set the block number.
0015F3r 3  64 rr                        stz tmp1
0015F5r 3               
0015F5r 3                               ; If u is zero (which can happen a lot for the user-defined
0015F5r 3                               ; words), just leave again
0015F5r 3  B5 00                        lda 0,x
0015F7r 3  15 01                        ora 1,x
0015F9r 3  D0 06                        bne _eval_got_work
0015FBr 3               
0015FBr 3  E8                           inx
0015FCr 3  E8                           inx
0015FDr 3  E8                           inx
0015FEr 3  E8                           inx
0015FFr 3               
0015FFr 3  80 42                        bra _eval_done
001601r 3               
001601r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
001601r 3               load_evaluate_start:
001601r 3               _eval_got_work:
001601r 3                               ; Save the current value of BLK on the return stack.
001601r 3  A0 01                        ldy #blk_offset+1
001603r 3  B1 rr                        lda (up),y
001605r 3  48                           pha
001606r 3  88                           dey
001607r 3  B1 rr                        lda (up),y
001609r 3  48                           pha
00160Ar 3               
00160Ar 3                               ; See if we should zero BLK.
00160Ar 3  A5 rr                        lda tmp1
00160Cr 3  D0 05                        bne @nozero
00160Er 3               
00160Er 3                               ; Set BLK to zero.
00160Er 3                               ; lda #0        ; A is already zero from loading tmp1
00160Er 3  91 rr                        sta (up),y
001610r 3  C8                           iny
001611r 3  91 rr                        sta (up),y
001613r 3               
001613r 3               @nozero:
001613r 3                               ; Save the input state to the Return Stack
001613r 3  20 rr rr                     jsr xt_input_to_r
001616r 3               
001616r 3                               ; set SOURCE-ID to -1
001616r 3  A9 FF                        lda #$ff
001618r 3  85 rr                        sta insrc
00161Ar 3  85 rr                        sta insrc+1
00161Cr 3               
00161Cr 3                               ; set >IN to zero
00161Cr 3  64 rr                        stz toin
00161Er 3  64 rr                        stz toin+1
001620r 3               
001620r 3                               ; move TOS and NOS to input buffers
001620r 3  B5 00                        lda 0,x
001622r 3  85 rr                        sta ciblen
001624r 3  B5 01                        lda 1,x
001626r 3  85 rr                        sta ciblen+1
001628r 3               
001628r 3  B5 02                        lda 2,x
00162Ar 3  85 rr                        sta cib
00162Cr 3  B5 03                        lda 3,x
00162Er 3  85 rr                        sta cib+1
001630r 3               
001630r 3  E8                           inx             ; A clean stack is a clean mind
001631r 3  E8                           inx
001632r 3  E8                           inx
001633r 3  E8                           inx
001634r 3               
001634r 3  20 rr rr                     jsr interpret   ; ( -- )
001637r 3               
001637r 3                               ; restore variables
001637r 3  20 rr rr                     jsr xt_r_to_input
00163Ar 3               
00163Ar 3                               ; Restore BLK from the return stack.
00163Ar 3  A0 00                        ldy #blk_offset
00163Cr 3  68                           pla
00163Dr 3  91 rr                        sta (up),y
00163Fr 3  C8                           iny
001640r 3  68                           pla
001641r 3  91 rr                        sta (up),y
001643r 3               
001643r 3               _eval_done:
001643r 3  60           z_evaluate:     rts
001644r 3               
001644r 3               
001644r 3               
001644r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
001644r 3               ; ## "forth-wordlist"  auto  ANS search
001644r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
001644r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
001644r 3               
001644r 3               
001644r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
001644r 3               ; ## "get-current" auto ANS search
001644r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
001644r 3               
001644r 3               xt_get_current:
001644r 3                               ; This is a little different than some of the variables
001644r 3                               ; in the user area as we want the value rather than
001644r 3                               ; the address.
001644r 3  CA                           dex
001645r 3  CA                           dex
001646r 3  A0 04                        ldy #current_offset
001648r 3  B1 rr                        lda (up),y
00164Ar 3  95 00                        sta 0,x         ; CURRENT is a byte variable
00164Cr 3  74 01                        stz 1,x         ; so the MSB is zero.
00164Er 3               
00164Er 3  60           z_get_current:  rts
00164Fr 3               
00164Fr 3               
00164Fr 3               
00164Fr 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
00164Fr 3               ; ## "get-order" auto ANS search
00164Fr 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
00164Fr 3               
00164Fr 3               xt_get_order:
00164Fr 3                               ; Get #ORDER - the number of wordlists in the search order.
00164Fr 3  A0 1E                        ldy #num_order_offset
001651r 3  B1 rr                        lda (up),y
001653r 3  85 rr                        sta tmp1
001655r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
001657r 3               
001657r 3               @loop:
001657r 3                               ; Count down towards the front of the list.
001657r 3                               ; By decrementing first, we also turn the length into an offset.
001657r 3  C6 rr                        dec tmp1        ; Count down by bytes.
001659r 3               
001659r 3                               ; Get a pointer to the current wordlist, working back to front.
001659r 3  A9 1F                        lda #search_order_offset
00165Br 3  18                           clc
00165Cr 3  65 rr                        adc tmp1
00165Er 3  A8                           tay
00165Fr 3               
00165Fr 3                               ; Put that wordlist id on the stack.
00165Fr 3  CA                           dex
001660r 3  CA                           dex
001661r 3  B1 rr                        lda (up),y
001663r 3  95 00                        sta 0,x         ; Search order array is bytes, so
001665r 3  74 01                        stz 1,x         ; put a zero in the high byte.
001667r 3               
001667r 3                               ; See if that was the last one to process (first in the list).
001667r 3  A9 00                        lda #0
001669r 3  C5 rr                        cmp tmp1
00166Br 3  D0 EA                        bne @loop
00166Dr 3               
00166Dr 3               @done:
00166Dr 3                               ; Put the number of items on the stack.
00166Dr 3  CA                           dex
00166Er 3  CA                           dex
00166Fr 3  A0 1E                        ldy #num_order_offset
001671r 3  B1 rr                        lda (up),y
001673r 3  95 00                        sta 0,x
001675r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
001677r 3               
001677r 3  60           z_get_order:    rts
001678r 3               
001678r 3               
001678r 3               
001678r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
001678r 3               ; ## ">"  auto  ANS core
001678r 3                       ; """https://forth-standard.org/standard/core/more"""
001678r 3               
001678r 3               xt_greater_than:
001678r 3  20 rr rr                     jsr underflow_2
00167Br 3               
00167Br 3  A0 00                        ldy #0          ; default false
00167Dr 3  20 rr rr                     jsr compare_16bit
001680r 3               
001680r 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
001680r 3  F0 03                        beq @false
001682r 3  10 01                        bpl @false
001684r 3               
001684r 3                               ; true
001684r 3  88                           dey
001685r 3               @false:
001685r 3  98                           tya
001686r 3               
001686r 3  E8                           inx
001687r 3  E8                           inx
001688r 3  95 00                        sta 0,x
00168Ar 3  95 01                        sta 1,x
00168Cr 3               
00168Cr 3  60           z_greater_than: rts
00168Dr 3               
00168Dr 3               
00168Dr 3               
00168Dr 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
00168Dr 3               ; ## "here"  auto  ANS core
00168Dr 3                       ; """https://forth-standard.org/standard/core/HERE
00168Dr 3                       ; This code is also used by the assembler directive ARROW
00168Dr 3                       ; ("->") though as immediate"""
00168Dr 3               xt_here:
00168Dr 3               xt_asm_arrow:
00168Dr 3  CA                           dex
00168Er 3  CA                           dex
00168Fr 3  A5 rr                        lda cp
001691r 3  95 00                        sta 0,x
001693r 3  A5 rr                        lda cp+1
001695r 3  95 01                        sta 1,x
001697r 3               
001697r 3               z_asm_arrow:
001697r 3  60           z_here:         rts
001698r 3               
001698r 3               
001698r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001698r 3               ; ## "hex"  auto  ANS core ext
001698r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001698r 3               xt_hex:
001698r 3  A9 10                        lda #16
00169Ar 3  85 rr                        sta base
00169Cr 3  64 rr                        stz base+1              ; paranoid
00169Er 3               
00169Er 3  60           z_hex:          rts
00169Fr 3               
00169Fr 3               
00169Fr 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
00169Fr 3               ; ## "hexstore"  auto  Tali
00169Fr 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
00169Fr 3                       ; by spaces, store the numbers at the address addr2, returning the
00169Fr 3                       ; number of elements. Non-number elements are skipped, an zero-length
00169Fr 3                       ; string produces a zero output.
00169Fr 3                       ; """
00169Fr 3               
00169Fr 3               xt_hexstore:
00169Fr 3  20 rr rr                     jsr underflow_3
0016A2r 3               
0016A2r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
0016A5r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
0016A8r 3               
0016A8r 3               @loop:
0016A8r 3                               ; Loop until string is totally consumed
0016A8r 3  B5 00                        lda 0,x
0016AAr 3  15 01                        ora 1,x
0016ACr 3  F0 36                        beq @done
0016AEr 3               
0016AEr 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
0016B1r 3               
0016B1r 3                               ; Prepare the conversion of the number.
0016B1r 3  20 rr rr                     jsr xt_two_to_r
0016B4r 3  20 rr rr                     jsr xt_zero
0016B7r 3  20 rr rr                     jsr xt_zero
0016BAr 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
0016BDr 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
0016C0r 3               
0016C0r 3                               ; If u4 is not zero, we have leftover chars and have to do
0016C0r 3                               ; things differently
0016C0r 3  B5 00                        lda 0,x
0016C2r 3  15 01                        ora 1,x
0016C4r 3  D0 17                        bne @have_chars_left
0016C6r 3               
0016C6r 3                               ; Normal case, this number is all done
0016C6r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
0016C9r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
0016CCr 3               
0016CCr 3                               ; Store the new value
0016CCr 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
0016CFr 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
0016D2r 3               
0016D2r 3                               ; Increase counter
0016D2r 3  20 rr rr                     jsr xt_r_from           ; R>
0016D5r 3  20 rr rr                     jsr xt_one_plus         ; 1+
0016D8r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
0016DBr 3  80 CB                        bra @loop
0016DDr 3               
0016DDr 3               @have_chars_left:
0016DDr 3                               ; Pathological case: Drop the rest of this number off the stack
0016DDr 3                               ; and continue with the next word. Doesn't print a warning. We
0016DDr 3                               ; need to drop four cells, that is, eight bytes
0016DDr 3  8A                           txa
0016DEr 3  18                           clc
0016DFr 3  69 08                        adc #8
0016E1r 3  AA                           tax
0016E2r 3  80 C4                        bra @loop
0016E4r 3               
0016E4r 3               @done:
0016E4r 3                               ; Clean up return stack and calculate number of chars stored
0016E4r 3  E8                           inx
0016E5r 3  E8                           inx
0016E6r 3  E8                           inx
0016E7r 3  E8                           inx                     ; 2DROP
0016E8r 3               
0016E8r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
0016EBr 3  20 rr rr                     jsr xt_swap
0016EEr 3  20 rr rr                     jsr xt_minus            ; ( n )
0016F1r 3               
0016F1r 3  60           z_hexstore:     rts
0016F2r 3               
0016F2r 3               
0016F2r 3               
0016F2r 3               ; ## HOLD ( char -- ) "Insert character at current output"
0016F2r 3               ; ## "hold"  auto  ANS core
0016F2r 3                       ; """https://forth-standard.org/standard/core/HOLD
0016F2r 3                       ; Insert a character at the current position of a pictured numeric
0016F2r 3                       ; output string on
0016F2r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0016F2r 3                       ;
0016F2r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
0016F2r 3                       ; variable tohold instead of HLD.
0016F2r 3                       ; """
0016F2r 3               xt_hold:
0016F2r 3  20 rr rr                     jsr underflow_1
0016F5r 3               
0016F5r 3  A5 rr                        lda tohold
0016F7r 3  D0 02                        bne @1
0016F9r 3  C6 rr                        dec tohold+1
0016FBr 3               @1:
0016FBr 3  C6 rr                        dec tohold
0016FDr 3               
0016FDr 3  B5 00                        lda 0,x
0016FFr 3  92 rr                        sta (tohold)
001701r 3  E8                           inx
001702r 3  E8                           inx
001703r 3               
001703r 3  60           z_hold:         rts
001704r 3               
001704r 3               
001704r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
001704r 3               ; ## "i"  auto  ANS core
001704r 3                       ; """https://forth-standard.org/standard/core/I
001704r 3                       ; Note that this is not the same as R@ because we use a fudge
001704r 3                       ; factor for loop control; see the Control Flow section of the
001704r 3                       ; manual for details.
001704r 3                       ;
001704r 3                       ; We should make this native compile for speed.
001704r 3                       ; """
001704r 3               
001704r 3               xt_i:
001704r 3  CA                           dex
001705r 3  CA                           dex
001706r 3               
001706r 3                               ; Get the fudged index off of the top of the stack. It's
001706r 3                               ; easier to do math on the stack directly than to pop and
001706r 3                               ; push stuff around
001706r 3  86 rr                        stx tmpdsp
001708r 3  BA                           tsx
001709r 3               
001709r 3  38                           sec
00170Ar 3  BD 01 01                     lda $0101,x     ; LSB
00170Dr 3  FD 03 01                     sbc $0103,x
001710r 3  A8                           tay
001711r 3               
001711r 3  BD 02 01                     lda $0102,x     ; MSB
001714r 3  FD 04 01                     sbc $0104,x
001717r 3               
001717r 3  A6 rr                        ldx tmpdsp
001719r 3               
001719r 3  95 01                        sta 1,x         ; MSB of de-fudged index
00171Br 3  94 00                        sty 0,x         ; LSB of de-fudged index
00171Dr 3               
00171Dr 3  60           z_i:            rts
00171Er 3               
00171Er 3               
00171Er 3               
00171Er 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
00171Er 3               ; ## "if"  auto  ANS core
00171Er 3                       ; """http://forth-standard.org/standard/core/IF"""
00171Er 3               
00171Er 3               xt_if:
00171Er 3                               ; Compile a 0BRANCH
00171Er 3  A0 rr                        ldy #>zero_branch_runtime
001720r 3  A9 rr                        lda #<zero_branch_runtime
001722r 3  20 rr rr                     jsr cmpl_subroutine
001725r 3               
001725r 3                               ; Put the origination address on the stack for else/then
001725r 3  20 rr rr                     jsr xt_here
001728r 3               
001728r 3                               ; Stuff zero in for the branch address right now.
001728r 3                               ; THEN or ELSE will fix it later.
001728r 3  20 rr rr                     jsr xt_zero
00172Br 3  20 rr rr                     jsr xt_comma
00172Er 3  60           z_if:           rts
00172Fr 3               
00172Fr 3               
00172Fr 3               zero_branch_runtime:
00172Fr 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
00172Fr 3                       ; included 0BRANCH as a high-level word that inserted this code at
00172Fr 3                       ; runtime.
00172Fr 3                       ; """
00172Fr 3               
00172Fr 3                               ; We use the return value on the 65c02 stack to determine
00172Fr 3                               ; where we want to return to.
00172Fr 3  68                           pla
001730r 3  85 rr                        sta tmpbranch
001732r 3  68                           pla
001733r 3  85 rr                        sta tmpbranch+1
001735r 3               
001735r 3                               ; See if the flag is zero, which is the whole purpose of
001735r 3                               ; this all
001735r 3  B5 00                        lda 0,x
001737r 3  15 01                        ora 1,x
001739r 3  F0 0F                        beq @zero
00173Br 3               
00173Br 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
00173Br 3                               ; the part between IF and THEN
00173Br 3  A5 rr                        lda tmpbranch   ; LSB
00173Dr 3  18                           clc
00173Er 3  69 02                        adc #2
001740r 3  85 rr                        sta tmp1
001742r 3  A5 rr                        lda tmpbranch+1 ; MSB
001744r 3  69 00                        adc #0          ; For carry
001746r 3  85 rr                        sta tmp1+1
001748r 3               
001748r 3  80 13                        bra @done
00174Ar 3               
00174Ar 3               @zero:
00174Ar 3                               ; Flag is FALSE (0) so we take the jump to the address given in
00174Ar 3                               ; the next two bytes. However, the address points to the last
00174Ar 3                               ; byte of the JSR instruction, not to the next byte afterwards
00174Ar 3  A0 01                        ldy #1
00174Cr 3  B1 rr                        lda (tmpbranch),y
00174Er 3  85 rr                        sta tmp1
001750r 3  C8                           iny
001751r 3  B1 rr                        lda (tmpbranch),y
001753r 3  85 rr                        sta tmp1+1
001755r 3               
001755r 3                               ; Now we have to subtract one byte from the address
001755r 3                               ; given because of the way the 6502 calculates RTS
001755r 3  A5 rr                        lda tmp1
001757r 3  D0 02                        bne @1
001759r 3  C6 rr                        dec tmp1+1
00175Br 3               @1:
00175Br 3  C6 rr                        dec tmp1
00175Dr 3               
00175Dr 3               @done:
00175Dr 3                               ; However we got here, tmp1 has the value we push to jump
00175Dr 3                               ; to
00175Dr 3  A5 rr                        lda tmp1+1
00175Fr 3  48                           pha             ; MSB first
001760r 3  A5 rr                        lda tmp1
001762r 3  48                           pha
001763r 3               
001763r 3                               ; clean up the stack and jump
001763r 3  E8                           inx
001764r 3  E8                           inx
001765r 3               
001765r 3  60                           rts
001766r 3               
001766r 3               
001766r 3               
001766r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001766r 3               ; ## "immediate"  auto  ANS core
001766r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001766r 3                       ; Make sure the most recently defined word is immediate. Will only
001766r 3                       ; affect the last word in the dictionary. Note that if the word is
001766r 3                       ; defined in ROM, this will have no affect, but will not produce an
001766r 3                       ; error message.
001766r 3                       ; """
001766r 3               xt_immediate:
001766r 3  20 rr rr                     jsr current_to_dp
001769r 3  A0 01                        ldy #1          ; offset for status byte
00176Br 3  B1 rr                        lda (dp),y
00176Dr 3  09 04                        ora #IM        ; make sure bit 7 is set
00176Fr 3  91 rr                        sta (dp),y
001771r 3               
001771r 3  60           z_immediate:    rts
001772r 3               
001772r 3               
001772r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
001772r 3               ; ## "input" tested Tali Forth
001772r 3               
001772r 3               xt_input:
001772r 3  CA                           dex
001773r 3  CA                           dex
001774r 3  A9 rr                        lda #<input
001776r 3  95 00                        sta 0,x
001778r 3  A9 rr                        lda #>input
00177Ar 3  95 01                        sta 1,x
00177Cr 3               
00177Cr 3  60           z_input:        rts
00177Dr 3               
00177Dr 3               
00177Dr 3               
00177Dr 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
00177Dr 3               ; ## "input>r"  tested  Tali Forth
00177Dr 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
00177Dr 3                       ; toin to the Return Stack. Used by EVALUTE.
00177Dr 3                       ;
00177Dr 3                       ; The naive way of doing
00177Dr 3                       ; this is to push each two-byte variable to the stack in the form of
00177Dr 3                       ;
00177Dr 3                       ;       lda insrc
00177Dr 3                       ;       pha
00177Dr 3                       ;       lda insrc+1
00177Dr 3                       ;       pha
00177Dr 3                       ;
00177Dr 3                       ; for a total of 24 byte of instruction in one direction and later
00177Dr 3                       ; a further 24 bytes to reverse the process. We shorten this at the
00177Dr 3                       ; cost of some speed by assuming the four variables are grouped
00177Dr 3                       ; together on the Zero Page and start with insrc (see definitions.asm
00177Dr 3                       ; for details). The reverse operation is r_to_input. These words must
00177Dr 3                       ; be flagged as Never Native. Uses tmp1
00177Dr 3                       ; """
00177Dr 3               
00177Dr 3               xt_input_to_r:
00177Dr 3                               ; We arrive here with the return address on the top of the
00177Dr 3                               ; 65c02's stack. We need to move it out of the way first
00177Dr 3  68                           pla
00177Er 3  85 rr                        sta tmp1
001780r 3  68                           pla
001781r 3  85 rr                        sta tmp1+1
001783r 3               
001783r 3                               ; This assumes that insrc is the first of eight bytes and
001783r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001783r 3                               ; Page.
001783r 3  A0 07                        ldy #7
001785r 3               @loop:
001785r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
001788r 3  48                           pha
001789r 3  88                           dey
00178Ar 3  10 F9                        bpl @loop
00178Cr 3               
00178Cr 3                               ; Restore address for return jump
00178Cr 3  A5 rr                        lda tmp1+1
00178Er 3  48                           pha
00178Fr 3  A5 rr                        lda tmp1
001791r 3  48                           pha
001792r 3               
001792r 3  60           z_input_to_r: 	rts
001793r 3               
001793r 3               
001793r 3               
001793r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001793r 3               ; ## "int>name"  auto  Tali Forth
001793r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001793r 3                       ; This is called >NAME in Gforth, but we change it to
001793r 3                       ; INT>NAME to match NAME>INT
001793r 3                       ; """
001793r 3               
001793r 3               xt_int_to_name:
001793r 3  20 rr rr                     jsr underflow_1
001796r 3               
001796r 3                               ; Unfortunately, to find the header, we have to walk through
001796r 3                               ; all of the wordlists. We are running out of tmp variables.
001796r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001796r 3                               ; hold the current wordlist on the data stack. This searches
001796r 3                               ; all of the wordlists in id order.
001796r 3  CA                           dex
001797r 3  CA                           dex
001798r 3  74 00                        stz 0,x
00179Ar 3  74 01                        stz 1,x
00179Cr 3               
00179Cr 3               @wordlist_loop:
00179Cr 3                               ; A needs to have the current wordlist id in it at
00179Cr 3                               ; the top of this loop.
00179Cr 3  B5 00                        lda 0,x                 ; Get the current wordlist.
00179Er 3               
00179Er 3                               ; Get the DP for that wordlist.
00179Er 3  0A                           asl                     ; Turn offset into cells offset.
00179Fr 3  18                           clc
0017A0r 3  69 06                        adc #wordlists_offset
0017A2r 3  A8                           tay
0017A3r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
0017A5r 3  85 rr                        sta tmp2                ; into tmp2
0017A7r 3  C8                           iny
0017A8r 3  B1 rr                        lda (up),y
0017AAr 3  85 rr                        sta tmp2+1
0017ACr 3               
0017ACr 3                               ; Check for an empty wordlist (DP will be 0)
0017ACr 3  A5 rr                        lda tmp2
0017AEr 3  05 rr                        ora tmp2+1
0017B0r 3  F0 38                        beq @next_wordlist
0017B2r 3               
0017B2r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
0017B4r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
0017B6r 3  B5 03                        lda 3,x
0017B8r 3  85 rr                        sta tmp3+1
0017BAr 3               
0017BAr 3               @loop:
0017BAr 3  A0 04                        ldy #4          ; xt is four bytes down
0017BCr 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
0017BEr 3  C5 rr                        cmp tmp3
0017C0r 3  D0 07                        bne @no_match
0017C2r 3               
0017C2r 3                               ; LSB is the same, now check MSB
0017C2r 3  C8                           iny
0017C3r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
0017C5r 3  C5 rr                        cmp tmp3+1
0017C7r 3  F0 32                        beq @match
0017C9r 3               
0017C9r 3               @no_match:
0017C9r 3                               ; no match, so we need to get the next word. Next nt is two
0017C9r 3                               ; bytes down
0017C9r 3  18                           clc
0017CAr 3  A5 rr                        lda tmp2
0017CCr 3  69 02                        adc #2
0017CEr 3  85 rr                        sta tmp2
0017D0r 3  A5 rr                        lda tmp2+1
0017D2r 3  69 00                        adc #0          ; only care about carry
0017D4r 3  85 rr                        sta tmp2+1
0017D6r 3               
0017D6r 3  A0 00                        ldy #0
0017D8r 3  B1 rr                        lda (tmp2),y
0017DAr 3  48                           pha
0017DBr 3  C8                           iny
0017DCr 3  11 rr                        ora (tmp2),y
0017DEr 3  F0 09                        beq @zero
0017E0r 3               
0017E0r 3                               ; Not zero continue
0017E0r 3  B1 rr                        lda (tmp2),y
0017E2r 3  85 rr                        sta tmp2+1
0017E4r 3  68                           pla
0017E5r 3  85 rr                        sta tmp2
0017E7r 3  80 D1                        bra @loop
0017E9r 3               
0017E9r 3               @zero:
0017E9r 3                               ; if next word is zero, the xt has no nt in this wordlist
0017E9r 3  68                           pla             ; Leftover from above loop
0017EAr 3               
0017EAr 3               @next_wordlist:
0017EAr 3                               ; Move on to the next wordlist.
0017EAr 3  B5 00                        lda 0,x
0017ECr 3  1A                           inc
0017EDr 3  95 00                        sta 0,x
0017EFr 3  C9 0C                        cmp #max_wordlists
0017F1r 3  D0 A9                        bne @wordlist_loop
0017F3r 3               
0017F3r 3                               ; We didn't find it in any of the wordlists.
0017F3r 3                               ; Remove the wordlist id from the stack.
0017F3r 3  E8                           inx
0017F4r 3  E8                           inx
0017F5r 3               
0017F5r 3                               ; We return a zero to indicate that we didn't find it.
0017F5r 3  74 00                        stz 0,x
0017F7r 3  74 01                        stz 1,x
0017F9r 3  80 0A                        bra z_int_to_name
0017FBr 3               
0017FBr 3               @match:
0017FBr 3                               ; We found it. Remove wordlist id from stack.
0017FBr 3  E8                           inx
0017FCr 3  E8                           inx
0017FDr 3               
0017FDr 3                               ; It's a match! Replace TOS with nt
0017FDr 3  A5 rr                        lda tmp2
0017FFr 3  95 00                        sta 0,x
001801r 3  A5 rr                        lda tmp2+1
001803r 3  95 01                        sta 1,x
001805r 3               
001805r 3  60           z_int_to_name:  rts
001806r 3               
001806r 3               
001806r 3               
001806r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
001806r 3               ; ## "invert"  auto  ANS core
001806r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
001806r 3               xt_invert:
001806r 3  20 rr rr                     jsr underflow_1
001809r 3               
001809r 3  A9 FF                        lda #$FF
00180Br 3  55 00                        eor 0,x         ; LSB
00180Dr 3  95 00                        sta 0,x
00180Fr 3               
00180Fr 3  A9 FF                        lda #$FF
001811r 3  55 01                        eor 1,x         ; MSB
001813r 3  95 01                        sta 1,x
001815r 3               
001815r 3  60           z_invert:       rts
001816r 3               
001816r 3               
001816r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
001816r 3               ; ## "is"  auto  ANS core ext
001816r 3                       ; """http://forth-standard.org/standard/core/IS"""
001816r 3               
001816r 3               xt_is:
001816r 3                               ; This is a state aware word with differet behavior
001816r 3                               ; when used while compiling vs interpreting.
001816r 3                               ; Check STATE
001816r 3  A5 rr                        lda state
001818r 3  05 rr                        ora state+1
00181Ar 3  F0 0C                        beq @interpreting
00181Cr 3               
00181Cr 3               @compiling:
00181Cr 3                               ; Run ['] to compile the xt of the next word as a literal.
00181Cr 3  20 rr rr                     jsr xt_bracket_tick
00181Fr 3               
00181Fr 3                               ; Postpone DEFER! by compiling a JSR to it.
00181Fr 3  A0 rr                        ldy #>xt_defer_store
001821r 3  A9 rr                        lda #<xt_defer_store
001823r 3  20 rr rr                     jsr cmpl_subroutine
001826r 3               
001826r 3  80 06                        bra @done
001828r 3               
001828r 3               @interpreting:
001828r 3  20 rr rr                     jsr xt_tick
00182Br 3  20 rr rr                     jsr xt_defer_store
00182Er 3               @done:
00182Er 3  60           z_is:           rts
00182Fr 3               
00182Fr 3               
00182Fr 3               
00182Fr 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
00182Fr 3               ; ## "j"  auto  ANS core
00182Fr 3                       ; """https://forth-standard.org/standard/core/J
00182Fr 3                       ; Copy second loop counter from Return Stack to stack. Note we use
00182Fr 3                       ; a fudge factor for loop control; see the Control Flow section of
00182Fr 3                       ; the manual for more details.
00182Fr 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
00182Fr 3                       ; on the stack above this (three entries), whereas the ideal Forth
00182Fr 3                       ; implementation would just have two.
00182Fr 3                       ;
00182Fr 3                       ; Make this native compiled for speed
00182Fr 3                       ; """
00182Fr 3               
00182Fr 3               xt_j:
00182Fr 3  CA                           dex
001830r 3  CA                           dex
001831r 3               
001831r 3                               ; Get the fudged index off from the stack. It's easier to
001831r 3                               ; do math on the stack directly than to pop and push stuff
001831r 3                               ; around
001831r 3  86 rr                        stx tmpdsp
001833r 3  BA                           tsx
001834r 3               
001834r 3  38                           sec
001835r 3  BD 07 01                     lda $0107,x     ; LSB
001838r 3  FD 09 01                     sbc $0109,x
00183Br 3  A8                           tay
00183Cr 3               
00183Cr 3  BD 08 01                     lda $0108,x     ; MSB
00183Fr 3  FD 0A 01                     sbc $010A,x
001842r 3               
001842r 3  A6 rr                        ldx tmpdsp
001844r 3               
001844r 3  95 01                        sta 1,x         ; MSB of de-fudged index
001846r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001848r 3               
001848r 3  60           z_j:            rts
001849r 3               
001849r 3               
001849r 3               
001849r 3               ; ## KEY ( -- char ) "Get one character from the input"
001849r 3               ; ## "key"  tested  ANS core
001849r 3               xt_key:
001849r 3                       ; """https://forth-standard.org/standard/core/KEY
001849r 3                       ; Get a single character of input from the vectored
001849r 3                       ; input without echoing.
001849r 3                       ; """
001849r 3  20 rr rr                     jsr key_a               ; returns char in A
00184Cr 3               
00184Cr 3  CA                           dex
00184Dr 3  CA                           dex
00184Er 3  95 00                        sta 0,x
001850r 3  74 01                        stz 1,x
001852r 3               
001852r 3  60           z_key:          rts
001853r 3               
001853r 3               key_a:
001853r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
001853r 3                       ; 65816, so we have to fake the indirect jump to vector it.
001853r 3                       ; This is depressingly slow. We use this routine internally
001853r 3                       ; to avoid manipulating the Data Stack when we just want a
001853r 3                       ; character
001853r 3  6C rr rr                     jmp (input)             ; JSR/RTS
001856r 3               
001856r 3               
001856r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
001856r 3               ; ## "latestnt"  auto  Tali Forth
001856r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001856r 3                       ; The Gforth version of this word is called LATEST
001856r 3                       ; """
001856r 3               xt_latestnt:
001856r 3  CA                           dex
001857r 3  CA                           dex
001858r 3               
001858r 3  20 rr rr                     jsr current_to_dp
00185Br 3               
00185Br 3  A5 rr                        lda dp
00185Dr 3  95 00                        sta 0,x
00185Fr 3  A5 rr                        lda dp+1
001861r 3  95 01                        sta 1,x
001863r 3               
001863r 3  60           z_latestnt:     rts
001864r 3               
001864r 3               
001864r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
001864r 3               ; ## "latestxt"  auto  Gforth
001864r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
001864r 3               xt_latestxt:
001864r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001867r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
00186Ar 3               
00186Ar 3  60           z_latestxt:     rts
00186Br 3               
00186Br 3               
00186Br 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
00186Br 3               ; ## "leave"  auto  ANS core
00186Br 3                       ; """https://forth-standard.org/standard/core/LEAVE
00186Br 3                       ; Note that this does not work with anything but a DO/LOOP in
00186Br 3                       ; contrast to other versions such as discussed at
00186Br 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
00186Br 3                       ;
00186Br 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
00186Br 3                       ; See the Control Flow section in the manual for details of how this works.
00186Br 3                       ; This must be native compile and not IMMEDIATE
00186Br 3                       ; """
00186Br 3               
00186Br 3               xt_leave:
00186Br 3                               ; We dump the limit/start entries off the Return Stack
00186Br 3                               ; (four bytes)
00186Br 3  68                           pla
00186Cr 3  68                           pla
00186Dr 3  68                           pla
00186Er 3  68                           pla
00186Fr 3               
00186Fr 3  60                           rts             ; this must be compiled, so keep before z_leave
001870r 3               z_leave:                        ; not reached, not compiled
001870r 3               
001870r 3               
001870r 3               
001870r 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
001870r 3               ; ## "["  auto  ANS core
001870r 3                       ; """https://forth-standard.org/standard/core/Bracket
001870r 3                       ; This is an immediate and compile-only word
001870r 3                       ; """
001870r 3               xt_left_bracket:
001870r 3  64 rr                        stz state
001872r 3  64 rr                        stz state+1
001874r 3               
001874r 3  60           z_left_bracket: rts
001875r 3               
001875r 3               
001875r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
001875r 3               ; ## "<#"  auto  ANS core
001875r 3                       ; """https://forth-standard.org/standard/core/num-start
001875r 3                       ; Start the process to create pictured numeric output.
001875r 3                       ;
001875r 3                       ; The new
001875r 3                       ; string is constructed from back to front, saving the new character
001875r 3                       ; at the beginning of the output string. Since we use PAD as a
001875r 3                       ; starting address and work backward (!), the string is constructed
001875r 3                       ; in the space between the end of the Dictionary (as defined by CP)
001875r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
001875r 3                       ; programs don't fool around with the PAD but still use its address.
001875r 3                       ; Based on pForth
001875r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
001875r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
001875r 3                       ; internal variable tohold instead of HLD.
001875r 3                       ; """
001875r 3               xt_less_number_sign:
001875r 3  20 rr rr                     jsr xt_pad      ; ( addr )
001878r 3               
001878r 3  B5 00                        lda 0,x
00187Ar 3  85 rr                        sta tohold
00187Cr 3  B5 01                        lda 1,x
00187Er 3  85 rr                        sta tohold+1
001880r 3               
001880r 3  E8                           inx
001881r 3  E8                           inx
001882r 3               
001882r 3               z_less_number_sign:
001882r 3  60                           rts
001883r 3               
001883r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
001883r 3               ; ## "<"  auto  ANS core
001883r 3                       ; """https://forth-standard.org/standard/core/less"""
001883r 3               
001883r 3               xt_less_than:
001883r 3  20 rr rr                     jsr underflow_2
001886r 3               
001886r 3  A0 00                        ldy #0          ; default false
001888r 3  20 rr rr                     jsr compare_16bit
00188Br 3               
00188Br 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
00188Br 3  F0 03                        beq @false
00188Dr 3  30 01                        bmi @false
00188Fr 3               
00188Fr 3                               ; true
00188Fr 3  88                           dey
001890r 3               @false:
001890r 3  98                           tya
001891r 3               
001891r 3  E8                           inx
001892r 3  E8                           inx
001893r 3  95 00                        sta 0,x
001895r 3  95 01                        sta 1,x
001897r 3               
001897r 3  60           z_less_than:    rts
001898r 3               
001898r 3               
001898r 3               
001898r 3               ; ## LIST ( scr# -- ) "List the given screen"
001898r 3               ; ## "list"  tested  ANS block ext
001898r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001898r 3               
001898r 3               xt_list:
001898r 3  20 rr rr                     jsr underflow_1
00189Br 3               
00189Br 3                               ; Save the screen number in SCR
00189Br 3  20 rr rr                     jsr xt_scr
00189Er 3  20 rr rr                     jsr xt_store
0018A1r 3               
0018A1r 3                               ; Use L from the editor-wordlist to display the screen.
0018A1r 3  20 rr rr                     jsr xt_editor_l
0018A4r 3               
0018A4r 3  60           z_list:         rts
0018A5r 3               
0018A5r 3               
0018A5r 3               
0018A5r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
0018A5r 3               ; ## "literal"  auto  ANS core
0018A5r 3                       ; """https://forth-standard.org/standard/core/LITERAL
0018A5r 3                       ; Compile-only word to store TOS so that it is pushed on stack
0018A5r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
0018A5r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
0018A5r 3                       ;
0018A5r 3                       ; Note the cmpl_ routines use TMPTOS
0018A5r 3                       ; """
0018A5r 3               xt_literal:
0018A5r 3  20 rr rr                     jsr underflow_1
0018A8r 3               
0018A8r 3  A0 rr                        ldy #>literal_runtime
0018AAr 3  A9 rr                        lda #<literal_runtime
0018ACr 3  20 rr rr                     jsr cmpl_subroutine
0018AFr 3               
0018AFr 3                               ; Compile the value that is to be pushed on the Stack during
0018AFr 3                               ; runtime
0018AFr 3  20 rr rr                     jsr xt_comma
0018B2r 3               
0018B2r 3  60           z_literal:      rts
0018B3r 3               
0018B3r 3               literal_runtime:
0018B3r 3               
0018B3r 3                               ; During runtime, we push the value following this word back
0018B3r 3                               ; on the Data Stack. The subroutine jump that brought us
0018B3r 3                               ; here put the address to return to on the Return Stack -
0018B3r 3                               ; this points to the data we need to get. This routine is
0018B3r 3                               ; also called (LITERAL) in some Forths
0018B3r 3  CA                           dex
0018B4r 3  CA                           dex
0018B5r 3               
0018B5r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
0018B5r 3                               ; so we are actually popping the address-1 of the literal
0018B5r 3  68                           pla             ; LSB
0018B6r 3  85 rr                        sta tmp1
0018B8r 3  68                           pla             ; MSB
0018B9r 3  85 rr                        sta tmp1+1
0018BBr 3               
0018BBr 3                               ; Fetch the actual literal value and push it on Data stack
0018BBr 3  A0 01                        ldy #1
0018BDr 3  B1 rr                        lda (tmp1),y    ; LSB
0018BFr 3  95 00                        sta 0,x
0018C1r 3  C8                           iny
0018C2r 3  B1 rr                        lda (tmp1),y    ; MSB
0018C4r 3  95 01                        sta 1,x
0018C6r 3               
0018C6r 3                               ; Adjust return address and push back on the Return Stack
0018C6r 3  98                           tya
0018C7r 3  18                           clc
0018C8r 3  65 rr                        adc tmp1
0018CAr 3  A8                           tay
0018CBr 3  A5 rr                        lda tmp1+1
0018CDr 3  69 00                        adc #0
0018CFr 3  48                           pha
0018D0r 3  5A                           phy
0018D1r 3               
0018D1r 3  60                           rts
0018D2r 3               
0018D2r 3               
0018D2r 3               
0018D2r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
0018D2r 3               ; ## "load"  auto  ANS block
0018D2r 3                       ; """https://forth-standard.org/standard/block/LOAD
0018D2r 3                       ;
0018D2r 3                       ; Note: LOAD current works because there is only one buffer.
0018D2r 3                       ; If/when multiple buffers are supported, we'll have to deal
0018D2r 3                       ; with the fact that it might re-load the old block into a
0018D2r 3                       ; different buffer.
0018D2r 3                       ; """
0018D2r 3               
0018D2r 3               xt_load:
0018D2r 3  20 rr rr                     jsr underflow_1
0018D5r 3               
0018D5r 3                               ; Save the current value of BLK on the return stack.
0018D5r 3  A0 01                        ldy #blk_offset+1
0018D7r 3  B1 rr                        lda (up),y
0018D9r 3  48                           pha
0018DAr 3  88                           dey
0018DBr 3  B1 rr                        lda (up),y
0018DDr 3  48                           pha
0018DEr 3               
0018DEr 3                               ; Set BLK to the given block/screen number.
0018DEr 3  B5 00                        lda 0,x
0018E0r 3  91 rr                        sta (up),y
0018E2r 3  C8                           iny
0018E3r 3  B5 01                        lda 1,x
0018E5r 3  91 rr                        sta (up),y
0018E7r 3               
0018E7r 3                               ; Load that block into a buffer
0018E7r 3  20 rr rr                     jsr xt_block
0018EAr 3               
0018EAr 3                               ; Put 1024 on the stack for the screen length.
0018EAr 3  CA                           dex
0018EBr 3  CA                           dex
0018ECr 3  A9 04                        lda #4
0018EEr 3  95 01                        sta 1,x
0018F0r 3  74 00                        stz 0,x
0018F2r 3               
0018F2r 3                               ; Jump to a special evluate target. This bypasses the underflow
0018F2r 3                               ; check and skips the zeroing of BLK.
0018F2r 3  20 rr rr                     jsr load_evaluate
0018F5r 3               
0018F5r 3                               ; Restore the value of BLK from before the LOAD command.
0018F5r 3  A0 00                        ldy #blk_offset
0018F7r 3  68                           pla
0018F8r 3  91 rr                        sta (up),y
0018FAr 3  C8                           iny
0018FBr 3  68                           pla
0018FCr 3  91 rr                        sta (up),y
0018FEr 3               
0018FEr 3                               ; If BLK is not zero, read it back into the buffer.
0018FEr 3                               ; A still has MSB
0018FEr 3  88                           dey
0018FFr 3  11 rr                        ora (up),y
001901r 3  F0 12                        beq @done
001903r 3               
001903r 3                               ; The block needs to be read back into the buffer.
001903r 3  CA                           dex
001904r 3  CA                           dex
001905r 3  A0 00                        ldy #blk_offset
001907r 3  B1 rr                        lda (up),y
001909r 3  95 00                        sta 0,x
00190Br 3  C8                           iny
00190Cr 3  B1 rr                        lda (up),y
00190Er 3  95 01                        sta 1,x
001910r 3  20 rr rr                     jsr xt_block
001913r 3               
001913r 3                               ; Drop the buffer address.
001913r 3  E8                           inx
001914r 3  E8                           inx
001915r 3               
001915r 3               @done:
001915r 3  60           z_load:         rts
001916r 3               
001916r 3               
001916r 3               
001916r 3               ; ## LOOP ( -- ) "Finish loop construct"
001916r 3               ; ## "loop"  auto  ANS core
001916r 3                       ; """https://forth-standard.org/standard/core/LOOP
001916r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
001916r 3                       ; the stack and then call +LOOP.
001916r 3                       ;
001916r 3                       ; In Forth, this is
001916r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
001916r 3                       ;       IMMEDIATE ; COMPILE-ONLY
001916r 3                       ; """
001916r 3               xt_loop:
001916r 3                               ; Have the finished word push 1 on the stack
001916r 3  A0 rr                        ldy #>xt_one
001918r 3  A9 rr                        lda #<xt_one
00191Ar 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
00191Dr 3               
00191Dr 3               
00191Dr 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
00191Dr 3               ; ## "+loop"  auto  ANS core
00191Dr 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
00191Dr 3                       ;
00191Dr 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
00191Dr 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
00191Dr 3                       ;       COMPILE-ONLY
00191Dr 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
00191Dr 3                       ; address for looping as TOS and the address for aborting the loop
00191Dr 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
00191Dr 3                       ; DO and the Control Flow section of the manual for details).
00191Dr 3                       ; """
00191Dr 3               
00191Dr 3               xt_plus_loop:
00191Dr 3                               ; Compile the run-time part. We do this with a short loop
00191Dr 3                               ; and not a call to COMPILE, because it has to be natively
00191Dr 3                               ; coded anyway.
00191Dr 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
00191Fr 3  5A                           phy             ; save counter to adjust CP
001920r 3               @1:
001920r 3  B9 rr rr                     lda plus_loop_runtime,y
001923r 3  91 rr                        sta (cp),y
001925r 3  88                           dey
001926r 3  10 F8                        bpl @1
001928r 3               
001928r 3                               ; Adjust CP
001928r 3  68                           pla
001929r 3  18                           clc
00192Ar 3  65 rr                        adc cp
00192Cr 3  85 rr                        sta cp
00192Er 3  A5 rr                        lda cp+1
001930r 3  69 00                        adc #0          ; only need carry
001932r 3  85 rr                        sta cp+1
001934r 3               
001934r 3                               ; The address we need to loop back to is TOS. Store it so
001934r 3                               ; the runtime part of +LOOP jumps back up there
001934r 3  20 rr rr                     jsr xt_comma
001937r 3               
001937r 3                               ; Compile an UNLOOP for when we're all done. This is a series
001937r 3                               ; of six PLA, so we just do it here instead jumping around
001937r 3                               ; all over the place
001937r 3  A9 68                        lda #$68                ; opcode for PLA
001939r 3  A0 06                        ldy #6
00193Br 3               @2:
00193Br 3  91 rr                        sta (cp),y
00193Dr 3  88                           dey
00193Er 3  10 FB                        bpl @2
001940r 3               
001940r 3                               ; Adjust CP
001940r 3  A9 06                        lda #6
001942r 3  18                           clc
001943r 3  65 rr                        adc cp
001945r 3  85 rr                        sta cp
001947r 3  A5 rr                        lda cp+1
001949r 3  69 00                        adc #0                  ; only need carry
00194Br 3  85 rr                        sta cp+1
00194Dr 3               
00194Dr 3                               ; Complete compile of DO/?DO by replacing the six
00194Dr 3                               ; dummy bytes by PHA instructions. The address where
00194Dr 3                               ; they are located is on the Data Stack
00194Dr 3  B5 00                        lda 0,x
00194Fr 3  85 rr                        sta tmp1
001951r 3  B5 01                        lda 1,x
001953r 3  85 rr                        sta tmp1+1
001955r 3  E8                           inx
001956r 3  E8                           inx
001957r 3               
001957r 3                               ; Because of the way that CP works, we don't have to save
001957r 3                               ; CP, but CP-1
001957r 3  A5 rr                        lda cp
001959r 3  38                           sec
00195Ar 3  E9 01                        sbc #1
00195Cr 3  85 rr                        sta tmp2
00195Er 3  A5 rr                        lda cp+1
001960r 3  E9 00                        sbc #0
001962r 3  85 rr                        sta tmp2+1
001964r 3               
001964r 3                               ; now compile this in the DO/?DO routine
001964r 3  A0 00                        ldy #0
001966r 3               
001966r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001968r 3  91 rr                        sta (tmp1),y
00196Ar 3  C8                           iny
00196Br 3  A5 rr                        lda tmp2+1      ; MSB
00196Dr 3  91 rr                        sta (tmp1),y
00196Fr 3  C8                           iny
001970r 3  A9 48                        lda #$48        ; Opcode for PHA
001972r 3  91 rr                        sta (tmp1),y
001974r 3  C8                           iny
001975r 3               
001975r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001977r 3  91 rr                        sta (tmp1),y
001979r 3  C8                           iny
00197Ar 3  A5 rr                        lda tmp2        ; LSB
00197Cr 3  91 rr                        sta (tmp1),y
00197Er 3  C8                           iny
00197Fr 3  A9 48                        lda #$48        ; Opcode for PHA
001981r 3  91 rr                        sta (tmp1),y
001983r 3               z_loop:
001983r 3  60           z_plus_loop:    rts
001984r 3               
001984r 3               
001984r 3               plus_loop_runtime:
001984r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001984r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001984r 3                       ; loop control so we can test with the Overflow Flag. See
001984r 3                       ; the Control Flow section of the manual for details.
001984r 3                       ; The step value is TOS in the loop. This
001984r 3                       ; must always be native compiled. In some Forths, this is a separate
001984r 3                       ; word called (+LOOP) or (LOOP)
001984r 3                       ; """
001984r 3               
001984r 3  18                           clc
001985r 3  68                           pla             ; LSB of index
001986r 3  75 00                        adc 0,x         ; LSB of step
001988r 3  A8                           tay             ; temporary storage of LSB
001989r 3               
001989r 3  B8                           clv
00198Ar 3  68                           pla             ; MSB of index
00198Br 3  75 01                        adc 1,x         ; MSB of step
00198Dr 3  48                           pha             ; put MSB of index back on stack
00198Er 3               
00198Er 3  98                           tya             ; put LSB of index back on stack
00198Fr 3  48                           pha
001990r 3               
001990r 3  E8                           inx             ; dump step from TOS
001991r 3  E8                           inx
001992r 3               
001992r 3                               ; If V flag is set, we're done looping and continue
001992r 3                               ; after the +LOOP instruction
001992r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001994r 3               
001994r 3               @hack:          ; This is why this routine must be natively compiled: We
001994r 3                               ; compile the opcode for JMP here without an address to
001994r 3                               ; go to, which is added by the next next instruction of
001994r 3                               ; LOOP/+LOOP during compile time
001994r 3  4C                           .byte $4C
001995r 3               
001995r 3               plus_loop_runtime_end:
001995r 3               
001995r 3               
001995r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001995r 3               ; ## "lshift"  auto  ANS core
001995r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001995r 3               
001995r 3               xt_lshift:
001995r 3  20 rr rr                     jsr underflow_2
001998r 3               
001998r 3                               ; max shift 16 times
001998r 3  B5 00                        lda 0,x
00199Ar 3  29 0F                        and #%00001111
00199Cr 3  F0 08                        beq @done
00199Er 3               
00199Er 3  A8                           tay
00199Fr 3               
00199Fr 3               @loop:
00199Fr 3  16 02                        asl 2,x
0019A1r 3  36 03                        rol 3,x
0019A3r 3  88                           dey
0019A4r 3  D0 F9                        bne @loop
0019A6r 3               
0019A6r 3               @done:
0019A6r 3  E8                           inx
0019A7r 3  E8                           inx
0019A8r 3               
0019A8r 3  60           z_lshift:       rts
0019A9r 3               
0019A9r 3               
0019A9r 3               
0019A9r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
0019A9r 3               ; ## "m*"  auto  ANS core
0019A9r 3                       ; """https://forth-standard.org/standard/core/MTimes
0019A9r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
0019A9r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
0019A9r 3                       ;
0019A9r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
0019A9r 3                       ; with  : D+- O< IF DNEGATE THEN ;
0019A9r 3                       ; """
0019A9r 3               
0019A9r 3               xt_m_star:
0019A9r 3  20 rr rr                     jsr underflow_2
0019ACr 3               
0019ACr 3                               ; figure out the sign
0019ACr 3  B5 01                        lda 1,x         ; MSB of n1
0019AEr 3  55 03                        eor 3,x         ; MSB of n2
0019B0r 3               
0019B0r 3                               ; UM* uses all kinds of temporary variables so we don't
0019B0r 3                               ; risk a conflict but just take the cycle hit and push
0019B0r 3                               ; this to the stack
0019B0r 3  48                           pha
0019B1r 3               
0019B1r 3                               ; get the absolute value of both numbers so we can feed
0019B1r 3                               ; them to UM*, which does the real work
0019B1r 3  20 rr rr                     jsr xt_abs
0019B4r 3  20 rr rr                     jsr xt_swap
0019B7r 3  20 rr rr                     jsr xt_abs
0019BAr 3               
0019BAr 3  20 rr rr                     jsr xt_um_star          ; ( d )
0019BDr 3               
0019BDr 3                               ; handle the sign
0019BDr 3  68                           pla
0019BEr 3  10 03                        bpl @done
0019C0r 3               
0019C0r 3  20 rr rr                     jsr xt_dnegate
0019C3r 3               @done:
0019C3r 3  60           z_m_star:       rts
0019C4r 3               
0019C4r 3               
0019C4r 3               
0019C4r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
0019C4r 3               ; ## "marker"  auto  ANS core ext
0019C4r 3                       ; """https://forth-standard.org/standard/core/MARKER
0019C4r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
0019C4r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
0019C4r 3                       ; Run the named word at a later time to restore all of the wordlists
0019C4r 3                       ; to their state when the word was created with marker.  Any words
0019C4r 3                       ; created after the marker (including the marker) will be forgotten.
0019C4r 3                       ;
0019C4r 3                       ; To do this, we want to end up with something that jumps to a
0019C4r 3                       ; run-time component with a link to the original CP and DP values:
0019C4r 3                       ;
0019C4r 3                       ;       jsr marker_runtime
0019C4r 3                       ;       <Original CP MSB>
0019C4r 3                       ;       <Original CP LSB>
0019C4r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
0019C4r 3                       ;       <Original DP LSB>
0019C4r 3                       ;       < USER variables from offset 4 to 39 >
0019C4r 3                       ;
0019C4r 3                       ;       The user variables include:
0019C4r 3                       ;       CURRENT (byte variable)
0019C4r 3                       ;       <All wordlists> (currently 12) (cell array)
0019C4r 3                       ;       <#ORDER> (byte variable)
0019C4r 3                       ;       <All search order> (currently 9) (byte array)
0019C4r 3                       ;
0019C4r 3                       ; This code uses tmp1 and tmp2
0019C4r 3                       ; """
0019C4r 3               
0019C4r 3               xt_marker:
0019C4r 3                               ; Before we do anything, we need to save CP, which
0019C4r 3                               ; after all is the whole point of this operation. CREATE
0019C4r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
0019C4r 3                               ; to the stack
0019C4r 3  20 rr rr                     jsr current_to_dp
0019C7r 3               
0019C7r 3  A5 rr                        lda dp
0019C9r 3  48                           pha
0019CAr 3  A5 rr                        lda dp+1
0019CCr 3  48                           pha
0019CDr 3               
0019CDr 3  A5 rr                        lda cp
0019CFr 3  48                           pha
0019D0r 3  A5 rr                        lda cp+1
0019D2r 3  48                           pha
0019D3r 3               
0019D3r 3  20 rr rr                     jsr xt_create
0019D6r 3               
0019D6r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
0019D6r 3                               ; we have to replace by a jump to marker_runtime. We back up
0019D6r 3                               ; two bytes and then overwrite the address
0019D6r 3  A5 rr                        lda cp          ; LSB
0019D8r 3  38                           sec
0019D9r 3  E9 02                        sbc #2
0019DBr 3  85 rr                        sta cp
0019DDr 3               
0019DDr 3  A5 rr                        lda cp+1        ; MSB
0019DFr 3  E9 00                        sbc #0          ; we only care about the borrow
0019E1r 3  85 rr                        sta cp+1
0019E3r 3               
0019E3r 3                               ; Add the address of the runtime component
0019E3r 3  A0 rr                        ldy #>marker_runtime
0019E5r 3  A9 rr                        lda #<marker_runtime
0019E7r 3  20 rr rr                     jsr cmpl_word
0019EAr 3               
0019EAr 3                               ; Add original CP as payload
0019EAr 3  7A                           ply                     ; MSB
0019EBr 3  68                           pla                     ; LSB
0019ECr 3  20 rr rr                     jsr cmpl_word
0019EFr 3               
0019EFr 3                               ; Add original DP as payload
0019EFr 3  7A                           ply                     ; MSB
0019F0r 3  68                           pla                     ; LSB
0019F1r 3  20 rr rr                     jsr cmpl_word
0019F4r 3               
0019F4r 3                               ; Add the user variables for the wordlists and search order.
0019F4r 3                               ; We're compiling them in byte order.
0019F4r 3  A0 04                        ldy #4                  ; Start at CURRENT
0019F6r 3               @marker_loop:
0019F6r 3  B1 rr                        lda (up),y
0019F8r 3  20 rr rr                     jsr cmpl_a
0019FBr 3  C8                           iny
0019FCr 3  98                           tya
0019FDr 3  C9 28                        cmp #40                 ; One past the end of the search order.
0019FFr 3  D0 F5                        bne @marker_loop
001A01r 3               
001A01r 3  60           z_marker:       rts
001A02r 3               
001A02r 3               
001A02r 3               
001A02r 3               marker_runtime:
001A02r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
001A02r 3                       ; when this marker was defined. We arrive here with the return
001A02r 3                       ; address on the Return Stack in the usual 65c02 format
001A02r 3                       ; """
001A02r 3               
001A02r 3                               ; Get the address of the string address off the stack and
001A02r 3                               ; increase by one because of the RTS mechanics
001A02r 3  68                           pla
001A03r 3  85 rr                        sta tmp1        ; LSB of address
001A05r 3  68                           pla
001A06r 3  85 rr                        sta tmp1+1      ; MSB of address
001A08r 3               
001A08r 3  E6 rr                        inc tmp1
001A0Ar 3  D0 02                        bne @1
001A0Cr 3  E6 rr                        inc tmp1+1
001A0Er 3               @1:
001A0Er 3  A0 00                        ldy #0
001A10r 3               
001A10r 3                               ; CP was stored first
001A10r 3  B1 rr                        lda (tmp1),y
001A12r 3  85 rr                        sta cp
001A14r 3  C8                           iny
001A15r 3  B1 rr                        lda (tmp1),y
001A17r 3  85 rr                        sta cp+1
001A19r 3               
001A19r 3                               ; Next was DP
001A19r 3  C8                           iny
001A1Ar 3  B1 rr                        lda (tmp1),y
001A1Cr 3  85 rr                        sta dp
001A1Er 3  C8                           iny
001A1Fr 3  B1 rr                        lda (tmp1),y
001A21r 3  85 rr                        sta dp+1
001A23r 3               
001A23r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001A23r 3                               ; to start restoring the wordlists and search order.
001A23r 3  A0 04                        ldy #4
001A25r 3               
001A25r 3               @marker_restore_loop:
001A25r 3                               ; Copy from the dictionary back on top of the wordlists
001A25r 3                               ; and search order.
001A25r 3  B1 rr                        lda (tmp1), y
001A27r 3  91 rr                        sta (up), y
001A29r 3  C8                           iny
001A2Ar 3  98                           tya
001A2Br 3  C9 28                        cmp #40                 ; One past the end of the search order.
001A2Dr 3  D0 F6                        bne @marker_restore_loop
001A2Fr 3               
001A2Fr 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001A32r 3               
001A32r 3                               ; The return instruction takes us back to the original caller
001A32r 3  60                           rts
001A33r 3               
001A33r 3               
001A33r 3               
001A33r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001A33r 3               ; ## "max"  auto  ANS core
001A33r 3                       ; """https://forth-standard.org/standard/core/MAX
001A33r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001A33r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001A33r 3                       ; Flag indicates which number is larger. See also
001A33r 3                       ; http://6502.org/tutorials/compare_instructions.html and
001A33r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001A33r 3                       ; """
001A33r 3               
001A33r 3               xt_max:
001A33r 3  20 rr rr                     jsr underflow_2
001A36r 3               
001A36r 3                               ; Compare LSB. We do this first to set the carry flag
001A36r 3  B5 00                        lda 0,x         ; LSB of TOS
001A38r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001A3Ar 3               
001A3Ar 3  B5 01                        lda 1,x         ; MSB of TOS
001A3Cr 3  F5 03                        sbc 3,x         ; MSB of NOS
001A3Er 3  50 02                        bvc @no_overflow
001A40r 3               
001A40r 3                               ; handle overflow, because we use signed numbers
001A40r 3  49 80                        eor #$80        ; complement negative flag
001A42r 3               
001A42r 3               @no_overflow:
001A42r 3                               ; if negative, NOS is larger and needs to be kept
001A42r 3  30 08                        bmi @keep_nos
001A44r 3               
001A44r 3                               ; move TOS to NOS
001A44r 3  B5 00                        lda 0,x
001A46r 3  95 02                        sta 2,x
001A48r 3  B5 01                        lda 1,x
001A4Ar 3  95 03                        sta 3,x
001A4Cr 3               
001A4Cr 3               @keep_nos:
001A4Cr 3  E8                           inx
001A4Dr 3  E8                           inx
001A4Er 3               
001A4Er 3  60           z_max:          rts
001A4Fr 3               
001A4Fr 3               
001A4Fr 3               
001A4Fr 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
001A4Fr 3               ; ## "min"  auto  ANS core
001A4Fr 3                       ; """https://forth-standard.org/standard/core/MIN
001A4Fr 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
001A4Fr 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
001A4Fr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001A4Fr 3                       ; """
001A4Fr 3               
001A4Fr 3               xt_min:
001A4Fr 3  20 rr rr                     jsr underflow_2
001A52r 3               
001A52r 3                               ; compare LSB. We do this first to set the carry flag
001A52r 3  B5 00                        lda 0,x         ; LSB of TOS
001A54r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001A56r 3               
001A56r 3  B5 01                        lda 1,x         ; MSB of TOS
001A58r 3  F5 03                        sbc 3,x         ; MSB of NOS
001A5Ar 3  50 02                        bvc @no_overflow
001A5Cr 3               
001A5Cr 3                               ; handle overflow because we use signed numbers
001A5Cr 3  49 80                        eor #$80
001A5Er 3               
001A5Er 3               @no_overflow:
001A5Er 3                               ; if negative, NOS is larger and needs to be dumped
001A5Er 3  10 08                        bpl @keep_nos
001A60r 3               
001A60r 3                               ; move TOS to NOS
001A60r 3  B5 00                        lda 0,x
001A62r 3  95 02                        sta 2,x
001A64r 3  B5 01                        lda 1,x
001A66r 3  95 03                        sta 3,x
001A68r 3               
001A68r 3               @keep_nos:
001A68r 3  E8                           inx
001A69r 3  E8                           inx
001A6Ar 3               
001A6Ar 3  60           z_min:          rts
001A6Br 3               
001A6Br 3               
001A6Br 3               
001A6Br 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001A6Br 3               ; ## "-"  auto  ANS core
001A6Br 3                       ; """https://forth-standard.org/standard/core/Minus"""
001A6Br 3               xt_minus:
001A6Br 3  20 rr rr                     jsr underflow_2
001A6Er 3               
001A6Er 3  38                           sec
001A6Fr 3  B5 02                        lda 2,x         ; LSB
001A71r 3  F5 00                        sbc 0,x
001A73r 3  95 02                        sta 2,x
001A75r 3               
001A75r 3  B5 03                        lda 3,x         ; MSB
001A77r 3  F5 01                        sbc 1,x
001A79r 3  95 03                        sta 3,x
001A7Br 3               
001A7Br 3  E8                           inx
001A7Cr 3  E8                           inx
001A7Dr 3               
001A7Dr 3  60           z_minus:        rts
001A7Er 3               
001A7Er 3               
001A7Er 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
001A7Er 3               ; ## "-leading"  auto  Tali String
001A7Er 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
001A7Er 3                       ; """
001A7Er 3               
001A7Er 3               xt_minus_leading:
001A7Er 3  20 rr rr                     jsr underflow_2
001A81r 3               
001A81r 3               @loop:
001A81r 3                               ; Quit if we were given an empty string. This also terminates
001A81r 3                               ; the main loop
001A81r 3  B5 00                        lda 0,x
001A83r 3  15 01                        ora 1,x
001A85r 3  F0 0F                        beq @done
001A87r 3               
001A87r 3  A1 02                        lda (2,x)               ; get first character
001A89r 3  20 rr rr                     jsr is_whitespace
001A8Cr 3  90 08                        bcc @done
001A8Er 3               
001A8Er 3                               ; It's whitespace, move one down
001A8Er 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001A91r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001A94r 3               
001A94r 3  80 EB                        bra @loop
001A96r 3               @done:
001A96r 3               z_minus_leading:
001A96r 3  60                           rts
001A97r 3               
001A97r 3               
001A97r 3               
001A97r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001A97r 3               ; ## "-trailing"  auto  ANS string
001A97r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001A97r 3                       ; Remove trailing spaces
001A97r 3                       ; """
001A97r 3               
001A97r 3               xt_minus_trailing:
001A97r 3  20 rr rr                     jsr underflow_2
001A9Ar 3               
001A9Ar 3                               ; if length entry is zero, return a zero and leave the
001A9Ar 3                               ; address part untouched
001A9Ar 3  B5 00                        lda 0,x         ; LSB of n
001A9Cr 3  15 01                        ora 1,x         ; MSB of n
001A9Er 3  F0 33                        beq @done
001AA0r 3               
001AA0r 3                               ; Compute address of last char in tmp1 as
001AA0r 3                               ; addr + u1 - 1
001AA0r 3               
001AA0r 3                               ; addr + u1
001AA0r 3  18                           clc
001AA1r 3  B5 02                        lda 2,x         ; LSB of addr
001AA3r 3  75 00                        adc 0,x
001AA5r 3  85 rr                        sta tmp1
001AA7r 3  B5 03                        lda 3,x         ; MSB of addr
001AA9r 3  75 01                        adc 1,x
001AABr 3  85 rr                        sta tmp1+1
001AADr 3               
001AADr 3                               ; - 1
001AADr 3  A5 rr                        lda tmp1
001AAFr 3  D0 02                        bne @1
001AB1r 3  C6 rr                        dec tmp1+1
001AB3r 3               @1:
001AB3r 3  C6 rr                        dec tmp1
001AB5r 3               
001AB5r 3               @loop:
001AB5r 3                               ; While spaces are found, move tmp1 backwards and
001AB5r 3                               ; decrease the count on the data stack.
001AB5r 3  B2 rr                        lda (tmp1)
001AB7r 3  C9 20                        cmp #AscSP
001AB9r 3  D0 18                        bne @done
001ABBr 3               
001ABBr 3                               ; Move back one address.
001ABBr 3  A5 rr                        lda tmp1
001ABDr 3  D0 02                        bne @2
001ABFr 3  C6 rr                        dec tmp1+1
001AC1r 3               @2:
001AC1r 3  C6 rr                        dec tmp1
001AC3r 3               
001AC3r 3                               ; Decrement count by one.
001AC3r 3  B5 00                        lda 0,x
001AC5r 3  D0 02                        bne @3
001AC7r 3  D6 01                        dec 1,x
001AC9r 3               @3:
001AC9r 3  D6 00                        dec 0,x
001ACBr 3               
001ACBr 3                               ; Check if there are any characters left.
001ACBr 3  B5 00                        lda 0,x
001ACDr 3  15 01                        ora 1,x
001ACFr 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001AD1r 3               
001AD1r 3  80 E2                        bra @loop
001AD3r 3               
001AD3r 3               @done:
001AD3r 3               z_minus_trailing:
001AD3r 3  60                           rts
001AD4r 3               
001AD4r 3               
001AD4r 3               
001AD4r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001AD4r 3               ; ## "mod"  auto  ANS core
001AD4r 3                       ; """https://forth-standard.org/standard/core/MOD
001AD4r 3                       ;
001AD4r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001AD4r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001AD4r 3                       ; """
001AD4r 3               xt_mod:
001AD4r 3  20 rr rr                     jsr underflow_2
001AD7r 3               
001AD7r 3  20 rr rr                     jsr xt_slash_mod
001ADAr 3               
001ADAr 3  E8                           inx             ; DROP
001ADBr 3  E8                           inx
001ADCr 3               z_mod:
001ADCr 3  60                           rts
001ADDr 3               
001ADDr 3               
001ADDr 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001ADDr 3               ; ## "move"  auto  ANS core
001ADDr 3                       ; """https://forth-standard.org/standard/core/MOVE
001ADDr 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001ADDr 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001ADDr 3                       ; is actually the only one of these three words that is in the CORE
001ADDr 3                       ; set.
001ADDr 3                       ;
001ADDr 3                       ; This word must not be natively compiled.
001ADDr 3                       ; """
001ADDr 3               
001ADDr 3               xt_move:
001ADDr 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001ADDr 3                               ; we've been told to copy zero bytes
001ADDr 3               
001ADDr 3                               ; compare MSB first
001ADDr 3  B5 03                        lda 3,x                 ; MSB of addr2
001ADFr 3  D5 05                        cmp 5,x                 ; MSB of addr1
001AE1r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001AE3r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001AE5r 3               
001AE5r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001AE8r 3               
001AE8r 3               @lsb:
001AE8r 3                               ; MSB were equal, so do the whole thing over with LSB
001AE8r 3  B5 02                        lda 2,x                 ; LSB of addr2
001AEAr 3  D5 04                        cmp 4,x                 ; LSB of addr1
001AECr 3  F0 08                        beq @equal              ; LSB is equal as well
001AEEr 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
001AF0r 3               
001AF0r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001AF3r 3               
001AF3r 3               @to_move_up:
001AF3r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001AF6r 3               @equal:
001AF6r 3                               ; drop three entries from Data Stack
001AF6r 3  8A                           txa
001AF7r 3  18                           clc
001AF8r 3  69 06                        adc #6
001AFAr 3  AA                           tax
001AFBr 3               
001AFBr 3  60           z_move:         rts
001AFCr 3               
001AFCr 3               
001AFCr 3               
001AFCr 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001AFCr 3               ; ## "name>int"  tested  Gforth
001AFCr 3                       ; """See
001AFCr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001AFCr 3                       ; """
001AFCr 3               
001AFCr 3               xt_name_to_int:
001AFCr 3  20 rr rr                     jsr underflow_1
001AFFr 3               
001AFFr 3                               ; The xt starts four bytes down from the nt
001AFFr 3  B5 00                        lda 0,x
001B01r 3  18                           clc
001B02r 3  69 04                        adc #4
001B04r 3  85 rr                        sta tmp3
001B06r 3               
001B06r 3  B5 01                        lda 1,x
001B08r 3  90 01                        bcc @done
001B0Ar 3  1A                           inc
001B0Br 3               @done:
001B0Br 3  85 rr                        sta tmp3+1
001B0Dr 3               
001B0Dr 3  A0 00                        ldy #0
001B0Fr 3  B1 rr                        lda (tmp3),y
001B11r 3  95 00                        sta 0,x
001B13r 3  C8                           iny
001B14r 3  B1 rr                        lda (tmp3),y
001B16r 3  95 01                        sta 1,x
001B18r 3               
001B18r 3  60           z_name_to_int:  rts
001B19r 3               
001B19r 3               
001B19r 3               
001B19r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001B19r 3               ; ## "name>string"  tested  Gforth
001B19r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001B19r 3               
001B19r 3               xt_name_to_string:
001B19r 3  20 rr rr                     jsr underflow_1
001B1Cr 3               
001B1Cr 3  CA                           dex
001B1Dr 3  CA                           dex
001B1Er 3               
001B1Er 3                               ; the length of the string is the first byte of the
001B1Er 3                               ; header pointed to by nt
001B1Er 3  A1 02                        lda (2,x)
001B20r 3  95 00                        sta 0,x
001B22r 3  74 01                        stz 1,x
001B24r 3               
001B24r 3                               ; the string itself always starts eight bytes down
001B24r 3  B5 02                        lda 2,x         ; LSB
001B26r 3  18                           clc
001B27r 3  69 08                        adc #8
001B29r 3  A8                           tay
001B2Ar 3  B5 03                        lda 3,x         ; MSB
001B2Cr 3  69 00                        adc #0          ; just need carry
001B2Er 3  95 03                        sta 3,x
001B30r 3  94 02                        sty 2,x
001B32r 3               
001B32r 3               z_name_to_string:
001B32r 3  60                           rts
001B33r 3               
001B33r 3               
001B33r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001B33r 3               ; ## "nc-limit"  tested  Tali Forth
001B33r 3               
001B33r 3               xt_nc_limit:
001B33r 3  CA                           dex
001B34r 3  CA                           dex
001B35r 3  A9 rr                        lda #<nc_limit
001B37r 3  95 00                        sta 0,x
001B39r 3  A9 rr                        lda #>nc_limit
001B3Br 3  95 01                        sta 1,x
001B3Dr 3               
001B3Dr 3  60           z_nc_limit:     rts
001B3Er 3               
001B3Er 3               
001B3Er 3               
001B3Er 3               ; ## NEGATE ( n -- n ) "Two's complement"
001B3Er 3               ; ## "negate"  auto  ANS core
001B3Er 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001B3Er 3               xt_negate:
001B3Er 3  20 rr rr                     jsr underflow_1
001B41r 3               
001B41r 3  A9 00                	lda #0
001B43r 3  38                           sec
001B44r 3  F5 00                        sbc 0,x         ; LSB
001B46r 3  95 00                        sta 0,x
001B48r 3               
001B48r 3  A9 00                        lda #0
001B4Ar 3  F5 01                        sbc 1,x         ; MSB
001B4Cr 3  95 01                        sta 1,x
001B4Er 3               
001B4Er 3  60           z_negate:       rts
001B4Fr 3               
001B4Fr 3               
001B4Fr 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001B4Fr 3               ; ## "never-native"  auto  Tali Forth
001B4Fr 3               xt_never_native:
001B4Fr 3  20 rr rr                     jsr current_to_dp
001B52r 3  A0 01                        ldy #1          ; offset for status byte
001B54r 3  B1 rr                        lda (dp),y
001B56r 3  09 08                        ora #NN         ; Make sure NN flag is set
001B58r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001B5Ar 3  91 rr                        sta (dp),y
001B5Cr 3               z_never_native:
001B5Cr 3  60                           rts
001B5Dr 3               
001B5Dr 3               
001B5Dr 3               ; ## NIP ( b a -- a ) "Delete NOS"
001B5Dr 3               ; ## "nip"  auto  ANS core ext
001B5Dr 3                       ; """https://forth-standard.org/standard/core/NIP"""
001B5Dr 3               xt_nip:
001B5Dr 3  20 rr rr                     jsr underflow_2
001B60r 3               
001B60r 3  B5 00                        lda 0,x         ; LSB
001B62r 3  95 02                        sta 2,x
001B64r 3  B5 01                        lda 1,x         ; MSB
001B66r 3  95 03                        sta 3,x
001B68r 3               
001B68r 3  E8                           inx
001B69r 3  E8                           inx
001B6Ar 3               
001B6Ar 3  60           z_nip:          rts
001B6Br 3               
001B6Br 3               
001B6Br 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001B6Br 3               ; ## "<>"  auto  ANS core ext
001B6Br 3                       ; """https://forth-standard.org/standard/core/ne
001B6Br 3                       ;
001B6Br 3                       ; This is just a variant of EQUAL, we code it separately
001B6Br 3                       ; for speed.
001B6Br 3                       ; """
001B6Br 3               
001B6Br 3               xt_not_equals:
001B6Br 3  20 rr rr                     jsr underflow_2
001B6Er 3               
001B6Er 3  A0 00                        ldy #0                  ; default is true
001B70r 3               
001B70r 3  B5 00                        lda 0,x                 ; LSB
001B72r 3  D5 02                        cmp 2,x
001B74r 3  D0 0A                        bne @not_equal
001B76r 3               
001B76r 3                               ; LSB is equal
001B76r 3  B5 01                        lda 1,x                 ; MSB
001B78r 3  D5 03                        cmp 3,x
001B7Ar 3  D0 04                        bne @not_equal
001B7Cr 3               
001B7Cr 3  A9 FF                        lda #$FF
001B7Er 3  80 01                        bra @done
001B80r 3               
001B80r 3               @not_equal:
001B80r 3  88                           dey                     ; drop thru to done
001B81r 3               
001B81r 3               @done:
001B81r 3  98                           tya
001B82r 3  E8                           inx
001B83r 3  E8                           inx
001B84r 3  95 00                        sta 0,x
001B86r 3  95 01                        sta 1,x
001B88r 3               
001B88r 3  60           z_not_equals:   rts
001B89r 3               
001B89r 3               
001B89r 3               
001B89r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001B89r 3               ; ## "-rot"  auto  Gforth
001B89r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001B89r 3               
001B89r 3               xt_not_rote:
001B89r 3  20 rr rr                     jsr underflow_3
001B8Cr 3               
001B8Cr 3  B4 01                        ldy 1,x         ; MSB first
001B8Er 3  B5 03                        lda 3,x
001B90r 3  95 01                        sta 1,x
001B92r 3               
001B92r 3  B5 05                        lda 5,x
001B94r 3  95 03                        sta 3,x
001B96r 3  94 05                        sty 5,x
001B98r 3               
001B98r 3  B4 00                        ldy 0,x         ; LSB second
001B9Ar 3  B5 02                        lda 2,x
001B9Cr 3  95 00                        sta 0,x
001B9Er 3               
001B9Er 3  B5 04                        lda 4,x
001BA0r 3  95 02                        sta 2,x
001BA2r 3  94 04                        sty 4,x
001BA4r 3               
001BA4r 3  60           z_not_rote:     rts
001BA5r 3               
001BA5r 3               
001BA5r 3               
001BA5r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001BA5r 3               ; ## "number"  auto  Tali Forth
001BA5r 3                       ; """Convert a number string to a double or single cell number. This
001BA5r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001BA5r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001BA5r 3                       ; Based in part on the "Starting Forth" code
001BA5r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001BA5r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001BA5r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001BA5r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001BA5r 3                       ; dot to signal a double cell number is required to be the last
001BA5r 3                       ; character of the string.
001BA5r 3                       ;
001BA5r 3                       ; Number calls >NUMBER which in turn calls UM*,
001BA5r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001BA5r 3                       ; a pain.
001BA5r 3                       ;"""
001BA5r 3               
001BA5r 3               xt_number:
001BA5r 3  20 rr rr                     jsr underflow_2
001BA8r 3               
001BA8r 3                               ; we keep the flags for sign and double in tmpdsp because
001BA8r 3                               ; we've run out of temporary variables
001BA8r 3  64 rr                        stz tmpdsp      ; flag for double
001BAAr 3  64 rr                        stz tmpdsp+1    ; flag for minus
001BACr 3               
001BACr 3                               ; If the first character is a minus, strip it off and set
001BACr 3                               ; the flag
001BACr 3  A1 02                        lda (2,x)
001BAEr 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001BB0r 3  D0 0A                        bne @check_dot
001BB2r 3               
001BB2r 3                               ; It's a minus
001BB2r 3  C6 rr                        dec tmpdsp+1
001BB4r 3  F6 02                        inc 2,x         ; start one character later
001BB6r 3  D0 02                        bne @1
001BB8r 3  F6 03                        inc 3,x
001BBAr 3               @1:
001BBAr 3  D6 00                        dec 0,x         ; decrease string length by one
001BBCr 3               
001BBCr 3               @check_dot:
001BBCr 3                               ; If the last character is a dot, strip it off and set a
001BBCr 3                               ; flag. We can use tmptos as a temporary variable
001BBCr 3  B5 02                        lda 2,x         ; LSB of address
001BBEr 3  18                           clc
001BBFr 3  75 00                        adc 0,x         ; length of string
001BC1r 3  85 rr                        sta tmptos
001BC3r 3  B5 03                        lda 3,x
001BC5r 3  69 00                        adc #0          ; only need carry
001BC7r 3  85 rr                        sta tmptos+1
001BC9r 3               
001BC9r 3                               ; tmptos now points to the first character after the string,
001BC9r 3                               ; but we need the last character
001BC9r 3  A5 rr                        lda tmptos
001BCBr 3  D0 02                        bne @2
001BCDr 3  C6 rr                        dec tmptos+1
001BCFr 3               @2:
001BCFr 3  C6 rr                        dec tmptos
001BD1r 3               
001BD1r 3  B2 rr                        lda (tmptos)
001BD3r 3  C9 2E                        cmp #'.'
001BD5r 3  D0 04                        bne @main
001BD7r 3               
001BD7r 3                               ; We have a dot, which means this is a double number. Flag
001BD7r 3                               ; the fact and reduce string length by one
001BD7r 3  C6 rr                        dec tmpdsp
001BD9r 3  D6 00                        dec 0,x
001BDBr 3               
001BDBr 3               @main:
001BDBr 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001BDBr 3                               ; we have to go ( addr u --> ud addr u )
001BDBr 3  CA                           dex
001BDCr 3  CA                           dex
001BDDr 3  CA                           dex
001BDEr 3  CA                           dex
001BDFr 3               
001BDFr 3  B5 04                        lda 4,x         ; LSB of length
001BE1r 3  95 00                        sta 0,x
001BE3r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001BE5r 3               
001BE5r 3  B5 06                        lda 6,x         ; LSB of address
001BE7r 3  95 02                        sta 2,x
001BE9r 3  B5 07                        lda 7,x         ; MSB of address
001BEBr 3  95 03                        sta 3,x
001BEDr 3               
001BEDr 3  74 04                        stz 4,x         ; clear space for ud
001BEFr 3  74 05                        stz 5,x
001BF1r 3  74 06                        stz 6,x
001BF3r 3  74 07                        stz 7,x
001BF5r 3               
001BF5r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001BF8r 3               
001BF8r 3                               ; test length of returned string, which should be zero
001BF8r 3  B5 00                        lda 0,x
001BFAr 3  F0 15                        beq @all_converted
001BFCr 3               
001BFCr 3                               ; Something went wrong, we still have characters left over,
001BFCr 3                               ; so we print an error and abort. If the NUMBER was called
001BFCr 3                               ; by INTERPRET, we've already checked for Forth words, so
001BFCr 3                               ; we're in deep trouble one way or another
001BFCr 3  A9 3E                        lda #$3E        ; ASCII for ">"
001BFEr 3  20 rr rr                     jsr emit_a
001C01r 3  20 rr rr                     jsr xt_type
001C04r 3  A9 3C                        lda #$3C        ; ASCII for "<"
001C06r 3  20 rr rr                     jsr emit_a
001C09r 3  20 rr rr                     jsr xt_space
001C0Cr 3               
001C0Cr 3  A9 08                        lda #err_syntax
001C0Er 3  4C rr rr                     jmp error
001C11r 3               
001C11r 3               @all_converted:
001C11r 3                               ; We can drop the string info
001C11r 3  E8                           inx
001C12r 3  E8                           inx
001C13r 3  E8                           inx
001C14r 3  E8                           inx
001C15r 3               
001C15r 3                               ; We have a double-cell number on the Data Stack that might
001C15r 3                               ; actually have a minus and might actually be single-cell
001C15r 3  A5 rr                        lda tmpdsp      ; flag for double
001C17r 3  F0 0D                        beq @single
001C19r 3               
001C19r 3                               ; Set status bit 5 to indicate this is a double number
001C19r 3  A9 20                        lda #%00100000
001C1Br 3  04 rr                        tsb status
001C1Dr 3               
001C1Dr 3                               ; This is a double cell number. If it had a minus, we'll have
001C1Dr 3                               ; to negate it
001C1Dr 3  A5 rr                        lda tmpdsp+1
001C1Fr 3  F0 12                        beq @done       ; no minus, all done
001C21r 3               
001C21r 3  20 rr rr                     jsr xt_dnegate
001C24r 3               
001C24r 3  80 0D                        bra @done
001C26r 3               
001C26r 3               @single:
001C26r 3                               ; This is a single number, so we just drop the top cell
001C26r 3  E8                           inx
001C27r 3  E8                           inx
001C28r 3               
001C28r 3                               ; Clear status bit 5 to indicate this is a single number
001C28r 3  A9 20                        lda #%00100000
001C2Ar 3  14 rr                        trb status
001C2Cr 3               
001C2Cr 3                               ; If we had a minus, we'll have to negate it
001C2Cr 3  A5 rr                        lda tmpdsp+1
001C2Er 3  F0 03                        beq @done       ; no minus, all done
001C30r 3               
001C30r 3  20 rr rr                     jsr xt_negate
001C33r 3               @done:
001C33r 3  60           z_number:       rts
001C34r 3               
001C34r 3               
001C34r 3               
001C34r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001C34r 3               ; ## "#"  auto  ANS core
001C34r 3                       ; """https://forth-standard.org/standard/core/num
001C34r 3                       ; Add one char to the beginning of the pictured output string.
001C34r 3                       ;
001C34r 3                       ; Based on
001C34r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001C34r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001C34r 3                       ; """
001C34r 3               xt_number_sign:
001C34r 3  20 rr rr                     jsr underflow_2         ; double number
001C37r 3               
001C37r 3  20 rr rr                     jsr xt_base
001C3Ar 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001C3Dr 3               
001C3Dr 3                               ; The following code is the ancient Forth word UD/MOD, which in
001C3Dr 3                               ; various Forths (including Gforth) lives on under the hood,
001C3Dr 3                               ; even though it's not an ANS standard word, it doesn't appear
001C3Dr 3                               ; in the docs, it's only used here, and there are no tests for
001C3Dr 3                               ; it. This is why we got rid of it. We'll be converting this
001C3Dr 3                               ; mess to something more sane in the long run.
001C3Dr 3  20 rr rr                     jsr xt_to_r             ; >r
001C40r 3  20 rr rr                     jsr xt_zero             ; 0
001C43r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001C46r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001C49r 3  20 rr rr                     jsr xt_rot              ; rot
001C4Cr 3  20 rr rr                     jsr xt_rot              ; rot
001C4Fr 3  20 rr rr                     jsr xt_r_from           ; r>
001C52r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001C55r 3  20 rr rr                     jsr xt_rot              ; rot
001C58r 3                               ; end of UD/MOD ( rem ud )
001C58r 3               
001C58r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001C5Br 3               
001C5Br 3                               ; Convert the number that is left over to an ASCII character. We
001C5Br 3                               ; use a string lookup for speed. Use either abc_str_lower for
001C5Br 3                               ; lower case or abc_str_upper for upper case (prefered)
001C5Br 3  B5 00                        lda 0,x
001C5Dr 3  A8                           tay
001C5Er 3  B9 rr rr                     lda s_abc_upper,y
001C61r 3  95 00                        sta 0,x
001C63r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001C65r 3               
001C65r 3  20 rr rr                     jsr xt_hold
001C68r 3               
001C68r 3               z_number_sign:
001C68r 3  60                           rts
001C69r 3               
001C69r 3               
001C69r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001C69r 3               ; ## "#>"  auto  ANS core
001C69r 3                       ; """https://forth-standard.org/standard/core/num-end
001C69r 3                       ; Finish conversion of pictured number string, putting address and
001C69r 3                       ; length on the Data Stack.
001C69r 3                       ;
001C69r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001C69r 3                       ; Based on
001C69r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001C69r 3                       ; """
001C69r 3               xt_number_sign_greater:
001C69r 3               
001C69r 3  20 rr rr                     jsr underflow_2         ; double number
001C6Cr 3               
001C6Cr 3                               ; The start address lives in tohold
001C6Cr 3  A5 rr                        lda tohold
001C6Er 3  95 00                        sta 0,x         ; LSB of tohold
001C70r 3  95 02                        sta 2,x
001C72r 3  A5 rr                        lda tohold+1
001C74r 3  95 01                        sta 1,x         ; MSB of addr
001C76r 3  95 03                        sta 3,x         ; ( addr addr )
001C78r 3               
001C78r 3                               ; The length of the string is pad - addr
001C78r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001C7Br 3               
001C7Br 3  38                           sec
001C7Cr 3  B5 00                        lda 0,x         ; LSB of pad address
001C7Er 3  F5 02                        sbc 2,x
001C80r 3  95 02                        sta 2,x
001C82r 3               
001C82r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001C84r 3  F5 03                        sbc 3,x
001C86r 3  95 03                        sta 3,x         ; ( addr u pad )
001C88r 3               
001C88r 3  E8                           inx
001C89r 3  E8                           inx
001C8Ar 3               
001C8Ar 3               z_number_sign_greater:
001C8Ar 3  60                           rts
001C8Br 3               
001C8Br 3               
001C8Br 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001C8Br 3               ; ## "#s"  auto  ANS core
001C8Br 3                       ; """https://forth-standard.org/standard/core/numS
001C8Br 3                       ; Completely convert number for pictured numerical output.
001C8Br 3                       ;
001C8Br 3                       ; Based on
001C8Br 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001C8Br 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001C8Br 3                       ; """
001C8Br 3               
001C8Br 3               xt_number_sign_s:
001C8Br 3  20 rr rr                     jsr underflow_2
001C8Er 3               @loop:
001C8Er 3                               ; convert a single number ("#")
001C8Er 3  20 rr rr                     jsr xt_number_sign
001C91r 3               
001C91r 3                               ; stop when double-celled number in TOS is zero:
001C91r 3  B5 00                        lda 0,x
001C93r 3  15 01                        ora 1,x
001C95r 3  15 02                        ora 2,x
001C97r 3  15 03                        ora 3,x
001C99r 3  D0 F3                        bne @loop
001C9Br 3               
001C9Br 3               z_number_sign_s:
001C9Br 3  60                           rts
001C9Cr 3               
001C9Cr 3               
001C9Cr 3               
001C9Cr 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001C9Cr 3               ; ## "of"  auto  ANS core ext
001C9Cr 3                       ; """http://forth-standard.org/standard/core/OF"""
001C9Cr 3               
001C9Cr 3               xt_of:
001C9Cr 3                               ; Check if value is equal to this case.
001C9Cr 3                               ; Postpone over (eg. compile a jsr to it)
001C9Cr 3  A0 rr                        ldy #>xt_over
001C9Er 3  A9 rr                        lda #<xt_over
001CA0r 3  20 rr rr                     jsr cmpl_subroutine
001CA3r 3               
001CA3r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001CA3r 3  A0 rr                        ldy #>xt_equal
001CA5r 3  A9 rr                        lda #<xt_equal
001CA7r 3  20 rr rr                     jsr cmpl_subroutine
001CAAr 3               
001CAAr 3  20 rr rr                     jsr xt_if
001CADr 3               
001CADr 3                               ; If it's true, consume the original value.
001CADr 3                               ; Postpone DROP (eg. compile a jsr to it)
001CADr 3  A0 rr                        ldy #>xt_drop
001CAFr 3  A9 rr                        lda #<xt_drop
001CB1r 3  20 rr rr                     jsr cmpl_subroutine
001CB4r 3               
001CB4r 3  60           z_of:           rts
001CB5r 3               
001CB5r 3               
001CB5r 3               
001CB5r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001CB5r 3               ; ## "1"  auto  Tali Forth
001CB5r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001CB5r 3               xt_editor_wordlist:
001CB5r 3               xt_one:
001CB5r 3  CA                           dex
001CB6r 3  CA                           dex
001CB7r 3  A9 01                        lda #1
001CB9r 3  95 00                        sta 0,x
001CBBr 3  74 01                        stz 1,x
001CBDr 3               
001CBDr 3               z_editor_wordlist:
001CBDr 3               z_one:
001CBDr 3  60                           rts
001CBEr 3               
001CBEr 3               
001CBEr 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001CBEr 3               ; ## "1-"  auto  ANS core
001CBEr 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001CBEr 3               
001CBEr 3               xt_one_minus:
001CBEr 3  20 rr rr                     jsr underflow_1
001CC1r 3               
001CC1r 3  B5 00                        lda 0,x
001CC3r 3  D0 02                        bne @1
001CC5r 3  D6 01                        dec 1,x
001CC7r 3               @1:
001CC7r 3  D6 00                        dec 0,x
001CC9r 3               
001CC9r 3  60           z_one_minus:    rts
001CCAr 3               
001CCAr 3               
001CCAr 3               
001CCAr 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001CCAr 3               ; ## "1+"  auto  ANS core
001CCAr 3                       ; """https://forth-standard.org/standard/core/OnePlus
001CCAr 3                       ;
001CCAr 3                       ; Code is shared with CHAR-PLUS
001CCAr 3                       ; """
001CCAr 3               
001CCAr 3               xt_char_plus:
001CCAr 3               xt_one_plus:
001CCAr 3  20 rr rr                     jsr underflow_1
001CCDr 3               
001CCDr 3  F6 00                        inc 0,x
001CCFr 3  D0 02                        bne @done
001CD1r 3  F6 01                        inc 1,x
001CD3r 3               
001CD3r 3               @done:
001CD3r 3               z_char_plus:
001CD3r 3  60           z_one_plus:     rts
001CD4r 3               
001CD4r 3               
001CD4r 3               
001CD4r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001CD4r 3               ; ## "only"  auto  ANS search ext
001CD4r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001CD4r 3               
001CD4r 3               xt_only:
001CD4r 3                               ; Put -1 on data stack.
001CD4r 3  CA                           dex
001CD5r 3  CA                           dex
001CD6r 3  A9 FF                        lda #$FF
001CD8r 3  95 00                        sta 0,x
001CDAr 3  95 01                        sta 1,x
001CDCr 3               
001CDCr 3                               ; Invoke set-order to set the minimum search order.
001CDCr 3  20 rr rr                     jsr xt_set_order
001CDFr 3               
001CDFr 3  60           z_only:         rts
001CE0r 3               
001CE0r 3               
001CE0r 3               
001CE0r 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001CE0r 3               ; ## "or"  auto  ANS core
001CE0r 3                       ; """https://forth-standard.org/standard/core/OR"
001CE0r 3               xt_or:
001CE0r 3  20 rr rr                     jsr underflow_2
001CE3r 3               
001CE3r 3  B5 00                        lda 0,x
001CE5r 3  15 02                        ora 2,x
001CE7r 3  95 02                        sta 2,x
001CE9r 3               
001CE9r 3  B5 01                        lda 1,x
001CEBr 3  15 03                        ora 3,x
001CEDr 3  95 03                        sta 3,x
001CEFr 3               
001CEFr 3  E8                           inx
001CF0r 3  E8                           inx
001CF1r 3               
001CF1r 3  60           z_or:           rts
001CF2r 3               
001CF2r 3               
001CF2r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001CF2r 3               ; ## "order"  auto  ANS core
001CF2r 3                       ; """https://forth-standard.org/standard/search/ORDER
001CF2r 3                       ; Note the search order is displayed from first search to last
001CF2r 3                       ; searched and is therefore exactly the reverse of the order in which
001CF2r 3                       ; Forth stacks are displayed.
001CF2r 3                       ;
001CF2r 3                       ; A Forth implementation of this word is:
001CF2r 3                       ;
001CF2r 3                       ; 	: .wid ( wid -- )
001CF2r 3                       ; 	dup 0=  if ." Forth "  drop    else
001CF2r 3                       ; 	dup 1 = if ." Editor " drop    else
001CF2r 3                       ; 	dup 2 = if ." Assembler " drop else
001CF2r 3                       ; 	dup 3 = if ." Root " drop      else
001CF2r 3                       ; 	           . ( just print the number )
001CF2r 3                       ; 	then then then then ;
001CF2r 3                       ;
001CF2r 3                       ; : ORDER ( -- )
001CF2r 3                       ; 	cr get-order 0 ?do .wid loop
001CF2r 3                       ; 	space space get-current .wid ;
001CF2r 3                       ;
001CF2r 3                       ; This is an interactive program, so speed
001CF2r 3                       ; is not as important as size. We assume we do not have more than 255
001CF2r 3                       ; wordlists.
001CF2r 3                       ; """
001CF2r 3               
001CF2r 3               xt_order:
001CF2r 3  20 rr rr                     jsr xt_cr
001CF5r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001CF8r 3               
001CF8r 3                               ; Paranoid: Check if there are no wordlists, a rather
001CF8r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001CF8r 3                               ; that case, we just drop n and run
001CF8r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001CFAr 3  F0 1E                        beq @drop_done
001CFCr 3               
001CFCr 3               @have_wordlists:
001CFCr 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001CFCr 3                               ; on the stack
001CFCr 3  A8                           tay
001CFDr 3               @loop:
001CFDr 3  E8                           inx
001CFEr 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001CFFr 3  B5 00                        lda 0,x
001D01r 3               
001D01r 3  5A                           phy
001D02r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001D05r 3  7A                           ply
001D06r 3               
001D06r 3  88                           dey
001D07r 3  D0 F4                        bne @loop
001D09r 3               
001D09r 3                               ; We've printed the wordlists, now we add the current wordlist.
001D09r 3                               ; This follows the convention of Gforth
001D09r 3  20 rr rr                     jsr xt_space
001D0Cr 3  20 rr rr                     jsr xt_space
001D0Fr 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001D12r 3               
001D12r 3  B5 00                        lda 0,x
001D14r 3  20 rr rr                     jsr _print_wid_string
001D17r 3  20 rr rr                     jsr xt_cr
001D1Ar 3               
001D1Ar 3               @drop_done:
001D1Ar 3  E8                           inx
001D1Br 3  E8                           inx
001D1Cr 3               z_order:
001D1Cr 3  60                           rts
001D1Dr 3               
001D1Dr 3               _print_wid_string:
001D1Dr 3                       ; """Helper function for ORDER: Given a WID in A, print the
001D1Dr 3                       ; corresponding string. If there is no such word list defined, just
001D1Dr 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001D1Dr 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001D1Dr 3                       ; theory, we could speed this up by having the WID be the same as the
001D1Dr 3                       ; number of the strings. However, ORDER is used rather infrequently and
001D1Dr 3                       ; this would make changes to the strings.asm file very dangerous, so we
001D1Dr 3                       ; follow the slightly more complicated route with a translation table.
001D1Dr 3                       ; """
001D1Dr 3                               ; If the WID is larger than 3, we have no string avaliable and
001D1Dr 3                               ; just print the number.
001D1Dr 3                               ; See http://6502.org/tutorials/compare_instructions.html
001D1Dr 3                               ; for details
001D1Dr 3  C9 04                        cmp #4
001D1Fr 3  90 09                        bcc @output_string      ; less than 4, print a real string
001D21r 3               
001D21r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001D21r 3                               ; print the number
001D21r 3  CA                           dex
001D22r 3  CA                           dex
001D23r 3  95 00                        sta 0,x
001D25r 3  74 01                        stz 1,x
001D27r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001D2Ar 3               
001D2Ar 3               @output_string:
001D2Ar 3                               ; Get the string number based on WID 0 to 3
001D2Ar 3  A8                           tay
001D2Br 3  B9 rr rr                     lda @wid_data,y
001D2Er 3               
001D2Er 3                               ; Print without a line feed
001D2Er 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001D31r 3               
001D31r 3               @wid_data:
001D31r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001D31r 3                       ; less than 4.
001D31r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001D32r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001D33r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001D34r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001D35r 3               
001D35r 3               
001D35r 3               
001D35r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001D35r 3               ; ## "output"  tested  Tali Forth
001D35r 3               xt_output:
001D35r 3                       ; """Return the address where the jump target for EMIT is stored (but
001D35r 3                       ; not the vector itself). By default, this will hold the value of
001D35r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001D35r 3                       ; routine.
001D35r 3                       ; """
001D35r 3  CA                           dex
001D36r 3  CA                           dex
001D37r 3  A9 rr                        lda #<output
001D39r 3  95 00                        sta 0,x
001D3Br 3  A9 rr                        lda #>output
001D3Dr 3  95 01                        sta 1,x
001D3Fr 3               
001D3Fr 3  60           z_output:       rts
001D40r 3               
001D40r 3               
001D40r 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001D40r 3               ; ## "over"  auto  ANS core
001D40r 3                       ; """https://forth-standard.org/standard/core/OVER"""
001D40r 3               xt_over:
001D40r 3  20 rr rr                     jsr underflow_2
001D43r 3               
001D43r 3  CA                           dex
001D44r 3  CA                           dex
001D45r 3               
001D45r 3  B5 04                        lda 4,x         ; LSB
001D47r 3  95 00                        sta 0,x
001D49r 3  B5 05                        lda 5,x         ; MSB
001D4Br 3  95 01                        sta 1,x
001D4Dr 3               
001D4Dr 3  60           z_over:         rts
001D4Er 3               
001D4Er 3               
001D4Er 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001D4Er 3               ; ## "pad"  auto  ANS core ext
001D4Er 3                       ; """https://forth-standard.org/standard/core/PAD
001D4Er 3                       ; Return address to a temporary area in free memory for user. Must
001D4Er 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001D4Er 3                       ; the compile area pointer (CP) and therefore varies in position.
001D4Er 3                       ; This area is reserved for the user and not used by the system
001D4Er 3                       ; """
001D4Er 3               xt_pad:
001D4Er 3  CA                           dex
001D4Fr 3  CA                           dex
001D50r 3               
001D50r 3  A5 rr                        lda cp
001D52r 3  18                           clc
001D53r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001D55r 3  95 00                        sta 0,x
001D57r 3               
001D57r 3  A5 rr                        lda cp+1
001D59r 3  69 00                        adc #0          ; only need carry
001D5Br 3  95 01                        sta 1,x
001D5Dr 3               
001D5Dr 3  60           z_pad:          rts
001D5Er 3               
001D5Er 3               
001D5Er 3               ; ## PAGE ( -- ) "Clear the screen"
001D5Er 3               ; ## "page"  tested  ANS facility
001D5Er 3                       ; """https://forth-standard.org/standard/facility/PAGE
001D5Er 3                       ; Clears a page if supported by ANS terminal codes. This is
001D5Er 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001D5Er 3                       ; left of the screen
001D5Er 3                       ; """
001D5Er 3               xt_page:
001D5Er 3  A9 1B                        lda #AscESC
001D60r 3  20 rr rr                     jsr emit_a
001D63r 3  A9 5B                        lda #$5B        ; ASCII for "["
001D65r 3  20 rr rr                     jsr emit_a
001D68r 3  A9 32                        lda #'2'
001D6Ar 3  20 rr rr                     jsr emit_a
001D6Dr 3  A9 4A                        lda #'J'
001D6Fr 3  20 rr rr                     jsr emit_a
001D72r 3               
001D72r 3                               ; move cursor to top left of screen
001D72r 3  20 rr rr                     jsr xt_zero
001D75r 3  20 rr rr                     jsr xt_zero
001D78r 3  20 rr rr                     jsr xt_at_xy
001D7Br 3               
001D7Br 3  60           z_page:         rts
001D7Cr 3               
001D7Cr 3               
001D7Cr 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001D7Cr 3               ; ## "("  auto  ANS core
001D7Cr 3                       ; """http://forth-standard.org/standard/core/p"""
001D7Cr 3               
001D7Cr 3               xt_paren:
001D7Cr 3                               ; Put a right paren on the stack.
001D7Cr 3  CA                           dex
001D7Dr 3  CA                           dex
001D7Er 3  A9 29                        lda #41     ; Right parenthesis
001D80r 3  95 00                        sta 0,x
001D82r 3  74 01                        stz 1,x
001D84r 3               
001D84r 3                               ; Call parse.
001D84r 3  20 rr rr                     jsr xt_parse
001D87r 3               
001D87r 3                               ; Throw away the result.
001D87r 3  E8                           inx
001D88r 3  E8                           inx
001D89r 3  E8                           inx
001D8Ar 3  E8                           inx
001D8Br 3               
001D8Br 3  60           z_paren:        rts
001D8Cr 3               
001D8Cr 3               
001D8Cr 3               
001D8Cr 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001D8Cr 3               ; ## "parse-name"  auto  ANS core ext
001D8Cr 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001D8Cr 3                       ; Find next word in input string, skipping leading whitespace. This is
001D8Cr 3                       ; a special form of PARSE and drops through to that word. See PARSE
001D8Cr 3                       ; for more detail. We use this word internally for the interpreter
001D8Cr 3                       ; because it is a lot easier to use. Reference implementations at
001D8Cr 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001D8Cr 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001D8Cr 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001D8Cr 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001D8Cr 3                       ; is actually perfectly legal (see for example
001D8Cr 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001D8Cr 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001D8Cr 3                       ; """
001D8Cr 3               
001D8Cr 3               xt_parse_name:
001D8Cr 3                               ; To enable the compilation of the high-level Forth words
001D8Cr 3                               ; in forth-words.asm and user-words.asm at boot time,
001D8Cr 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001D8Cr 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001D8Cr 3                               ; to the current location is in toin (>IN). We need to check,
001D8Cr 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001D8Cr 3                               ; we can't just use Y as an index.
001D8Cr 3               
001D8Cr 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001D8Cr 3  A5 rr                        lda ciblen              ; LSB of counter
001D8Er 3  38                           sec
001D8Fr 3  E5 rr                        sbc toin
001D91r 3  85 rr                        sta tmp1
001D93r 3  A5 rr                        lda ciblen+1            ; MSB
001D95r 3  E5 rr                        sbc toin+1
001D97r 3  85 rr                        sta tmp1+1
001D99r 3               
001D99r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001D99r 3  A5 rr                        lda tmp1
001D9Br 3  05 rr                        ora tmp1+1
001D9Dr 3  F0 28                        beq @empty_line
001D9Fr 3               
001D9Fr 3                               ; We walk through the characters starting at CIB+TOIN, so we
001D9Fr 3                               ; save a temp version of that in tmp2
001D9Fr 3  A5 rr                        lda cib
001DA1r 3  18                           clc
001DA2r 3  65 rr                        adc toin
001DA4r 3  85 rr                        sta tmp2                ; LSB of first character
001DA6r 3  A5 rr                        lda cib+1
001DA8r 3  65 rr                        adc toin+1
001DAAr 3  85 rr                        sta tmp2+1              ; MSB
001DACr 3               
001DACr 3               @skip_loop:
001DACr 3  B2 rr                        lda (tmp2)              ; work copy of cib
001DAEr 3  20 rr rr                     jsr is_whitespace
001DB1r 3  90 1F                        bcc @char_found
001DB3r 3               
001DB3r 3                               ; Char is still whitespace, continue
001DB3r 3  E6 rr                        inc tmp2
001DB5r 3  D0 02                        bne @2
001DB7r 3  E6 rr                        inc tmp2+1
001DB9r 3               @2:
001DB9r 3                               ; Adjust counter
001DB9r 3  A5 rr                        lda tmp1
001DBBr 3  D0 02                        bne @3
001DBDr 3  C6 rr                        dec tmp1+1
001DBFr 3               @3:
001DBFr 3  C6 rr                        dec tmp1
001DC1r 3               
001DC1r 3  A5 rr                        lda tmp1
001DC3r 3  05 rr                        ora tmp1+1
001DC5r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001DC7r 3               
001DC7r 3               @empty_line:
001DC7r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001DC7r 3                               ; what to return as an address if a string with only
001DC7r 3                               ; spaces is given. For speed reasons, we just return junk
001DC7r 3                               ; NOS, with the TOS zero as per standard
001DC7r 3  CA                           dex
001DC8r 3  CA                           dex
001DC9r 3  CA                           dex
001DCAr 3  CA                           dex
001DCBr 3               
001DCBr 3  74 00                        stz 0,x                 ; TOS is zero
001DCDr 3  74 01                        stz 1,x
001DCFr 3               
001DCFr 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001DD2r 3               
001DD2r 3               @char_found:
001DD2r 3                               ; We arrive here with tmp2 pointing to the first non-space
001DD2r 3                               ; character. This is where the word really starts, so
001DD2r 3                               ; we use it to calculate the new >IN by subtracting
001DD2r 3  A5 rr                        lda tmp2
001DD4r 3  38                           sec
001DD5r 3  E5 rr                        sbc cib
001DD7r 3  85 rr                        sta toin
001DD9r 3  A5 rr                        lda tmp2+1
001DDBr 3  E5 rr                        sbc cib+1
001DDDr 3  85 rr                        sta toin+1
001DDFr 3               
001DDFr 3                               ; prepare Data Stack for PARSE by adding space
001DDFr 3                               ; as the delimiter
001DDFr 3  CA                           dex
001DE0r 3  CA                           dex
001DE1r 3               
001DE1r 3  A9 20                        lda #AscSP
001DE3r 3  95 00                        sta 0,x
001DE5r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001DE7r 3               
001DE7r 3               
001DE7r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001DE7r 3               ; ## "parse"  tested  ANS core ext
001DE7r 3                       ; """https://forth-standard.org/standard/core/PARSE
001DE7r 3                       ; Find word in input string delimited by character given. Do not
001DE7r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001DE7r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001DE7r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001DE7r 3                       ;
001DE7r 3                       ;
001DE7r 3                       ;     cib  cib+toin   cib+ciblen
001DE7r 3                       ;      v      v            v
001DE7r 3                       ;     |###################|
001DE7r 3                       ;
001DE7r 3                       ;     |------>|  toin (>IN)
001DE7r 3                       ;     |------------------->|  ciblen
001DE7r 3                       ;
001DE7r 3                       ; The input string is stored starting at the address in the Current
001DE7r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001DE7r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001DE7r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001DE7r 3                       ; useful string if there are any characters at all. As with
001DE7r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001DE7r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001DE7r 3                       ; """
001DE7r 3               
001DE7r 3               xt_parse:
001DE7r 3  20 rr rr                     jsr underflow_1
001DEAr 3               
001DEAr 3                               ; If the input buffer is empty, we just return
001DEAr 3  A5 rr                        lda ciblen
001DECr 3  05 rr                        ora ciblen+1
001DEEr 3  F0 0C                        beq @abort_parse
001DF0r 3               
001DF0r 3                               ; If the pointer >IN is larger or equal to the length of
001DF0r 3                               ; the input buffer (CIBLEN), the line is done. Put
001DF0r 3                               ; differently, we only continue if >IN is smaller than
001DF0r 3                               ; CIBLEN
001DF0r 3  A5 rr                        lda toin+1              ; MSB
001DF2r 3  C5 rr                        cmp ciblen+1
001DF4r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001DF6r 3               
001DF6r 3  A5 rr                        lda toin                ; LSB
001DF8r 3  C5 rr                        cmp ciblen
001DFAr 3  90 08                        bcc @go_parse
001DFCr 3               
001DFCr 3               @abort_parse:
001DFCr 3                               ; Sorry, this line is over
001DFCr 3  CA                           dex
001DFDr 3  CA                           dex
001DFEr 3  74 00                        stz 0,x
001E00r 3  74 01                        stz 1,x
001E02r 3               
001E02r 3  80 7A                        bra @done
001E04r 3               @go_parse:
001E04r 3                               ; We actually have work to do. Save the delimiter in
001E04r 3                               ; tmptos.
001E04r 3  B5 00                        lda 0,x
001E06r 3  85 rr                        sta tmptos
001E08r 3               
001E08r 3                               ; We can now prepare the Data Stack for the return value
001E08r 3  CA                           dex
001E09r 3  CA                           dex
001E0Ar 3               
001E0Ar 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001E0Ar 3                               ; tmp2 is initially the same as tmp1, then the work index
001E0Ar 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001E0Ar 3               
001E0Ar 3                               ; Calculate the beginning of the string, which is also the
001E0Ar 3                               ; address to return
001E0Ar 3  A5 rr                        lda cib
001E0Cr 3  18                           clc
001E0Dr 3  65 rr                        adc toin        ; LSB
001E0Fr 3  85 rr                        sta tmp1
001E11r 3  85 rr                        sta tmp2
001E13r 3  95 02                        sta 2,x
001E15r 3               
001E15r 3  A5 rr                        lda cib+1
001E17r 3  65 rr                        adc toin+1      ; MSB
001E19r 3  85 rr                        sta tmp1+1
001E1Br 3  85 rr                        sta tmp2+1
001E1Dr 3  95 03                        sta 3,x
001E1Fr 3               
001E1Fr 3                               ; Calculate the address where the input buffer ends plus 1, so
001E1Fr 3                               ; we can compare it with TOIN, which is an index
001E1Fr 3  A5 rr                        lda cib
001E21r 3  18                           clc
001E22r 3  65 rr                        adc ciblen
001E24r 3  85 rr                        sta tmp3
001E26r 3  A5 rr                        lda cib+1
001E28r 3  65 rr                        adc ciblen+1
001E2Ar 3  85 rr                        sta tmp3+1
001E2Cr 3               
001E2Cr 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001E2Cr 3  64 rr                        stz tmptos+1
001E2Er 3               @loop:
001E2Er 3                               ; If we are at the end of the string, quit
001E2Er 3  A5 rr                        lda tmp2
001E30r 3  C5 rr                        cmp tmp3
001E32r 3  D0 06                        bne @not_empty
001E34r 3               
001E34r 3  A5 rr                        lda tmp2+1
001E36r 3  C5 rr                        cmp tmp3+1
001E38r 3  F0 1D                        beq @eol
001E3Ar 3               @not_empty:
001E3Ar 3                               ; We have to do this the hard way. In fact, it's really
001E3Ar 3                               ; hard since if we are dealing with a SPACE, the standard
001E3Ar 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001E3Ar 3                               ; Tali would choke on tabs between words. For details, see
001E3Ar 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001E3Ar 3                               ; In theory, we could make this faster by defining a delimiter
001E3Ar 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001E3Ar 3                               ; avoiding having to test every time. However, somebody,
001E3Ar 3                               ; somewhere might want to parse a zero-delimited list. Since
001E3Ar 3                               ; any byte value could be chosen for that, we just test for
001E3Ar 3                               ; a space every single time for the moment.
001E3Ar 3  B2 rr                        lda (tmp2)
001E3Cr 3               
001E3Cr 3  A4 rr                        ldy tmptos
001E3Er 3  C0 20                        cpy #AscSP
001E40r 3  D0 07                        bne @not_whitespace
001E42r 3               
001E42r 3                               ; The delimiter is a space, so we're looking for all
001E42r 3                               ; whitespace
001E42r 3  20 rr rr                     jsr is_whitespace
001E45r 3  90 02                        bcc @not_whitespace
001E47r 3  80 0C                        bra @found_delimiter
001E49r 3               
001E49r 3               @not_whitespace:
001E49r 3                               ; The delimiter is not a space, so we're looking for
001E49r 3                               ; whatever it is
001E49r 3  C5 rr                        cmp tmptos
001E4Br 3  F0 08                        beq @found_delimiter
001E4Dr 3               
001E4Dr 3                               ; Not a delimiter, next character
001E4Dr 3  E6 rr                        inc tmp2
001E4Fr 3  D0 DD                        bne @loop
001E51r 3  E6 rr                        inc tmp2+1
001E53r 3  80 D9                        bra @loop
001E55r 3               
001E55r 3               @found_delimiter:
001E55r 3                               ; Increase the offset: If we've found a delimiter, we want
001E55r 3                               ; TOIN to point to the character after it, not the delimiter
001E55r 3                               ; itself
001E55r 3  E6 rr                        inc tmptos+1
001E57r 3               @eol:
001E57r 3                               ; The length of the new string is tmp2-tmp1
001E57r 3  A5 rr                        lda tmp2
001E59r 3  38                           sec
001E5Ar 3  E5 rr                        sbc tmp1
001E5Cr 3  95 00                        sta 0,x
001E5Er 3               
001E5Er 3  A5 rr                        lda tmp2+1
001E60r 3  E5 rr                        sbc tmp1+1
001E62r 3  95 01                        sta 1,x
001E64r 3               
001E64r 3                               ; The new offset is tmp2-cib
001E64r 3  A5 rr                        lda tmp2
001E66r 3  38                           sec
001E67r 3  E5 rr                        sbc cib
001E69r 3  85 rr                        sta toin
001E6Br 3  A5 rr                        lda tmp2+1
001E6Dr 3  E5 rr                        sbc cib+1
001E6Fr 3  85 rr                        sta toin+1
001E71r 3               
001E71r 3                               ; Add in the delimiter
001E71r 3  A5 rr                        lda toin
001E73r 3  18                           clc
001E74r 3  65 rr                        adc tmptos+1
001E76r 3  85 rr                        sta toin
001E78r 3  A5 rr                        lda toin+1
001E7Ar 3  69 00                        adc #0          ; we only need the carry
001E7Cr 3  85 rr                        sta toin+1
001E7Er 3               @done:
001E7Er 3               z_parse_name:
001E7Er 3  60           z_parse:        rts
001E7Fr 3               
001E7Fr 3               
001E7Fr 3               
001E7Fr 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001E7Fr 3               ; ## "pick"  auto  ANS core ext
001E7Fr 3                       ; """https://forth-standard.org/standard/core/PICK
001E7Fr 3                       ; Take the u-th element out of the stack and put it on TOS,
001E7Fr 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001E7Fr 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001E7Fr 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001E7Fr 3                       ; """
001E7Fr 3               
001E7Fr 3               xt_pick:
001E7Fr 3                               ; Checking for underflow is difficult because it depends on
001E7Fr 3                               ; which element we want to grab. We could probably figure
001E7Fr 3                               ; something out, but it wouldn't work with underflow stripping
001E7Fr 3                               ; Since using PICK is considered poor form anyway, we just
001E7Fr 3                               ; leave it as it is
001E7Fr 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001E81r 3  8A                           txa
001E82r 3  75 00                        adc 0,x
001E84r 3  A8                           tay
001E85r 3               
001E85r 3  B9 02 00                     lda 0002,y
001E88r 3  95 00                        sta 0,x
001E8Ar 3  B9 03 00                     lda 0003,y
001E8Dr 3  95 01                        sta 1,x
001E8Fr 3               
001E8Fr 3  60           z_pick:         rts
001E90r 3               
001E90r 3               
001E90r 3               
001E90r 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001E90r 3               ; ## "+"  auto  ANS core
001E90r 3                       ; """https://forth-standard.org/standard/core/Plus"""
001E90r 3               xt_plus:
001E90r 3  20 rr rr                     jsr underflow_2
001E93r 3               
001E93r 3  18                           clc
001E94r 3  B5 00                        lda 0,x         ; LSB
001E96r 3  75 02                        adc 2,x
001E98r 3  95 02                        sta 2,x
001E9Ar 3               
001E9Ar 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001E9Cr 3  75 03                        adc 3,x
001E9Er 3  95 03                        sta 3,x
001EA0r 3               
001EA0r 3  E8                           inx
001EA1r 3  E8                           inx
001EA2r 3               
001EA2r 3  60           z_plus:         rts
001EA3r 3               
001EA3r 3               
001EA3r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001EA3r 3               ; ## "+!"  auto  ANS core
001EA3r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001EA3r 3               xt_plus_store:
001EA3r 3  20 rr rr                     jsr underflow_2
001EA6r 3               
001EA6r 3                               ; move address to tmp1 so we can work with it
001EA6r 3  B5 00                        lda 0,x
001EA8r 3  85 rr                        sta tmp1
001EAAr 3  B5 01                        lda 1,x
001EACr 3  85 rr                        sta tmp1+1
001EAEr 3               
001EAEr 3  A0 00                        ldy #0          ; LSB
001EB0r 3  B1 rr                        lda (tmp1),y
001EB2r 3  18                           clc
001EB3r 3  75 02                        adc 2,x
001EB5r 3  91 rr                        sta (tmp1),y
001EB7r 3               
001EB7r 3  C8                           iny             ; MSB
001EB8r 3  B1 rr                        lda (tmp1),y
001EBAr 3  75 03                        adc 3,x
001EBCr 3  91 rr                        sta (tmp1),y
001EBEr 3               
001EBEr 3  E8                           inx
001EBFr 3  E8                           inx
001EC0r 3  E8                           inx
001EC1r 3  E8                           inx
001EC2r 3               
001EC2r 3  60           z_plus_store:   rts
001EC3r 3               
001EC3r 3               
001EC3r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001EC3r 3               ; ## "postpone"  auto   ANS core
001EC3r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001EC3r 3                       ; Add the compilation behavior of a word to a new word at
001EC3r 3                       ; compile time. If the word that follows it is immediate, include
001EC3r 3                       ; it so that it will be compiled when the word being defined is
001EC3r 3                       ; itself used for a new word. Tricky, but very useful.
001EC3r 3                       ;
001EC3r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001EC3r 3                       ; on the Data Stack). This means we cannot build words with
001EC3r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001EC3r 3                       ; """
001EC3r 3               
001EC3r 3               xt_postpone:
001EC3r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001EC6r 3               
001EC6r 3                               ; if there was no word provided, complain and quit
001EC6r 3  B5 00                        lda 0,x
001EC8r 3  15 01                        ora 1,x
001ECAr 3  D0 05                        bne @1
001ECCr 3               
001ECCr 3  A9 05                        lda #err_noname
001ECEr 3  4C rr rr                     jmp error
001ED1r 3               @1:
001ED1r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001ED4r 3               
001ED4r 3                               ; if word not in Dictionary, complain and quit
001ED4r 3  D0 05                        bne @2
001ED6r 3  A9 05                        lda #err_noname
001ED8r 3  4C rr rr                     jmp error
001EDBr 3               
001EDBr 3               @2:
001EDBr 3                               ; keep a copy of nt for later
001EDBr 3  B5 00                        lda 0,x
001EDDr 3  85 rr                        sta tmp1
001EDFr 3  B5 01                        lda 1,x
001EE1r 3  85 rr                        sta tmp1+1
001EE3r 3               
001EE3r 3                               ; We need the xt instead of the nt
001EE3r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001EE6r 3               
001EE6r 3                               ; See if this is an immediate word. This is easier
001EE6r 3                               ; with nt than with xt. The status byte of the word
001EE6r 3                               ; is nt+1
001EE6r 3  E6 rr                        inc tmp1
001EE8r 3  D0 02                        bne @3
001EEAr 3  E6 rr                        inc tmp1+1
001EECr 3               @3:
001EECr 3  B2 rr                        lda (tmp1)
001EEEr 3  29 04                        and #IM         ; mask all but Intermediate flag
001EF0r 3  F0 05                        beq @not_immediate
001EF2r 3               
001EF2r 3                               ; We're immediate, so instead of executing it right now, we
001EF2r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001EF2r 3                               ; takes us back to the original caller
001EF2r 3  20 rr rr                     jsr xt_compile_comma
001EF5r 3  80 0A                        bra @done
001EF7r 3               
001EF7r 3               @not_immediate:
001EF7r 3                               ; This is not an immediate word, so we enact "deferred
001EF7r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001EF7r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001EF7r 3                               ; a subroutine jump to COMPILE,
001EF7r 3  20 rr rr                     jsr xt_literal
001EFAr 3               
001EFAr 3                               ; Last, compile COMPILE,
001EFAr 3  A0 rr                        ldy #>xt_compile_comma
001EFCr 3  A9 rr                        lda #<xt_compile_comma
001EFEr 3  20 rr rr                     jsr cmpl_subroutine
001F01r 3               @done:
001F01r 3  60           z_postpone:     rts
001F02r 3               
001F02r 3               
001F02r 3               
001F02r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001F02r 3               ; ## "previous"  auto  ANS search ext
001F02r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001F02r 3               
001F02r 3               xt_previous:
001F02r 3  20 rr rr                     jsr xt_get_order
001F05r 3  20 rr rr                     jsr xt_nip
001F08r 3  20 rr rr                     jsr xt_one_minus
001F0Br 3  20 rr rr                     jsr xt_set_order
001F0Er 3               
001F0Er 3  60           z_previous:     rts
001F0Fr 3               
001F0Fr 3               
001F0Fr 3               
001F0Fr 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001F0Fr 3               ; ## "?"  tested  ANS tools
001F0Fr 3                       ; """https://forth-standard.org/standard/tools/q
001F0Fr 3                       ;
001F0Fr 3                       ; Only used interactively. Since humans are so slow, we
001F0Fr 3                       ; save size and just go for the subroutine jumps
001F0Fr 3                       ; """
001F0Fr 3               xt_question:
001F0Fr 3                               ; FETCH takes care of underflow check
001F0Fr 3  20 rr rr                     jsr xt_fetch
001F12r 3  20 rr rr                     jsr xt_dot
001F15r 3               
001F15r 3  60           z_question:     rts
001F16r 3               
001F16r 3               
001F16r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001F16r 3               ; ## "?dup"  auto  ANS core
001F16r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001F16r 3               
001F16r 3               xt_question_dup:
001F16r 3  20 rr rr                     jsr underflow_1
001F19r 3               
001F19r 3                               ; Check if TOS is zero
001F19r 3  B5 00                        lda 0,x
001F1Br 3  15 01                        ora 1,x
001F1Dr 3  F0 0A                        beq @done
001F1Fr 3               
001F1Fr 3                               ; not zero, duplicate
001F1Fr 3  CA                           dex
001F20r 3  CA                           dex
001F21r 3  B5 02                        lda 2,x
001F23r 3  95 00                        sta 0,x
001F25r 3  B5 03                        lda 3,x
001F27r 3  95 01                        sta 1,x
001F29r 3               @done:
001F29r 3  60           z_question_dup: rts
001F2Ar 3               
001F2Ar 3               
001F2Ar 3               
001F2Ar 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001F2Ar 3               ; ## "r@"  auto  ANS core
001F2Ar 3                       ; """https://forth-standard.org/standard/core/RFetch
001F2Ar 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001F2Ar 3                       ; work normally as well
001F2Ar 3                       ;
001F2Ar 3                       ; An alternative way to write this word
001F2Ar 3                       ; would be to access the elements on the stack directly like 2R@
001F2Ar 3                       ; does, these versions should be compared at some point.
001F2Ar 3                       ; """
001F2Ar 3               xt_r_fetch:
001F2Ar 3                               ; get the return address
001F2Ar 3  7A                           ply             ; LSB
001F2Br 3  84 rr                        sty tmp1
001F2Dr 3  7A                           ply             ; MSB
001F2Er 3               
001F2Er 3                               ; --- CUT FOR NATIVE COMPILE ---
001F2Er 3               
001F2Er 3                               ; get the actual top of Return Stack
001F2Er 3  CA                           dex
001F2Fr 3  CA                           dex
001F30r 3               
001F30r 3  68                           pla             ; LSB
001F31r 3  95 00                        sta 0,x
001F33r 3  68                           pla             ; MSB
001F34r 3  95 01                        sta 1,x
001F36r 3               
001F36r 3                               ; now we have to put that value back
001F36r 3  48                           pha
001F37r 3  B5 00                        lda 0,x
001F39r 3  48                           pha
001F3Ar 3               
001F3Ar 3                               ; --- CUT FOR NATIVE COMPILE ---
001F3Ar 3               
001F3Ar 3                               ; restore return value
001F3Ar 3  5A                           phy             ; MSB
001F3Br 3  A4 rr                        ldy tmp1
001F3Dr 3  5A                           phy             ; LSB
001F3Er 3               
001F3Er 3  60           z_r_fetch:      rts
001F3Fr 3               
001F3Fr 3               
001F3Fr 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001F3Fr 3               ; ## "r>"  auto  ANS core
001F3Fr 3                       ; """https://forth-standard.org/standard/core/Rfrom
001F3Fr 3                       ; Move Top of Return Stack to Top of Data Stack.
001F3Fr 3                       ;
001F3Fr 3                       ; We have to move
001F3Fr 3                       ; the RTS address out of the way first. This word is handled
001F3Fr 3                       ; differently for native and and subroutine compilation, see COMPILE,
001F3Fr 3                       ; This is a compile-only word
001F3Fr 3                       ; """
001F3Fr 3               
001F3Fr 3               xt_r_from:
001F3Fr 3                               ; Rescue the address of the return jump that is currently
001F3Fr 3                               ; on top of the Return Stack. If this word is natively
001F3Fr 3                               ; compiled, this is a total waste of time
001F3Fr 3  68                           pla             ; LSB
001F40r 3  85 rr                        sta tmptos
001F42r 3  7A                           ply             ; MSB
001F43r 3               
001F43r 3                               ; --- CUT FOR NATIVE CODING ---
001F43r 3               
001F43r 3  CA                           dex
001F44r 3  CA                           dex
001F45r 3               
001F45r 3                               ; now we can access the actual data
001F45r 3               
001F45r 3  68                           pla             ; LSB
001F46r 3  95 00                        sta 0,x
001F48r 3  68                           pla             ; MSB
001F49r 3  95 01                        sta 1,x
001F4Br 3               
001F4Br 3                               ; --- CUT FOR NATIVE CODING ---
001F4Br 3               
001F4Br 3                               ; restore the return address
001F4Br 3  5A                           phy             ; MSB
001F4Cr 3  A5 rr                        lda tmptos
001F4Er 3  48                           pha             ; LSB
001F4Fr 3               
001F4Fr 3  60           z_r_from:       rts
001F50r 3               
001F50r 3               
001F50r 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001F50r 3               ; ## "r>input"  tested  Tali Forth
001F50r 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001F50r 3                       ; and toin from the Return Stack.
001F50r 3                       ;
001F50r 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001F50r 3                       ; """
001F50r 3               
001F50r 3               xt_r_to_input:
001F50r 3               
001F50r 3                               ; We arrive here with the return address on the top of the
001F50r 3                               ; 65c02's stack. We need to move it out of the way first
001F50r 3  68                           pla
001F51r 3  85 rr                        sta tmp1
001F53r 3  68                           pla
001F54r 3  85 rr                        sta tmp1+1
001F56r 3               
001F56r 3                               ; This assumes that insrc is the first of eight bytes and
001F56r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001F56r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001F56r 3                               ; of the Return Stack.
001F56r 3  A0 00                        ldy #0
001F58r 3               @loop:
001F58r 3  68                           pla
001F59r 3  99 rr rr                     sta insrc,y
001F5Cr 3  C8                           iny
001F5Dr 3  C0 08                        cpy #8
001F5Fr 3  D0 F7                        bne @loop
001F61r 3               
001F61r 3                               ; Restore address for return jump
001F61r 3  A5 rr                        lda tmp1+1
001F63r 3  48                           pha
001F64r 3  A5 rr                        lda tmp1
001F66r 3  48                           pha
001F67r 3               
001F67r 3  60           z_r_to_input: 	rts
001F68r 3               
001F68r 3               
001F68r 3               
001F68r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001F68r 3               ; ## "recurse"  auto  ANS core
001F68r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001F68r 3                       ;
001F68r 3                       ; This word may not be natively compiled
001F68r 3                       ; """
001F68r 3               
001F68r 3               xt_recurse:
001F68r 3                               ; The whole routine amounts to compiling a reference to
001F68r 3                               ; the word that is being compiled. First, we save the JSR
001F68r 3                               ; instruction
001F68r 3  A0 00                        ldy #0
001F6Ar 3               
001F6Ar 3  A9 20                        lda #$20        ; opcode for JSR
001F6Cr 3  91 rr                        sta (cp),y
001F6Er 3  C8                           iny
001F6Fr 3               
001F6Fr 3                               ; Next, we save the LSB and MSB of the xt of the word
001F6Fr 3                               ; we are currently working on. We first need to see if
001F6Fr 3                               ; WORKWORD has the nt (: started the word) or the
001F6Fr 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001F6Fr 3  24 rr                        bit status
001F71r 3  70 0C                        bvs @nt_in_workword
001F73r 3               
001F73r 3                               ; This is a special :NONAME word. Just copy the xt
001F73r 3                               ; from WORKWORD into the dictionary.
001F73r 3  A5 rr                        lda workword
001F75r 3  91 rr                        sta (cp),y
001F77r 3  C8                           iny
001F78r 3  A5 rr                        lda workword+1
001F7Ar 3  91 rr                        sta (cp),y
001F7Cr 3  C8                           iny
001F7Dr 3  80 1B                        bra @update_cp
001F7Fr 3               
001F7Fr 3               @nt_in_workword:
001F7Fr 3                               ; This is a regular : word, so the xt is four bytes down
001F7Fr 3                               ; from the nt which we saved in WORKWORD. We could probably
001F7Fr 3                               ; use NAME>INT here but this is going to be faster, and
001F7Fr 3                               ; fast counts with recursion
001F7Fr 3  A5 rr                        lda workword            ; LSB
001F81r 3  18                           clc
001F82r 3  69 04                        adc #4
001F84r 3  85 rr                        sta tmp1
001F86r 3  A5 rr                        lda workword+1          ; MSB
001F88r 3  69 00                        adc #0
001F8Ar 3  85 rr                        sta tmp1+1
001F8Cr 3               
001F8Cr 3  B2 rr                        lda (tmp1)
001F8Er 3  91 rr                        sta (cp),y
001F90r 3  5A                           phy
001F91r 3  A0 01                        ldy #1
001F93r 3  B1 rr                        lda (tmp1),y
001F95r 3  7A                           ply
001F96r 3  C8                           iny
001F97r 3  91 rr                        sta (cp),y
001F99r 3  C8                           iny
001F9Ar 3               
001F9Ar 3               @update_cp:
001F9Ar 3  98                           tya
001F9Br 3  18                           clc
001F9Cr 3  65 rr                        adc cp
001F9Er 3  85 rr                        sta cp
001FA0r 3  90 02                        bcc @done
001FA2r 3  E6 rr                        inc cp+1
001FA4r 3               @done:
001FA4r 3  60           z_recurse:      rts
001FA5r 3               
001FA5r 3               
001FA5r 3               
001FA5r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001FA5r 3               ; ## "refill"  tested  ANS core ext
001FA5r 3                       ; """https://forth-standard.org/standard/core/REFILL
001FA5r 3                       ; Attempt to fill the input buffer from the input source, returning
001FA5r 3                       ; a true flag if successful. When the input source is the user input
001FA5r 3                       ; device, attempt to receive input into the terminal input buffer. If
001FA5r 3                       ; successful, make the result the input buffer, set >IN to zero, and
001FA5r 3                       ; return true. Receipt of a line containing no characters is considered
001FA5r 3                       ; successful. If there is no input available from the current input
001FA5r 3                       ; source, return false. When the input source is a string from EVALUATE,
001FA5r 3                       ; return false and perform no other action." See
001FA5r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001FA5r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001FA5r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001FA5r 3                       ; entire block as a 1024 byte string.
001FA5r 3                       ; """"
001FA5r 3               
001FA5r 3               xt_refill:
001FA5r 3                               ; Get input source from SOURCE-ID. This is an
001FA5r 3                               ; optimized version of a subroutine jump to SOURCE-ID
001FA5r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001FA7r 3  D0 2D                        bne @src_not_kbd
001FA9r 3               
001FA9r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001FA9r 3                               ; with ACCEPT, which wants the address of the current input
001FA9r 3                               ; buffer NOS and the max number of characters to accept TOS
001FA9r 3  CA                           dex
001FAAr 3  CA                           dex
001FABr 3  CA                           dex
001FACr 3  CA                           dex
001FADr 3               
001FADr 3  A5 rr                        lda cib                 ; address of CIB is NOS
001FAFr 3  95 02                        sta 2,x
001FB1r 3  A5 rr                        lda cib+1
001FB3r 3  95 03                        sta 3,x
001FB5r 3               
001FB5r 3  64 rr                        stz ciblen              ; go in with empty buffer
001FB7r 3  64 rr                        stz ciblen+1
001FB9r 3               
001FB9r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001FBBr 3  95 00                        sta 0,x
001FBDr 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001FBFr 3               
001FBFr 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001FC2r 3               
001FC2r 3                               ; ACCEPT returns the number of characters accepted, which
001FC2r 3                               ; belong in CIBLEN
001FC2r 3  B5 00                        lda 0,x
001FC4r 3  85 rr                        sta ciblen
001FC6r 3  B5 01                        lda 1,x
001FC8r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001FCAr 3               
001FCAr 3                               ; make >IN point to beginning of buffer
001FCAr 3  64 rr                        stz toin
001FCCr 3  64 rr                        stz toin+1
001FCEr 3               
001FCEr 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001FD0r 3  95 00                        sta 0,x
001FD2r 3  95 01                        sta 1,x
001FD4r 3               
001FD4r 3  80 10                        bra @done
001FD6r 3               
001FD6r 3               @src_not_kbd:
001FD6r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001FD6r 3                               ; memory or a file (remember, no blocks in this version).
001FD6r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001FD6r 3  1A                           inc
001FD7r 3  D0 08                        bne @src_not_string
001FD9r 3               
001FD9r 3                               ; Simply return FALSE flag as per specification
001FD9r 3  CA                           dex
001FDAr 3  CA                           dex
001FDBr 3  74 00                        stz 0,x
001FDDr 3  74 01                        stz 1,x
001FDFr 3               
001FDFr 3  80 05                        bra z_refill
001FE1r 3               
001FE1r 3               @src_not_string:
001FE1r 3                               ; Since we don't have blocks, this must mean that we are trying
001FE1r 3                               ; to read from a file. However, we don't have files yet, so we
001FE1r 3                               ; report an error and jump to ABORT.
001FE1r 3  A9 01                        lda #err_badsource
001FE3r 3  4C rr rr                     jmp error
001FE6r 3               @done:
001FE6r 3  60           z_refill:       rts
001FE7r 3               
001FE7r 3               
001FE7r 3               
001FE7r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001FE7r 3               ; ## "repeat"  auto  ANS core
001FE7r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001FE7r 3               
001FE7r 3               xt_repeat:
001FE7r 3                               ; Run again first
001FE7r 3  20 rr rr                     jsr xt_again
001FEAr 3               
001FEAr 3                               ; Stuff HERE in for the branch address
001FEAr 3                               ; to get out of the loop
001FEAr 3  20 rr rr                     jsr xt_here
001FEDr 3  20 rr rr                     jsr xt_swap
001FF0r 3  20 rr rr                     jsr xt_store
001FF3r 3               
001FF3r 3  60           z_repeat:       rts
001FF4r 3               
001FF4r 3               
001FF4r 3               
001FF4r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001FF4r 3               ; ## "]"  auto  ANS core
001FF4r 3                       ; """https://forth-standard.org/standard/right-bracket
001FF4r 3                       ; This is an immediate word.
001FF4r 3                       ; """
001FF4r 3               xt_right_bracket:
001FF4r 3  A9 FF                        lda #$FF
001FF6r 3  85 rr                        sta state
001FF8r 3  85 rr                        sta state+1
001FFAr 3               z_right_bracket:
001FFAr 3  60                           rts
001FFBr 3               
001FFBr 3               
001FFBr 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001FFBr 3               ; ## "root-wordlist"  tested  Tali Editor
001FFBr 3               xt_root_wordlist:
001FFBr 3  CA                           dex             ; The WID for the Root wordlist is 3.
001FFCr 3  CA                           dex
001FFDr 3  A9 03                        lda #3
001FFFr 3  95 00                        sta 0,x
002001r 3  74 01                        stz 1,x
002003r 3               
002003r 3               z_root_wordlist:
002003r 3  60                           rts
002004r 3               
002004r 3               
002004r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
002004r 3               ; ## "rot"  auto  ANS core
002004r 3                       ; """https://forth-standard.org/standard/core/ROT
002004r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
002004r 3                       ; on top!
002004r 3                       ; """
002004r 3               
002004r 3               xt_rot:
002004r 3  20 rr rr                     jsr underflow_3
002007r 3               
002007r 3  B4 05                        ldy 5,x         ; MSB first
002009r 3  B5 03                        lda 3,x
00200Br 3  95 05                        sta 5,x
00200Dr 3  B5 01                        lda 1,x
00200Fr 3  95 03                        sta 3,x
002011r 3  94 01                        sty 1,x
002013r 3               
002013r 3  B4 04                        ldy 4,x         ; LSB next
002015r 3  B5 02                        lda 2,x
002017r 3  95 04                        sta 4,x
002019r 3  B5 00                        lda 0,x
00201Br 3  95 02                        sta 2,x
00201Dr 3  94 00                        sty 0,x
00201Fr 3               
00201Fr 3  60           z_rot:          rts
002020r 3               
002020r 3               
002020r 3               
002020r 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
002020r 3               ; ## "rshift"  auto  ANS core
002020r 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
002020r 3               xt_rshift:
002020r 3  20 rr rr                     jsr underflow_2
002023r 3               
002023r 3                               ; We shift maximal by 16 bits, mask everything else
002023r 3  B5 00                        lda 0,x
002025r 3  29 0F                        and #%00001111
002027r 3  F0 08                        beq @done               ; if 0 shifts, quit
002029r 3               
002029r 3  A8                           tay
00202Ar 3               @loop:
00202Ar 3  56 03                        lsr 3,x
00202Cr 3  76 02                        ror 2,x
00202Er 3  88                           dey
00202Fr 3  D0 F9                        bne @loop
002031r 3               @done:
002031r 3  E8                           inx
002032r 3  E8                           inx
002033r 3               
002033r 3  60           z_rshift:       rts
002034r 3               
002034r 3               
002034r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
002034r 3               ; ## "s\""  auto  ANS core
002034r 3                       ; """https://forth-standard.org/standard/core/Seq
002034r 3                       ; Store address and length of string given, returning ( addr u ).
002034r 3                       ; ANS core claims this is compile-only, but the file set expands it
002034r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
002034r 3                       ; are evil. We follow general usage. This is just like S" except
002034r 3                       ; that it allows for some special escaped characters.
002034r 3                       ; """
002034r 3               
002034r 3               xt_s_backslash_quote:
002034r 3                               ; tmp2 will be used to determine if we are handling
002034r 3                               ; escaped characters or not. In this case, we are,
002034r 3                               ; so set it to $FF (the upper byte will be used to
002034r 3                               ; determine if we just had a \ and the next character
002034r 3                               ; needs to be modifed as an escaped character).
002034r 3  A9 FF                        lda #$FF
002036r 3  85 rr                        sta tmp2
002038r 3  64 rr                        stz tmp2+1
00203Ar 3               
00203Ar 3                               ; Now that the flag is set, jump into s_quote to process
00203Ar 3                               ; the string.
00203Ar 3  20 rr rr                     jsr s_quote_start
00203Dr 3               @done:
00203Dr 3               z_s_backslash_quote:
00203Dr 3  60                           rts
00203Er 3               
00203Er 3               
00203Er 3               ; This is a helper function for s_backslash_quote to convert a character
00203Er 3               ; from ASCII to the corresponding hex value, eg 'F'->15
00203Er 3               convert_hex_value:
00203Er 3               
00203Er 3  C9 41                cmp #'A'
002040r 3  90 07                bcc @digit
002042r 3               
002042r 3                       ; It's A-F
002042r 3  29 DF                and #$DF                ; Make it uppercase.
002044r 3  38                   sec
002045r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
002047r 3  80 03                bra @done
002049r 3               
002049r 3               @digit:
002049r 3                       ; It's 0-9
002049r 3  38                   sec
00204Ar 3  E9 30                sbc #'0'
00204Cr 3               
00204Cr 3               @done:
00204Cr 3  60                   rts
00204Dr 3               
00204Dr 3               
00204Dr 3               
00204Dr 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
00204Dr 3               ; ## "search-wordlist" auto ANS search
00204Dr 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
00204Dr 3               
00204Dr 3               xt_search_wordlist:
00204Dr 3  20 rr rr                     jsr underflow_3
002050r 3               
002050r 3                               ; Set up tmp1 with the wordlist indicated by wid
002050r 3                               ; on the stack. Start by putting the base address
002050r 3                               ; of the wordlists in tmp2.
002050r 3  A5 rr                        lda up
002052r 3  18                           clc
002053r 3  69 06                        adc #wordlists_offset
002055r 3  85 rr                        sta tmp2
002057r 3  A5 rr                        lda up+1
002059r 3  69 00                        adc #0          ; Adding carry
00205Br 3  85 rr                        sta tmp2+1
00205Dr 3               
00205Dr 3                               ; Add the wid (in cells) to the base address.
00205Dr 3  B5 00                        lda 0,x
00205Fr 3  0A                           asl             ; Convert wid to offset in cells (x2)
002060r 3  65 rr                        adc tmp2
002062r 3  85 rr                        sta tmp2
002064r 3  90 02                        bcc @1
002066r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
002068r 3               
002068r 3                               ; tmp2 now holds the address of the dictionary pointer
002068r 3                               ; for the given wordlist.
002068r 3               @1:
002068r 3                               ; Remove the wid from the stack.
002068r 3  E8                           inx
002069r 3  E8                           inx
00206Ar 3               
00206Ar 3                               ; check for special case of an empty string (length zero)
00206Ar 3  B5 00                        lda 0,x
00206Cr 3  15 01                        ora 1,x
00206Er 3  D0 03                        bne @check_wordlist
002070r 3  4C rr rr                     jmp @done
002073r 3               
002073r 3               @check_wordlist:
002073r 3                               ; Check for special case of empty wordlist
002073r 3                               ; (dictionary pointer, in tmp2, is 0)
002073r 3  A5 rr                        lda tmp2
002075r 3  05 rr                        ora tmp2+1
002077r 3  D0 03                        bne @have_string
002079r 3  4C rr rr                     jmp @done
00207Cr 3               
00207Cr 3               @have_string:
00207Cr 3                               ; set up first loop iteration
00207Cr 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
00207Er 3  85 rr                        sta tmp1
002080r 3               
002080r 3  E6 rr                        inc tmp2                ; Move to the upper byte
002082r 3  D0 02                        bne @2
002084r 3  E6 rr                        inc tmp2+1
002086r 3               @2:
002086r 3  B2 rr                        lda (tmp2)
002088r 3  85 rr                        sta tmp1+1
00208Ar 3               
00208Ar 3                               ; Reuse tmp2 to hold the address of the mystery string.
00208Ar 3  B5 02                        lda 2,x                 ; Address of mystery string
00208Cr 3  85 rr                        sta tmp2
00208Er 3  B5 03                        lda 3,x
002090r 3  85 rr                        sta tmp2+1
002092r 3               
002092r 3               @loop:
002092r 3                               ; first quick test: Are strings the same length?
002092r 3  B2 rr                        lda (tmp1)
002094r 3  D5 00                        cmp 0,x
002096r 3  D0 7B                        bne @next_entry
002098r 3               
002098r 3               @compare_string:
002098r 3                               ; are the same length, so we now have to compare each
002098r 3                               ; character
002098r 3               
002098r 3                               ; second quick test: Is the first character the same?
002098r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
00209Ar 3               
00209Ar 3                               ; Lowercase the incoming charcter.
00209Ar 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
00209Cr 3  B0 07                        bcs @compare_first
00209Er 3  C9 41                        cmp #$41        ; ASCII 'A'
0020A0r 3  90 03                        bcc @compare_first
0020A2r 3               
0020A2r 3                               ; An uppercase letter has been located.  Make it
0020A2r 3                               ; lowercase.
0020A2r 3  18                           clc
0020A3r 3  69 20                        adc #$20
0020A5r 3               
0020A5r 3               @compare_first:
0020A5r 3  A0 08                        ldy #8          ; Offset in nt to name
0020A7r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
0020A9r 3  D0 68                        bne @next_entry
0020ABr 3               
0020ABr 3                               ; string length are the same and the first character is the
0020ABr 3                               ; same. If the length of the string is 1, we're already done
0020ABr 3  B5 00                        lda 0,x
0020ADr 3  3A                           dec
0020AEr 3  F0 2C                        beq @success
0020B0r 3               
0020B0r 3                               ; No such luck: The strings are the same length and the first
0020B0r 3                               ; char is the same, but the word is more than one char long.
0020B0r 3                               ; So we suck it up and compare every single character. We go
0020B0r 3                               ; from back to front, because words like CELLS and CELL+ would
0020B0r 3                               ; take longer otherwise. We can also shorten the loop by one
0020B0r 3                               ; because we've already compared the first char.
0020B0r 3               
0020B0r 3                               ; The string of the word we're testing against is 8 bytes down
0020B0r 3  A5 rr                        lda tmp1
0020B2r 3  48                           pha             ; Preserve tmp1 on the return stack.
0020B3r 3  18                           clc
0020B4r 3  69 08                        adc #8
0020B6r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0020B8r 3  A5 rr                        lda tmp1+1
0020BAr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0020BBr 3  69 00                        adc #0          ; we only need the carry
0020BDr 3  85 rr                        sta tmp1+1
0020BFr 3               
0020BFr 3  B4 00                        ldy 0,x         ; index is length of string minus 1
0020C1r 3  88                           dey
0020C2r 3               
0020C2r 3               @string_loop:
0020C2r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
0020C4r 3               
0020C4r 3                               ; Lowercase the incoming charcter.
0020C4r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
0020C6r 3  B0 07                        bcs @check_char
0020C8r 3  C9 41                        cmp #$41        ; ASCII 'A'
0020CAr 3  90 03                        bcc @check_char
0020CCr 3               
0020CCr 3                               ; An uppercase letter has been located.  Make it
0020CCr 3                               ; lowercase.
0020CCr 3  18                           clc
0020CDr 3  69 20                        adc #$20
0020CFr 3               @check_char:
0020CFr 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
0020D1r 3  D0 3A                        bne @next_entry_tmp1
0020D3r 3               
0020D3r 3  88                           dey
0020D4r 3  D0 EC                        bne @string_loop
0020D6r 3               
0020D6r 3               @success_tmp1:
0020D6r 3  68                           pla             ; Restore tmp1 from the return stack.
0020D7r 3  85 rr                        sta tmp1+1
0020D9r 3  68                           pla
0020DAr 3  85 rr                        sta tmp1
0020DCr 3               
0020DCr 3               @success:
0020DCr 3                               ; The strings match. Drop the count and put correct nt TOS
0020DCr 3  E8                           inx
0020DDr 3  E8                           inx
0020DEr 3  A5 rr                        lda tmp1
0020E0r 3  95 00                        sta 0,x
0020E2r 3  A5 rr                        lda tmp1+1
0020E4r 3  95 01                        sta 1,x
0020E6r 3               
0020E6r 3                               ; Change the nt into an xt, but save a copy of the nt
0020E6r 3                               ; to look up whether the word is immediate or not.
0020E6r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0020E9r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
0020ECr 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
0020EFr 3               
0020EFr 3  A0 00                        ldy #0                  ; Prepare flag
0020F1r 3               
0020F1r 3                               ; The flags are in the second byte of the header
0020F1r 3  F6 00                        inc 0,x
0020F3r 3  D0 02                        bne @3
0020F5r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
0020F7r 3               @3:
0020F7r 3  A1 00                        lda (0,x)               ; ( xt char )
0020F9r 3  29 04                        and #IM
0020FBr 3  D0 08                        bne @immediate          ; bit set, we're immediate
0020FDr 3               
0020FDr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0020FFr 3  95 00                        sta 0,x
002101r 3  95 01                        sta 1,x
002103r 3  80 28                        bra @done_nodrop
002105r 3               
002105r 3               @immediate:
002105r 3  A9 01                        lda #1                  ; We're immediate, return 1
002107r 3  95 00                        sta 0,x
002109r 3  74 01                        stz 1,x
00210Br 3               
00210Br 3  80 20                        bra @done_nodrop
00210Dr 3               
00210Dr 3               @next_entry_tmp1:
00210Dr 3  68                           pla             ; Restore tmp1 from the return stack.
00210Er 3  85 rr                        sta tmp1+1
002110r 3  68                           pla
002111r 3  85 rr                        sta tmp1
002113r 3               @next_entry:
002113r 3                               ; Not the same, so we get the next word. Next header
002113r 3                               ; address is two bytes down
002113r 3  A0 02                        ldy #2
002115r 3  B1 rr                        lda (tmp1),y
002117r 3  48                           pha
002118r 3  C8                           iny
002119r 3  B1 rr                        lda (tmp1),y
00211Br 3  85 rr                        sta tmp1+1
00211Dr 3  68                           pla
00211Er 3  85 rr                        sta tmp1
002120r 3               
002120r 3                               ; If we got a zero, we've walked the whole Dictionary and
002120r 3                               ; return as a failure, otherwise try again
002120r 3  05 rr                        ora tmp1+1
002122r 3  F0 03                        beq @fail_done
002124r 3  4C rr rr                     jmp @loop
002127r 3               
002127r 3               @fail_done:
002127r 3  74 02                        stz 2,x         ; failure flag
002129r 3  74 03                        stz 3,x
00212Br 3               @done:
00212Br 3  E8                           inx
00212Cr 3  E8                           inx
00212Dr 3               @done_nodrop:
00212Dr 3               z_search_wordlist:
00212Dr 3  60                           rts
00212Er 3               
00212Er 3               
00212Er 3               
00212Er 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
00212Er 3               ; ## "see" tested  ANS tools
00212Er 3                       ; """https://forth-standard.org/standard/tools/SEE
00212Er 3                       ; SEE takes the name of a word and prints its name token (nt),
00212Er 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
00212Er 3                       ; code and disassembles it.
00212Er 3                       ; """
00212Er 3               
00212Er 3               xt_see:
00212Er 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
002131r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
002134r 3               
002134r 3                               ; If we got back a zero we don't know that word and so we quit
002134r 3                               ; with an error
002134r 3  B5 00                        lda 0,x
002136r 3  15 01                        ora 1,x
002138r 3  D0 05                        bne @1
00213Ar 3               
00213Ar 3  A9 05                        lda #err_noname
00213Cr 3  4C rr rr                     jmp error
00213Fr 3               @1:
00213Fr 3  20 rr rr                     jsr xt_cr
002142r 3               
002142r 3                               ; We have a legal word, so let's get serious. Save the current
002142r 3                               ; number base and use hexadecimal instead.
002142r 3  A5 rr                        lda base
002144r 3  48                           pha
002145r 3  20 rr rr                     jsr xt_hex
002148r 3               
002148r 3  A9 0A                        lda #str_see_nt
00214Ar 3  20 rr rr                     jsr print_string_no_lf
00214Dr 3               
00214Dr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002150r 3  20 rr rr                     jsr xt_u_dot
002153r 3  20 rr rr                     jsr xt_space            ; ( nt )
002156r 3               
002156r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002159r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
00215Cr 3               
00215Cr 3  A9 0B                        lda #str_see_xt
00215Er 3  20 rr rr                     jsr print_string_no_lf
002161r 3               
002161r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
002164r 3  20 rr rr                     jsr xt_u_dot
002167r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
00216Ar 3               
00216Ar 3                               ; We print letters for flags and then later follow it with 1 or
00216Ar 3                               ; 0 to mark if which flag is set
00216Ar 3  A9 09                        lda #str_see_flags
00216Cr 3  20 rr rr                     jsr print_string_no_lf
00216Fr 3               
00216Fr 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
002172r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
002175r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
002178r 3               
002178r 3  B5 00                        lda 0,x
00217Ar 3               
00217Ar 3                               ; This is crude, but for the moment it is good enough
00217Ar 3  A0 06                        ldy #6                  ; Not all bits are used
00217Cr 3               @flag_loop:
00217Cr 3  48                           pha
00217Dr 3  29 01                        and #%00000001
00217Fr 3  18                           clc
002180r 3  69 30                        adc #$30                ; ASCII "0"
002182r 3  20 rr rr                     jsr emit_a
002185r 3  20 rr rr                     jsr xt_space
002188r 3               
002188r 3  68                           pla
002189r 3  6A                           ror                     ; Next flag
00218Ar 3               
00218Ar 3  88                           dey
00218Br 3  D0 EF                        bne @flag_loop
00218Dr 3               
00218Dr 3  20 rr rr                     jsr xt_cr
002190r 3               
002190r 3  E8                           inx
002191r 3  E8                           inx                     ; ( nt xt )
002192r 3               
002192r 3                               ; Figure out the size
002192r 3  A9 0C                        lda #str_see_size
002194r 3  20 rr rr                     jsr print_string_no_lf
002197r 3               
002197r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00219Ar 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
00219Dr 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
0021A0r 3  20 rr rr                     jsr xt_decimal
0021A3r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
0021A6r 3  20 rr rr                     jsr xt_hex
0021A9r 3  20 rr rr                     jsr xt_cr
0021ACr 3               
0021ACr 3                               ; Dump hex and disassemble
0021ACr 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
0021AFr 3  20 rr rr                     jsr xt_dump
0021B2r 3  20 rr rr                     jsr xt_cr
0021B5r 3  20 rr rr                     jsr xt_disasm
0021B8r 3               
0021B8r 3  68                           pla
0021B9r 3  85 rr                        sta base
0021BBr 3               
0021BBr 3  60           z_see:          rts
0021BCr 3               
0021BCr 3               
0021BCr 3               
0021BCr 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
0021BCr 3               ; ## "set-current" auto ANS search
0021BCr 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
0021BCr 3               
0021BCr 3               xt_set_current:
0021BCr 3  20 rr rr                     jsr underflow_1
0021BFr 3               
0021BFr 3                               ; Save the value from the data stack.
0021BFr 3  A0 04                        ldy #current_offset
0021C1r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
0021C3r 3  91 rr                        sta (up),y      ; so only the LSB is used.
0021C5r 3               
0021C5r 3  E8                           inx
0021C6r 3  E8                           inx
0021C7r 3               
0021C7r 3  60           z_set_current:  rts
0021C8r 3               
0021C8r 3               
0021C8r 3               
0021C8r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
0021C8r 3               ; ## "set-order" auto ANS search
0021C8r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
0021C8r 3               
0021C8r 3               xt_set_order:
0021C8r 3                               ; Test for -1 TOS
0021C8r 3  A9 FF                        lda #$FF
0021CAr 3  D5 01                        cmp 1,x
0021CCr 3  D0 12                        bne @start
0021CEr 3  D5 00                        cmp 0,x
0021D0r 3  D0 0E                        bne @start
0021D2r 3               
0021D2r 3                               ; There is a -1 TOS.  Replace it with the default
0021D2r 3                               ; search order, which is just the FORTH-WORDLIST.
0021D2r 3  CA                           dex             ; Make room for the count.
0021D3r 3  CA                           dex
0021D4r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
0021D6r 3  A9 03                        lda #3
0021D8r 3  95 02                        sta 2,x
0021DAr 3  74 01                        stz 1,x         ; Count is 1.
0021DCr 3  A9 01                        lda #1
0021DEr 3  95 00                        sta 0,x
0021E0r 3               
0021E0r 3                               ; Continue processing with ( forth-wordlist 1 -- )
0021E0r 3               @start:
0021E0r 3                               ; Set #ORDER - the number of wordlists in the search order.
0021E0r 3  A0 1E                        ldy #num_order_offset
0021E2r 3  B5 00                        lda 0,x
0021E4r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
0021E6r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
0021E8r 3                                               ; Only the low byte is saved in tmp1 as
0021E8r 3                                               ; only 8 wordlists are allowed.
0021E8r 3               
0021E8r 3  E8                           inx             ; Drop the count off the data stack.
0021E9r 3  E8                           inx
0021EAr 3               
0021EAr 3                               ; Check if there are zero wordlists.
0021EAr 3  A5 rr                        lda tmp1
0021ECr 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
0021EEr 3               
0021EEr 3                               ; Move the wordlist ids from the data stack to the search order.
0021EEr 3  A0 1F                        ldy #search_order_offset
0021F0r 3               @loop:
0021F0r 3                               ; Move one wordlist id over into the search order.
0021F0r 3  B5 00                        lda 0,x         ; The search order is a byte array
0021F2r 3  91 rr                        sta (up),y      ; so only save the LSB
0021F4r 3  C8                           iny
0021F5r 3               
0021F5r 3                               ; Remove it from the data stack.
0021F5r 3  E8                           inx
0021F6r 3  E8                           inx
0021F7r 3               
0021F7r 3                               ; See if that was the last one to process (first in the list).
0021F7r 3  C6 rr                        dec tmp1
0021F9r 3  D0 F5                        bne @loop
0021FBr 3               
0021FBr 3               @done:
0021FBr 3  60           z_set_order:    rts
0021FCr 3               
0021FCr 3               
0021FCr 3               
0021FCr 3               
0021FCr 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0021FCr 3               ; ## "s""  auto  ANS core
0021FCr 3                       ; """https://forth-standard.org/standard/core/Sq
0021FCr 3                       ; Store address and length of string given, returning ( addr u ).
0021FCr 3                       ; ANS core claims this is compile-only, but the file set expands it
0021FCr 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0021FCr 3                       ; are evil. We follow general usage.
0021FCr 3                       ;
0021FCr 3                       ; Can also be realized as
0021FCr 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
0021FCr 3                       ; but it is used so much we want it in code.
0021FCr 3                       ; """
0021FCr 3               
0021FCr 3               xt_s_quote:
0021FCr 3                               ; tmp2 will be used to determine if we are handling
0021FCr 3                               ; escaped characters or not.  In this case, we are
0021FCr 3                               ; not, so set it to zero.
0021FCr 3  64 rr                        stz tmp2
0021FEr 3  64 rr                        stz tmp2+1
002200r 3               
002200r 3               s_quote_start:
002200r 3                               ; Make room on the data stack for the address.
002200r 3  CA                           dex
002201r 3  CA                           dex
002202r 3                               ; Make room on the data stack for the count.
002202r 3  CA                           dex
002203r 3  CA                           dex
002204r 3               
002204r 3                               ; Put a jmp over the string data with address to be filled
002204r 3                               ; in later.
002204r 3  A9 4C                        lda #$4C
002206r 3  20 rr rr                     jsr cmpl_a
002209r 3               
002209r 3                               ; Address to be filled in later, just use $4C for the moment
002209r 3  20 rr rr                     jsr cmpl_a
00220Cr 3  20 rr rr                     jsr cmpl_a
00220Fr 3               
00220Fr 3                               ; Save the current value of HERE on the data stack for the
00220Fr 3                               ; address of the string.
00220Fr 3  A5 rr                        lda cp
002211r 3  95 02                        sta 2,x
002213r 3  A5 rr                        lda cp+1
002215r 3  95 03                        sta 3,x
002217r 3               
002217r 3               @savechars_loop:
002217r 3                               ; Start saving the string into the dictionary up to the
002217r 3                               ; ending double quote. First, check to see if the input
002217r 3                               ; buffer is empty.
002217r 3  A5 rr                        lda toin+1              ; MSB
002219r 3  C5 rr                        cmp ciblen+1
00221Br 3  90 2A                        bcc @input_fine         ; unsigned comparison
00221Dr 3               
00221Dr 3  A5 rr                        lda toin                ; LSB
00221Fr 3  C5 rr                        cmp ciblen
002221r 3  90 24                        bcc @input_fine
002223r 3               
002223r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
002223r 3                               ; which uses tmp2 and tmp3. Save and restore them.
002223r 3  A5 rr                        lda tmp2
002225r 3  48                           pha
002226r 3  A5 rr                        lda tmp2+1
002228r 3  48                           pha
002229r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
00222Br 3  48                           pha
00222Cr 3               
00222Cr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
00222Fr 3               
00222Fr 3  68                           pla
002230r 3  85 rr                        sta tmp3
002232r 3  68                           pla
002233r 3  85 rr                        sta tmp2+1
002235r 3  68                           pla
002236r 3  85 rr                        sta tmp2
002238r 3               
002238r 3                               ; Check result of refill.
002238r 3  B5 00                        lda 0,x
00223Ar 3  15 01                        ora 1,x
00223Cr 3  D0 05                        bne @refill_ok
00223Er 3               
00223Er 3                               ; Something when wrong with refill.
00223Er 3  A9 06                        lda #err_refill
002240r 3  4C rr rr                     jmp error
002243r 3               
002243r 3               @refill_ok:
002243r 3                               ; Remove the refill flag from the data stack.
002243r 3  E8                           inx
002244r 3  E8                           inx
002245r 3               
002245r 3                               ; For refill success, jump back up to the empty check, just in
002245r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
002245r 3                               ; input)
002245r 3  80 D0                        bra @savechars_loop
002247r 3               
002247r 3               @input_fine:
002247r 3                               ; There should be at least one valid char to use.
002247r 3                               ; Calculate it's address at CIB+TOIN into tmp1
002247r 3  A5 rr                        lda cib
002249r 3  18                           clc
00224Ar 3  65 rr                        adc toin        ; LSB
00224Cr 3  85 rr                        sta tmp1
00224Er 3  A5 rr                        lda cib+1
002250r 3  65 rr                        adc toin+1      ; MSB
002252r 3  85 rr                        sta tmp1+1
002254r 3               
002254r 3                               ; Get the character
002254r 3  B2 rr                        lda (tmp1)
002256r 3               
002256r 3                               ; Check to see if we are handling escaped characters.
002256r 3  24 rr                        bit tmp2
002258r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
00225Ar 3  4C rr rr                     jmp @regular_char
00225Dr 3               
00225Dr 3               @handle_escapes:
00225Dr 3                               ; We are handling escaped characters.  See if we have
00225Dr 3                               ; already seen the backslash.
00225Dr 3  24 rr                        bit tmp2+1
00225Fr 3  30 03                        bmi @escaped
002261r 3  4C rr rr                     jmp @not_escaped
002264r 3               
002264r 3               @escaped:
002264r 3               
002264r 3                               ; We have seen a backslash (previous character). Check to see if
002264r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
002264r 3                               ; be clear in that case )
002264r 3  70 22                        bvs @check_esc_chars
002266r 3               
002266r 3                               ; We are in the middle of a \x sequence. Check to see if we
002266r 3                               ; are on the first or second digit.
002266r 3  A9 01                        lda #1
002268r 3  24 rr                        bit tmp2+1
00226Ar 3  D0 10                        bne @esc_x_second_digit
00226Cr 3               
00226Cr 3                               ; First digit.
00226Cr 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
00226Er 3  B2 rr                        lda (tmp1)  ; Get the char again.
002270r 3               
002270r 3                               ; Convert to hex
002270r 3  20 rr rr                     jsr convert_hex_value
002273r 3               
002273r 3                               ; This is the upper nybble, so move it up.
002273r 3  0A                           asl
002274r 3  0A                           asl
002275r 3  0A                           asl
002276r 3  0A                           asl
002277r 3  85 rr                        sta tmp3    ; Save it for later.
002279r 3  4C rr rr                     jmp @next_character
00227Cr 3               
00227Cr 3               @esc_x_second_digit:
00227Cr 3               
00227Cr 3                               ; We are on the second hex digit of a \x sequence. Clear the
00227Cr 3                               ; escaped character flag (because we are handling it right
00227Cr 3                               ; here)
00227Cr 3  64 rr                        stz tmp2+1
00227Er 3  B2 rr                        lda (tmp1)
002280r 3               
002280r 3                               ; Convert to hex, combine with value in tmp3
002280r 3  20 rr rr                     jsr convert_hex_value
002283r 3  05 rr                        ora tmp3
002285r 3               
002285r 3  4C rr rr                     jmp @save_character
002288r 3               
002288r 3               @check_esc_chars:
002288r 3                               ; Clear the escaped character flag (because we are
002288r 3                               ; handling it right here)
002288r 3  64 rr                        stz tmp2+1
00228Ar 3               
00228Ar 3                               ; Process the escaped character
00228Ar 3               @check_esc_a:
00228Ar 3  C9 61                        cmp #'a'
00228Cr 3  D0 05                        bne @check_esc_b
00228Er 3               
00228Er 3                               ; BEL (ASCII value 7)
00228Er 3  A9 07                        lda #7
002290r 3  4C rr rr                     jmp @save_character
002293r 3               
002293r 3               @check_esc_b:
002293r 3  C9 62                        cmp #'b'
002295r 3  D0 05                        bne @check_esc_e
002297r 3               
002297r 3                               ; Backspace (ASCII value 8)
002297r 3  A9 08                        lda #8
002299r 3  4C rr rr                     jmp @save_character
00229Cr 3               
00229Cr 3               @check_esc_e:
00229Cr 3  C9 65                        cmp #'e'
00229Er 3  D0 04                        bne @check_esc_f
0022A0r 3               
0022A0r 3                               ; ESC (ASCII value 27)
0022A0r 3  A9 1B                        lda #27
0022A2r 3  80 75                        bra @save_character
0022A4r 3               
0022A4r 3               @check_esc_f:
0022A4r 3  C9 66                        cmp #'f'
0022A6r 3  D0 04                        bne @check_esc_l
0022A8r 3               
0022A8r 3                               ; FF (ASCII value 12)
0022A8r 3  A9 0C                        lda #12
0022AAr 3  80 6D                        bra @save_character
0022ACr 3               
0022ACr 3               @check_esc_l:
0022ACr 3  C9 6C                        cmp #'l'
0022AEr 3  D0 04                        bne @check_esc_m
0022B0r 3               
0022B0r 3                               ; LF (ASCII value 10)
0022B0r 3  A9 0A                        lda #10
0022B2r 3  80 65                        bra @save_character
0022B4r 3               
0022B4r 3               @check_esc_m:
0022B4r 3                               ; This one is not like the others because we save two
0022B4r 3                               ; characters
0022B4r 3  C9 6D                        cmp #'m'
0022B6r 3  D0 09                        bne @check_esc_n
0022B8r 3               
0022B8r 3                               ; CR/LF pair (ASCII values 13, 10)
0022B8r 3  A9 0D                        lda #13
0022BAr 3  20 rr rr                     jsr cmpl_a
0022BDr 3  A9 0A                        lda #10
0022BFr 3  80 58                        bra @save_character
0022C1r 3               
0022C1r 3               @check_esc_n:
0022C1r 3  C9 6E                        cmp #'n'
0022C3r 3  D0 04                        bne @check_esc_q
0022C5r 3               
0022C5r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
0022C5r 3  A9 0A                        lda #10
0022C7r 3  80 50                        bra @save_character
0022C9r 3               
0022C9r 3               @check_esc_q:
0022C9r 3  C9 71                        cmp #'q'
0022CBr 3  D0 04                        bne @check_esc_r
0022CDr 3               
0022CDr 3                               ; Double quote (ASCII value 34)
0022CDr 3  A9 22                        lda #34
0022CFr 3  80 48                        bra @save_character
0022D1r 3               
0022D1r 3               @check_esc_r:
0022D1r 3  C9 72                        cmp #'r'
0022D3r 3  D0 04                        bne @check_esc_t
0022D5r 3               
0022D5r 3                               ; CR (ASCII value 13)
0022D5r 3  A9 0D                        lda #13
0022D7r 3  80 40                        bra @save_character
0022D9r 3               
0022D9r 3               @check_esc_t:
0022D9r 3  C9 74                        cmp #'t'
0022DBr 3  D0 04                        bne @check_esc_v
0022DDr 3               
0022DDr 3                               ; Horizontal TAB (ASCII value 9)
0022DDr 3  A9 09                        lda #9
0022DFr 3  80 38                        bra @save_character
0022E1r 3               
0022E1r 3               @check_esc_v:
0022E1r 3  C9 76                        cmp #'v'
0022E3r 3  D0 04                        bne @check_esc_z
0022E5r 3               
0022E5r 3                               ; Vertical TAB (ASCII value 11)
0022E5r 3  A9 0B                        lda #11
0022E7r 3  80 30                        bra @save_character
0022E9r 3               
0022E9r 3               @check_esc_z:
0022E9r 3  C9 7A                        cmp #'z'
0022EBr 3  D0 04                        bne @check_esc_quote
0022EDr 3               
0022EDr 3                               ; NULL (ASCII value 0)
0022EDr 3  A9 00                        lda #0
0022EFr 3  80 28                        bra @save_character
0022F1r 3               
0022F1r 3               @check_esc_quote:
0022F1r 3  C9 22                        cmp #$22
0022F3r 3  D0 04                        bne @check_esc_x
0022F5r 3               
0022F5r 3                               ; Double quote (ASCII value 34)
0022F5r 3  A9 22                        lda #34
0022F7r 3  80 20                        bra @save_character
0022F9r 3               
0022F9r 3               @check_esc_x:
0022F9r 3  C9 78                        cmp #'x'
0022FBr 3  D0 06                        bne @check_esc_backslash
0022FDr 3               
0022FDr 3                               ; This one is difficult. We need to get the next TWO
0022FDr 3                               ; characters (which might require a refill in the middle)
0022FDr 3                               ; and combine them as two hex digits. We do this by
0022FDr 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
0022FDr 3                               ; and using bit 0 to keep track of which digit we are on.
0022FDr 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
0022FFr 3  85 rr                        sta tmp2+1
002301r 3  80 19                        bra @next_character
002303r 3               
002303r 3               @check_esc_backslash:
002303r 3  C9 5C                        cmp #$5C
002305r 3  D0 04                        bne @not_escaped
002307r 3               
002307r 3                               ; Backslash (ASCII value 92)
002307r 3  A9 5C                        lda #92
002309r 3  80 0E                        bra @save_character
00230Br 3               
00230Br 3               @not_escaped:
00230Br 3                               ; Check for the backslash to see if we should escape
00230Br 3                               ; the next char.
00230Br 3  C9 5C                        cmp #$5C        ; The backslash char
00230Dr 3  D0 06                        bne @regular_char
00230Fr 3               
00230Fr 3                               ; We found a backslash.  Don't save anyhing, but set
00230Fr 3                               ; a flag (in tmp2+1) to handle the next char. We don't
00230Fr 3                               ; try to get the next char here as it may require a
00230Fr 3                               ; refill of the input buffer.
00230Fr 3  A9 FF                        lda #$FF
002311r 3  85 rr                        sta tmp2+1
002313r 3  80 07                        bra @next_character
002315r 3               
002315r 3               @regular_char:
002315r 3                               ; Check if the current character is the end of the string.
002315r 3  C9 22                        cmp #$22        ; ASCII for "
002317r 3  F0 0C                        beq @found_string_end
002319r 3               
002319r 3               @save_character:
002319r 3                               ; If we didn't reach the end of the string, compile this
002319r 3                               ; character into the dictionary
002319r 3  20 rr rr                     jsr cmpl_a
00231Cr 3               
00231Cr 3               @next_character:
00231Cr 3                               ; Move on to the next character.
00231Cr 3  E6 rr                        inc toin
00231Er 3  D0 02                        bne @savechars_loop_longjump
002320r 3  E6 rr                        inc toin+1
002322r 3               
002322r 3               @savechars_loop_longjump:
002322r 3  4C rr rr                     jmp @savechars_loop
002325r 3               
002325r 3               @found_string_end:
002325r 3                               ; Use up the delimiter.
002325r 3  E6 rr                        inc toin
002327r 3  D0 02                        bne @1
002329r 3  E6 rr                        inc toin+1
00232Br 3               @1:
00232Br 3                               ; Calculate the length of the string, which is the
00232Br 3                               ; difference between cp and the address of the start
00232Br 3                               ; of the string (currently saved on the stack).
00232Br 3  A5 rr                        lda cp
00232Dr 3  38                           sec
00232Er 3  F5 02                        sbc 2,x
002330r 3  95 00                        sta 0,x         ; LSB
002332r 3  A5 rr                        lda cp+1
002334r 3  F5 03                        sbc 3,x
002336r 3  95 01                        sta 1,x         ; MSB
002338r 3               
002338r 3                               ; Update the address of the jump-over jmp instruction.
002338r 3                               ; First determine location of jmp instructions address.
002338r 3                               ; It should be 2 bytes before the start of the string.
002338r 3                               ; Compute it into tmp1, which is no longer being used.
002338r 3  B5 02                        lda 2,x
00233Ar 3  38                           sec
00233Br 3  E9 02                        sbc #2
00233Dr 3  85 rr                        sta tmp1
00233Fr 3  B5 03                        lda 3,x
002341r 3  E9 00                        sbc #0          ; Propagate borrow
002343r 3  85 rr                        sta tmp1+1
002345r 3               
002345r 3                               ; Update the address of the jump to HERE.
002345r 3  A5 rr                        lda cp
002347r 3  92 rr                        sta (tmp1)
002349r 3  A0 01                        ldy #1
00234Br 3  A5 rr                        lda cp+1
00234Dr 3  91 rr                        sta (tmp1),y
00234Fr 3               
00234Fr 3                               ; What happens next depends on the state (which is bad, but
00234Fr 3                               ; that's the way it works at the moment). If we are
00234Fr 3                               ; interpretating, we save the string to a transient buffer
00234Fr 3                               ; and return that address (used for file calls, see
00234Fr 3                               ; https://forth-standard.org/standard/file/Sq . If we're
00234Fr 3                               ; compiling, we just need SLITERAL
00234Fr 3  A5 rr                        lda state
002351r 3  05 rr                        ora state+1             ; paranoid
002353r 3  F0 03                        beq @done
002355r 3               
002355r 3                               ; Jump into the middle of the sliteral word, after the
002355r 3                               ; string data has been compiled into the dictionary,
002355r 3                               ; because we've already done that step.
002355r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
002358r 3               
002358r 3               @done:
002358r 3  60           z_s_quote:      rts
002359r 3               
002359r 3               
002359r 3               
002359r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
002359r 3               ; ## "s>d"  auto  ANS core
002359r 3                       ; """https://forth-standard.org/standard/core/StoD"""
002359r 3               
002359r 3               xt_s_to_d:
002359r 3  20 rr rr                     jsr underflow_1
00235Cr 3               
00235Cr 3  CA                           dex
00235Dr 3  CA                           dex
00235Er 3  74 00                        stz 0,x
002360r 3  74 01                        stz 1,x
002362r 3               
002362r 3  B5 03                        lda 3,x
002364r 3  10 04                        bpl @done
002366r 3               
002366r 3                               ; negative, extend sign
002366r 3  D6 00                        dec 0,x
002368r 3  D6 01                        dec 1,x
00236Ar 3               @done:
00236Ar 3  60           z_s_to_d:       rts
00236Br 3               
00236Br 3               
00236Br 3               
00236Br 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
00236Br 3               ; ## "save-buffers"  tested  ANS block
00236Br 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
00236Br 3               
00236Br 3               xt_save_buffers:
00236Br 3                               ; Check the buffer status
00236Br 3  A0 2C                        ldy #buffstatus_offset
00236Dr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00236Fr 3  C9 03                        cmp #3          ; LSB is needed.
002371r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
002373r 3               
002373r 3                               ; We need to save the block.
002373r 3  20 rr rr                     jsr xt_blkbuffer
002376r 3  20 rr rr                     jsr xt_buffblocknum
002379r 3  20 rr rr                     jsr xt_fetch
00237Cr 3  20 rr rr                     jsr xt_block_write
00237Fr 3               
00237Fr 3                               ; Mark the buffer as clean now.
00237Fr 3  A9 01                        lda #1
002381r 3  A0 2C                        ldy #buffstatus_offset
002383r 3  91 rr                        sta (up),y
002385r 3               
002385r 3               @done:
002385r 3  60           z_save_buffers: rts
002386r 3               
002386r 3               
002386r 3               
002386r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
002386r 3               ; ## "scr"  auto  ANS block ext
002386r 3                       ; """https://forth-standard.org/standard/block/SCR"""
002386r 3               xt_scr:
002386r 3                               ; SCR is at UP + scr_offset
002386r 3  CA                           dex
002387r 3  CA                           dex
002388r 3  18                           clc
002389r 3  A5 rr                        lda up
00238Br 3  69 02                        adc #scr_offset ; Add offset
00238Dr 3  95 00                        sta 0,x
00238Fr 3  A5 rr                        lda up+1
002391r 3  69 00                        adc #0          ; Adding carry
002393r 3  95 01                        sta 1,x
002395r 3               
002395r 3  60           z_scr:          rts
002396r 3               
002396r 3               
002396r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002396r 3               ; ## "search"   auto  ANS string
002396r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002396r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002396r 3                       ; addr1 u1). If a match is found the flag will be true and
002396r 3                       ; addr3 will have the address of the start of the match and u3 will have
002396r 3                       ; the number of characters remaining from the match point to the end
002396r 3                       ; of the original string1. If a match is not found, the flag will be
002396r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002396r 3                       ; """
002396r 3               
002396r 3               xt_search:
002396r 3  20 rr rr                     jsr underflow_4
002399r 3               
002399r 3                               ; ANS says if the second string is a zero-length string it
002399r 3                               ; automatically matches.
002399r 3  B5 00                        lda 0,x
00239Br 3  15 01                        ora 1,x
00239Dr 3  D0 0B                        bne @start_search
00239Fr 3               
00239Fr 3                               ; The second string is a zero length string.  Just remove
00239Fr 3                               ; the second string and put a true flag.
00239Fr 3  E8                           inx             ; Remove u2
0023A0r 3  E8                           inx
0023A1r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
0023A3r 3  95 00                        sta 0,x
0023A5r 3  95 01                        sta 1,x
0023A7r 3  4C rr rr                     jmp z_search
0023AAr 3               
0023AAr 3               @start_search:
0023AAr 3                               ; Put an offset (starting at zero) on the stack.
0023AAr 3  20 rr rr                     jsr xt_zero
0023ADr 3               
0023ADr 3               @search_loop:
0023ADr 3                               ; We stop (not found) when u2 + offset > u1
0023ADr 3                               ; Calculate u2+offset into tmp1
0023ADr 3  18                           clc
0023AEr 3  B5 00                        lda 0,x
0023B0r 3  75 02                        adc 2,x
0023B2r 3  85 rr                        sta tmp1
0023B4r 3  B5 01                        lda 1,x
0023B6r 3  75 03                        adc 3,x
0023B8r 3               
0023B8r 3               
0023B8r 3                               ; Compare to u1. Start with the high byte
0023B8r 3  D5 07                        cmp 7,x
0023BAr 3  90 12                        bcc @init_comparison ; Obviously less
0023BCr 3  D0 06                        bne @not_found
0023BEr 3               
0023BEr 3                               ; The upper address byte matched - check the lower byte
0023BEr 3                               ; Load u1 first so we can use just a carry to check.
0023BEr 3  B5 06                        lda 6,x
0023C0r 3  C5 rr                        cmp tmp1
0023C2r 3  B0 0A                        bcs @init_comparison
0023C4r 3               
0023C4r 3               @not_found:
0023C4r 3                               ; The substring isn't in the main string.
0023C4r 3                               ; Return just the main string and a false flag.
0023C4r 3  E8                           inx             ; Remove offset
0023C5r 3  E8                           inx
0023C6r 3  E8                           inx             ; Remove u2
0023C7r 3  E8                           inx
0023C8r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
0023CAr 3  74 01                        stz 1,x
0023CCr 3  80 66                        bra z_search
0023CEr 3               
0023CEr 3               @init_comparison:
0023CEr 3                               ; Use tmp1 to hold address in string 1.
0023CEr 3                               ; Use tmp2 to hold address in string 2.
0023CEr 3                               ; Use tmp3 to hold the number of characters left to check.
0023CEr 3               
0023CEr 3                               ; Compute the starting address in string 1
0023CEr 3                               ; as addr1 + offset
0023CEr 3  18                           clc
0023CFr 3  B5 08                        lda 8,x
0023D1r 3  75 00                        adc 0,x
0023D3r 3  85 rr                        sta tmp1
0023D5r 3  B5 09                        lda 9,x
0023D7r 3  75 01                        adc 1,x
0023D9r 3  85 rr                        sta tmp1+1
0023DBr 3               
0023DBr 3                               ; The starting address in string 2 is just addr2.
0023DBr 3  B5 04                        lda 4,x
0023DDr 3  85 rr                        sta tmp2
0023DFr 3  B5 05                        lda 5,x
0023E1r 3  85 rr                        sta tmp2+1
0023E3r 3               
0023E3r 3                               ; The number of characters to check is u2.
0023E3r 3  B5 02                        lda 2,x
0023E5r 3  85 rr                        sta tmp3
0023E7r 3  B5 03                        lda 3,x
0023E9r 3  85 rr                        sta tmp3+1
0023EBr 3               
0023EBr 3               @comparison_loop:
0023EBr 3                               ; Check to see if the current characters match.
0023EBr 3  B2 rr                        lda (tmp1)
0023EDr 3  D2 rr                        cmp (tmp2)
0023EFr 3  F0 05                        beq @letters_match
0023F1r 3               
0023F1r 3                               ; One of the letters didn't match.
0023F1r 3                               ; Increment the offset and try again.
0023F1r 3  20 rr rr                     jsr xt_one_plus
0023F4r 3  80 B7                        bra @search_loop
0023F6r 3               
0023F6r 3               @letters_match:
0023F6r 3                               ; The letters match.  Advance the pointers until the
0023F6r 3                               ; count reaches zero.
0023F6r 3  E6 rr                        inc tmp1
0023F8r 3  D0 02                        bne @1
0023FAr 3  E6 rr                        inc tmp1+1
0023FCr 3               @1:
0023FCr 3  E6 rr                        inc tmp2
0023FEr 3  D0 02                        bne @2
002400r 3  E6 rr                        inc tmp2+1
002402r 3               @2:
002402r 3                               ; Decrement the count of remaining letters to check.
002402r 3  A5 rr                        lda tmp3
002404r 3  D0 02                        bne @3
002406r 3  C6 rr                        dec tmp3+1
002408r 3               @3:
002408r 3  C6 rr                        dec tmp3
00240Ar 3               
00240Ar 3                               ; Check if we've reached zero.
00240Ar 3  A5 rr                        lda tmp3
00240Cr 3  05 rr                        ora tmp3+1
00240Er 3  D0 DB                        bne @comparison_loop ; Check the next letter
002410r 3               
002410r 3                               ; We've run out of letters and they all match!
002410r 3                               ; Return (addr1+offset) (u1-offset) true
002410r 3                               ; Add offset to addr1.
002410r 3  18                           clc
002411r 3  B5 00                        lda 0,x
002413r 3  75 08                        adc 8,x
002415r 3  95 08                        sta 8,x
002417r 3  B5 01                        lda 1,x
002419r 3  75 09                        adc 9,x
00241Br 3  95 09                        sta 9,x
00241Dr 3               
00241Dr 3                               ; Subtract offset from u1.
00241Dr 3  38                           sec
00241Er 3  B5 06                        lda 6,x
002420r 3  F5 00                        sbc 0,x
002422r 3  95 06                        sta 6,x
002424r 3  B5 07                        lda 7,x
002426r 3  F5 01                        sbc 1,x
002428r 3  95 07                        sta 7,x
00242Ar 3               
00242Ar 3                               ; Replace addr2, u2, and offset with a true flag.
00242Ar 3  E8                           inx             ; drop offset
00242Br 3  E8                           inx
00242Cr 3  E8                           inx             ; drop u2
00242Dr 3  E8                           inx
00242Er 3  A9 FF                        lda #$FF
002430r 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
002432r 3  95 01                        sta 1,x
002434r 3               
002434r 3  60           z_search:       rts
002435r 3               
002435r 3               
002435r 3               
002435r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
002435r 3               ; ## ";"  auto  ANS core
002435r 3                       ; """https://forth-standard.org/standard/core/Semi
002435r 3                       ; End the compilation of a new word into the Dictionary.
002435r 3                       ;
002435r 3                       ; When we
002435r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
002435r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
002435r 3                       ; A Forth definition would be (see "Starting Forth"):
002435r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
002435r 3                       ; practice of Gforth, we warn here if a word has been redefined.
002435r 3                       ; """
002435r 3               
002435r 3               xt_semicolon:
002435r 3                               ; Check if this is a : word or a :NONAME word.
002435r 3  24 rr                        bit status
002437r 3  70 11                        bvs @colonword
002439r 3               
002439r 3                               ; This is a :NONAME word - just put an RTS on the end and
002439r 3                               ; the address (held in workword) on the stack.
002439r 3  A9 60                        lda #$60                ; opcode for RTS
00243Br 3  20 rr rr                     jsr cmpl_a
00243Er 3               
00243Er 3  CA                           dex
00243Fr 3  CA                           dex
002440r 3  A5 rr                        lda workword
002442r 3  95 00                        sta 0,x
002444r 3  A5 rr                        lda workword+1
002446r 3  95 01                        sta 1,x
002448r 3  80 45                        bra @semicolon_done
00244Ar 3               
00244Ar 3               @colonword:
00244Ar 3                               ; CP is the byte that will be the address we use in the
00244Ar 3                               ; header as the end-of-compile address (z_word). This is
00244Ar 3                               ; six bytes down from the header
00244Ar 3  A0 06                        ldy #6
00244Cr 3  A5 rr                        lda cp
00244Er 3  91 rr                        sta (workword),y
002450r 3  C8                           iny
002451r 3  A5 rr                        lda cp+1
002453r 3  91 rr                        sta (workword),y
002455r 3               
002455r 3                               ; Allocate one further byte and save the RTS instruction
002455r 3                               ; there
002455r 3  A9 60                        lda #$60                ; opcode for RTS
002457r 3  20 rr rr                     jsr cmpl_a
00245Ar 3               
00245Ar 3                               ; Before we formally add the word to the Dictionary, we
00245Ar 3                               ; check to see if it is already present, and if yes, we
00245Ar 3                               ; warn the user.
00245Ar 3               
00245Ar 3                               ; See if word already in Dictionary.
00245Ar 3                               ; (STATUS bit 7 will be high as CREATE already
00245Ar 3                               ;  checked for us.)
00245Ar 3  24 rr                        bit status
00245Cr 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
00245Er 3               
00245Er 3                               ; We start by putting the string of the
00245Er 3                               ; word we're defining on the stack
00245Er 3  CA                           dex
00245Fr 3  CA                           dex
002460r 3  CA                           dex
002461r 3  CA                           dex
002462r 3               
002462r 3                               ; WORKWORD points to the beginning of the head of our new
002462r 3                               ; word, where the first byte is the length of the string
002462r 3                               ; We can't use LATESTNT because we haven't added the new
002462r 3                               ; word to the Dictionary yet
002462r 3  B2 rr                        lda (workword)
002464r 3  95 00                        sta 0,x
002466r 3  74 01                        stz 1,x
002468r 3               
002468r 3                               ; Eight bytes below WORKWORD is the actual beginning of
002468r 3                               ; the string
002468r 3  A5 rr                        lda workword
00246Ar 3  18                           clc
00246Br 3  69 08                        adc #8
00246Dr 3  95 02                        sta 2,x
00246Fr 3  A5 rr                        lda workword+1
002471r 3  69 00                        adc #0                  ; only want carry
002473r 3  95 03                        sta 3,x
002475r 3               
002475r 3                               ; This word is already in the Dictionary, so we print a
002475r 3                               ; warning to the user.
002475r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
002477r 3  20 rr rr                     jsr print_string_no_lf
00247Ar 3               
00247Ar 3                               ; Now we print the offending word.
00247Ar 3  20 rr rr                     jsr xt_type
00247Dr 3  20 rr rr                     jsr xt_space
002480r 3               
002480r 3                               ; Clear bit 7 of status (so future words will print message
002480r 3                               ; by defaut)
002480r 3  A9 80                        lda #%10000000
002482r 3  14 rr                        trb status
002484r 3               
002484r 3               @new_word:
002484r 3                               ; Let's get this over with. Save beginning of our word
002484r 3                               ; as new last word in the Dictionary
002484r 3  A5 rr                        lda workword
002486r 3  85 rr                        sta dp
002488r 3  A5 rr                        lda workword+1
00248Ar 3  85 rr                        sta dp+1
00248Cr 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
00248Fr 3                                                       ; CURRENT wordlist.
00248Fr 3               @semicolon_done:
00248Fr 3                               ; Word definition complete. Return compile flag to zero
00248Fr 3                               ; to return to interpret mode
00248Fr 3  64 rr                        stz state
002491r 3  64 rr                        stz state+1
002493r 3               
002493r 3  60           z_semicolon:    rts
002494r 3               
002494r 3               
002494r 3               
002494r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
002494r 3               ; ## "sign"  auto  ANS core
002494r 3                       ; """https://forth-standard.org/standard/core/SIGN
002494r 3                       ;
002494r 3                       ; Code based on
002494r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
002494r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
002494r 3                       ; """
002494r 3               
002494r 3               xt_sign:
002494r 3  20 rr rr                     jsr underflow_1
002497r 3               
002497r 3  B5 01                        lda 1,x         ; check MSB of TOS
002499r 3  30 04                        bmi @minus
00249Br 3               
00249Br 3  E8                           inx
00249Cr 3  E8                           inx
00249Dr 3  80 09                        bra @done
00249Fr 3               @minus:
00249Fr 3  A9 2D                        lda #$2D        ; ASCII for "-"
0024A1r 3  95 00                        sta 0,x         ; overwrite TOS
0024A3r 3  74 01                        stz 1,x         ; paranoid
0024A5r 3               
0024A5r 3  20 rr rr                     jsr xt_hold
0024A8r 3               @done:
0024A8r 3  60           z_sign:         rts
0024A9r 3               
0024A9r 3               
0024A9r 3               
0024A9r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
0024A9r 3               ; ## "/"  auto  ANS core
0024A9r 3                       ; """https://forth-standard.org/standard/core/Div
0024A9r 3                       ;
0024A9r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
0024A9r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
0024A9r 3                       ; This code is currently unoptimized. This code without the SLASH
0024A9r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
0024A9r 3                       ; """
0024A9r 3               
0024A9r 3               xt_slash:
0024A9r 3                               ; With all the multiplication going on, it would be hard to
0024A9r 3                               ; make sure that one of our temporary variables is not
0024A9r 3                               ; overwritten. We make sure that doesn't happen by taking the
0024A9r 3                               ; hit of pushing the flag to the 65c02's stack
0024A9r 3  A9 00                        lda #0
0024ABr 3  48                           pha
0024ACr 3  80 03                        bra _common
0024AEr 3               
0024AEr 3               xt_slash_mod:
0024AEr 3                               ; Note that /MOD accesses this code
0024AEr 3  A9 FF                        lda #$FF
0024B0r 3  48                           pha             ; falls through to _common
0024B1r 3               
0024B1r 3               _common:
0024B1r 3  20 rr rr                     jsr xt_to_r             ; >R
0024B4r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
0024B7r 3  20 rr rr                     jsr xt_r_from           ; R>
0024BAr 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
0024BDr 3               
0024BDr 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
0024BDr 3                               ; $FF is SLASH MOD
0024BDr 3  68                           pla
0024BEr 3  D0 05                        bne @done
0024C0r 3               
0024C0r 3                               ; The following code is for SLASH only
0024C0r 3  20 rr rr                     jsr xt_swap
0024C3r 3  E8                           inx             ; DROP
0024C4r 3  E8                           inx
0024C5r 3               @done:
0024C5r 3               z_slash_mod:
0024C5r 3  60           z_slash:        rts
0024C6r 3               
0024C6r 3               
0024C6r 3               
0024C6r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
0024C6r 3               ; ## "/mod"  auto  ANS core
0024C6r 3                       ; """https://forth-standard.org/standard/core/DivMOD
0024C6r 3                       ;
0024C6r 3                       ; This is a dummy entry, the actual code is shared with SLASH
0024C6r 3                       ; """
0024C6r 3               
0024C6r 3               
0024C6r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
0024C6r 3               ; ## "/string"  auto  ANS string
0024C6r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
0024C6r 3                       ;
0024C6r 3                       ; Forth code is
0024C6r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
0024C6r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
0024C6r 3                       ; TOS from NOS, and then drop TOS
0024C6r 3                       ; """
0024C6r 3               
0024C6r 3               xt_slash_string:
0024C6r 3  20 rr rr                     jsr underflow_3
0024C9r 3               
0024C9r 3  18                           clc             ; 3OS+TOS
0024CAr 3  B5 00                        lda 0,x
0024CCr 3  75 04                        adc 4,x
0024CEr 3  95 04                        sta 4,x
0024D0r 3               
0024D0r 3  B5 01                        lda 1,x
0024D2r 3  75 05                        adc 5,x
0024D4r 3  95 05                        sta 5,x
0024D6r 3               
0024D6r 3  38                           sec             ; NOS-TOS
0024D7r 3  B5 02                        lda 2,x
0024D9r 3  F5 00                        sbc 0,x
0024DBr 3  95 02                        sta 2,x
0024DDr 3               
0024DDr 3  B5 03                        lda 3,x
0024DFr 3  F5 01                        sbc 1,x
0024E1r 3  95 03                        sta 3,x
0024E3r 3               
0024E3r 3  E8                           inx
0024E4r 3  E8                           inx
0024E5r 3               
0024E5r 3  60           z_slash_string: rts
0024E6r 3               
0024E6r 3               
0024E6r 3               
0024E6r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
0024E6r 3               ; ## "sliteral" auto  ANS string
0024E6r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
0024E6r 3                       ; Add the runtime for an existing string.
0024E6r 3                       ; """
0024E6r 3               
0024E6r 3               xt_sliteral:
0024E6r 3  20 rr rr                     jsr underflow_2
0024E9r 3               
0024E9r 3                               ; We can't assume that ( addr u ) of the current string is in
0024E9r 3                               ; a stable area (eg. already in the dictionary.) Copy the
0024E9r 3                               ; string data into the dictionary using move.
0024E9r 3               
0024E9r 3                               ; Put a jmp over the string data with address to be filled
0024E9r 3                               ; in later.
0024E9r 3  A9 4C                        lda #$4C
0024EBr 3  20 rr rr                     jsr cmpl_a
0024EEr 3               
0024EEr 3                               ; Address to be filled in later.
0024EEr 3  20 rr rr                     jsr cmpl_a
0024F1r 3  20 rr rr                     jsr cmpl_a
0024F4r 3               
0024F4r 3                               ; Turn the data stack from ( addr u ) into
0024F4r 3                               ; ( here u addr here u ) so move can be called with
0024F4r 3                               ; the remaining items on the stack ready for processing.
0024F4r 3                               ; Reserve three extra words on the stack.
0024F4r 3  8A                           txa
0024F5r 3  38                           sec
0024F6r 3  E9 06                        sbc #6
0024F8r 3  AA                           tax
0024F9r 3               
0024F9r 3                               ; Move addr down from TOS-4 to TOS-2
0024F9r 3  B5 08                        lda 8,x
0024FBr 3  95 04                        sta 4,x
0024FDr 3  B5 09                        lda 9,x
0024FFr 3  95 05                        sta 5,x
002501r 3               
002501r 3                               ; Copy u from TOS-3 to TOS
002501r 3  B5 06                        lda 6,x
002503r 3  95 00                        sta 0,x
002505r 3  B5 07                        lda 7,x
002507r 3  95 01                        sta 1,x
002509r 3               
002509r 3                               ; Put HERE into TOS-1 and TOS-4
002509r 3  A5 rr                        lda cp
00250Br 3  95 08                        sta 8,x
00250Dr 3  95 02                        sta 2,x
00250Fr 3  A5 rr                        lda cp+1
002511r 3  95 09                        sta 9,x
002513r 3  95 03                        sta 3,x
002515r 3               
002515r 3                               ; Copy the string into the dictionary.
002515r 3  20 rr rr                     jsr xt_move
002518r 3               
002518r 3                               ; Update cp.
002518r 3  18                           clc
002519r 3  A5 rr                        lda cp
00251Br 3  75 00                        adc 0,x
00251Dr 3  85 rr                        sta cp
00251Fr 3  A5 rr                        lda cp+1
002521r 3  75 01                        adc 1,x
002523r 3  85 rr                        sta cp+1
002525r 3               
002525r 3                               ; Update the address of the jump-over jmp instruction.
002525r 3                               ; First determine location of jmp instructions address.
002525r 3                               ; It should be 2 bytes before the start of the string.
002525r 3               
002525r 3                               ; Compute it into tmp1, which is no longer being used.
002525r 3  B5 02                        lda 2,x
002527r 3  38                           sec
002528r 3  E9 02                        sbc #2
00252Ar 3  85 rr                        sta tmp1
00252Cr 3  B5 03                        lda 3,x
00252Er 3  E9 00                        sbc #0          ; Propagate borrow
002530r 3  85 rr                        sta tmp1+1
002532r 3               
002532r 3                               ; Update the address of the jump to HERE.
002532r 3  A5 rr                        lda cp
002534r 3  92 rr                        sta (tmp1)
002536r 3  A0 01                        ldy #1
002538r 3  A5 rr                        lda cp+1
00253Ar 3  91 rr                        sta (tmp1),y
00253Cr 3               
00253Cr 3                               ; Stack is now ( addr2 u ) where addr2 is the new
00253Cr 3                               ; location in the dictionary.
00253Cr 3               
00253Cr 3               sliteral_const_str:
00253Cr 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
00253Cr 3                               ; pushes the new ( addr u ) pair to the Data Stack.
00253Cr 3                               ; When we're done, the code will look like this:
00253Cr 3               
00253Cr 3                               ; xt -->    jmp a
00253Cr 3                               ;           <string data bytes>
00253Cr 3                               ;  a -->    jsr sliteral_runtime
00253Cr 3                               ;           <string address>
00253Cr 3                               ;           <string length>
00253Cr 3                               ; rts -->
00253Cr 3               
00253Cr 3                               ; This means we'll have to adjust the return address for two
00253Cr 3                               ; cells, not just one
00253Cr 3  A0 rr                        ldy #>sliteral_runtime
00253Er 3  A9 rr                        lda #<sliteral_runtime
002540r 3  20 rr rr                     jsr cmpl_subroutine
002543r 3               
002543r 3                               ; We want to have the address end up as NOS and the length
002543r 3                               ; as TOS, so we store the address first
002543r 3  B4 03                        ldy 3,x                ; address MSB
002545r 3  B5 02                        lda 2,x                ; address LSB
002547r 3  20 rr rr                     jsr cmpl_word
00254Ar 3               
00254Ar 3  B4 01                        ldy 1,x                ; length MSB
00254Cr 3  B5 00                        lda 0,x                ; length LSB
00254Er 3  20 rr rr                     jsr cmpl_word
002551r 3               
002551r 3                               ; clean up and leave
002551r 3  E8                           inx
002552r 3  E8                           inx
002553r 3  E8                           inx
002554r 3  E8                           inx
002555r 3               
002555r 3  60           z_sliteral:     rts
002556r 3               
002556r 3               
002556r 3               sliteral_runtime:
002556r 3               
002556r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
002556r 3                       ; the Data Stack. We arrive here with the return address as the
002556r 3                       ; top of Return Stack, which points to the address of the string
002556r 3                       ; """
002556r 3  CA                           dex
002557r 3  CA                           dex
002558r 3  CA                           dex
002559r 3  CA                           dex
00255Ar 3               
00255Ar 3                               ; Get the address of the string address off the stack and
00255Ar 3                               ; increase by one because of the RTS mechanics
00255Ar 3  68                           pla
00255Br 3  85 rr                        sta tmp1        ; LSB of address
00255Dr 3  68                           pla
00255Er 3  85 rr                        sta tmp1+1      ; MSB of address
002560r 3               
002560r 3                               ; Walk through both and save them
002560r 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
002562r 3  B1 rr                        lda (tmp1),y
002564r 3  95 02                        sta 2,x         ; LSB of address
002566r 3  C8                           iny
002567r 3               
002567r 3  B1 rr                        lda (tmp1),y
002569r 3  95 03                        sta 3,x         ; MSB of address
00256Br 3  C8                           iny
00256Cr 3               
00256Cr 3  B1 rr                        lda (tmp1),y
00256Er 3  95 00                        sta 0,x         ; LSB of length
002570r 3  C8                           iny
002571r 3               
002571r 3  B1 rr                        lda (tmp1),y
002573r 3  95 01                        sta 1,x         ; MSB of length
002575r 3               
002575r 3                               ; restore return address
002575r 3  18                           clc
002576r 3  A5 rr                        lda tmp1
002578r 3  69 04                        adc #4
00257Ar 3  A8                           tay             ; LSB
00257Br 3  A5 rr                        lda tmp1+1
00257Dr 3  69 00                        adc #0          ; we only need carry
00257Fr 3  48                           pha             ; MSB
002580r 3  5A                           phy
002581r 3               
002581r 3  60                           rts
002582r 3               
002582r 3               
002582r 3               
002582r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
002582r 3               ; ## "sm/rem"  auto  ANS core
002582r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
002582r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
002582r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
002582r 3                       ;
002582r 3                       ; Forth:
002582r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
002582r 3                       ; R> ?NEGATE SWAP
002582r 3                       ; """
002582r 3               
002582r 3               xt_sm_slash_rem:
002582r 3  20 rr rr                     jsr underflow_3 ; contains double number
002585r 3               
002585r 3                               ; push MSB of high cell of d to Data Stack so we can check
002585r 3                               ; its sign later
002585r 3  B5 03                        lda 3,x
002587r 3  48                           pha
002588r 3               
002588r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
002588r 3                               ; its sign later as well
002588r 3  B5 01                        lda 1,x
00258Ar 3  55 03                        eor 3,x
00258Cr 3  48                           pha
00258Dr 3               
00258Dr 3                               ; Prepare division by getting absolute of n1 and d
00258Dr 3  20 rr rr                     jsr xt_abs
002590r 3  E8                           inx             ; pretend we pushed n1 to R
002591r 3  E8                           inx
002592r 3               
002592r 3  20 rr rr                     jsr xt_dabs
002595r 3  CA                           dex
002596r 3  CA                           dex
002597r 3               
002597r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
00259Ar 3               
00259Ar 3                               ; if the XOR compiled above is negative, negate the
00259Ar 3                               ; quotient (n3)
00259Ar 3  68                           pla
00259Br 3  10 03                        bpl @1
00259Dr 3  20 rr rr                     jsr xt_negate
0025A0r 3               @1:
0025A0r 3                               ; if d was negative, negate the remainder (n2)
0025A0r 3  68                           pla
0025A1r 3  10 07                        bpl @done
0025A3r 3               
0025A3r 3  E8                           inx             ; pretend we pushed quotient to R
0025A4r 3  E8                           inx
0025A5r 3  20 rr rr                     jsr xt_negate
0025A8r 3  CA                           dex
0025A9r 3  CA                           dex
0025AAr 3               
0025AAr 3               @done:
0025AAr 3  60           z_sm_slash_rem: rts
0025ABr 3               
0025ABr 3               
0025ABr 3               
0025ABr 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
0025ABr 3               ; ## "source"  auto  ANS core
0025ABr 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
0025ABr 3               xt_source:
0025ABr 3                               ; add address
0025ABr 3  CA                           dex
0025ACr 3  CA                           dex
0025ADr 3  A5 rr                        lda cib
0025AFr 3  95 00                        sta 0,x
0025B1r 3  A5 rr                        lda cib+1
0025B3r 3  95 01                        sta 1,x
0025B5r 3               
0025B5r 3                               ; add size
0025B5r 3  CA                           dex
0025B6r 3  CA                           dex
0025B7r 3  A5 rr                        lda ciblen
0025B9r 3  95 00                        sta 0,x
0025BBr 3  A5 rr                        lda ciblen+1
0025BDr 3  95 01                        sta 1,x
0025BFr 3               
0025BFr 3  60           z_source:       rts
0025C0r 3               
0025C0r 3               
0025C0r 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
0025C0r 3               ; ## "source-id"  tested  ANS core ext
0025C0r 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
0025C0r 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
0025C0r 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
0025C0r 3                       ; string, and a text file gives the fileid.
0025C0r 3                       ; """
0025C0r 3               xt_source_id:
0025C0r 3  CA                           dex
0025C1r 3  CA                           dex
0025C2r 3               
0025C2r 3  A5 rr                        lda insrc
0025C4r 3  95 00                        sta 0,x
0025C6r 3  A5 rr                        lda insrc+1
0025C8r 3  95 01                        sta 1,x
0025CAr 3               
0025CAr 3  60           z_source_id:    rts
0025CBr 3               
0025CBr 3               
0025CBr 3               ; ## SPACE ( -- ) "Print a single space"
0025CBr 3               ; ## "space"  auto  ANS core
0025CBr 3                       ; """https://forth-standard.org/standard/core/SPACE"""
0025CBr 3               xt_space:
0025CBr 3  A9 20                        lda #AscSP
0025CDr 3  20 rr rr                     jsr emit_a
0025D0r 3               
0025D0r 3  60           z_space:        rts
0025D1r 3               
0025D1r 3               
0025D1r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
0025D1r 3               ; ## "spaces"  auto  ANS core
0025D1r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
0025D1r 3               
0025D1r 3               xt_spaces:
0025D1r 3  20 rr rr                     jsr underflow_1
0025D4r 3               
0025D4r 3                               ; catch any zero in TOS fast
0025D4r 3  B5 00                        lda 0,x
0025D6r 3  15 01                        ora 1,x
0025D8r 3  F0 2A                        beq @done
0025DAr 3               
0025DAr 3                               ; Usually we're only going to print far less than 256 spaces,
0025DAr 3                               ; so we create a quick loop for that. Short loop could be realized
0025DAr 3                               ; as a separate subroutine, but unless we're really pressed for
0025DAr 3                               ; memory at some point, this is faster
0025DAr 3  B4 01                        ldy 1,x
0025DCr 3  D0 0C                        bne @lots_of_spaces
0025DEr 3               
0025DEr 3  B4 00                        ldy 0,x
0025E0r 3               @quick_loop:
0025E0r 3                               ; we reach here knowing that there must be a number that is not
0025E0r 3                               ; zero in the TOS
0025E0r 3  A9 20                        lda #AscSP
0025E2r 3  20 rr rr                     jsr emit_a
0025E5r 3  88                           dey
0025E6r 3  F0 1C                        beq @done
0025E8r 3  80 F6                        bra @quick_loop
0025EAr 3               
0025EAr 3               @lots_of_spaces:
0025EAr 3                               ; We go through the first loop once to get rid of the lower
0025EAr 3                               ; counter byte. This could be zero
0025EAr 3  B4 00                        ldy 0,x
0025ECr 3               
0025ECr 3               @first_slow_loop:
0025ECr 3  F0 08                        beq @slow_outer_loop
0025EEr 3  A9 20                        lda #AscSP
0025F0r 3  20 rr rr                     jsr emit_a
0025F3r 3  88                           dey
0025F4r 3  80 F6                        bra @first_slow_loop
0025F6r 3               
0025F6r 3               @slow_outer_loop:
0025F6r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
0025F6r 3  A0 00                        ldy #00
0025F8r 3               
0025F8r 3               @slow_inner_loop:
0025F8r 3  A9 20                        lda #AscSP
0025FAr 3  20 rr rr                     jsr emit_a
0025FDr 3  88                           dey
0025FEr 3  D0 F8                        bne @slow_inner_loop
002600r 3               
002600r 3  D6 01                        dec 1,x
002602r 3  D0 F2                        bne @slow_outer_loop
002604r 3               
002604r 3               @done:
002604r 3  E8                           inx             ; drop
002605r 3  E8                           inx
002606r 3               
002606r 3  60           z_spaces:       rts
002607r 3               
002607r 3               
002607r 3               
002607r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
002607r 3               ; ## "*"  auto  ANS core
002607r 3                       ; """https://forth-standard.org/standard/core/Times
002607r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
002607r 3                       ;
002607r 3                       ; This is nothing  more than UM* DROP
002607r 3                       ; """
002607r 3               
002607r 3               xt_star:
002607r 3  20 rr rr                     jsr underflow_2
00260Ar 3               
00260Ar 3  20 rr rr                     jsr xt_um_star
00260Dr 3  E8                           inx
00260Er 3  E8                           inx
00260Fr 3               
00260Fr 3  60           z_star:         rts
002610r 3               
002610r 3               
002610r 3               
002610r 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
002610r 3               ; ## "*/"  auto  ANS core
002610r 3                       ; """https://forth-standard.org/standard/core/TimesDiv
002610r 3                       ; Multiply n1 by n2 and divide by n3, returning the result
002610r 3                       ; without a remainder. This is */MOD without the mod.
002610r 3                       ;
002610r 3                       ; This word
002610r 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
002610r 3                       ; pretty much what we do here
002610r 3                       ; """
002610r 3               xt_star_slash:
002610r 3                               ; We let */MOD check for underflow
002610r 3  20 rr rr                     jsr xt_star_slash_mod
002613r 3  20 rr rr                     jsr xt_swap
002616r 3  E8                           inx
002617r 3  E8                           inx
002618r 3               z_star_slash:
002618r 3  60                           rts
002619r 3               
002619r 3               
002619r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
002619r 3               ; ## "*/mod"  auto  ANS core
002619r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
002619r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
002619r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
002619r 3                       ; single-cell quotient n5.
002619r 3                       ;
002619r 3                       ; In Forth, this is
002619r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
002619r 3                       ; """
002619r 3               xt_star_slash_mod:
002619r 3  20 rr rr                     jsr underflow_3
00261Cr 3               
00261Cr 3  20 rr rr                     jsr xt_to_r
00261Fr 3  20 rr rr                     jsr xt_m_star
002622r 3  20 rr rr                     jsr xt_r_from
002625r 3  20 rr rr                     jsr xt_sm_slash_rem
002628r 3               
002628r 3               z_star_slash_mod:
002628r 3  60                           rts
002629r 3               
002629r 3               
002629r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
002629r 3               ; ## "state"  auto  ANS core
002629r 3                       ; """https://forth-standard.org/standard/core/STATE
002629r 3                       ; STATE is true when in compilation state, false otherwise. Note
002629r 3                       ; we do not return the state itself, but only the address where
002629r 3                       ; it lives. The state should not be changed directly by the user; see
002629r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
002629r 3                       ; """
002629r 3               xt_state:
002629r 3  CA                           dex
00262Ar 3  CA                           dex
00262Br 3  A9 rr                        lda #<state
00262Dr 3  95 00                        sta 0,x
00262Fr 3  A9 rr                        lda #>state
002631r 3  95 01                        sta 1,x
002633r 3               
002633r 3  60           z_state:        rts
002634r 3               
002634r 3               
002634r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
002634r 3               ; ## "!"  auto  ANS core
002634r 3                       ; """https://forth-standard.org/standard/core/Store"""
002634r 3               xt_store:
002634r 3  20 rr rr                     jsr underflow_2
002637r 3               
002637r 3  B5 02                        lda 2,x         ; LSB
002639r 3  81 00                        sta (0,x)
00263Br 3               
00263Br 3  F6 00                        inc 0,x
00263Dr 3  D0 02                        bne @1
00263Fr 3  F6 01                        inc 1,x
002641r 3               @1:
002641r 3  B5 03                        lda 3,x         ; MSB
002643r 3  81 00                        sta (0,x)
002645r 3               
002645r 3  E8                           inx             ; 2DROP
002646r 3  E8                           inx
002647r 3  E8                           inx
002648r 3  E8                           inx
002649r 3               
002649r 3  60           z_store:        rts
00264Ar 3               
00264Ar 3               
00264Ar 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
00264Ar 3               ; ## "strip-underflow"  tested  Tali Forth
00264Ar 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
00264Ar 3                       ; checking should be removed during the compilation of new words.
00264Ar 3                       ; Default is false.
00264Ar 3                       ; """
00264Ar 3               xt_strip_underflow:
00264Ar 3  CA                           dex
00264Br 3  CA                           dex
00264Cr 3               
00264Cr 3  A9 rr                        lda #<uf_strip
00264Er 3  95 00                        sta 0,x
002650r 3  A9 rr                        lda #>uf_strip
002652r 3  95 01                        sta 1,x
002654r 3               
002654r 3               z_strip_underflow:
002654r 3  60                           rts
002655r 3               
002655r 3               
002655r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
002655r 3               ; ## "swap"  auto  ANS core
002655r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
002655r 3               xt_swap:
002655r 3  20 rr rr                     jsr underflow_2
002658r 3               
002658r 3  B5 00                        lda 0,x         ; LSB
00265Ar 3  B4 02                        ldy 2,x
00265Cr 3  95 02                        sta 2,x
00265Er 3  94 00                        sty 0,x
002660r 3               
002660r 3  B5 01                        lda 1,x         ; MSB
002662r 3  B4 03                        ldy 3,x
002664r 3  95 03                        sta 3,x
002666r 3  94 01                        sty 1,x
002668r 3               
002668r 3  60           z_swap:         rts
002669r 3               
002669r 3               
002669r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002669r 3               ; ## "then"  auto  ANS core
002669r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002669r 3               xt_then:
002669r 3                               ; Get the address to jump to.
002669r 3  20 rr rr                     jsr xt_here
00266Cr 3               
00266Cr 3                               ; Stuff HERE in for the branch address back
00266Cr 3                               ; at the IF or ELSE (origination address is on stack).
00266Cr 3  20 rr rr                     jsr xt_swap
00266Fr 3  20 rr rr                     jsr xt_store
002672r 3               
002672r 3  60           z_then:         rts
002673r 3               
002673r 3               
002673r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
002673r 3               ; ## "thru"  tested  ANS block ext
002673r 3                       ; """https://forth-standard.org/standard/block/THRU"""
002673r 3               
002673r 3               xt_thru:
002673r 3  20 rr rr                     jsr underflow_2
002676r 3               
002676r 3                               ; We need to loop here, and can't use the data stack
002676r 3                               ; because the LOADed screens might use it.  We'll
002676r 3                               ; need to use the same trick that DO loops use, holding
002676r 3                               ; the limit and current index on the return stack.
002676r 3               
002676r 3                               ; Put the ending screen number on the return stack
002676r 3  B5 01                        lda 1,x
002678r 3  48                           pha
002679r 3  B5 00                        lda 0,x
00267Br 3  48                           pha
00267Cr 3  E8                           inx
00267Dr 3  E8                           inx
00267Er 3               @thru_loop:
00267Er 3                               ; Put the starting screen number on the stack,
00267Er 3                               ; but keep a copy
00267Er 3  B5 01                        lda 1,x
002680r 3  48                           pha
002681r 3  B5 00                        lda 0,x
002683r 3  48                           pha
002684r 3               
002684r 3                               ; Load this screen.
002684r 3  20 rr rr                     jsr xt_load
002687r 3               
002687r 3                               ; Get the number and limit back off the stack.  Rather than
002687r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002687r 3               
002687r 3                               ; Get the screen we just loaded.
002687r 3  68                           pla
002688r 3  85 rr                        sta tmp1
00268Ar 3  68                           pla
00268Br 3  85 rr                        sta tmp1+1
00268Dr 3               
00268Dr 3                               ; Get the ending screen.
00268Dr 3  68                           pla
00268Er 3  85 rr                        sta tmp2
002690r 3  68                           pla
002691r 3  85 rr                        sta tmp2+1
002693r 3               
002693r 3                               ; See if we just loaded the last screen.
002693r 3                               ; A already has the MSB of the last screen in it.
002693r 3  C5 rr                        cmp tmp1+1
002695r 3  D0 08                        bne @next_screen
002697r 3  A5 rr                        lda tmp2        ; Compare the LSB
002699r 3  C5 rr                        cmp tmp1
00269Br 3  D0 02                        bne @next_screen
00269Dr 3  80 18                        bra @done       ; We just did the last screen.
00269Fr 3               
00269Fr 3               @next_screen:
00269Fr 3                               ; Put the ending screen back on the data stack.
00269Fr 3  A5 rr                        lda tmp2+1
0026A1r 3  48                           pha
0026A2r 3  A5 rr                        lda tmp2
0026A4r 3  48                           pha
0026A5r 3               
0026A5r 3                               ; Increment the current screen.
0026A5r 3  E6 rr                        inc tmp1
0026A7r 3  D0 02                        bne @1
0026A9r 3  E6 rr                        inc tmp1+1
0026ABr 3               @1:
0026ABr 3                               ; Put the current screen on the stack to prepare for
0026ABr 3                               ; the next loop.
0026ABr 3  CA                           dex
0026ACr 3  CA                           dex
0026ADr 3  A5 rr                        lda tmp1
0026AFr 3  95 00                        sta 0,x
0026B1r 3  A5 rr                        lda tmp1+1
0026B3r 3  95 01                        sta 1,x
0026B5r 3  80 C7                        bra @thru_loop
0026B7r 3               @done:
0026B7r 3  60           z_thru:         rts
0026B8r 3               
0026B8r 3               
0026B8r 3               
0026B8r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
0026B8r 3               ; ## "'"  auto  ANS core
0026B8r 3                       ; """https://forth-standard.org/standard/core/Tick"""
0026B8r 3               
0026B8r 3               xt_tick:
0026B8r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
0026BBr 3               
0026BBr 3                               ; if we got a zero, there was a problem getting the
0026BBr 3                               ; name of the word
0026BBr 3  B5 00                        lda 0,x
0026BDr 3  15 01                        ora 1,x
0026BFr 3  D0 05                        bne @1
0026C1r 3               
0026C1r 3  A9 05                        lda #err_noname
0026C3r 3  4C rr rr                     jmp error
0026C6r 3               @1:
0026C6r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
0026C9r 3               
0026C9r 3                               ; If we didn't find the word in the Dictionary, abort
0026C9r 3  B5 00                        lda 0,x
0026CBr 3  15 01                        ora 1,x
0026CDr 3  D0 05                        bne @2
0026CFr 3               
0026CFr 3  A9 08                        lda #err_syntax
0026D1r 3  4C rr rr                     jmp error
0026D4r 3               @2:
0026D4r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
0026D7r 3               
0026D7r 3  60           z_tick:         rts
0026D8r 3               
0026D8r 3               
0026D8r 3               
0026D8r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
0026D8r 3               ; ## "to"  auto  ANS core ext
0026D8r 3                       ; """https://forth-standard.org/standard/core/TO
0026D8r 3                       ; Gives a new value to a, uh, VALUE.
0026D8r 3                       ;
0026D8r 3                       ; One possible Forth
0026D8r 3                       ; implementation is  ' >BODY !  but given the problems we have
0026D8r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
0026D8r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
0026D8r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
0026D8r 3                       ;
0026D8r 3                       ; Note that the standard has different behaviors for TO depending
0026D8r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
0026D8r 3                       ; This makes TO state-dependent (which is bad) and also rather
0026D8r 3                       ; complex (see the Gforth implementation for comparison). This
0026D8r 3                       ; word may not be natively compiled and must be immediate. Frankly,
0026D8r 3                       ; it would have made more sense to have two words for this.
0026D8r 3                       ; """
0026D8r 3               
0026D8r 3               xt_to:
0026D8r 3                               ; One way or the other, we need the xt of the word after this
0026D8r 3                               ; one. At this point, we don't know if we are interpreted or
0026D8r 3                               ; compile, so we don't know if there is a value n on the stack,
0026D8r 3                               ; so we can't do an underflow check yet
0026D8r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
0026DBr 3               
0026DBr 3                               ; The PFA (DFA in this case) is three bytes down,
0026DBr 3                               ; after the jump to DOCONST
0026DBr 3  B5 00                        lda 0,x                 ; LSB
0026DDr 3  18                           clc
0026DEr 3  69 03                        adc #3
0026E0r 3  85 rr                        sta tmp1
0026E2r 3  B5 01                        lda 1,x                 ; MSB
0026E4r 3  69 00                        adc #0                  ; we just want the carry
0026E6r 3  85 rr                        sta tmp1+1
0026E8r 3               
0026E8r 3  E8                           inx
0026E9r 3  E8                           inx                     ; ( [n] )
0026EAr 3               
0026EAr 3                               ; Now it gets ugly. See which state we are in
0026EAr 3  A5 rr                        lda state
0026ECr 3  05 rr                        ora state+1
0026EEr 3  F0 34                        beq @interpret
0026F0r 3               
0026F0r 3                               ; Well, we're compiling. We want to end up with simple
0026F0r 3                               ; code that just takes the number that is TOS and saves
0026F0r 3                               ; it in the address of the xt we were just given. So we
0026F0r 3                               ; want to compile this routine:
0026F0r 3                               ;
0026F0r 3                               ;       lda 0,x                 - B5 00
0026F0r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0026F0r 3                               ;       lda 1,x                 - B5 01
0026F0r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0026F0r 3                               ;       inx                     - E8
0026F0r 3                               ;       inx                     - E8
0026F0r 3                               ;
0026F0r 3                               ; which at least is nice and short. Other than that, we pretty
0026F0r 3                               ; much have to do this the hard and long way, because with the
0026F0r 3                               ; LSBs and MSBs, we can't really put the numbers in a data
0026F0r 3                               ; range and store them with a loop. Sigh.
0026F0r 3               
0026F0r 3  A0 00                        ldy #$00                ; Code for LDA 0,X
0026F2r 3  A9 B5                        lda #$B5
0026F4r 3  20 rr rr                     jsr cmpl_word
0026F7r 3               
0026F7r 3  A9 8D                        lda #$8D                ; Code for STA abs
0026F9r 3  20 rr rr                     jsr cmpl_a
0026FCr 3               
0026FCr 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0026FEr 3  A5 rr                        lda tmp1
002700r 3  20 rr rr                     jsr cmpl_word
002703r 3               
002703r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
002705r 3  A9 B5                        lda #$B5
002707r 3  20 rr rr                     jsr cmpl_word
00270Ar 3               
00270Ar 3  A9 8D                        lda #$8D                ; Code for STA abs
00270Cr 3  20 rr rr                     jsr cmpl_a
00270Fr 3               
00270Fr 3  E6 rr                        inc tmp1                ; Calculate MSB
002711r 3  D0 02                        bne @1
002713r 3  E6 rr                        inc tmp1+1
002715r 3               @1:
002715r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002717r 3  A5 rr                        lda tmp1
002719r 3  20 rr rr                     jsr cmpl_word
00271Cr 3               
00271Cr 3  A0 E8                        ldy #$E8                ; Code for INX
00271Er 3  98                           tya
00271Fr 3  20 rr rr                     jsr cmpl_word
002722r 3               
002722r 3  80 0F                        bra @done
002724r 3               
002724r 3               @interpret:
002724r 3                               ; We're interpreting, so we arrive here with n
002724r 3                               ; on the stack. This is an annoying place to put
002724r 3                               ; the underflow check because we can't
002724r 3                               ; automatically strip it out
002724r 3  20 rr rr                     jsr underflow_1
002727r 3               
002727r 3                               ; We skip over the jump to DOCONST and store the number
002727r 3                               ; in the Program Field Area (PDF, in this case more a
002727r 3                               ; Data Field Area
002727r 3  B5 00                        lda 0,x
002729r 3  92 rr                        sta (tmp1)              ; LSB
00272Br 3               
00272Br 3  A0 01                        ldy #1
00272Dr 3  B5 01                        lda 1,x                 ; MSB
00272Fr 3  91 rr                        sta (tmp1),y            ; fall through to common
002731r 3               
002731r 3  E8                           inx                     ; DROP
002732r 3  E8                           inx
002733r 3               @done:
002733r 3  60           z_to:           rts
002734r 3               
002734r 3               
002734r 3               
002734r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
002734r 3               ; ## ">body"  auto  ANS core
002734r 3                       ; """https://forth-standard.org/standard/core/toBODY
002734r 3                       ; Given a word's execution token (xt), return the address of the
002734r 3                       ; start of that word's parameter field (PFA). This is defined as the
002734r 3                       ; address that HERE would return right after CREATE.
002734r 3                       ;
002734r 3                       ; This is a
002734r 3                       ; difficult word for STC Forths, because most words don't actually
002734r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
002734r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
002734r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
002734r 3                       ; """
002734r 3               
002734r 3               xt_to_body:
002734r 3  20 rr rr                     jsr underflow_1
002737r 3               
002737r 3                               ; Ideally, xt already points to the CFA. We just need to check
002737r 3                               ; the HC flag for special cases
002737r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
00273Ar 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
00273Dr 3               
00273Dr 3                               ; The status byte is nt+1
00273Dr 3  F6 00                        inc 0,x
00273Fr 3  D0 02                        bne @1
002741r 3  F6 01                        inc 1,x
002743r 3               @1:
002743r 3  A1 00                        lda (0,x)               ; get status byte
002745r 3  29 20                        and #HC
002747r 3  F0 0D                        beq @no_cfa
002749r 3               
002749r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
002749r 3                               ; so we add three to xt, which is NOS
002749r 3  18                           clc
00274Ar 3  B5 02                        lda 2,x         ; LSB
00274Cr 3  69 03                        adc #3
00274Er 3  95 02                        sta 2,x
002750r 3  B5 03                        lda 3,x         ; MSB
002752r 3  69 00                        adc #0          ; we conly care about the carry
002754r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
002756r 3               @no_cfa:
002756r 3  E8                           inx             ; get rid of the nt
002757r 3  E8                           inx
002758r 3               @done:
002758r 3  60           z_to_body:      rts
002759r 3               
002759r 3               
002759r 3               
002759r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
002759r 3               ; ## ">in"  auto  ANS core
002759r 3               xt_to_in:
002759r 3  CA                           dex
00275Ar 3  CA                           dex
00275Br 3               
00275Br 3  A9 rr                        lda #<toin
00275Dr 3  95 00                        sta 0,x
00275Fr 3  A9 rr                        lda #>toin      ; paranoid, should be zero
002761r 3  95 01                        sta 1,x
002763r 3               
002763r 3  60           z_to_in:        rts
002764r 3               
002764r 3               
002764r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
002764r 3               ; ## ">number"  auto  ANS core
002764r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
002764r 3                       ; Convert a string to a double number. Logic here is based on the
002764r 3                       ; routine by Phil Burk of the same name in pForth, see
002764r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
002764r 3                       ; for the original Forth code. We arrive here from NUMBER which has
002764r 3                       ; made sure that we don't have to deal with a sign and we don't have
002764r 3                       ; to deal with a dot as a last character that signalizes double -
002764r 3                       ; this should be a pure number string.
002764r 3                       ;
002764r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
002764r 3                       ; cannot access any of those.
002764r 3                       ;
002764r 3                       ; For the math routine, we move the inputs to the scratchpad to
002764r 3                       ; avoid having to fool around with the Data Stack.
002764r 3                       ;
002764r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002764r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
002764r 3                       ;     |           |           |           |           |
002764r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
002764r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002764r 3                       ;
002764r 3                       ; The math routine works by converting one character to its
002764r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
002764r 3                       ; the moment. We then multiply the UD-HI value with the radix
002764r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
002764r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
002764r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
002764r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
002764r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
002764r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
002764r 3                       ; storing the result back in S and S+2, before we start another
002764r 3                       ; round with it as the new UD-LO and UD-HI.
002764r 3                       ; """
002764r 3               
002764r 3               
002764r 3               xt_to_number:
002764r 3  20 rr rr                     jsr underflow_4
002767r 3               
002767r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002767r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002767r 3                               ; the Data Stack, but will be ignored and later overwritten
002767r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002767r 3  B5 06                        lda 6,x         ; ud-lo LSB
002769r 3  85 rr                        sta scratch
00276Br 3  B5 07                        lda 7,x         ; ud-lo MSB
00276Dr 3  85 rr                        sta scratch+1
00276Fr 3               
00276Fr 3  B5 04                        lda 4,x         ; ud-hi LSB
002771r 3  85 rr                        sta scratch+2
002773r 3  B5 05                        lda 5,x         ; ud-hi MSB
002775r 3  85 rr                        sta scratch+3
002777r 3               
002777r 3                               ; Push down one on the Data Stack to use TOS for character
002777r 3                               ; conversion ( ud-lo ud-hi addr u x )
002777r 3  CA                           dex
002778r 3  CA                           dex
002779r 3               
002779r 3               @loop:
002779r 3                               ; Get one character based on address
002779r 3  A1 04                        lda (4,x)
00277Br 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
00277Dr 3  74 01                        stz 1,x                 ; paranoid
00277Fr 3               
00277Fr 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
002782r 3               
002782r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
002782r 3                               ; check the flag. If it is zero, we return what we have and
002782r 3                               ; let the caller (usually NUMBER) complain
002782r 3  B5 00                        lda 0,x
002784r 3  D0 04                        bne @digit_ok
002786r 3               
002786r 3  E8                           inx
002787r 3  E8                           inx
002788r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
00278Ar 3               
00278Ar 3               @digit_ok:
00278Ar 3                               ; Conversion was successful. We arrive here with
00278Ar 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
00278Ar 3                               ; math routine
00278Ar 3               
00278Ar 3                               ; Save n so we don't have to fool around with the
00278Ar 3                               ; Data Stack
00278Ar 3  B5 02                        lda 2,x
00278Cr 3  85 rr                        sta scratch+4
00278Er 3  B5 03                        lda 3,x
002790r 3  85 rr                        sta scratch+5
002792r 3               
002792r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
002792r 3                               ; original one on the Data Stack) with the radix from BASE.
002792r 3                               ; We can clobber TOS and NOS because we saved n
002792r 3  A5 rr                        lda scratch+2
002794r 3  95 02                        sta 2,x         ; NOS
002796r 3  A5 rr                        lda scratch+3
002798r 3  95 03                        sta 3,x
00279Ar 3               
00279Ar 3  A5 rr                        lda base
00279Cr 3  95 00                        sta 0,x         ; TOS
00279Er 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
0027A0r 3               
0027A0r 3                               ; UM* returns a double-celled number
0027A0r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
0027A3r 3               
0027A3r 3                               ; Move ud-hi-lo to safety
0027A3r 3  B5 02                        lda 2,x         ; ud-hi-lo
0027A5r 3  85 rr                        sta scratch+6
0027A7r 3  B5 03                        lda 3,x
0027A9r 3  85 rr                        sta scratch+7
0027ABr 3               
0027ABr 3                               ; Now we multiply ud-lo, overwriting the stack entries
0027ABr 3  A5 rr                        lda scratch
0027ADr 3  95 02                        sta 2,x
0027AFr 3  A5 rr                        lda scratch+1
0027B1r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
0027B3r 3               
0027B3r 3  A5 rr                        lda base
0027B5r 3  95 00                        sta 0,x
0027B7r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
0027B9r 3               
0027B9r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
0027BCr 3               
0027BCr 3  B5 00                        lda 0,x
0027BEr 3  85 rr                        sta scratch+2
0027C0r 3  B5 01                        lda 1,x
0027C2r 3  85 rr                        sta scratch+3
0027C4r 3               
0027C4r 3  B5 02                        lda 2,x
0027C6r 3  85 rr                        sta scratch
0027C8r 3  B5 03                        lda 3,x
0027CAr 3  85 rr                        sta scratch+1
0027CCr 3               
0027CCr 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
0027CCr 3                               ; both in the scratch pad
0027CCr 3  18                           clc
0027CDr 3  A5 rr                        lda scratch     ; ud-lo LSB
0027CFr 3  65 rr                        adc scratch+4   ; n LSB
0027D1r 3  85 rr                        sta scratch     ; this is the new ud-lo
0027D3r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
0027D5r 3  65 rr                        adc scratch+5   ; n MSB
0027D7r 3  85 rr                        sta scratch+1
0027D9r 3               
0027D9r 3  A5 rr                        lda scratch+2   ; LSB
0027DBr 3  65 rr                        adc scratch+6
0027DDr 3  85 rr                        sta scratch+2   ; this is the new ud-hi
0027DFr 3  A5 rr                        lda scratch+3   ; MSB
0027E1r 3  65 rr                        adc scratch+7
0027E3r 3  85 rr                        sta scratch+3
0027E5r 3               
0027E5r 3                               ; Clean up: Get rid of one of the two top elements on
0027E5r 3                               ; the Data Stack. We don't really care which one
0027E5r 3  E8                           inx
0027E6r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
0027E7r 3               
0027E7r 3                               ; One character down. Move address up
0027E7r 3  F6 04                        inc 4,x
0027E9r 3  D0 02                        bne @1
0027EBr 3  F6 05                        inc 5,x
0027EDr 3               @1:
0027EDr 3                               ; Decrease counter
0027EDr 3  D6 02                        dec 2,x
0027EFr 3  D0 88                        bne @loop
0027F1r 3               
0027F1r 3               @done:
0027F1r 3                               ; Counter has reached zero or we have an error. In both
0027F1r 3                               ; cases, we clean up the Data Stack and return. Error gives
0027F1r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
0027F1r 3                               ; ( ud-lo ud-hi addr u ud-lo )
0027F1r 3  E8                           inx
0027F2r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
0027F3r 3               
0027F3r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
0027F3r 3  A5 rr                        lda scratch     ; new ud-lo
0027F5r 3  95 06                        sta 6,x
0027F7r 3  A5 rr                        lda scratch+1
0027F9r 3  95 07                        sta 7,x
0027FBr 3               
0027FBr 3  A5 rr                        lda scratch+2
0027FDr 3  95 04                        sta 4,x
0027FFr 3  A5 rr                        lda scratch+3
002801r 3  95 05                        sta 5,x
002803r 3               
002803r 3  60           z_to_number:    rts
002804r 3               
002804r 3               
002804r 3               
002804r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
002804r 3               ; ## ">order"  tested  Gforth search
002804r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
002804r 3               
002804r 3               xt_to_order:
002804r 3                               ; Put the wid on the return stack for now.
002804r 3  20 rr rr                     jsr xt_to_r
002807r 3               
002807r 3                               ; Get the current search order.
002807r 3  20 rr rr                     jsr xt_get_order
00280Ar 3               
00280Ar 3                               ; Get back the wid and add it to the list.
00280Ar 3  20 rr rr                     jsr xt_r_from
00280Dr 3  20 rr rr                     jsr xt_swap
002810r 3  20 rr rr                     jsr xt_one_plus
002813r 3               
002813r 3                               ; Set the search order with the new list.
002813r 3  20 rr rr                     jsr xt_set_order
002816r 3               
002816r 3  60           z_to_order:     rts
002817r 3               
002817r 3               
002817r 3               
002817r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
002817r 3               ; ## ">r"  auto  ANS core
002817r 3                       ; """https://forth-standard.org/standard/core/toR
002817r 3                       ; This word is handled differently for native and for
002817r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
002817r 3                       ; word.
002817r 3                       ; """
002817r 3               xt_to_r:
002817r 3                               ; Save the return address. If this word is natively
002817r 3                               ; coded, this is a complete waste of cycles, but
002817r 3                               ; required for subroutine coding
002817r 3  68                           pla             ; LSB
002818r 3  85 rr                        sta tmptos
00281Ar 3  7A                           ply             ; MSB
00281Br 3               
00281Br 3                               ; --- CUT HERE FOR NATIVE CODING ---
00281Br 3               
00281Br 3                               ; We check for underflow in the second step, so we can
00281Br 3                               ; strip off the stack thrashing for native compiling first
00281Br 3  20 rr rr                     jsr underflow_1
00281Er 3               
00281Er 3                               ; now we can do the actual work
00281Er 3  B5 01                        lda 1,x         ; MSB
002820r 3  48                           pha
002821r 3  B5 00                        lda 0,x         ; LSB
002823r 3  48                           pha
002824r 3               
002824r 3  E8                           inx
002825r 3  E8                           inx
002826r 3               
002826r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002826r 3               
002826r 3                               ; restore return address
002826r 3  5A                           phy             ; MSB
002827r 3  A5 rr                        lda tmptos
002829r 3  48                           pha             ; LSB
00282Ar 3               
00282Ar 3  60           z_to_r:         rts
00282Br 3               
00282Br 3               
00282Br 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
00282Br 3               ; ## "true"  auto  ANS core ext
00282Br 3                       ; """https://forth-standard.org/standard/core/TRUE"""
00282Br 3               xt_true:
00282Br 3  CA                           dex
00282Cr 3  CA                           dex
00282Dr 3  A9 FF                        lda #$FF
00282Fr 3  95 00                        sta 0,x
002831r 3  95 01                        sta 1,x
002833r 3               
002833r 3  60           z_true:         rts
002834r 3               
002834r 3               
002834r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
002834r 3               ; ## "tuck"  auto  ANS core ext
002834r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
002834r 3               xt_tuck:
002834r 3  20 rr rr                     jsr underflow_2
002837r 3               
002837r 3  CA                           dex
002838r 3  CA                           dex
002839r 3               
002839r 3  B4 04                        ldy 4,x         ; LSB
00283Br 3  B5 02                        lda 2,x
00283Dr 3  95 04                        sta 4,x
00283Fr 3  94 02                        sty 2,x
002841r 3  95 00                        sta 0,x
002843r 3               
002843r 3  B4 05                        ldy 5,x         ; MSB
002845r 3  B5 03                        lda 3,x
002847r 3  95 05                        sta 5,x
002849r 3  94 03                        sty 3,x         ; bba
00284Br 3  95 01                        sta 1,x         ; baa
00284Dr 3               
00284Dr 3  60           z_tuck:         rts
00284Er 3               
00284Er 3               
00284Er 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
00284Er 3               ; ## "2"  auto  Tali Forth
00284Er 3                       ;
00284Er 3                       ; This code is shared with ASSEMBLER-WORDLIST
00284Er 3               xt_assembler_wordlist:
00284Er 3               xt_two:
00284Er 3  CA                           dex
00284Fr 3  CA                           dex
002850r 3  A9 02                        lda #2
002852r 3  95 00                        sta 0,x
002854r 3  74 01                        stz 1,x
002856r 3               
002856r 3               z_assembler_wordlist:
002856r 3  60           z_two:          rts
002857r 3               
002857r 3               
002857r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
002857r 3               ; ## "2drop"  auto  ANS core
002857r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
002857r 3               xt_two_drop:
002857r 3  20 rr rr                     jsr underflow_2
00285Ar 3               
00285Ar 3  E8                           inx
00285Br 3  E8                           inx
00285Cr 3  E8                           inx
00285Dr 3  E8                           inx
00285Er 3               
00285Er 3  60           z_two_drop:     rts
00285Fr 3               
00285Fr 3               
00285Fr 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
00285Fr 3               ; ## "2dup"  auto  ANS core
00285Fr 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
00285Fr 3               xt_two_dup:
00285Fr 3  20 rr rr                     jsr underflow_2
002862r 3               
002862r 3  CA                           dex
002863r 3  CA                           dex
002864r 3  CA                           dex
002865r 3  CA                           dex
002866r 3               
002866r 3  B5 04                        lda 4,x         ; TOS
002868r 3  95 00                        sta 0,x
00286Ar 3  B5 05                        lda 5,x
00286Cr 3  95 01                        sta 1,x
00286Er 3               
00286Er 3  B5 06                        lda 6,x         ; NOS
002870r 3  95 02                        sta 2,x
002872r 3  B5 07                        lda 7,x
002874r 3  95 03                        sta 3,x
002876r 3               
002876r 3  60           z_two_dup:      rts
002877r 3               
002877r 3               
002877r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
002877r 3               ; ## "2@"  auto  ANS core
002877r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
002877r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
002877r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
002877r 3                       ; """
002877r 3               xt_two_fetch:
002877r 3  20 rr rr                     jsr underflow_1
00287Ar 3               
00287Ar 3  B5 00                        lda 0,x
00287Cr 3  85 rr                        sta tmp1
00287Er 3  B4 01                        ldy 1,x
002880r 3  84 rr                        sty tmp1+1
002882r 3               
002882r 3  CA                           dex             ; reuse one stack element
002883r 3  CA                           dex
002884r 3               
002884r 3  B2 rr                        lda (tmp1)      ; copy LSB
002886r 3  95 00                        sta 0,x
002888r 3  A0 01                        ldy #1          ; copy next
00288Ar 3  B1 rr                        lda (tmp1),y
00288Cr 3  95 01                        sta 1,x
00288Er 3  C8                           iny             ; copy next
00288Fr 3  B1 rr                        lda (tmp1),y
002891r 3  95 02                        sta 2,x
002893r 3  C8                           iny             ; copy next
002894r 3  B1 rr                        lda (tmp1),y
002896r 3  95 03                        sta 3,x
002898r 3               
002898r 3  60           z_two_fetch:    rts
002899r 3               
002899r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002899r 3               ; ## "2over"  auto  ANS core
002899r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002899r 3               xt_two_over:
002899r 3  20 rr rr                     jsr underflow_4
00289Cr 3               
00289Cr 3  CA                           dex
00289Dr 3  CA                           dex
00289Er 3  CA                           dex
00289Fr 3  CA                           dex
0028A0r 3               
0028A0r 3  B5 08                        lda 8,x
0028A2r 3  95 00                        sta 0,x
0028A4r 3               
0028A4r 3  B5 09                        lda 9,x
0028A6r 3  95 01                        sta 1,x
0028A8r 3               
0028A8r 3  B5 0A                        lda 10,x
0028AAr 3  95 02                        sta 2,x
0028ACr 3               
0028ACr 3  B5 0B                        lda 11,x
0028AEr 3  95 03                        sta 3,x
0028B0r 3               
0028B0r 3  60           z_two_over:     rts
0028B1r 3               
0028B1r 3               
0028B1r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
0028B1r 3               ; ## "2r@"  auto  ANS core ext
0028B1r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
0028B1r 3                       ;
0028B1r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
0028B1r 3                       ; assembler. We use trickery to access the elements on the Return
0028B1r 3                       ; Stack instead of pulling the return address first and storing
0028B1r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
0028B1r 3                       ; it as Never Native; at some point, we should compare versions to
0028B1r 3                       ; see if an Always Native version would be better
0028B1r 3                       ; """
0028B1r 3               xt_two_r_fetch:
0028B1r 3               		; make room on the Data Stack
0028B1r 3  CA                           dex
0028B2r 3  CA                           dex
0028B3r 3  CA                           dex
0028B4r 3  CA                           dex
0028B5r 3               
0028B5r 3                               ; Get four bytes off of Return Stack. This assumes that
0028B5r 3                               ; we took a subroutine jump here so the first two entries
0028B5r 3                               ; are the return address
0028B5r 3  8A                           txa
0028B6r 3  BA                           tsx
0028B7r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
0028B8r 3  7A                           ply
0028B9r 3  AA                           tax
0028BAr 3               
0028BAr 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
0028BAr 3                               ; the return address for this word. This is a whole lot
0028BAr 3                               ; easier on the 65816
0028BAr 3  B9 03 01                     lda $0103,y     ; LSB of top entry
0028BDr 3  95 00                        sta 0,x
0028BFr 3  B9 04 01                     lda $0104,y     ; MSB of top entry
0028C2r 3  95 01                        sta 1,x
0028C4r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
0028C7r 3  95 02                        sta 2,x
0028C9r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
0028CCr 3  95 03                        sta 3,x
0028CEr 3               
0028CEr 3  60           z_two_r_fetch:  rts
0028CFr 3               
0028CFr 3               
0028CFr 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
0028CFr 3               ; ## "2r>"  auto  ANS core ext
0028CFr 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
0028CFr 3                       ; Pull top two entries from Return Stack.
0028CFr 3                       ;
0028CFr 3                       ; Is the same as
0028CFr 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
0028CFr 3                       ; the top value on the ReturnStack for a STC Forth is the
0028CFr 3                       ; return address, which we need to get out of the way first.
0028CFr 3                       ; Native compile needs to be handled as a special case.
0028CFr 3                       ; """
0028CFr 3               xt_two_r_from:
0028CFr 3                               ; save the return address
0028CFr 3  68                           pla                     ; LSB
0028D0r 3  85 rr                        sta tmp1
0028D2r 3  68                           pla                     ; MSB
0028D3r 3  85 rr                        sta tmp1+1
0028D5r 3               
0028D5r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028D5r 3               
0028D5r 3               		; make room on stack
0028D5r 3  CA                           dex
0028D6r 3  CA                           dex
0028D7r 3  CA                           dex
0028D8r 3  CA                           dex
0028D9r 3               
0028D9r 3                               ; In theory, we should test for underflow on the Return
0028D9r 3                               ; Stack. However, given the traffic there with an STC
0028D9r 3                               ; Forth, that's probably not really useful
0028D9r 3               
0028D9r 3                               ; now we can access the data
0028D9r 3  68                           pla                     ; LSB
0028DAr 3  95 00                        sta 0,x
0028DCr 3  68                           pla                     ; MSB
0028DDr 3  95 01                        sta 1,x
0028DFr 3               
0028DFr 3  68                           pla                     ; LSB
0028E0r 3  95 02                        sta 2,x
0028E2r 3  68                           pla                     ; MSB
0028E3r 3  95 03                        sta 3,x
0028E5r 3               
0028E5r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028E5r 3               
0028E5r 3                               ; restore return address
0028E5r 3  A5 rr                        lda tmp1+1              ; MSB
0028E7r 3  48                           pha
0028E8r 3  A5 rr                        lda tmp1                ; LSB
0028EAr 3  48                           pha
0028EBr 3               
0028EBr 3  60           z_two_r_from:   rts
0028ECr 3               
0028ECr 3               
0028ECr 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
0028ECr 3               ; ## "2/"  auto  ANS core
0028ECr 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
0028ECr 3               xt_two_slash:
0028ECr 3  20 rr rr                     jsr underflow_1
0028EFr 3               
0028EFr 3                               ; We can't just LSR the LSB and ROR the MSB because that
0028EFr 3                               ; would do bad things to the sign
0028EFr 3  B5 01                        lda 1,x
0028F1r 3  0A                           asl                     ; save the sign
0028F2r 3  76 01                        ror 1,x
0028F4r 3  76 00                        ror 0,x
0028F6r 3               
0028F6r 3  60           z_two_slash:    rts
0028F7r 3               
0028F7r 3               
0028F7r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
0028F7r 3               ; ## "2*"  auto  ANS core
0028F7r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
0028F7r 3                       ;
0028F7r 3                       ; Also used for CELLS
0028F7r 3                       ; """
0028F7r 3               xt_two_star:
0028F7r 3               xt_cells:
0028F7r 3  20 rr rr                     jsr underflow_1
0028FAr 3               
0028FAr 3  16 00                        asl 0,x
0028FCr 3  36 01                        rol 1,x
0028FEr 3               z_cells:
0028FEr 3  60           z_two_star:     rts
0028FFr 3               
0028FFr 3               
0028FFr 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0028FFr 3               ; ## "2!"  auto  ANS core
0028FFr 3                       ; """https://forth-standard.org/standard/core/TwoStore
0028FFr 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0028FFr 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0028FFr 3                       ; """
0028FFr 3               xt_two_store:
0028FFr 3  20 rr rr                     jsr underflow_3
002902r 3               
002902r 3  B5 00                        lda 0,x
002904r 3  85 rr                        sta tmp1
002906r 3  B4 01                        ldy 1,x
002908r 3  84 rr                        sty tmp1+1
00290Ar 3               
00290Ar 3  E8                           inx
00290Br 3  E8                           inx
00290Cr 3               
00290Cr 3  B5 00                        lda 0,x         ; copy MSB
00290Er 3  92 rr                        sta (tmp1)
002910r 3  B5 01                        lda 1,x         ; copy next
002912r 3  A0 01                        ldy #1
002914r 3  91 rr                        sta (tmp1),y
002916r 3  B5 02                        lda 2,x         ; copy next
002918r 3  C8                           iny
002919r 3  91 rr                        sta (tmp1),y
00291Br 3  B5 03                        lda 3,x         ; copy MSB
00291Dr 3  C8                           iny
00291Er 3  91 rr                        sta (tmp1),y
002920r 3               
002920r 3  E8                           inx             ; 2DROP
002921r 3  E8                           inx
002922r 3  E8                           inx
002923r 3  E8                           inx
002924r 3               
002924r 3  60           z_two_store:    rts
002925r 3               
002925r 3               
002925r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
002925r 3               ; ## "2swap"  auto  ANS core
002925r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
002925r 3               xt_two_swap:
002925r 3  20 rr rr                     jsr underflow_4
002928r 3               
002928r 3                               ; 0 <-> 4
002928r 3  B5 00                        lda 0,x
00292Ar 3  B4 04                        ldy 4,x
00292Cr 3  95 04                        sta 4,x
00292Er 3  94 00                        sty 0,x
002930r 3               
002930r 3                               ; 1 <-> 5
002930r 3  B5 01                        lda 1,x
002932r 3  B4 05                        ldy 5,x
002934r 3  95 05                        sta 5,x
002936r 3  94 01                        sty 1,x
002938r 3               
002938r 3                               ; 2 <-> 6
002938r 3  B5 02                        lda 2,x
00293Ar 3  B4 06                        ldy 6,x
00293Cr 3  95 06                        sta 6,x
00293Er 3  94 02                        sty 2,x
002940r 3               
002940r 3                               ; 3 <-> 7
002940r 3  B5 03                        lda 3,x
002942r 3  B4 07                        ldy 7,x
002944r 3  95 07                        sta 7,x
002946r 3  94 03                        sty 3,x
002948r 3               
002948r 3  60           z_two_swap:     rts
002949r 3               
002949r 3               
002949r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
002949r 3               ; ## "2>r"  auto  ANS core ext
002949r 3                       ; """https://forth-standard.org/standard/core/TwotoR
002949r 3                       ; Push top two entries to Return Stack.
002949r 3                       ;
002949r 3                       ; The same as SWAP >R >R
002949r 3                       ; except that if we jumped here, the return address will be in the
002949r 3                       ; way. May not be natively compiled unless we're clever and use
002949r 3                       ; special routines.
002949r 3                       ; """
002949r 3               xt_two_to_r:
002949r 3                               ; save the return address
002949r 3  68                           pla             ; LSB
00294Ar 3  85 rr                        sta tmp1
00294Cr 3  68                           pla             ; MSB
00294Dr 3  85 rr                        sta tmp1+1
00294Fr 3               
00294Fr 3                               ; --- CUT HERE FOR NATIVE CODING ---
00294Fr 3               
00294Fr 3  20 rr rr                     jsr underflow_2
002952r 3               
002952r 3                               ; now we can move the data
002952r 3  B5 03                        lda 3,x         ; MSB
002954r 3  48                           pha
002955r 3  B5 02                        lda 2,x         ; LSB
002957r 3  48                           pha
002958r 3               
002958r 3                               ; now we can move the data
002958r 3  B5 01                        lda 1,x         ; MSB
00295Ar 3  48                           pha
00295Br 3  B5 00                        lda 0,x         ; LSB
00295Dr 3  48                           pha
00295Er 3               
00295Er 3  E8                           inx
00295Fr 3  E8                           inx
002960r 3  E8                           inx
002961r 3  E8                           inx
002962r 3               
002962r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002962r 3               
002962r 3                               ; restore return address
002962r 3  A5 rr                        lda tmp1+1      ; MSB
002964r 3  48                           pha
002965r 3  A5 rr                        lda tmp1        ; LSB
002967r 3  48                           pha
002968r 3               
002968r 3  60           z_two_to_r:     rts
002969r 3               
002969r 3               
002969r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002969r 3               ; ## "2constant"  auto  ANS double
002969r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002969r 3                       ;
002969r 3                       ; Based on the Forth code
002969r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002969r 3                       ; """
002969r 3               xt_two_constant:
002969r 3  20 rr rr                     jsr underflow_2
00296Cr 3               
00296Cr 3  20 rr rr                     jsr xt_create
00296Fr 3  20 rr rr                     jsr xt_swap
002972r 3  20 rr rr                     jsr xt_comma
002975r 3  20 rr rr                     jsr xt_comma
002978r 3               
002978r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
00297Br 3  20 rr rr                     jsr dodoes
00297Er 3               
00297Er 3  20 rr rr                     jsr xt_dup
002981r 3  20 rr rr                     jsr xt_fetch
002984r 3  20 rr rr                     jsr xt_swap
002987r 3  20 rr rr                     jsr xt_cell_plus
00298Ar 3  20 rr rr                     jsr xt_fetch
00298Dr 3               
00298Dr 3  60           z_two_constant: rts
00298Er 3               
00298Er 3               
00298Er 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
00298Er 3               ; ## "2literal"  auto  ANS double
00298Er 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
00298Er 3                       ; Based on the Forth code
00298Er 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
00298Er 3                       ; """
00298Er 3               xt_two_literal:
00298Er 3  20 rr rr                     jsr underflow_2 ; double number
002991r 3               
002991r 3  20 rr rr                     jsr xt_swap
002994r 3  20 rr rr                     jsr xt_literal
002997r 3  20 rr rr                     jsr xt_literal
00299Ar 3               
00299Ar 3  60           z_two_literal:  rts
00299Br 3               
00299Br 3               
00299Br 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
00299Br 3               ; ## "2variable"  auto  ANS double
00299Br 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
00299Br 3                       ; The variable is not initialized to zero.
00299Br 3                       ;
00299Br 3                       ; This can be realized in Forth as either
00299Br 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
00299Br 3                       ; """
00299Br 3               xt_two_variable:
00299Br 3                               ; We just let CRATE and ALLOT do the heavy lifting
00299Br 3  20 rr rr                     jsr xt_create
00299Er 3               
00299Er 3  CA                           dex
00299Fr 3  CA                           dex
0029A0r 3  A9 04                        lda #4
0029A2r 3  95 00                        sta 0,x
0029A4r 3  74 01                        stz 1,x
0029A6r 3               
0029A6r 3  20 rr rr                     jsr xt_allot
0029A9r 3               
0029A9r 3  60           z_two_variable: rts
0029AAr 3               
0029AAr 3               
0029AAr 3               ; ## TYPE ( addr u -- ) "Print string"
0029AAr 3               ; ## "type"  auto  ANS core
0029AAr 3                       ; """https://forth-standard.org/standard/core/TYPE
0029AAr 3                       ; Works through EMIT to allow OUTPUT revectoring.
0029AAr 3                       ; """
0029AAr 3               
0029AAr 3               xt_type:
0029AAr 3  20 rr rr                     jsr underflow_2
0029ADr 3               
0029ADr 3                               ; Save the starting address into tmp1
0029ADr 3  B5 02                        lda 2,x
0029AFr 3  85 rr                        sta tmp1
0029B1r 3  B5 03                        lda 3,x
0029B3r 3  85 rr                        sta tmp1+1
0029B5r 3               @loop:
0029B5r 3                               ; done if length is zero
0029B5r 3  B5 00                        lda 0,x
0029B7r 3  15 01                        ora 1,x
0029B9r 3  F0 15                        beq @done
0029BBr 3               
0029BBr 3                               ; Send the current character
0029BBr 3  B2 rr                        lda (tmp1)
0029BDr 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
0029C0r 3               
0029C0r 3                               ; Move the address along (in tmp1)
0029C0r 3  E6 rr                        inc tmp1
0029C2r 3  D0 02                        bne @1
0029C4r 3  E6 rr                        inc tmp1+1
0029C6r 3               @1:
0029C6r 3                               ; Reduce the count (on the data stack)
0029C6r 3  B5 00                        lda 0,x
0029C8r 3  D0 02                        bne @2
0029CAr 3  D6 01                        dec 1,x
0029CCr 3               @2:
0029CCr 3  D6 00                        dec 0,x
0029CEr 3               
0029CEr 3  80 E5                        bra @loop
0029D0r 3               @done:
0029D0r 3  E8                           inx
0029D1r 3  E8                           inx
0029D2r 3  E8                           inx
0029D3r 3  E8                           inx
0029D4r 3               
0029D4r 3  60           z_type:         rts
0029D5r 3               
0029D5r 3               
0029D5r 3               
0029D5r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
0029D5r 3               ; ## "u."  tested  ANS core
0029D5r 3                       ; """https://forth-standard.org/standard/core/Ud
0029D5r 3                       ;
0029D5r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
0029D5r 3                       ; We use the internal assembler function print_u followed
0029D5r 3                       ; by a single space
0029D5r 3                       ; """
0029D5r 3               xt_u_dot:
0029D5r 3  20 rr rr                     jsr underflow_1
0029D8r 3               
0029D8r 3  20 rr rr                     jsr print_u
0029DBr 3  A9 20                        lda #AscSP
0029DDr 3  20 rr rr                     jsr emit_a
0029E0r 3               
0029E0r 3  60           z_u_dot:        rts
0029E1r 3               
0029E1r 3               
0029E1r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
0029E1r 3               ; ## "u.r"  tested  ANS core ext
0029E1r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
0029E1r 3               xt_u_dot_r:
0029E1r 3  20 rr rr                     jsr underflow_2
0029E4r 3               
0029E4r 3  20 rr rr                     jsr xt_to_r
0029E7r 3  20 rr rr                     jsr xt_zero
0029EAr 3  20 rr rr                     jsr xt_less_number_sign
0029EDr 3  20 rr rr                     jsr xt_number_sign_s
0029F0r 3  20 rr rr                     jsr xt_number_sign_greater
0029F3r 3  20 rr rr                     jsr xt_r_from
0029F6r 3  20 rr rr                     jsr xt_over
0029F9r 3  20 rr rr                     jsr xt_minus
0029FCr 3  20 rr rr                     jsr xt_spaces
0029FFr 3  20 rr rr                     jsr xt_type
002A02r 3               
002A02r 3  60           z_u_dot_r:      rts
002A03r 3               
002A03r 3               
002A03r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
002A03r 3               ; ## "u>"  auto  ANS core ext
002A03r 3                       ; """https://forth-standard.org/standard/core/Umore"""
002A03r 3               xt_u_greater_than:
002A03r 3  20 rr rr                     jsr underflow_2
002A06r 3               
002A06r 3  B5 00                        lda 0,x
002A08r 3  D5 02                        cmp 2,x
002A0Ar 3  B5 01                        lda 1,x
002A0Cr 3  F5 03                        sbc 3,x
002A0Er 3  E8                           inx
002A0Fr 3  E8                           inx
002A10r 3               
002A10r 3  A9 00                        lda #0
002A12r 3  69 FF                        adc #$ff
002A14r 3  95 00                        sta 0,x         ; store flag
002A16r 3  95 01                        sta 1,x
002A18r 3               
002A18r 3  60           z_u_greater_than:    rts
002A19r 3               
002A19r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002A19r 3               ; ## "u<"  auto  ANS core
002A19r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002A19r 3               xt_u_less_than:
002A19r 3  20 rr rr                     jsr underflow_2
002A1Cr 3               
002A1Cr 3  B5 02                        lda 2,x
002A1Er 3  D5 00                        cmp 0,x
002A20r 3  B5 03                        lda 3,x
002A22r 3  F5 01                        sbc 1,x
002A24r 3  E8                           inx
002A25r 3  E8                           inx
002A26r 3               
002A26r 3  A9 00                        lda #0
002A28r 3  69 FF                        adc #$ff
002A2Ar 3  95 00                        sta 0,x         ; store flag
002A2Cr 3  95 01                        sta 1,x
002A2Er 3               
002A2Er 3  60           z_u_less_than:    rts
002A2Fr 3               
002A2Fr 3               
002A2Fr 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
002A2Fr 3               ; ## "ud."  auto  Tali double
002A2Fr 3                       ;
002A2Fr 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
002A2Fr 3                       ; """
002A2Fr 3               xt_ud_dot:
002A2Fr 3  20 rr rr                     jsr underflow_2 ; double number
002A32r 3               
002A32r 3  20 rr rr                     jsr xt_less_number_sign
002A35r 3  20 rr rr                     jsr xt_number_sign_s
002A38r 3  20 rr rr                     jsr xt_number_sign_greater
002A3Br 3  20 rr rr                     jsr xt_type
002A3Er 3  20 rr rr                     jsr xt_space
002A41r 3               
002A41r 3  60           z_ud_dot:        rts
002A42r 3               
002A42r 3               
002A42r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002A42r 3               ; ## "ud.r"  auto  Tali double
002A42r 3                       ;
002A42r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002A42r 3                       ; """
002A42r 3               xt_ud_dot_r:
002A42r 3  20 rr rr                     jsr underflow_3
002A45r 3               
002A45r 3  20 rr rr                     jsr xt_to_r
002A48r 3  20 rr rr                     jsr xt_less_number_sign
002A4Br 3  20 rr rr                     jsr xt_number_sign_s
002A4Er 3  20 rr rr                     jsr xt_number_sign_greater
002A51r 3  20 rr rr                     jsr xt_r_from
002A54r 3  20 rr rr                     jsr xt_over
002A57r 3  20 rr rr                     jsr xt_minus
002A5Ar 3  20 rr rr                     jsr xt_spaces
002A5Dr 3  20 rr rr                     jsr xt_type
002A60r 3               
002A60r 3  60           z_ud_dot_r:      rts
002A61r 3               
002A61r 3               
002A61r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002A61r 3               ; ## "um/mod"  auto  ANS core
002A61r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002A61r 3                       ; Divide double cell number by single cell number, returning the
002A61r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002A61r 3                       ; This is the basic division operation all others use. Based on FIG
002A61r 3                       ; Forth code, modified by Garth Wilson, see
002A61r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002A61r 3                       ;
002A61r 3                       ; This uses tmp1, tmp1+1, and tmptos
002A61r 3                       ; """
002A61r 3               
002A61r 3               xt_um_slash_mod:
002A61r 3  20 rr rr                     jsr underflow_3
002A64r 3               
002A64r 3                               ; catch division by zero
002A64r 3  B5 00                        lda 0,x
002A66r 3  15 01                        ora 1,x
002A68r 3  D0 05                        bne @not_zero
002A6Ar 3               
002A6Ar 3  A9 04                        lda #err_divzero
002A6Cr 3  4C rr rr                     jmp error
002A6Fr 3               
002A6Fr 3               @not_zero:
002A6Fr 3                               ; We loop 17 times
002A6Fr 3  A9 11                        lda #17
002A71r 3  85 rr                        sta tmptos
002A73r 3               
002A73r 3               @loop:
002A73r 3                               ; rotate low cell of dividend one bit left (LSB)
002A73r 3  36 04                        rol 4,x
002A75r 3  36 05                        rol 5,x
002A77r 3               
002A77r 3                               ; loop control
002A77r 3  C6 rr                        dec tmptos
002A79r 3  F0 22                        beq @done
002A7Br 3               
002A7Br 3                               ; rotate high cell of dividend one bit left (MSB)
002A7Br 3  36 02                        rol 2,x
002A7Dr 3  36 03                        rol 3,x
002A7Fr 3               
002A7Fr 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002A81r 3  26 rr                        rol tmp1
002A83r 3               
002A83r 3                               ; subtract dividend hi cell minus divisor
002A83r 3  38                           sec
002A84r 3  B5 02                        lda 2,x
002A86r 3  F5 00                        sbc 0,x
002A88r 3  85 rr                        sta tmp1+1
002A8Ar 3  B5 03                        lda 3,x
002A8Cr 3  F5 01                        sbc 1,x
002A8Er 3               
002A8Er 3  A8                           tay
002A8Fr 3  A5 rr                        lda tmp1
002A91r 3  E9 00                        sbc #0
002A93r 3  90 DE                        bcc @loop
002A95r 3               
002A95r 3                               ; make result new dividend high cell
002A95r 3  A5 rr                        lda tmp1+1
002A97r 3  95 02                        sta 2,x
002A99r 3  94 03                        sty 3,x         ; used as temp storage
002A9Br 3               
002A9Br 3  80 D6                        bra @loop
002A9Dr 3               @done:
002A9Dr 3  E8                           inx
002A9Er 3  E8                           inx
002A9Fr 3               
002A9Fr 3  20 rr rr                     jsr xt_swap
002AA2r 3               
002AA2r 3  60           z_um_slash_mod: rts
002AA3r 3               
002AA3r 3               
002AA3r 3               
002AA3r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002AA3r 3               ; ## "um*"  auto  ANS core
002AA3r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002AA3r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002AA3r 3                       ; Old Forth versions such as FIG Forth call this U*
002AA3r 3                       ;
002AA3r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002AA3r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002AA3r 3                       ; discussion.
002AA3r 3                       ;
002AA3r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002AA3r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002AA3r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002AA3r 3                       ;
002AA3r 3                       ; Consider switching to a table-supported version based on
002AA3r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002AA3r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002AA3r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002AA3r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002AA3r 3                       ; """
002AA3r 3               
002AA3r 3               xt_um_star:
002AA3r 3  20 rr rr                     jsr underflow_2
002AA6r 3               
002AA6r 3                               ; to eliminate clc inside the loop, the value at
002AA6r 3                               ; tmp1 is reduced by 1 in advance
002AA6r 3  18                           clc
002AA7r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002AA9r 3  E9 00                        sbc #0
002AABr 3  85 rr                        sta tmp2
002AADr 3               
002AADr 3  B5 01                        lda 1,x
002AAFr 3  E9 00                        sbc #0
002AB1r 3  90 31                        bcc @zero       ; is TOS zero?
002AB3r 3  85 rr                        sta tmp2+1
002AB5r 3               
002AB5r 3  A9 00                        lda #0
002AB7r 3  85 rr                        sta tmp1
002AB9r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002ABBr 3  CA                           dex
002ABCr 3  CA                           dex
002ABDr 3               
002ABDr 3               @outer_loop:
002ABDr 3  A0 08                        ldy #8          ; counter inner loop
002ABFr 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002AC1r 3               
002AC1r 3               @inner_loop:
002AC1r 3  90 0C                        bcc @no_add
002AC3r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002AC5r 3  A5 rr                        lda tmp1
002AC7r 3  65 rr                        adc tmp2
002AC9r 3  85 rr                        sta tmp1
002ACBr 3  A5 rr                        lda tmp1+1
002ACDr 3  65 rr                        adc tmp2+1
002ACFr 3               
002ACFr 3               @no_add:
002ACFr 3  6A                           ror
002AD0r 3  66 rr                        ror tmp1
002AD2r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002AD4r 3               
002AD4r 3  88                           dey
002AD5r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002AD7r 3               
002AD7r 3  E8                           inx
002AD8r 3  E4 rr                        cpx tmp3
002ADAr 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002ADCr 3               
002ADCr 3                               ; all done, store high word of result
002ADCr 3  95 01                        sta 1,x
002ADEr 3  A5 rr                        lda tmp1
002AE0r 3  95 00                        sta 0,x
002AE2r 3  80 04                        bra @done
002AE4r 3               
002AE4r 3               @zero:
002AE4r 3  74 02                        stz 2,x
002AE6r 3  74 03                        stz 3,x
002AE8r 3               @done:
002AE8r 3  60           z_um_star:      rts
002AE9r 3               
002AE9r 3               
002AE9r 3               
002AE9r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002AE9r 3               ; ## "unloop"  auto  ANS core
002AE9r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002AE9r 3                       ;
002AE9r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002AE9r 3                       ; """
002AE9r 3               xt_unloop:
002AE9r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002AE9r 3                               ; return stack
002AE9r 3  68                           pla
002AEAr 3  68                           pla
002AEBr 3  68                           pla
002AECr 3  68                           pla
002AEDr 3               
002AEDr 3                               ; Now drop the LEAVE address that was below them off
002AEDr 3                               ; the Return Stack as well
002AEDr 3  68                           pla
002AEEr 3  68                           pla
002AEFr 3               
002AEFr 3  60           z_unloop:       rts
002AF0r 3               
002AF0r 3               
002AF0r 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
002AF0r 3               ; ## "until"  auto  ANS core
002AF0r 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
002AF0r 3               xt_until:
002AF0r 3                               ; Compile a 0BRANCH
002AF0r 3  A0 rr                        ldy #>zero_branch_runtime
002AF2r 3  A9 rr                        lda #<zero_branch_runtime
002AF4r 3  20 rr rr                     jsr cmpl_subroutine
002AF7r 3               
002AF7r 3                               ; The address to loop back to is on the stack.
002AF7r 3                               ; Just compile it as the destination for the
002AF7r 3                               ; 0branch.
002AF7r 3  20 rr rr                     jsr xt_comma
002AFAr 3               
002AFAr 3  60           z_until:        rts
002AFBr 3               
002AFBr 3               
002AFBr 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002AFBr 3               ; ## "unused"  auto  ANS core ext
002AFBr 3                       ; """https://forth-standard.org/standard/core/UNUSED
002AFBr 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002AFBr 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002AFBr 3                       ; defaults to $400
002AFBr 3                       ; """
002AFBr 3               xt_unused:
002AFBr 3  CA                           dex
002AFCr 3  CA                           dex
002AFDr 3               
002AFDr 3  A9 FF                        lda #<cp_end
002AFFr 3  38                           sec
002B00r 3  E5 rr                        sbc cp
002B02r 3  95 00                        sta 0,x
002B04r 3               
002B04r 3  A9 7F                        lda #>cp_end
002B06r 3  E5 rr                        sbc cp+1
002B08r 3  95 01                        sta 1,x
002B0Ar 3               
002B0Ar 3  60           z_unused:       rts
002B0Br 3               
002B0Br 3               
002B0Br 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002B0Br 3               ; ## "update"  auto  ANS block
002B0Br 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002B0Br 3               xt_update:
002B0Br 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002B0Br 3                               ; has Absolute and Direct Pages addressing modes
002B0Br 3  A0 2C                        ldy #buffstatus_offset
002B0Dr 3  B1 rr                        lda (up),y
002B0Fr 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002B11r 3  91 rr                        sta (up),y
002B13r 3               
002B13r 3  60           z_update:       rts
002B14r 3               
002B14r 3               
002B14r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002B14r 3               ; ## "useraddr"  tested  Tali Forth
002B14r 3               xt_useraddr:
002B14r 3  CA                           dex
002B15r 3  CA                           dex
002B16r 3  A9 rr                        lda #<up
002B18r 3  95 00                        sta 0,x
002B1Ar 3  A9 rr                        lda #>up
002B1Cr 3  95 01                        sta 1,x
002B1Er 3               
002B1Er 3  60           z_useraddr:     rts
002B1Fr 3               
002B1Fr 3               
002B1Fr 3               ; ## VALUE ( n "name" -- ) "Define a value"
002B1Fr 3               ; ## "value"  auto  ANS core
002B1Fr 3                       ; """https://forth-standard.org/standard/core/VALUE
002B1Fr 3                       ;
002B1Fr 3                       ; This is a dummy header for the WORDLIST. The actual code is
002B1Fr 3                       ; identical to that of CONSTANT
002B1Fr 3                       ; """
002B1Fr 3               
002B1Fr 3               
002B1Fr 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002B1Fr 3               ; ## "variable"  auto  ANS core
002B1Fr 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002B1Fr 3                       ; There are various Forth definitions for this word, such as
002B1Fr 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002B1Fr 3                       ; second one so the variable is initialized to zero
002B1Fr 3                       ; """
002B1Fr 3               xt_variable:
002B1Fr 3                               ; we let CREATE do the heavy lifting
002B1Fr 3  20 rr rr                     jsr xt_create
002B22r 3               
002B22r 3                               ; there is no "STZ (CP)" so we have to do this the hard
002B22r 3                               ; way
002B22r 3  A9 00                        lda #0
002B24r 3               
002B24r 3  92 rr                        sta (cp)
002B26r 3  E6 rr                        inc cp
002B28r 3  D0 02                        bne @1
002B2Ar 3  E6 rr                        inc cp+1
002B2Cr 3               @1:
002B2Cr 3  92 rr                        sta (cp)
002B2Er 3  E6 rr                        inc cp
002B30r 3  D0 02                        bne @2
002B32r 3  E6 rr                        inc cp+1
002B34r 3               @2:
002B34r 3                               ; Now we need to adjust the length of the complete word by two
002B34r 3  20 rr rr                     jsr adjust_z
002B37r 3               
002B37r 3  60           z_variable:     rts
002B38r 3               
002B38r 3               
002B38r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002B38r 3               ; ## "while"  auto  ANS core
002B38r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002B38r 3               xt_while:
002B38r 3                               ; Compile a 0branch
002B38r 3  A0 rr                        ldy #>zero_branch_runtime
002B3Ar 3  A9 rr                        lda #<zero_branch_runtime
002B3Cr 3  20 rr rr                     jsr cmpl_subroutine
002B3Fr 3               
002B3Fr 3                               ; Put the address (here) where the destination
002B3Fr 3                               ; address needs to go so it can be put there later.
002B3Fr 3  20 rr rr                     jsr xt_here
002B42r 3               
002B42r 3                               ; Fill in the destination address with 0 for now.
002B42r 3  20 rr rr                     jsr xt_zero
002B45r 3  20 rr rr                     jsr xt_comma
002B48r 3               
002B48r 3                               ; Swap the two addresses on the stack.
002B48r 3  20 rr rr                     jsr xt_swap
002B4Br 3               
002B4Br 3  60           z_while:        rts
002B4Cr 3               
002B4Cr 3               
002B4Cr 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002B4Cr 3               ; ## "within"  auto  ANS core ext
002B4Cr 3                       ; """https://forth-standard.org/standard/core/WITHIN
002B4Cr 3                       ;
002B4Cr 3                       ; This an assembler version of the ANS Forth implementation
002B4Cr 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002B4Cr 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002B4Cr 3                       ; ROT TUCK > -ROT > INVERT AND
002B4Cr 3                       ; """"
002B4Cr 3               xt_within:
002B4Cr 3  20 rr rr                     jsr underflow_3
002B4Fr 3               
002B4Fr 3  20 rr rr                     jsr xt_over
002B52r 3  20 rr rr                     jsr xt_minus
002B55r 3  20 rr rr                     jsr xt_to_r
002B58r 3  20 rr rr                     jsr xt_minus
002B5Br 3  20 rr rr                     jsr xt_r_from
002B5Er 3  20 rr rr                     jsr xt_u_less_than
002B61r 3               
002B61r 3  60           z_within:       rts
002B62r 3               
002B62r 3               
002B62r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002B62r 3               ; ## "word"  auto  ANS core
002B62r 3                       ; """https://forth-standard.org/standard/core/WORD
002B62r 3                       ; Obsolete parsing word included for backwards compatibility only.
002B62r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002B62r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002B62r 3                       ; Returns the result as a counted string (requires COUNT to convert
002B62r 3                       ; to modern format), and inserts a space after the string. See "Forth
002B62r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002B62r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002B62r 3                       ; for discussions of why you shouldn't be using WORD anymore.
002B62r 3                       ;
002B62r 3                       ; Forth
002B62r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002B62r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002B62r 3                       ; """
002B62r 3               
002B62r 3               xt_word:
002B62r 3  20 rr rr                     jsr underflow_1
002B65r 3               
002B65r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002B65r 3                               ; but unlike PARSE
002B65r 3  A4 rr                        ldy toin                ; >IN
002B67r 3               @loop:
002B67r 3  C4 rr                        cpy ciblen              ; quit if end of input
002B69r 3  F0 09                        beq @found_char
002B6Br 3  B1 rr                        lda (cib),y
002B6Dr 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002B6Fr 3  D0 03                        bne @found_char
002B71r 3               
002B71r 3  C8                           iny
002B72r 3  80 F3                        bra @loop
002B74r 3               @found_char:
002B74r 3                               ; Save index of where word starts
002B74r 3  84 rr                        sty toin
002B76r 3               
002B76r 3                               ; The real work is done by parse
002B76r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002B79r 3               
002B79r 3                               ; Convert the modern ( addr u ) string format to obsolete
002B79r 3                               ; ( caddr ) format. We just do this in the Dictionary
002B79r 3  B5 00                        lda 0,x
002B7Br 3  92 rr                        sta (cp)                ; Save length of string
002B7Dr 3  48                           pha                     ; Keep copy of length for later
002B7Er 3               
002B7Er 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002B81r 3  A5 rr                        lda cp
002B83r 3  18                           clc
002B84r 3  69 01                        adc #1
002B86r 3  95 02                        sta 2,x                 ; LSB of CP
002B88r 3  A5 rr                        lda cp+1
002B8Ar 3  69 00                        adc #0
002B8Cr 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002B8Er 3               
002B8Er 3  20 rr rr                     jsr xt_move
002B91r 3               
002B91r 3                               ; Return caddr
002B91r 3  CA                           dex
002B92r 3  CA                           dex
002B93r 3  A5 rr                        lda cp
002B95r 3  95 00                        sta 0,x
002B97r 3  A5 rr                        lda cp+1
002B99r 3  95 01                        sta 1,x
002B9Br 3               
002B9Br 3                               ; Adjust CP
002B9Br 3  68                           pla                     ; length of string
002B9Cr 3  18                           clc
002B9Dr 3  65 rr                        adc cp
002B9Fr 3  85 rr                        sta cp
002BA1r 3  A5 rr                        lda cp+1
002BA3r 3  69 00                        adc #0                  ; we only need the carry
002BA5r 3  85 rr                        sta cp+1
002BA7r 3  60           z_word:         rts
002BA8r 3               
002BA8r 3               
002BA8r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002BA8r 3               ; ## "wordlist" auto ANS search
002BA8r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002BA8r 3                       ; See the tutorial on Wordlists and the Search Order for
002BA8r 3                       ; more information.
002BA8r 3                       ; """
002BA8r 3               
002BA8r 3               xt_wordlist:
002BA8r 3                               ; Get the current number of wordlists
002BA8r 3  A0 05                        ldy #num_wordlists_offset
002BAAr 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002BACr 3                                               ; the LSB needs to be checked.
002BACr 3               
002BACr 3                               ; See if we are already at the max.
002BACr 3  C9 0C                        cmp #max_wordlists
002BAEr 3  D0 05                        bne @ok
002BB0r 3               
002BB0r 3                               ; Print an error message if all wordlists used.
002BB0r 3  A9 0B                        lda #err_wordlist
002BB2r 3  4C rr rr                     jmp error
002BB5r 3               
002BB5r 3               @ok:
002BB5r 3  1A                           inc             ; Increment the wordlist#
002BB6r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002BB8r 3  CA                           dex             ; and put it on the stack.
002BB9r 3  CA                           dex
002BBAr 3  95 00                        sta 0,x
002BBCr 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002BBEr 3               
002BBEr 3  60           z_wordlist:     rts
002BBFr 3               
002BBFr 3               
002BBFr 3               
002BBFr 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002BBFr 3               ; ## "words"  tested  ANS tools
002BBFr 3                       ; """https://forth-standard.org/standard/tools/WORDS
002BBFr 3                       ; This is pretty much only used at the command line so we can
002BBFr 3                       ; be slow and try to save space.
002BBFr 3                       ; """
002BBFr 3               
002BBFr 3               xt_words:
002BBFr 3                               ; we follow Gforth by starting on the next
002BBFr 3                               ; line
002BBFr 3  20 rr rr                     jsr xt_cr
002BC2r 3               
002BC2r 3                               ; We pretty-format the output by inserting a line break
002BC2r 3                               ; before the end of the line. We can get away with pushing
002BC2r 3                               ; the counter to the stack because this is usually an
002BC2r 3                               ; interactive word and speed is not that important
002BC2r 3  A9 00                        lda #0
002BC4r 3  48                           pha
002BC5r 3               
002BC5r 3                               ; Set up for traversing the wordlist search order.
002BC5r 3  CA                           dex                     ; Make room on the stack for
002BC6r 3  CA                           dex                     ; a dictionary pointer.
002BC7r 3  64 rr                        stz tmp3                ; Start at the beginning of
002BC9r 3                                                       ; the search order.
002BC9r 3               @wordlist_loop:
002BC9r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002BCBr 3  A5 rr                        lda tmp3
002BCDr 3  D1 rr                        cmp (up),y              ; See if we are done.
002BCFr 3  D0 02                        bne @have_wordlist
002BD1r 3               
002BD1r 3                               ; We ran out of wordlists to search.
002BD1r 3  80 44                        bra @words_done
002BD3r 3               
002BD3r 3               @have_wordlist:
002BD3r 3                               ; start with last word in Dictionary
002BD3r 3                               ; Get the current wordlist id
002BD3r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002BD4r 3  69 1F                        adc #search_order_offset
002BD6r 3  A8                           tay
002BD7r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002BD9r 3               
002BD9r 3                               ; Get the DP for that wordlist.
002BD9r 3  0A                           asl                     ; Turn offset into cells offset.
002BDAr 3  18                           clc
002BDBr 3  69 06                        adc #wordlists_offset
002BDDr 3  A8                           tay
002BDEr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002BE0r 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002BE2r 3  C8                           iny
002BE3r 3  B1 rr                        lda (up),y
002BE5r 3  95 01                        sta 1,x
002BE7r 3               
002BE7r 3               @loop:
002BE7r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002BEAr 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002BEDr 3               
002BEDr 3                               ; Insert line break if we're about to go past the end of the
002BEDr 3                               ; line
002BEDr 3  68                           pla
002BEEr 3  18                           clc
002BEFr 3  75 00                        adc 0,x
002BF1r 3  1A                           inc                     ; don't forget the space between words
002BF2r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002BF4r 3  90 05                        bcc @1
002BF6r 3               
002BF6r 3  20 rr rr                     jsr xt_cr
002BF9r 3  A9 00                        lda #0
002BFBr 3               @1:
002BFBr 3  48                           pha
002BFCr 3  20 rr rr                     jsr xt_type             ; ( nt )
002BFFr 3               
002BFFr 3  A9 20                        lda #AscSP
002C01r 3  20 rr rr                     jsr emit_a
002C04r 3               
002C04r 3                               ; get next word, which begins two down
002C04r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002C07r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002C0Ar 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002C0Dr 3               
002C0Dr 3                               ; if next address is zero, we're done
002C0Dr 3  B5 00                        lda 0,x
002C0Fr 3  15 01                        ora 1,x
002C11r 3  D0 D4                        bne @loop
002C13r 3               
002C13r 3                               ; Move on to the next wordlist in the search order.
002C13r 3  E6 rr                        inc tmp3
002C15r 3  80 B2                        bra @wordlist_loop
002C17r 3               
002C17r 3               @words_done:
002C17r 3  68                           pla                     ; dump counter
002C18r 3               
002C18r 3  E8                           inx
002C19r 3  E8                           inx
002C1Ar 3               
002C1Ar 3  60           z_words:        rts
002C1Br 3               
002C1Br 3               
002C1Br 3               
002C1Br 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002C1Br 3               ; ## "wordsize"  auto  Tali Forth
002C1Br 3                       ; """Given an word's name token (nt), return the size of the
002C1Br 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002C1Br 3                       ; count the final RTS.
002C1Br 3                       ; """
002C1Br 3               xt_wordsize:
002C1Br 3  20 rr rr                     jsr underflow_1
002C1Er 3               
002C1Er 3                               ; We get the start address of the word from its header entry
002C1Er 3                               ; for the start of the actual code (execution token, xt)
002C1Er 3                               ; which is four bytes down, and the pointer to the end of the
002C1Er 3                               ; code (z_word, six bytes down)
002C1Er 3  B5 00                        lda 0,x
002C20r 3  85 rr                        sta tmp1
002C22r 3  B5 01                        lda 1,x
002C24r 3  85 rr                        sta tmp1+1
002C26r 3               
002C26r 3  A0 06                        ldy #6
002C28r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002C2Ar 3  88                           dey
002C2Br 3  88                           dey
002C2Cr 3               
002C2Cr 3  38                           sec
002C2Dr 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002C2Fr 3  95 00                        sta 0,x
002C31r 3               
002C31r 3  A0 07                        ldy #7
002C33r 3  B1 rr                        lda (tmp1),y    ; MSB of z
002C35r 3  88                           dey
002C36r 3  88                           dey
002C37r 3               
002C37r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002C39r 3  95 01                        sta 1,x
002C3Br 3               
002C3Br 3  60           z_wordsize:     rts
002C3Cr 3               
002C3Cr 3               
002C3Cr 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002C3Cr 3               ; ## "xor"  auto  ANS core
002C3Cr 3                       ; """https://forth-standard.org/standard/core/XOR"""
002C3Cr 3               xt_xor:
002C3Cr 3  20 rr rr                     jsr underflow_2
002C3Fr 3               
002C3Fr 3  B5 00                        lda 0,x
002C41r 3  55 02                        eor 2,x
002C43r 3  95 02                        sta 2,x
002C45r 3               
002C45r 3  B5 01                        lda 1,x
002C47r 3  55 03                        eor 3,x
002C49r 3  95 03                        sta 3,x
002C4Br 3               
002C4Br 3  E8                           inx
002C4Cr 3  E8                           inx
002C4Dr 3               
002C4Dr 3  60           z_xor:          rts
002C4Er 3               
002C4Er 3               
002C4Er 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002C4Er 3               ; ## "0"  auto  Tali Forth
002C4Er 3                       ; """The disassembler assumes that this routine does not use Y. Note
002C4Er 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002C4Er 3                       ; is 0."""
002C4Er 3               xt_case:
002C4Er 3               xt_forth_wordlist:
002C4Er 3               xt_zero:
002C4Er 3  CA                           dex             ; push
002C4Fr 3  CA                           dex
002C50r 3  74 00                        stz 0,x
002C52r 3  74 01                        stz 1,x
002C54r 3               z_case:
002C54r 3               z_forth_wordlist:
002C54r 3               z_zero:
002C54r 3  60                           rts
002C55r 3               
002C55r 3               
002C55r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002C55r 3               ; ## "0="  auto  ANS core
002C55r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002C55r 3               
002C55r 3               xt_zero_equal:
002C55r 3  20 rr rr                     jsr underflow_1
002C58r 3               
002C58r 3  B5 00                        lda 0,x
002C5Ar 3  15 01                        ora 1,x
002C5Cr 3  F0 04                        beq @zero
002C5Er 3               
002C5Er 3                               ; not a zero, so we need a FALSE flag (0)
002C5Er 3  A9 00                        lda #0
002C60r 3  80 02                        bra @store
002C62r 3               @zero:
002C62r 3                               ; We have a zero, so we need a TRUE flag (-1)
002C62r 3  A9 FF                        lda #$ff
002C64r 3               @store:
002C64r 3  95 00                        sta 0,x
002C66r 3  95 01                        sta 1,x
002C68r 3               
002C68r 3  60           z_zero_equal:   rts
002C69r 3               
002C69r 3               
002C69r 3               
002C69r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002C69r 3               ; ## "0>"  auto  ANS core ext
002C69r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002C69r 3               
002C69r 3               xt_zero_greater:
002C69r 3  20 rr rr                     jsr underflow_1
002C6Cr 3               
002C6Cr 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002C6Er 3               
002C6Er 3  B5 01                        lda 1,x         ; MSB
002C70r 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002C72r 3  15 00                        ora 0,x
002C74r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002C76r 3               
002C76r 3  88                           dey             ; TOS is postive, make true
002C77r 3               @done:
002C77r 3  98                           tya
002C78r 3  95 00                        sta 0,x
002C7Ar 3  95 01                        sta 1,x
002C7Cr 3               
002C7Cr 3  60           z_zero_greater: rts
002C7Dr 3               
002C7Dr 3               
002C7Dr 3               
002C7Dr 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002C7Dr 3               ; ## "0<"  auto  ANS core
002C7Dr 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002C7Dr 3               
002C7Dr 3               xt_zero_less:
002C7Dr 3  20 rr rr                     jsr underflow_1
002C80r 3               
002C80r 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002C82r 3               
002C82r 3  B5 01                        lda 1,x         ; MSB
002C84r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002C86r 3               
002C86r 3  88                           dey             ; TOS is negative, make TRUE
002C87r 3               @done:
002C87r 3  98                           tya
002C88r 3  95 00                        sta 0,x
002C8Ar 3  95 01                        sta 1,x
002C8Cr 3               
002C8Cr 3  60           z_zero_less:    rts
002C8Dr 3               
002C8Dr 3               
002C8Dr 3               
002C8Dr 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002C8Dr 3               ; ## "0<>"  auto  ANS core ext
002C8Dr 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002C8Dr 3               
002C8Dr 3               xt_zero_unequal:
002C8Dr 3  20 rr rr                     jsr underflow_1
002C90r 3               
002C90r 3  A0 00                        ldy #0          ; default false
002C92r 3               
002C92r 3  B5 00                        lda 0,x
002C94r 3  15 01                        ora 1,x
002C96r 3  F0 01                        beq @got_zero
002C98r 3               
002C98r 3  88                           dey
002C99r 3               @got_zero:
002C99r 3  98                           tya
002C9Ar 3  95 00                        sta 0,x
002C9Cr 3  95 01                        sta 1,x
002C9Er 3               
002C9Er 3  60           z_zero_unequal: rts
002C9Fr 3               
002C9Fr 3               
002C9Fr 3               
002C9Fr 3               ; ==========================================================
002C9Fr 3               ; EDITOR words
002C9Fr 3               
002C9Fr 3               ; This routine is used by both enter-screen and erase-screen
002C9Fr 3               ; to get a buffer for the given screen number and set SCR to
002C9Fr 3               ; the given screen number.  This word is not in the dictionary.
002C9Fr 3               xt_editor_screen_helper:
002C9Fr 3  20 rr rr                     jsr xt_dup
002CA2r 3  20 rr rr                     jsr xt_scr
002CA5r 3  20 rr rr                     jsr xt_store
002CA8r 3  20 rr rr                     jsr xt_buffer
002CABr 3               z_editor_screen_helper:
002CABr 3  60                           rts
002CACr 3               
002CACr 3               
002CACr 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002CACr 3               ; ## "enter-screen"  auto  Tali Editor
002CACr 3               
002CACr 3               xt_editor_enter_screen:
002CACr 3                               ; Set the variable SCR and get a buffer for the
002CACr 3                               ; given screen number.
002CACr 3  20 rr rr                     jsr xt_editor_screen_helper
002CAFr 3               
002CAFr 3                               ; Drop the buffer address.
002CAFr 3  20 rr rr                     jsr xt_drop
002CB2r 3               
002CB2r 3                               ; Overwrite the lines one at a time.
002CB2r 3  64 rr                        stz editor1
002CB4r 3               @prompt_loop:
002CB4r 3                               ; Put the current line number on the stack.
002CB4r 3  CA                           dex
002CB5r 3  CA                           dex
002CB6r 3  A5 rr                        lda editor1
002CB8r 3  95 00                        sta 0,x
002CBAr 3  74 01                        stz 1,x
002CBCr 3               
002CBCr 3                               ; Use the O word to prompt for overwrite.
002CBCr 3  20 rr rr                     jsr xt_editor_o
002CBFr 3               
002CBFr 3                               ; Move on to the next line.
002CBFr 3  E6 rr                        inc editor1
002CC1r 3  A9 10                        lda #16
002CC3r 3  C5 rr                        cmp editor1
002CC5r 3  D0 ED                        bne @prompt_loop
002CC7r 3               
002CC7r 3               z_editor_enter_screen:
002CC7r 3  60                           rts
002CC8r 3               
002CC8r 3               
002CC8r 3               
002CC8r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002CC8r 3               ; ## "erase-screen"  tested  Tali Editor
002CC8r 3               xt_editor_erase_screen:
002CC8r 3                               ; Set the variable SCR and get a buffer for the
002CC8r 3                               ; given screen number.
002CC8r 3  20 rr rr                     jsr xt_editor_screen_helper
002CCBr 3               
002CCBr 3                               ; Put 1024 (chars/screen) on stack.
002CCBr 3  CA                           dex
002CCCr 3  CA                           dex
002CCDr 3  74 00                        stz 0,x
002CCFr 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002CD1r 3  95 01                        sta 1,x
002CD3r 3               
002CD3r 3                               ; Erase the entire block (fill with spaces).
002CD3r 3  20 rr rr                     jsr xt_blank
002CD6r 3               
002CD6r 3                               ; Mark buffer as updated.
002CD6r 3  20 rr rr                     jsr xt_update
002CD9r 3               
002CD9r 3               z_editor_erase_screen:
002CD9r 3  60                           rts
002CDAr 3               
002CDAr 3               
002CDAr 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002CDAr 3               ; ## "el"  tested  Tali Editor
002CDAr 3               xt_editor_el:
002CDAr 3                               ; Turn the line number into buffer offset.
002CDAr 3                               ; This also loads the block into the buffer if it's
002CDAr 3                               ; not there for some reason.
002CDAr 3  20 rr rr                     jsr xt_editor_line
002CDDr 3               
002CDDr 3                               ; Put 64 (# of chars/line) on the stack.
002CDDr 3  CA                           dex
002CDEr 3  CA                           dex
002CDFr 3  A9 40                        lda #64
002CE1r 3  95 00                        sta 0,x
002CE3r 3  74 01                        stz 1,x
002CE5r 3               
002CE5r 3                               ; Fill with spaces.
002CE5r 3  20 rr rr                     jsr xt_blank
002CE8r 3               
002CE8r 3                               ; Mark buffer as updated.
002CE8r 3  20 rr rr                     jsr xt_update
002CEBr 3               
002CEBr 3  60           z_editor_el:    rts
002CECr 3               
002CECr 3               
002CECr 3               ; ## EDITOR_L ( -- ) "List the current screen"
002CECr 3               ; ## "l"  tested  Tali Editor
002CECr 3               
002CECr 3               xt_editor_l:
002CECr 3                               ; Load the current screen
002CECr 3  CA                           dex             ; Put SCR on the stack.
002CEDr 3  CA                           dex
002CEEr 3  A0 02                        ldy #scr_offset
002CF0r 3  B1 rr                        lda (up),y
002CF2r 3  95 00                        sta 0,x
002CF4r 3  C8                           iny
002CF5r 3  B1 rr                        lda (up),y
002CF7r 3  95 01                        sta 1,x
002CF9r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002CFCr 3               
002CFCr 3  20 rr rr                     jsr xt_cr
002CFFr 3               
002CFFr 3                               ; Print the screen number.
002CFFr 3                               ; We're using sliteral, so we need to set up the
002CFFr 3                               ; appropriate data structure (see sliteral)
002CFFr 3  80 08                        bra @after_screen_msg
002D01r 3               
002D01r 3               @screen_msg:
002D01r 3  53 63 72 65                  .byte "Screen #"
002D05r 3  65 6E 20 23  
002D09r 3               
002D09r 3               @after_screen_msg:
002D09r 3  20 rr rr                     jsr sliteral_runtime
002D0Cr 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002D10r 3               
002D10r 3  20 rr rr                     jsr xt_type
002D13r 3               
002D13r 3                               ; Put the screen number and printed size for u.r on the stack.
002D13r 3  20 rr rr                     jsr xt_scr
002D16r 3  20 rr rr                     jsr xt_fetch
002D19r 3  CA                           dex
002D1Ar 3  CA                           dex
002D1Br 3  A9 04                        lda #4          ; four spaces
002D1Dr 3  95 00                        sta 0,x
002D1Fr 3  74 01                        stz 1,x
002D21r 3  20 rr rr                     jsr xt_u_dot_r
002D24r 3               
002D24r 3                               ; The address of the buffer is currently on the stack.
002D24r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002D24r 3                               ; keep track of the line number in tmp3.
002D24r 3  64 rr                        stz tmp3
002D26r 3               
002D26r 3               @line_loop:
002D26r 3  20 rr rr                     jsr xt_cr
002D29r 3               
002D29r 3                               ; Print the line number (2-space fixed width)
002D29r 3  CA                           dex
002D2Ar 3  CA                           dex
002D2Br 3  CA                           dex
002D2Cr 3  CA                           dex
002D2Dr 3  74 03                        stz 3,x
002D2Fr 3  A5 rr                        lda tmp3
002D31r 3  95 02                        sta 2,x
002D33r 3  74 01                        stz 1,x
002D35r 3  A9 02                        lda #2
002D37r 3  95 00                        sta 0,x
002D39r 3  20 rr rr                     jsr xt_u_dot_r
002D3Cr 3  20 rr rr                     jsr xt_space
002D3Fr 3               
002D3Fr 3                               ; Print one line using the address on the stack.
002D3Fr 3  20 rr rr                     jsr xt_dup
002D42r 3  CA                           dex
002D43r 3  CA                           dex
002D44r 3  A9 40                        lda #64
002D46r 3  95 00                        sta 0,x
002D48r 3  74 01                        stz 1,x
002D4Ar 3  20 rr rr                     jsr xt_type
002D4Dr 3               
002D4Dr 3                               ; Add 64 to the address on the stack to move to the next line.
002D4Dr 3  18                           clc
002D4Er 3  A9 40                        lda #64
002D50r 3  75 00                        adc 0,x
002D52r 3  95 00                        sta 0,x
002D54r 3  B5 01                        lda 1,x
002D56r 3  69 00                        adc #0      ; Add carry
002D58r 3  95 01                        sta 1,x
002D5Ar 3               
002D5Ar 3                               ; Increment the line number (held in tmp3)
002D5Ar 3  E6 rr                        inc tmp3
002D5Cr 3               
002D5Cr 3                               ; See if we are done.
002D5Cr 3  A5 rr                        lda tmp3
002D5Er 3  C9 10                        cmp #16
002D60r 3  D0 C4                        bne @line_loop
002D62r 3               
002D62r 3  20 rr rr                     jsr xt_cr
002D65r 3                               ; Drop the address on the stack.
002D65r 3  E8                           inx
002D66r 3  E8                           inx
002D67r 3               
002D67r 3  60           z_editor_l:            rts
002D68r 3               
002D68r 3               
002D68r 3               
002D68r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002D68r 3               ; ## "line"  tested  Tali Editor
002D68r 3               
002D68r 3               xt_editor_line:
002D68r 3  20 rr rr                     jsr underflow_1
002D6Br 3               
002D6Br 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002D6Br 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002D6Dr 3               @shift_tos_left:
002D6Dr 3  16 00                        asl 0,x         ; Shift TOS to the left
002D6Fr 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002D71r 3  88                           dey
002D72r 3  D0 F9                        bne @shift_tos_left
002D74r 3                               ; Load the current screen into a buffer
002D74r 3                               ; and get the buffer address
002D74r 3  20 rr rr                     jsr xt_scr
002D77r 3  20 rr rr                     jsr xt_fetch
002D7Ar 3  20 rr rr                     jsr xt_block
002D7Dr 3               
002D7Dr 3                               ; Add the offset to the buffer base address.
002D7Dr 3  20 rr rr                     jsr xt_plus
002D80r 3               
002D80r 3  60           z_editor_line:  rts
002D81r 3               
002D81r 3               
002D81r 3               
002D81r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002D81r 3               ; ## "o"  tested  Tali Editor
002D81r 3               xt_editor_o:
002D81r 3                               ; Print prompt
002D81r 3  20 rr rr                     jsr xt_cr
002D84r 3  20 rr rr                     jsr xt_dup
002D87r 3  20 rr rr                     jsr xt_two
002D8Ar 3  20 rr rr                     jsr xt_u_dot_r
002D8Dr 3  20 rr rr                     jsr xt_space
002D90r 3  A9 2A                        lda #42         ; ASCII for *
002D92r 3  20 rr rr                     jsr emit_a
002D95r 3  20 rr rr                     jsr xt_space
002D98r 3               
002D98r 3                               ; Accept new input (directly into the buffer)
002D98r 3  20 rr rr                     jsr xt_editor_line
002D9Br 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002D9Er 3  CA                           dex
002D9Fr 3  CA                           dex
002DA0r 3  A9 40                        lda #64         ; chars/line
002DA2r 3  95 00                        sta 0,x
002DA4r 3  74 01                        stz 1,x
002DA6r 3  20 rr rr                     jsr xt_accept
002DA9r 3               
002DA9r 3                               ; Fill the rest with spaces.
002DA9r 3                               ; Stack is currently ( line_address numchars_from_accept )
002DA9r 3  20 rr rr                     jsr xt_dup
002DACr 3  20 rr rr                     jsr xt_not_rote ; -rot
002DAFr 3  20 rr rr                     jsr xt_plus
002DB2r 3  CA                           dex
002DB3r 3  CA                           dex
002DB4r 3  A9 40                        lda #64         ; chars/line
002DB6r 3  95 00                        sta 0,x
002DB8r 3  74 01                        stz 1,x
002DBAr 3  20 rr rr                     jsr xt_rot
002DBDr 3  20 rr rr                     jsr xt_minus
002DC0r 3  20 rr rr                     jsr xt_blank
002DC3r 3               
002DC3r 3                               ; Mark buffer as updated.
002DC3r 3  20 rr rr                     jsr xt_update
002DC6r 3               
002DC6r 3  60           z_editor_o:     rts
002DC7r 3               
002DC7r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002DC7r 3               ; ## "lcdput" coded Custom
002DC7r 3               xt_lcdput:
002DC7r 3  20 rr rr                     jsr underflow_1
002DCAr 3               
002DCAr 3  B5 00                        lda 0,x
002DCCr 3                       .ifdef lcd_print
002DCCr 3  20 rr rr                     jsr lcd_print
002DCFr 3                       .endif
002DCFr 3  E8                           inx
002DD0r 3  E8                           inx
002DD1r 3  60           z_lcdput: rts
002DD2r 3               
002DD2r 3               
002DD2r 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002DD2r 3               ; ## "lcdprint"  coded Custom
002DD2r 3               
002DD2r 3               xt_lcdprint:
002DD2r 3  20 rr rr                     jsr underflow_2
002DD5r 3               
002DD5r 3                               ; Save the starting address into tmp1
002DD5r 3  B5 02                        lda 2,x
002DD7r 3  85 rr                        sta tmp1
002DD9r 3  B5 03                        lda 3,x
002DDBr 3  85 rr                        sta tmp1+1
002DDDr 3               @loop:
002DDDr 3                               ; done if length is zero
002DDDr 3  B5 00                        lda 0,x
002DDFr 3  15 01                        ora 1,x
002DE1r 3  F0 15                        beq @done
002DE3r 3               
002DE3r 3                               ; Send the current character
002DE3r 3  B2 rr                        lda (tmp1)
002DE5r 3                       .ifdef lcd_print
002DE5r 3  20 rr rr                     jsr lcd_print      ; avoids stack foolery
002DE8r 3                       .endif
002DE8r 3                               ; Move the address along (in tmp1)
002DE8r 3  E6 rr                        inc tmp1
002DEAr 3  D0 02                        bne @1
002DECr 3  E6 rr                        inc tmp1+1
002DEEr 3               @1:
002DEEr 3                               ; Reduce the count (on the data stack)
002DEEr 3  B5 00                        lda 0,x
002DF0r 3  D0 02                        bne @2
002DF2r 3  D6 01                        dec 1,x
002DF4r 3               @2:
002DF4r 3  D6 00                        dec 0,x
002DF6r 3               
002DF6r 3  80 E5                        bra @loop
002DF8r 3               @done:
002DF8r 3  E8                           inx
002DF9r 3  E8                           inx
002DFAr 3  E8                           inx
002DFBr 3  E8                           inx
002DFCr 3               
002DFCr 3  60           z_lcdprint:         rts
002DFDr 3               
002DFDr 3               
002DFDr 3               
002DFDr 3               ; ## CLS ( -- ) "clea VGA screen"
002DFDr 3               ; ## "cls" coded Custom
002DFDr 3               xt_cls:
002DFDr 3                       .ifdef vga_clear
002DFDr 3                               jsr vga_clear
002DFDr 3                       .endif
002DFDr 3               
002DFDr 3  60           z_cls: rts
002DFEr 3               
002DFEr 3               
002DFEr 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002DFEr 3               ; ## "spi_init" coded Custom
002DFEr 3               xt_spi_init:
002DFEr 3                       .ifdef spi_init
002DFEr 3                               jsr spi_init
002DFEr 3                       .endif
002DFEr 3  60           z_spi_init: rts
002DFFr 3               
002DFFr 3               
002DFFr 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002DFFr 3               ; ## "spi_clk_toggle" coded Custom
002DFFr 3               xt_spi_clk_toggle:
002DFFr 3                       .ifdef spi_clk_toggle
002DFFr 3                               jsr spi_clk_toggle
002DFFr 3                       .endif
002DFFr 3  60           z_spi_clk_toggle: rts
002E00r 3               
002E00r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002E00r 3               ; ## "spi_select" coded Custom
002E00r 3               xt_spi_select:
002E00r 3  20 rr rr                     jsr underflow_1
002E03r 3               
002E03r 3  B5 00                        lda 0,x
002E05r 3                       .ifdef spi_select
002E05r 3                               jsr spi_select
002E05r 3                       .endif
002E05r 3  E8                           inx
002E06r 3  E8                           inx
002E07r 3  60           z_spi_select: rts
002E08r 3               
002E08r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002E08r 3               ; ## "spi_transceive" coded Custom
002E08r 3               xt_spi_transceive:
002E08r 3  20 rr rr                     jsr underflow_1
002E0Br 3               
002E0Br 3  B5 00                        lda 0,x
002E0Dr 3                       .ifdef spi_transceive
002E0Dr 3                               jsr spi_transceive
002E0Dr 3                       .endif
002E0Dr 3  95 00                        sta 0,x         ; put return value in TOS
002E0Fr 3  74 01                        stz 1,X         ;reset value there
002E11r 3  60           z_spi_transceive: rts
002E12r 3               
002E12r 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002E12r 3               ; ## "spi_transceive" coded Custom
002E12r 3               xt_sd_init:
002E12r 3  20 rr rr                     jsr underflow_1
002E15r 3               
002E15r 3  B5 00                        lda 0,x
002E17r 3                       .ifdef sd_init
002E17r 3                               jsr sd_init
002E17r 3                       .endif
002E17r 3  95 00                        sta 0,x         ; put return value in TOS
002E19r 3  74 01                        stz 1,X         ;reset value there
002E1Br 3  60           z_sd_init: rts
002E1Cr 3               
002E1Cr 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002E1Cr 3               ; ## "sd_readsector" coded Custom
002E1Cr 3               xt_sd_readsector:
002E1Cr 3  20 rr rr                     jsr underflow_3
002E1Fr 3                       .ifdef sd_readsector
002E1Fr 3                               ; get and save storage address
002E1Fr 3                               lda 0,x
002E1Fr 3                               sta sd_buffer_address
002E1Fr 3                               lda 1, x
002E1Fr 3                               sta sd_buffer_address + 1
002E1Fr 3                               ; get and save sector number (32 bit number, double)
002E1Fr 3                               lda 2, X
002E1Fr 3                               sta SD_ARG + 3
002E1Fr 3                               lda 3, X
002E1Fr 3                               sta SD_ARG + 2
002E1Fr 3                               lda 4, X
002E1Fr 3                               sta SD_ARG + 1
002E1Fr 3                               lda 5, X
002E1Fr 3                               sta SD_ARG
002E1Fr 3                               lda #1
002E1Fr 3                               sta SD_CRC
002E1Fr 3               
002E1Fr 3                               jsr sd_readsector
002E1Fr 3                       .endif
002E1Fr 3  95 00                        sta 0,x         ; put return value in TOS
002E21r 3  74 01                        stz 1,X         ;reset value there
002E23r 3               
002E23r 3  E8                           inx
002E24r 3  E8                           inx
002E25r 3  E8                           inx
002E26r 3  E8                           inx
002E27r 3               
002E27r 3  60           z_sd_readsector: rts
002E28r 3               
002E28r 3               
002E28r 3               ; ## FAT32_INIT ( u -- u ) "initialize FAT32 file system on passed spi drive address"
002E28r 3               ; ## "fat32_init" coded Custom
002E28r 3               xt_fat32_init:
002E28r 3  20 rr rr                     jsr underflow_1
002E2Br 3               
002E2Br 3  B5 00                        lda 0,x
002E2Dr 3                       .ifdef sd_init
002E2Dr 3                               jsr sd_init
002E2Dr 3                               bne @error
002E2Dr 3                       .endif
002E2Dr 3                       .ifdef fat32_init
002E2Dr 3                               jsr fat32_init
002E2Dr 3                               beq @end
002E2Dr 3                       .endif
002E2Dr 3                       .ifdef fat32_openroot
002E2Dr 3                               ; jsr fat32_openroot
002E2Dr 3                               ; beq @end
002E2Dr 3                       .endif
002E2Dr 3               @error:
002E2Dr 3  A9 01                        lda #1
002E2Fr 3               @end:
002E2Fr 3  95 00                        sta 0,x         ; put return value in TOS
002E31r 3  74 01                        stz 1,X         ;reset value there
002E33r 3  60           z_fat32_init: rts
002E34r 3               
002E34r 3               
002E34r 3               ; ## FAT32_ROOT ( -- u ) "initialize FAT32 file system on passed spi drive address"
002E34r 3               ; ## "fat32_root" coded Custom
002E34r 3               xt_fat32_root:
002E34r 3               
002E34r 3  CA                   dex
002E35r 3  CA                   dex
002E36r 3                       .ifdef fat32_openroot
002E36r 3                               jsr fat32_openroot
002E36r 3                               beq @end
002E36r 3                       .endif
002E36r 3                       ; .ifdef fat32_readdirent
002E36r 3                       ;         jsr fat32_readdirent
002E36r 3                       ;         bcc @end
002E36r 3                       ; .endif
002E36r 3               
002E36r 3               @error:
002E36r 3  A9 01                lda #1
002E38r 3               @end:
002E38r 3               
002E38r 3  95 00                sta 0,x         ; put return value in TOS
002E3Ar 3  74 01                stz 1,X         ;reset value there
002E3Cr 3  60           z_fat32_root: rts
002E3Dr 3               
002E3Dr 3               ; ## FAT32_FIND ( addr u -- u ) "Open file from initialized fat32 FS"
002E3Dr 3               ; ## "fat32_find" coded Custom
002E3Dr 3               xt_fat32_find:
002E3Dr 3               .ifdef fat32_finddirent
002E3Dr 3               textfile:  .byte "FILE.TXT   ", 0
002E3Dr 3                               lda #<textfile
002E3Dr 3                               sta fat32_filenamepointer
002E3Dr 3                               lda #>textfile
002E3Dr 3                               sta fat32_filenamepointer+1
002E3Dr 3               
002E3Dr 3                               jsr fat32_finddirent    ; find the file from its name
002E3Dr 3                               bne @error
002E3Dr 3               
002E3Dr 3                               jsr fat32_file_read
002E3Dr 3                               bne @error
002E3Dr 3                               dex
002E3Dr 3                               dex
002E3Dr 3                               lda sd_buffer_address
002E3Dr 3                               sta 0,x
002E3Dr 3                               lda sd_buffer_address+1
002E3Dr 3                               sta 1, x
002E3Dr 3               ;                 phy
002E3Dr 3               ;         ldy #0
002E3Dr 3               ; @printloop:
002E3Dr 3               ;         lda (sd_buffer_address),y
002E3Dr 3               ;         beq @ex
002E3Dr 3               ;         jsr kernel_putc
002E3Dr 3               ; @ex:
002E3Dr 3               ;         ply
002E3Dr 3                       jmp @end
002E3Dr 3               
002E3Dr 3                               jmp @end
002E3Dr 3               
002E3Dr 3                               jsr underflow_2
002E3Dr 3                               phy
002E3Dr 3                               ldy 0,x ; length of string
002E3Dr 3                               lda #0
002E3Dr 3               @reset_loop:
002E3Dr 3                           .ifdef fat32_finddirent
002E3Dr 3                               sta (fat32_filenamepointer),y
002E3Dr 3                               iny
002E3Dr 3                               cpy #11
002E3Dr 3                               bcc @reset_loop
002E3Dr 3                           .endif
002E3Dr 3                               inx     ; get address
002E3Dr 3                               inx
002E3Dr 3                           .ifdef fat32_finddirent
002E3Dr 3                               lda 0,x
002E3Dr 3                               sta fat32_filenamepointer
002E3Dr 3                               lda 1,x
002E3Dr 3                               sta fat32_filenamepointer+1
002E3Dr 3                           .endif
002E3Dr 3               
002E3Dr 3                               ply
002E3Dr 3                           .ifdef fat32_finddirent
002E3Dr 3                               jsr fat32_finddirent    ; find the file from its name
002E3Dr 3                               beq @end
002E3Dr 3                           .endif
002E3Dr 3               .endif
002E3Dr 3               @error:
002E3Dr 3  A9 01                        lda #1
002E3Fr 3               @end:
002E3Fr 3  95 00                        sta 0,x         ; put return value in TOS
002E41r 3  74 01                        stz 1,X         ;reset value there
002E43r 3  60           z_fat32_find: rts
002E44r 3               
002E44r 3               ; ## time ( -- addr ) "get time storage address"
002E44r 3               ; ## "time" coded Custom
002E44r 3               xt_time:
002E44r 3                       .ifdef time
002E44r 3  A9 rr                lda #time
002E46r 3                       .else
002E46r 3                       lda #0
002E46r 3                       .endif
002E46r 3  CA                   dex
002E47r 3  CA                   dex
002E48r 3  95 00                sta 0,x
002E4Ar 3  74 01                stz 1,x
002E4Cr 3               
002E4Cr 3               
002E4Cr 3  60           z_time: rts
002E4Dr 3               
002E4Dr 3               xt_cf_init:
002E4Dr 3               .ifdef cf_init
002E4Dr 3                       ; jsr underflow_1
002E4Dr 3                       ; save CF card address
002E4Dr 3                       ; lda 0, x
002E4Dr 3                       ; sta CF_ADDRESS
002E4Dr 3                       ; lda 1, x
002E4Dr 3                       ; sta CF_ADDRESS + 1
002E4Dr 3  20 rr rr             jsr cf_init
002E50r 3                       ; inx
002E50r 3                       ; inx
002E50r 3               .endif
002E50r 3               z_cf_init:
002E50r 3  60                   rts
002E51r 3               
002E51r 3               ; ## cf_fat_init ( addr -- ) "Initialize FAT16 on CF card at specified address"
002E51r 3               ; ## "cf_fat_init" coded Custom
002E51r 3               xt_cf_fat_init:
002E51r 3               check_fat_sector_signature:
002E51r 3               
002E51r 3               .ifdef cf_init
002E51r 3                       ; jsr underflow_1
002E51r 3                       ; save CF card address
002E51r 3                       ; lda 0, x
002E51r 3                       ; sta CF_ADDRESS
002E51r 3                       ; lda 1, x
002E51r 3                       ; sta CF_ADDRESS + 1
002E51r 3               
002E51r 3                       ; initialize CF card
002E51r 3  20 rr rr             jsr cf_init
002E54r 3                       ; prepare to read first sector
002E54r 3  9C rr rr             stz CF_LBA
002E57r 3  9C rr rr             stz CF_LBA + 1
002E5Ar 3  9C rr rr             stz CF_LBA + 2
002E5Dr 3  9C rr rr             stz CF_LBA + 3
002E60r 3               
002E60r 3               
002E60r 3                       ; LBA is set, now read sector
002E60r 3  20 rr rr             jsr cf_read_sector
002E63r 3                       ; we now have the first sector in FAT_BUFFER
002E63r 3               .ifdef check_fat_sector_signature
002E63r 3                       ; check signature
002E63r 3  AD rr rr             lda FAT_BUFFER + $1FE
002E66r 3  C9 55                cmp #$55
002E68r 3  D0 07                bne @sigerr
002E6Ar 3  AD rr rr             lda FAT_BUFFER + $1FF
002E6Dr 3  C9 AA                cmp #$AA
002E6Fr 3  F0 03                beq @sigok
002E71r 3               @sigerr:
002E71r 3  4C rr rr             jmp cf_fat_init_error
002E74r 3               @sigok:
002E74r 3               .endif
002E74r 3                       ; read FAT start sector
002E74r 3                       ; and save to sector address to read
002E74r 3  AD rr rr             lda FAT_BUFFER + 454
002E77r 3  8D rr rr             sta CF_LBA
002E7Ar 3  8D rr rr             sta CF_PART_START
002E7Dr 3  AD rr rr             lda FAT_BUFFER + 455
002E80r 3  8D rr rr             sta CF_LBA + 1
002E83r 3  8D rr rr             sta CF_PART_START + 1
002E86r 3  AD rr rr             lda FAT_BUFFER + 456
002E89r 3  8D rr rr             sta CF_LBA + 2
002E8Cr 3  8D rr rr             sta CF_PART_START + 2
002E8Fr 3  AD rr rr             lda FAT_BUFFER + 457
002E92r 3  8D rr rr             sta CF_LBA + 3
002E95r 3  8D rr rr             sta CF_PART_START + 3
002E98r 3               
002E98r 3                       ; LBA is set, now read sector
002E98r 3  20 rr rr             jsr cf_read_sector
002E9Br 3                       ; We now have the FAT start sector in the buffer
002E9Br 3               .ifdef check_fat_sector_signature
002E9Br 3                       ; check signature
002E9Br 3  AD rr rr             lda FAT_BUFFER + $1FE
002E9Er 3  C9 55                cmp #$55
002EA0r 3  D0 07                bne @sigerr2
002EA2r 3  AD rr rr             lda FAT_BUFFER + $1FF
002EA5r 3  C9 AA                cmp #$AA
002EA7r 3  F0 03                beq @sigok2
002EA9r 3               @sigerr2:
002EA9r 3  4C rr rr             jmp cf_fat_init_error2
002EACr 3               @sigok2:
002EACr 3               .endif
002EACr 3                       ; Save FAT sectors count
002EACr 3  AD rr rr 8D          cp16 FAT_BUFFER + 22, CF_FAT_SEC_CNT
002EB0r 3  rr rr AD rr  
002EB4r 3  rr 8D rr rr  
002EB8r 3                       ; Get the sectors per cluster
002EB8r 3  AD rr rr             lda FAT_BUFFER + 13
002EBBr 3  8D rr rr             sta CF_SEC_PER_CLUS
002EBEr 3                       ; get the number of directory entries in the root directory
002EBEr 3  AD rr rr 8D          cp16 FAT_BUFFER + 17, CF_ROOT_ENT_CNT
002EC2r 3  rr rr AD rr  
002EC6r 3  rr 8D rr rr  
002ECAr 3               
002ECAr 3                       ;($600 * 32 + 511) / 512
002ECAr 3                       ; RootDirSectors = ((BPB_RootEntCnt * 32) + (BPB_BytsPerSec – 1)) / BPB_BytsPerSec;
002ECAr 3  AD rr rr 8D          cp16 CF_ROOT_ENT_CNT, CF_ROOT_DIR_SECS
002ECEr 3  rr rr AD rr  
002ED2r 3  rr 8D rr rr  
002ED6r 3                       ; multiply by 32
002ED6r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002EDAr 3  rr rr        
002EDCr 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002EE0r 3  rr rr        
002EE2r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002EE6r 3  rr rr        
002EE8r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002EECr 3  rr rr        
002EEEr 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002EF2r 3  rr rr        
002EF4r 3                       ; add 512
002EF4r 3  EE rr rr             inc CF_ROOT_DIR_SECS+1
002EF7r 3  EE rr rr             inc CF_ROOT_DIR_SECS+1
002EFAr 3                       ; subtract 1
002EFAr 3  AD rr rr D0          dec16 CF_ROOT_DIR_SECS
002EFEr 3  03 CE rr rr  
002F02r 3  CE rr rr     
002F05r 3                       ; divide by 512
002F05r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F09r 3  rr rr        
002F0Br 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F0Fr 3  rr rr        
002F11r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F15r 3  rr rr        
002F17r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F1Br 3  rr rr        
002F1Dr 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F21r 3  rr rr        
002F23r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F27r 3  rr rr        
002F29r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F2Dr 3  rr rr        
002F2Fr 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F33r 3  rr rr        
002F35r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002F39r 3  rr rr        
002F3Br 3               
002F3Br 3                       ; FirstRootDirSecNum = BPB_ResvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
002F3Br 3                       ; CF_FIRST_ROOT_SEC = 1 + 2*CF_FAT_SEC_CNT
002F3Br 3               
002F3Br 3  AD rr rr 8D          cp16 CF_FAT_SEC_CNT, CF_FIRST_ROOT_SEC
002F3Fr 3  rr rr AD rr  
002F43r 3  rr 8D rr rr  
002F47r 3  0E rr rr 2E          asl16 CF_FIRST_ROOT_SEC
002F4Br 3  rr rr        
002F4Dr 3  EE rr rr D0          inc16 CF_FIRST_ROOT_SEC
002F51r 3  03 EE rr rr  
002F55r 3               
002F55r 3                       ; FirstDataSector = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors;
002F55r 3                       ; CF_FIRST_DATA_SEC = 1 + 2*CF_FAT_SEC_CNT + CF_ROOT_DIR_SECS
002F55r 3  18 AD rr rr          add16 CF_FIRST_ROOT_SEC, CF_ROOT_DIR_SECS, CF_FIRST_DATA_SEC
002F59r 3  6D rr rr 8D  
002F5Dr 3  rr rr AD rr  
002F68r 3               
002F68r 3                       ; print volume label
002F68r 3  AD rr rr 20          printstr FAT_BUFFER + 43, 11
002F6Cr 3  rr rr AD rr  
002F70r 3  rr 20 rr rr  
002FAAr 3  DA A2 00 BD          printascii cf_fat_mounted_message
002FAEr 3  rr rr F0 06  
002FB2r 3  20 rr rr E8  
002FB9r 3  20 rr rr             jsr xt_cr
002FBCr 3               
002FBCr 3               cf_fat_init_exit:
002FBCr 3  CA                   dex
002FBDr 3  CA                   dex
002FBEr 3  A9 rr                lda #<CF_LBA
002FC0r 3  95 00                sta 0, x
002FC2r 3  A9 rr                lda #>CF_LBA
002FC4r 3  95 01                sta 1, x
002FC6r 3               
002FC6r 3               .endif
002FC6r 3               z_cf_fat_init:
002FC6r 3  60                   rts
002FC7r 3               
002FC7r 3               cf_fat_init_error:
002FC7r 3  DA A2 00 BD          printascii cf_fat_mounted_error1
002FCBr 3  rr rr F0 06  
002FCFr 3  20 rr rr E8  
002FD6r 3  20 rr rr             jsr xt_cr
002FD9r 3  4C rr rr             jmp xt_abort
002FDCr 3               cf_fat_init_error2:
002FDCr 3  DA A2 00 BD          printascii cf_fat_mounted_error2
002FE0r 3  rr rr F0 06  
002FE4r 3  20 rr rr E8  
002FEBr 3  20 rr rr             jsr xt_cr
002FEEr 3  4C rr rr             jmp xt_abort
002FF1r 3               
002FF1r 3               cf_fat_mounted_message:
002FF1r 3  20 6D 6F 75          .asciiz " mounted"
002FF5r 3  6E 74 65 64  
002FF9r 3  00           
002FFAr 3               cf_fat_mounted_error1:
002FFAr 3  45 72 72 6F          .asciiz "Error reading boot sector"
002FFEr 3  72 20 72 65  
003002r 3  61 64 69 6E  
003014r 3               cf_fat_mounted_error2:
003014r 3  45 72 72 6F          .asciiz "Error reading FAT sector"
003018r 3  72 20 72 65  
00301Cr 3  61 64 69 6E  
00302Dr 3               
00302Dr 3               
00302Dr 3               xt_cf_ls:
00302Dr 3                       ; read the current directory entry
00302Dr 3                       ; and save the contents to be displayed later
00302Dr 3               
00302Dr 3               z_cf_ls:
00302Dr 3  60                   rts
00302Er 3               
00302Er 3               xt_cf_info:
00302Er 3  20 rr rr             jsr cf_init
003031r 3  20 rr rr             jsr cf_wait
003034r 3  A9 EC                lda #$EC
003036r 3  8D D7 FF             sta CF_ADDRESS + 7
003039r 3  CA                   dex
00303Ar 3  CA                   dex
00303Br 3  A9 rr                lda #<FAT_BUFFER
00303Dr 3  95 00                sta 0, x
00303Fr 3  A9 rr                lda #>FAT_BUFFER
003041r 3  95 01                sta 1, x
003043r 3  20 rr rr             jsr cf_read
003046r 3               
003046r 3  60                   rts
003047r 3               z_cf_info:
003047r 3  60                   rts
003048r 3               
003048r 3               ; ## cf_readsector ( double -- addr ) "Set LBA block and read to buffer"
003048r 3               ; ## "cf_readsector" coded Custom
003048r 3               xt_cf_readsector:
003048r 3               .ifdef cf_init
003048r 3  20 rr rr             jsr underflow_2
00304Br 3                       ; most significant part is TOS
00304Br 3  B5 00                lda 0, x
00304Dr 3  8D rr rr             sta CF_LBA + 2
003050r 3  B5 01                lda 1, x
003052r 3  8D rr rr             sta CF_LBA + 3
003055r 3                       ; least significant part is NOS
003055r 3  B5 02                lda 2, x
003057r 3  8D rr rr             sta CF_LBA + 0
00305Ar 3  B5 03                lda 3, x
00305Cr 3  8D rr rr             sta CF_LBA + 1
00305Fr 3                       ; LBA is set, now read sector
00305Fr 3  20 rr rr             jsr cf_init
003062r 3               
003062r 3  A9 rr                lda #<FAT_BUFFER
003064r 3  95 02                sta 2, x
003066r 3               
003066r 3  A9 rr                lda #>FAT_BUFFER
003068r 3               
003068r 3  95 03                sta 3, x
00306Ar 3               
00306Ar 3  20 rr rr             jsr cf_read_sector
00306Dr 3               
00306Dr 3                       ; return buffer address
00306Dr 3  E8                   inx
00306Er 3  E8                   inx
00306Fr 3               .endif
00306Fr 3               z_cf_readsector:
00306Fr 3  60                   rts
003070r 3               
003070r 3               
003070r 3               
003070r 3               ; END
003070r 3               
003070r 3               
003070r 2                   .include "headers.s"          ; Headers of native words
003070r 3               ; Dictionary Headers for Tali Forth 2
003070r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003070r 3               ; First version: 05. Dec 2016 (Liara Forth)
003070r 3               ; This version: 29. Dec 2018
003070r 3               
003070r 3               ; Dictionary headers are kept separately from the code, which allows various
003070r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
003070r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
003070r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
003070r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
003070r 3               ; is always one cell down from the current word's own nt. In the code itself,
003070r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
003070r 3               
003070r 3               ; This gives us the following header structure:
003070r 3               
003070r 3               ;              8 bit     8 bit
003070r 3               ;               LSB       MSB
003070r 3               ; nt_word ->  +--------+--------+
003070r 3               ;          +0 | Length | Status |
003070r 3               ;             +--------+--------+
003070r 3               ;          +2 | Next Header     | -> nt_next_word
003070r 3               ;             +-----------------+
003070r 3               ;          +4 | Start of Code   | -> xt_word
003070r 3               ;             +-----------------+
003070r 3               ;          +6 | End of Code     | -> z_word
003070r 3               ;             +--------+--------+
003070r 3               ;          +8 | Name   |        |
003070r 3               ;             +--------+--------+
003070r 3               ;             |        |        |
003070r 3               ;             +--------+--------+
003070r 3               ;             |        |  ...   | (name string does not end with a zero)
003070r 3               ;          +n +--------+--------+
003070r 3               
003070r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
003070r 3               ; which are:
003070r 3               
003070r 3               ;       CO - Compile Only
003070r 3               ;       IM - Immediate Word
003070r 3               ;       NN - Never Native Compile (must always be called by JSR)
003070r 3               ;       AN - Always Native Compile (may not be called by JSR)
003070r 3               ;       UF - Contains underflow check
003070r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
003070r 3               
003070r 3               ; Note there are currently two bits unused.
003070r 3               
003070r 3               ; By default, all existing words can be natively compiled (compiled inline) or
003070r 3               ; as a subroutine jump target; the system decides which variant to use based on
003070r 3               ; a threshold the user can set. By default, all user-created words are flagged
003070r 3               ; never-native. The user can override this by using the always-native word
003070r 3               ; just after defining their new word.  The NN flag forbids native compiling,
003070r 3               ; the AN flag forces it.
003070r 3               
003070r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
003070r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
003070r 3               ; more common ones first (further down in code) so they are found earlier.
003070r 3               ; Anything to do with output comes later (further up) because things will
003070r 3               ; always be slow if there is a human involved.
003070r 3               
003070r 3               ; The initial skeleton of this list was automatically generated by a script
003070r 3               ; in the tools folder and then sorted by hand.
003070r 3               
003070r 3               nt_bye:
003070r 3  03                   .byte 3         ; length of word strings
003071r 3  00                   .byte 0         ; status byte
003072r 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
003074r 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
003076r 3  rr rr                .word z_bye     ; end of code (RTS)
003078r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
00307Br 3               
00307Br 3               
00307Br 3               nt_cold:
00307Br 3  04 00                .byte 4, 0
00307Dr 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
003081r 3  rr rr        
003083r 3  63 6F 6C 64          .byte "cold"
003087r 3               
003087r 3               nt_lcdput:
003087r 3  06 10                .byte 6, UF
003089r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
00308Dr 3  rr rr        
00308Fr 3  6C 63 64 70          .byte "lcdput"
003093r 3  75 74        
003095r 3               
003095r 3               nt_lcdprint:
003095r 3  08 10                .byte 8, UF
003097r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
00309Br 3  rr rr        
00309Dr 3  6C 63 64 70          .byte "lcdprint"
0030A1r 3  72 69 6E 74  
0030A5r 3               
0030A5r 3               nt_cls:
0030A5r 3  03 00                .byte 3, 0
0030A7r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
0030ABr 3  rr rr        
0030ADr 3  63 6C 73             .byte "cls"
0030B0r 3               
0030B0r 3               .ifdef spi_init
0030B0r 3               nt_spi_init:
0030B0r 3                       .byte 8, 0
0030B0r 3                       .word nt_cls, xt_spi_init, z_spi_init
0030B0r 3                       .byte "spi_init"
0030B0r 3               
0030B0r 3               
0030B0r 3               nt_spi_clk_toggle:
0030B0r 3                       .byte 14, 0
0030B0r 3                       .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
0030B0r 3                       .byte "spi_clk_toggle"
0030B0r 3               
0030B0r 3               nt_spi_select:
0030B0r 3                       .byte 10, 0
0030B0r 3                       .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
0030B0r 3                       .byte "spi_select"
0030B0r 3               
0030B0r 3               nt_spi_transceive:
0030B0r 3                       .byte 14, 0
0030B0r 3                       .word nt_spi_select, xt_spi_transceive, z_spi_transceive
0030B0r 3                       .byte "spi_transceive"
0030B0r 3               
0030B0r 3               nt_sd_init:
0030B0r 3                       .byte 7, 0
0030B0r 3                       .word nt_spi_transceive, xt_sd_init, z_sd_init
0030B0r 3                       .byte "sd_init"
0030B0r 3               
0030B0r 3               .else
0030B0r 3               nt_sd_init:
0030B0r 3  07 00                .byte 7, 0
0030B2r 3  rr rr rr rr          .word nt_cls, xt_sd_init, z_sd_init
0030B6r 3  rr rr        
0030B8r 3  73 64 5F 69          .byte "sd_init"
0030BCr 3  6E 69 74     
0030BFr 3               .endif
0030BFr 3               
0030BFr 3               nt_cf_rs:
0030BFr 3  05 00                .byte 5, 0
0030C1r 3  rr rr rr rr          .word nt_sd_init, xt_cf_readsector, z_cf_readsector
0030C5r 3  rr rr        
0030C7r 3  63 66 5F 72          .byte "cf_rs"
0030CBr 3  73           
0030CCr 3               
0030CCr 3               nt_cf_init:
0030CCr 3  07 00                .byte 7, 0
0030CEr 3  rr rr rr rr          .word nt_cf_rs, xt_cf_init, z_cf_init
0030D2r 3  rr rr        
0030D4r 3  63 66 5F 69          .byte "cf_init"
0030D8r 3  6E 69 74     
0030DBr 3               
0030DBr 3               nt_cf_fat_init:
0030DBr 3  0A 00                .byte 10, 0
0030DDr 3  rr rr rr rr          .word nt_cf_init, xt_cf_fat_init, z_cf_fat_init
0030E1r 3  rr rr        
0030E3r 3  63 66 5F 66          .byte "cf_fatinit"
0030E7r 3  61 74 69 6E  
0030EBr 3  69 74        
0030EDr 3               nt_cf_info:
0030EDr 3  06 00                .byte 6, 0
0030EFr 3  rr rr rr rr          .word nt_cf_fat_init, xt_cf_info, z_cf_info
0030F3r 3  rr rr        
0030F5r 3  63 66 69 6E          .byte "cfinfo"
0030F9r 3  66 6F        
0030FBr 3               nt_cf_ls:
0030FBr 3  05 00                .byte 5, 0
0030FDr 3  rr rr rr rr          .word nt_cf_info, xt_cf_ls, z_cf_ls
003101r 3  rr rr        
003103r 3  63 66 5F 6C          .byte "cf_ls"
003107r 3  73           
003108r 3               
003108r 3               
003108r 3               nt_sd_readsector:
003108r 3  0D 00                .byte 13, 0
00310Ar 3  rr rr rr rr          .word nt_cf_ls, xt_sd_readsector, z_sd_readsector
00310Er 3  rr rr        
003110r 3  73 64 5F 72          .byte "sd_readsector"
003114r 3  65 61 64 73  
003118r 3  65 63 74 6F  
00311Dr 3               
00311Dr 3               
00311Dr 3               nt_fat32_init:
00311Dr 3  0A 00                .byte 10, 0
00311Fr 3  rr rr rr rr          .word nt_sd_readsector, xt_fat32_init, z_fat32_init
003123r 3  rr rr        
003125r 3  66 61 74 33          .byte "fat32_init"
003129r 3  32 5F 69 6E  
00312Dr 3  69 74        
00312Fr 3               
00312Fr 3               nt_fat32_root:
00312Fr 3  0A 00                .byte 10, 0
003131r 3  rr rr rr rr          .word nt_fat32_init, xt_fat32_root, z_fat32_root
003135r 3  rr rr        
003137r 3  66 61 74 33          .byte "fat32_root"
00313Br 3  32 5F 72 6F  
00313Fr 3  6F 74        
003141r 3               
003141r 3               nt_fat32_find:
003141r 3  0A 00                .byte 10, 0
003143r 3  rr rr rr rr          .word nt_fat32_root, xt_fat32_find, z_fat32_find
003147r 3  rr rr        
003149r 3  66 61 74 33          .byte "fat32_find"
00314Dr 3  32 5F 66 69  
003151r 3  6E 64        
003153r 3               
003153r 3               nt_time:
003153r 3  04 00                .byte 4, 0
003155r 3  rr rr rr rr          .word nt_fat32_find, xt_time, z_time
003159r 3  rr rr        
00315Br 3  74 69 6D 65          .byte "time"
00315Fr 3               
00315Fr 3               nt_ed:                  ; ed6502
00315Fr 3  02 08                .byte 2, NN
003161r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
003165r 3  rr rr        
003167r 3  65 64                .byte "ed"
003169r 3               
003169r 3  03 08        nt_see: .byte 3, NN
00316Br 3  rr rr rr rr          .word nt_ed, xt_see, z_see
00316Fr 3  rr rr        
003171r 3  73 65 65             .byte "see"
003174r 3               
003174r 3               nt_forth:
003174r 3  05 00                .byte 5, 0
003176r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
00317Ar 3  rr rr        
00317Cr 3  66 6F 72 74          .byte "forth"
003180r 3  68           
003181r 3               
003181r 3               nt_order:
003181r 3  05 00                .byte 5, 0
003183r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
003187r 3  rr rr        
003189r 3  6F 72 64 65          .byte "order"
00318Dr 3  72           
00318Er 3               
00318Er 3               nt_to_order:
00318Er 3  06 00                .byte 6, 0
003190r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
003194r 3  rr rr        
003196r 3  3E 6F 72 64          .byte ">order"
00319Ar 3  65 72        
00319Cr 3               
00319Cr 3               nt_previous:
00319Cr 3  08 00                .byte 8, 0
00319Er 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
0031A2r 3  rr rr        
0031A4r 3  70 72 65 76          .byte "previous"
0031A8r 3  69 6F 75 73  
0031ACr 3               
0031ACr 3               nt_also:
0031ACr 3  04 00                .byte 4, 0
0031AEr 3  rr rr rr rr          .word nt_previous, xt_also, z_also
0031B2r 3  rr rr        
0031B4r 3  61 6C 73 6F          .byte "also"
0031B8r 3               
0031B8r 3               nt_only:
0031B8r 3  04 00                .byte 4, 0
0031BAr 3  rr rr rr rr          .word nt_also, xt_only, z_only
0031BEr 3  rr rr        
0031C0r 3  6F 6E 6C 79          .byte "only"
0031C4r 3               
0031C4r 3               nt_forth_wordlist:      ; shares code with ZERO
0031C4r 3  0E 00                .byte 14, 0
0031C6r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
0031CAr 3  rr rr        
0031CCr 3  66 6F 72 74          .byte "forth-wordlist"
0031D0r 3  68 2D 77 6F  
0031D4r 3  72 64 6C 69  
0031DAr 3               
0031DAr 3               nt_editor_wordlist:     ; shares code with ONE
0031DAr 3  0F 00                .byte 15, 0
0031DCr 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
0031E0r 3  rr rr        
0031E2r 3  65 64 69 74          .byte "editor-wordlist"
0031E6r 3  6F 72 2D 77  
0031EAr 3  6F 72 64 6C  
0031F1r 3               
0031F1r 3               nt_assembler_wordlist:  ; shares code with TWO
0031F1r 3  12 00                .byte 18, 0
0031F3r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
0031F7r 3  rr rr        
0031F9r 3  61 73 73 65          .byte "assembler-wordlist"
0031FDr 3  6D 62 6C 65  
003201r 3  72 2D 77 6F  
00320Br 3               
00320Br 3               nt_root_wordlist:
00320Br 3  0D 00                .byte 13, 0
00320Dr 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
003211r 3  rr rr        
003213r 3  72 6F 6F 74          .byte "root-wordlist"
003217r 3  2D 77 6F 72  
00321Br 3  64 6C 69 73  
003220r 3               
003220r 3               nt_get_order:
003220r 3  09 00                .byte 9, 0
003222r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
003226r 3  rr rr        
003228r 3  67 65 74 2D          .byte "get-order"
00322Cr 3  6F 72 64 65  
003230r 3  72           
003231r 3               
003231r 3               nt_set_order:
003231r 3  09 00                .byte 9, 0
003233r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
003237r 3  rr rr        
003239r 3  73 65 74 2D          .byte "set-order"
00323Dr 3  6F 72 64 65  
003241r 3  72           
003242r 3               
003242r 3               nt_get_current:
003242r 3  0B 00                .byte 11, 0
003244r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
003248r 3  rr rr        
00324Ar 3  67 65 74 2D          .byte "get-current"
00324Er 3  63 75 72 72  
003252r 3  65 6E 74     
003255r 3               
003255r 3               nt_set_current:
003255r 3  0B 10                .byte 11, UF
003257r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
00325Br 3  rr rr        
00325Dr 3  73 65 74 2D          .byte "set-current"
003261r 3  63 75 72 72  
003265r 3  65 6E 74     
003268r 3               
003268r 3               nt_search_wordlist:
003268r 3  0F 10                .byte 15, UF
00326Ar 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
00326Er 3  rr rr        
003270r 3  73 65 61 72          .byte "search-wordlist"
003274r 3  63 68 2D 77  
003278r 3  6F 72 64 6C  
00327Fr 3               
00327Fr 3               nt_wordlist:
00327Fr 3  08 00                .byte 8, 0
003281r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
003285r 3  rr rr        
003287r 3  77 6F 72 64          .byte "wordlist"
00328Br 3  6C 69 73 74  
00328Fr 3               
00328Fr 3               nt_definitions:
00328Fr 3  0B 00                .byte 11, 0
003291r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
003295r 3  rr rr        
003297r 3  64 65 66 69          .byte "definitions"
00329Br 3  6E 69 74 69  
00329Fr 3  6F 6E 73     
0032A2r 3               
0032A2r 3               nt_block_ramdrive_init:
0032A2r 3  13 10                .byte 19, UF
0032A4r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
0032A8r 3  rr rr        
0032AAr 3  62 6C 6F 63          .byte "block-ramdrive-init"
0032AEr 3  6B 2D 72 61  
0032B2r 3  6D 64 72 69  
0032BDr 3               
0032BDr 3               nt_list:
0032BDr 3  04 10                .byte 4, UF
0032BFr 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
0032C3r 3  rr rr        
0032C5r 3  6C 69 73 74          .byte "list"
0032C9r 3               
0032C9r 3               nt_thru:
0032C9r 3  04 10                .byte 4, UF
0032CBr 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
0032CFr 3  rr rr        
0032D1r 3  74 68 72 75          .byte "thru"
0032D5r 3               
0032D5r 3               nt_load:
0032D5r 3  04 10                .byte 4, UF
0032D7r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
0032DBr 3  rr rr        
0032DDr 3  6C 6F 61 64          .byte "load"
0032E1r 3               
0032E1r 3               nt_flush:
0032E1r 3  05 00                .byte 5, 0
0032E3r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
0032E7r 3  rr rr        
0032E9r 3  66 6C 75 73          .byte "flush"
0032EDr 3  68           
0032EEr 3               
0032EEr 3               nt_empty_buffers:
0032EEr 3  0D 00                .byte 13, 0
0032F0r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
0032F4r 3  rr rr        
0032F6r 3  65 6D 70 74          .byte "empty-buffers"
0032FAr 3  79 2D 62 75  
0032FEr 3  66 66 65 72  
003303r 3               
003303r 3               nt_buffer:
003303r 3  06 00                .byte 6, 0
003305r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
003309r 3  rr rr        
00330Br 3  62 75 66 66          .byte "buffer"
00330Fr 3  65 72        
003311r 3               
003311r 3               nt_update:
003311r 3  06 00                .byte 6, 0
003313r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
003317r 3  rr rr        
003319r 3  75 70 64 61          .byte "update"
00331Dr 3  74 65        
00331Fr 3               
00331Fr 3               nt_block:
00331Fr 3  05 00                .byte 5, 0
003321r 3  rr rr rr rr          .word nt_update, xt_block, z_block
003325r 3  rr rr        
003327r 3  62 6C 6F 63          .byte "block"
00332Br 3  6B           
00332Cr 3               
00332Cr 3               nt_save_buffers:
00332Cr 3  0C 00                .byte 12, 0
00332Er 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
003332r 3  rr rr        
003334r 3  73 61 76 65          .byte "save-buffers"
003338r 3  2D 62 75 66  
00333Cr 3  66 65 72 73  
003340r 3               
003340r 3               nt_block_read_vector:
003340r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
003342r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
003346r 3  rr rr        
003348r 3  62 6C 6F 63          .byte "block-read-vector"
00334Cr 3  6B 2D 72 65  
003350r 3  61 64 2D 76  
003359r 3               
003359r 3               nt_block_read:
003359r 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
00335Br 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
00335Fr 3  rr rr        
003361r 3  62 6C 6F 63          .byte "block-read"
003365r 3  6B 2D 72 65  
003369r 3  61 64        
00336Br 3               
00336Br 3               nt_block_write_vector:
00336Br 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
00336Dr 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
003371r 3  rr rr        
003373r 3  62 6C 6F 63          .byte "block-write-vector"
003377r 3  6B 2D 77 72  
00337Br 3  69 74 65 2D  
003385r 3               
003385r 3               nt_block_write:
003385r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
003387r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
00338Br 3  rr rr        
00338Dr 3  62 6C 6F 63          .byte "block-write"
003391r 3  6B 2D 77 72  
003395r 3  69 74 65     
003398r 3               
003398r 3               nt_blk:
003398r 3  03 00                .byte 3, 0
00339Ar 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
00339Er 3  rr rr        
0033A0r 3  62 6C 6B             .byte "blk"
0033A3r 3               
0033A3r 3               nt_scr:
0033A3r 3  03 00                .byte 3, 0
0033A5r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
0033A9r 3  rr rr        
0033ABr 3  73 63 72             .byte "scr"
0033AEr 3               
0033AEr 3               nt_blkbuffer:
0033AEr 3  09 00                .byte 9, 0
0033B0r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
0033B4r 3  rr rr        
0033B6r 3  62 6C 6B 62          .byte "blkbuffer"
0033BAr 3  75 66 66 65  
0033BEr 3  72           
0033BFr 3               
0033BFr 3               nt_buffblocknum:
0033BFr 3  0C 00                .byte 12, 0
0033C1r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
0033C5r 3  rr rr        
0033C7r 3  62 75 66 66          .byte "buffblocknum"
0033CBr 3  62 6C 6F 63  
0033CFr 3  6B 6E 75 6D  
0033D3r 3               
0033D3r 3               nt_buffstatus:
0033D3r 3  0A 00                .byte 10, 0
0033D5r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
0033D9r 3  rr rr        
0033DBr 3  62 75 66 66          .byte "buffstatus"
0033DFr 3  73 74 61 74  
0033E3r 3  75 73        
0033E5r 3               
0033E5r 3               nt_buffer_colon:
0033E5r 3  07 00                .byte 7, 0
0033E7r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
0033EBr 3  rr rr        
0033EDr 3  62 75 66 66          .byte "buffer:"
0033F1r 3  65 72 3A     
0033F4r 3               
0033F4r 3               nt_useraddr:
0033F4r 3  08 00                .byte 8, 0
0033F6r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
0033FAr 3  rr rr        
0033FCr 3  75 73 65 72          .byte "useraddr"
003400r 3  61 64 64 72  
003404r 3               
003404r 3               nt_action_of:
003404r 3  09 04                .byte 9, IM
003406r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
00340Ar 3  rr rr        
00340Cr 3  61 63 74 69          .byte "action-of"
003410r 3  6F 6E 2D 6F  
003414r 3  66           
003415r 3               
003415r 3               nt_is:
003415r 3  02 04                .byte 2, IM
003417r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
00341Br 3  rr rr        
00341Dr 3  69 73                .byte "is"
00341Fr 3               
00341Fr 3               nt_defer_store:
00341Fr 3  06 00                .byte 6, 0
003421r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
003425r 3  rr rr        
003427r 3  64 65 66 65          .byte "defer!"
00342Br 3  72 21        
00342Dr 3               
00342Dr 3               nt_defer_fetch:
00342Dr 3  06 00                .byte 6, 0
00342Fr 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
003433r 3  rr rr        
003435r 3  64 65 66 65          .byte "defer@"
003439r 3  72 40        
00343Br 3               
00343Br 3               nt_endcase:
00343Br 3  07 0D                .byte 7, IM+CO+NN
00343Dr 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
003441r 3  rr rr        
003443r 3  65 6E 64 63          .byte "endcase"
003447r 3  61 73 65     
00344Ar 3               
00344Ar 3               nt_endof:
00344Ar 3  05 0D                .byte 5, IM+CO+NN
00344Cr 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
003450r 3  rr rr        
003452r 3  65 6E 64 6F          .byte "endof"
003456r 3  66           
003457r 3               
003457r 3               nt_of:
003457r 3  02 0D                .byte 2, IM+CO+NN
003459r 3  rr rr rr rr          .word nt_endof, xt_of, z_of
00345Dr 3  rr rr        
00345Fr 3  6F 66                .byte "of"
003461r 3               
003461r 3               nt_case:
003461r 3  04 0D                .byte 4, IM+CO+NN
003463r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
003467r 3  rr rr        
003469r 3  63 61 73 65          .byte "case"
00346Dr 3               
00346Dr 3               nt_while:
00346Dr 3  05 0D                .byte 5, IM+CO+NN
00346Fr 3  rr rr rr rr          .word nt_case, xt_while, z_while
003473r 3  rr rr        
003475r 3  77 68 69 6C          .byte "while"
003479r 3  65           
00347Ar 3               
00347Ar 3               nt_until:
00347Ar 3  05 0D                .byte 5, IM+CO+NN
00347Cr 3  rr rr rr rr          .word nt_while, xt_until, z_until
003480r 3  rr rr        
003482r 3  75 6E 74 69          .byte "until"
003486r 3  6C           
003487r 3               
003487r 3               nt_repeat:
003487r 3  06 0D                .byte 6, IM+CO+NN
003489r 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
00348Dr 3  rr rr        
00348Fr 3  72 65 70 65          .byte "repeat"
003493r 3  61 74        
003495r 3               
003495r 3               nt_else:
003495r 3  04 0D                .byte 4, IM+CO+NN
003497r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
00349Br 3  rr rr        
00349Dr 3  65 6C 73 65          .byte "else"
0034A1r 3               
0034A1r 3               nt_then:
0034A1r 3  04 0D                .byte 4, IM+CO+NN
0034A3r 3  rr rr rr rr          .word nt_else, xt_then, z_then
0034A7r 3  rr rr        
0034A9r 3  74 68 65 6E          .byte "then"
0034ADr 3               
0034ADr 3               nt_if:
0034ADr 3  02 0D                .byte 2, IM+CO+NN
0034AFr 3  rr rr rr rr          .word nt_then, xt_if, z_if
0034B3r 3  rr rr        
0034B5r 3  69 66                .byte "if"
0034B7r 3               
0034B7r 3               nt_dot_paren:
0034B7r 3  02 04                .byte 2, IM
0034B9r 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
0034BDr 3  rr rr        
0034BFr 3  2E 28                .byte ".("
0034C1r 3               
0034C1r 3               nt_paren:
0034C1r 3  01 04                .byte 1, IM
0034C3r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
0034C7r 3  rr rr        
0034C9r 3  28                   .byte "("
0034CAr 3               
0034CAr 3               nt_word:
0034CAr 3  04 10                .byte 4, UF
0034CCr 3  rr rr rr rr          .word nt_paren, xt_word, z_word
0034D0r 3  rr rr        
0034D2r 3  77 6F 72 64          .byte "word"
0034D6r 3               
0034D6r 3               nt_find:
0034D6r 3  04 10                .byte 4, UF
0034D8r 3  rr rr rr rr          .word nt_word, xt_find, z_find
0034DCr 3  rr rr        
0034DEr 3  66 69 6E 64          .byte "find"
0034E2r 3               
0034E2r 3               nt_environment_q:
0034E2r 3  0C 10                .byte 12, UF
0034E4r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
0034E8r 3  rr rr        
0034EAr 3  65 6E 76 69          .byte "environment?"
0034EEr 3  72 6F 6E 6D  
0034F2r 3  65 6E 74 3F  
0034F6r 3               
0034F6r 3               nt_search:
0034F6r 3  06 18                .byte 6, UF+NN
0034F8r 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
0034FCr 3  rr rr        
0034FEr 3  73 65 61 72          .byte "search"
003502r 3  63 68        
003504r 3               
003504r 3               nt_compare:
003504r 3  07 10                .byte 7, UF
003506r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
00350Ar 3  rr rr        
00350Cr 3  63 6F 6D 70          .byte "compare"
003510r 3  61 72 65     
003513r 3               
003513r 3               nt_disasm:
003513r 3  06 10                .byte 6, UF
003515r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
003519r 3  rr rr        
00351Br 3  64 69 73 61          .byte "disasm"
00351Fr 3  73 6D        
003521r 3               
003521r 3               nt_dot_s:
003521r 3  02 00                .byte 2, 0
003523r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
003527r 3  rr rr        
003529r 3  2E 73                .byte ".s"
00352Br 3               
00352Br 3               nt_dump:
00352Br 3  04 10                .byte 4, UF
00352Dr 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
003531r 3  rr rr        
003533r 3  64 75 6D 70          .byte "dump"
003537r 3               
003537r 3               nt_bell:
003537r 3  04 00                .byte 4, 0
003539r 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
00353Dr 3  rr rr        
00353Fr 3  62 65 6C 6C          .byte "bell"
003543r 3               
003543r 3               nt_align:
003543r 3  05 00                .byte 5, 0
003545r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
003549r 3  rr rr        
00354Br 3  61 6C 69 67          .byte "align"
00354Fr 3  6E           
003550r 3               
003550r 3               nt_aligned:             ; same code as ALIGN
003550r 3  07 00                .byte 7, 0
003552r 3  rr rr rr rr          .word nt_align, xt_align, z_align
003556r 3  rr rr        
003558r 3  61 6C 69 67          .byte "aligned"
00355Cr 3  6E 65 64     
00355Fr 3               
00355Fr 3               nt_wordsize:
00355Fr 3  08 10                .byte 8, UF
003561r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
003565r 3  rr rr        
003567r 3  77 6F 72 64          .byte "wordsize"
00356Br 3  73 69 7A 65  
00356Fr 3               
00356Fr 3               nt_words:
00356Fr 3  05 00                .byte 5, 0
003571r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
003575r 3  rr rr        
003577r 3  77 6F 72 64          .byte "words"
00357Br 3  73           
00357Cr 3               
00357Cr 3               nt_marker:
00357Cr 3  06 04                .byte 6, IM
00357Er 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
003582r 3  rr rr        
003584r 3  6D 61 72 6B          .byte "marker"
003588r 3  65 72        
00358Ar 3               
00358Ar 3               nt_at_xy:
00358Ar 3  05 10                .byte 5, UF
00358Cr 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
003590r 3  rr rr        
003592r 3  61 74 2D 78          .byte "at-xy"
003596r 3  79           
003597r 3               
003597r 3               nt_page:
003597r 3  04 00                .byte 4, 0
003599r 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
00359Dr 3  rr rr        
00359Fr 3  70 61 67 65          .byte "page"
0035A3r 3               
0035A3r 3               nt_cr:
0035A3r 3  02 00                .byte 2, 0
0035A5r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
0035A9r 3  rr rr        
0035ABr 3  63 72                .byte "cr"
0035ADr 3               
0035ADr 3               nt_input:
0035ADr 3  05 00                .byte 5, 0
0035AFr 3  rr rr rr rr          .word nt_cr, xt_input, z_input
0035B3r 3  rr rr        
0035B5r 3  69 6E 70 75          .byte "input"
0035B9r 3  74           
0035BAr 3               
0035BAr 3               nt_output:
0035BAr 3  06 00                .byte 6, 0
0035BCr 3  rr rr rr rr          .word nt_input, xt_output, z_output
0035C0r 3  rr rr        
0035C2r 3  6F 75 74 70          .byte "output"
0035C6r 3  75 74        
0035C8r 3               
0035C8r 3               nt_sign:
0035C8r 3  04 10                .byte 4, UF
0035CAr 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
0035CEr 3  rr rr        
0035D0r 3  73 69 67 6E          .byte "sign"
0035D4r 3               
0035D4r 3               nt_hold:
0035D4r 3  04 10                .byte 4, UF
0035D6r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
0035DAr 3  rr rr        
0035DCr 3  68 6F 6C 64          .byte "hold"
0035E0r 3               
0035E0r 3               nt_number_sign_greater:
0035E0r 3  02 10                .byte 2, UF
0035E2r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
0035E6r 3  rr rr        
0035E8r 3  23 3E                .byte "#>"
0035EAr 3               
0035EAr 3               nt_number_sign_s:
0035EAr 3  02 10                .byte 2, UF
0035ECr 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
0035F0r 3  rr rr        
0035F2r 3  23 73                .byte "#s"
0035F4r 3               
0035F4r 3               nt_number_sign:
0035F4r 3  01 10                .byte 1, UF
0035F6r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
0035FAr 3  rr rr        
0035FCr 3  23                   .byte "#"
0035FDr 3               
0035FDr 3               nt_less_number_sign:
0035FDr 3  02 00                .byte 2, 0
0035FFr 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003603r 3  rr rr        
003605r 3  3C 23                .byte "<#"
003607r 3               
003607r 3               nt_to_in:
003607r 3  03 00                .byte 3, 0
003609r 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
00360Dr 3  rr rr        
00360Fr 3  3E 69 6E             .byte ">in"
003612r 3               
003612r 3               nt_within:
003612r 3  06 10                .byte 6, UF
003614r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
003618r 3  rr rr        
00361Ar 3  77 69 74 68          .byte "within"
00361Er 3  69 6E        
003620r 3               
003620r 3               nt_hexstore:
003620r 3  08 10                .byte 8, UF
003622r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
003626r 3  rr rr        
003628r 3  68 65 78 73          .byte "hexstore"
00362Cr 3  74 6F 72 65  
003630r 3               
003630r 3               nt_cleave:
003630r 3  06 10                .byte 6, UF
003632r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
003636r 3  rr rr        
003638r 3  63 6C 65 61          .byte "cleave"
00363Cr 3  76 65        
00363Er 3               
00363Er 3               nt_pad:
00363Er 3  03 00                .byte 3, 0
003640r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
003644r 3  rr rr        
003646r 3  70 61 64             .byte "pad"
003649r 3               
003649r 3               nt_cmove:
003649r 3  05 10                .byte 5, UF
00364Br 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
00364Fr 3  rr rr        
003651r 3  63 6D 6F 76          .byte "cmove"
003655r 3  65           
003656r 3               
003656r 3               nt_cmove_up:
003656r 3  06 10                .byte 6, UF
003658r 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
00365Cr 3  rr rr        
00365Er 3  63 6D 6F 76          .byte "cmove>"
003662r 3  65 3E        
003664r 3               
003664r 3               nt_move:
003664r 3  04 18                .byte 4, NN+UF
003666r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
00366Ar 3  rr rr        
00366Cr 3  6D 6F 76 65          .byte "move"
003670r 3               
003670r 3               nt_backslash:
003670r 3  01 04                .byte 1, IM
003672r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
003676r 3  rr rr        
003678r 3  5C                   .byte $5c
003679r 3               
003679r 3               nt_star_slash:
003679r 3  02 10                .byte 2, UF
00367Br 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
00367Fr 3  rr rr        
003681r 3  2A 2F                .byte "*/"
003683r 3               
003683r 3               nt_star_slash_mod:
003683r 3  05 10                .byte 5, UF
003685r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
003689r 3  rr rr        
00368Br 3  2A 2F 6D 6F          .byte "*/mod"
00368Fr 3  64           
003690r 3               
003690r 3               nt_mod:
003690r 3  03 10                .byte 3, UF
003692r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003696r 3  rr rr        
003698r 3  6D 6F 64             .byte "mod"
00369Br 3               
00369Br 3               nt_slash_mod:
00369Br 3  04 10                .byte 4, UF
00369Dr 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
0036A1r 3  rr rr        
0036A3r 3  2F 6D 6F 64          .byte "/mod"
0036A7r 3               
0036A7r 3               nt_slash:
0036A7r 3  01 10                .byte 1, UF
0036A9r 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
0036ADr 3  rr rr        
0036AFr 3  2F                   .byte "/"
0036B0r 3               
0036B0r 3               nt_fm_slash_mod:
0036B0r 3  06 10                .byte 6, UF
0036B2r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
0036B6r 3  rr rr        
0036B8r 3  66 6D 2F 6D          .byte "fm/mod"
0036BCr 3  6F 64        
0036BEr 3               
0036BEr 3               nt_sm_slash_rem:
0036BEr 3  06 10                .byte 6, UF
0036C0r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
0036C4r 3  rr rr        
0036C6r 3  73 6D 2F 72          .byte "sm/rem"
0036CAr 3  65 6D        
0036CCr 3               
0036CCr 3               nt_um_slash_mod:
0036CCr 3  06 10                .byte 6, UF
0036CEr 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
0036D2r 3  rr rr        
0036D4r 3  75 6D 2F 6D          .byte "um/mod"
0036D8r 3  6F 64        
0036DAr 3               
0036DAr 3               nt_star:
0036DAr 3  01 10                .byte 1, UF
0036DCr 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
0036E0r 3  rr rr        
0036E2r 3  2A                   .byte "*"
0036E3r 3               
0036E3r 3               nt_um_star:
0036E3r 3  03 10                .byte 3, UF
0036E5r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
0036E9r 3  rr rr        
0036EBr 3  75 6D 2A             .byte "um*"
0036EEr 3               
0036EEr 3               nt_m_star:
0036EEr 3  02 10                .byte 2, UF
0036F0r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
0036F4r 3  rr rr        
0036F6r 3  6D 2A                .byte "m*"
0036F8r 3               
0036F8r 3               nt_count:
0036F8r 3  05 10                .byte 5, UF
0036FAr 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
0036FEr 3  rr rr        
003700r 3  63 6F 75 6E          .byte "count"
003704r 3  74           
003705r 3               
003705r 3               nt_decimal:
003705r 3  07 00                .byte 7, 0
003707r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
00370Br 3  rr rr        
00370Dr 3  64 65 63 69          .byte "decimal"
003711r 3  6D 61 6C     
003714r 3               
003714r 3               nt_hex:
003714r 3  03 00                .byte 3, 0
003716r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
00371Ar 3  rr rr        
00371Cr 3  68 65 78             .byte "hex"
00371Fr 3               
00371Fr 3               nt_to_number:
00371Fr 3  07 10                .byte 7, UF
003721r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
003725r 3  rr rr        
003727r 3  3E 6E 75 6D          .byte ">number"
00372Br 3  62 65 72     
00372Er 3               
00372Er 3               nt_number:
00372Er 3  06 10                .byte 6, UF
003730r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
003734r 3  rr rr        
003736r 3  6E 75 6D 62          .byte "number"
00373Ar 3  65 72        
00373Cr 3               
00373Cr 3               nt_digit_question:
00373Cr 3  06 10                .byte 6, UF
00373Er 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
003742r 3  rr rr        
003744r 3  64 69 67 69          .byte "digit?"
003748r 3  74 3F        
00374Ar 3               
00374Ar 3               nt_base:
00374Ar 3  04 00                .byte 4, 0
00374Cr 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
003750r 3  rr rr        
003752r 3  62 61 73 65          .byte "base"
003756r 3               
003756r 3               nt_evaluate:
003756r 3  08 10                .byte 8, UF
003758r 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
00375Cr 3  rr rr        
00375Er 3  65 76 61 6C          .byte "evaluate"
003762r 3  75 61 74 65  
003766r 3               
003766r 3               nt_state:
003766r 3  05 00                .byte 5, 0
003768r 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
00376Cr 3  rr rr        
00376Er 3  73 74 61 74          .byte "state"
003772r 3  65           
003773r 3               
003773r 3               nt_again:
003773r 3  05 17                .byte 5, AN+CO+IM+UF
003775r 3  rr rr rr rr          .word nt_state, xt_again, z_again
003779r 3  rr rr        
00377Br 3  61 67 61 69          .byte "again"
00377Fr 3  6E           
003780r 3               
003780r 3               nt_begin:
003780r 3  05 07                .byte 5, AN+CO+IM
003782r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
003786r 3  rr rr        
003788r 3  62 65 67 69          .byte "begin"
00378Cr 3  6E           
00378Dr 3               
00378Dr 3               nt_quit:
00378Dr 3  04 00                .byte 4, 0
00378Fr 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
003793r 3  rr rr        
003795r 3  71 75 69 74          .byte "quit"
003799r 3               
003799r 3               nt_recurse:
003799r 3  07 0D                .byte 7, CO+IM+NN
00379Br 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
00379Fr 3  rr rr        
0037A1r 3  72 65 63 75          .byte "recurse"
0037A5r 3  72 73 65     
0037A8r 3               
0037A8r 3               nt_leave:
0037A8r 3  05 03                .byte 5, AN+CO
0037AAr 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
0037AEr 3  rr rr        
0037B0r 3  6C 65 61 76          .byte "leave"
0037B4r 3  65           
0037B5r 3               
0037B5r 3               nt_unloop:
0037B5r 3  06 03                .byte 6, AN+CO
0037B7r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
0037BBr 3  rr rr        
0037BDr 3  75 6E 6C 6F          .byte "unloop"
0037C1r 3  6F 70        
0037C3r 3               
0037C3r 3               nt_exit:
0037C3r 3  04 03                .byte 4, AN+CO
0037C5r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
0037C9r 3  rr rr        
0037CBr 3  65 78 69 74          .byte "exit"
0037CFr 3               
0037CFr 3               nt_plus_loop:
0037CFr 3  05 05                .byte 5, CO+IM
0037D1r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
0037D5r 3  rr rr        
0037D7r 3  2B 6C 6F 6F          .byte "+loop"
0037DBr 3  70           
0037DCr 3               
0037DCr 3               nt_loop:
0037DCr 3  04 05                .byte 4, CO+IM
0037DEr 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
0037E2r 3  rr rr        
0037E4r 3  6C 6F 6F 70          .byte "loop"
0037E8r 3               
0037E8r 3               nt_j:
0037E8r 3  01 03                .byte 1, AN+CO
0037EAr 3  rr rr rr rr          .word nt_loop, xt_j, z_j
0037EEr 3  rr rr        
0037F0r 3  6A                   .byte "j"
0037F1r 3               
0037F1r 3               nt_i:
0037F1r 3  01 03                .byte 1, AN+CO
0037F3r 3  rr rr rr rr          .word nt_j, xt_i, z_i
0037F7r 3  rr rr        
0037F9r 3  69                   .byte "i"
0037FAr 3               
0037FAr 3               nt_question_do:
0037FAr 3  03 0D                .byte 3, CO+IM+NN
0037FCr 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
003800r 3  rr rr        
003802r 3  3F 64 6F             .byte "?do"
003805r 3               
003805r 3               nt_do:
003805r 3  02 0D                .byte 2, CO+IM+NN
003807r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
00380Br 3  rr rr        
00380Dr 3  64 6F                .byte "do"
00380Fr 3               
00380Fr 3               nt_abort_quote:
00380Fr 3  06 0D                .byte 6, CO+IM+NN
003811r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
003815r 3  rr rr        
003817r 3  61 62 6F 72          .byte "abort", $22
00381Br 3  74 22        
00381Dr 3               
00381Dr 3               nt_abort:
00381Dr 3  05 00                .byte 5, 0
00381Fr 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003823r 3  rr rr        
003825r 3  61 62 6F 72          .byte "abort"
003829r 3  74           
00382Ar 3               
00382Ar 3               nt_strip_underflow:
00382Ar 3  0F 00                .byte 15, 0
00382Cr 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
003830r 3  rr rr        
003832r 3  73 74 72 69          .byte "strip-underflow"
003836r 3  70 2D 75 6E  
00383Ar 3  64 65 72 66  
003841r 3               
003841r 3               nt_nc_limit:
003841r 3  08 00                .byte 8, 0
003843r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
003847r 3  rr rr        
003849r 3  6E 63 2D 6C          .byte "nc-limit"
00384Dr 3  69 6D 69 74  
003851r 3               
003851r 3               nt_allow_native:
003851r 3  0C 00                .byte 12, 0
003853r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
003857r 3  rr rr        
003859r 3  61 6C 6C 6F          .byte "allow-native"
00385Dr 3  77 2D 6E 61  
003861r 3  74 69 76 65  
003865r 3               
003865r 3               nt_always_native:
003865r 3  0D 00                .byte 13, 0
003867r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
00386Br 3  rr rr        
00386Dr 3  61 6C 77 61          .byte "always-native"
003871r 3  79 73 2D 6E  
003875r 3  61 74 69 76  
00387Ar 3               
00387Ar 3               nt_never_native:
00387Ar 3  0C 00                .byte 12, 0
00387Cr 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
003880r 3  rr rr        
003882r 3  6E 65 76 65          .byte "never-native"
003886r 3  72 2D 6E 61  
00388Ar 3  74 69 76 65  
00388Er 3               
00388Er 3               nt_compile_only:
00388Er 3  0C 00                .byte 12, 0
003890r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
003894r 3  rr rr        
003896r 3  63 6F 6D 70          .byte "compile-only"
00389Ar 3  69 6C 65 2D  
00389Er 3  6F 6E 6C 79  
0038A2r 3               
0038A2r 3               nt_immediate:
0038A2r 3  09 00                .byte 9, 0
0038A4r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
0038A8r 3  rr rr        
0038AAr 3  69 6D 6D 65          .byte "immediate"
0038AEr 3  64 69 61 74  
0038B2r 3  65           
0038B3r 3               
0038B3r 3               nt_postpone:
0038B3r 3  08 05                .byte 8, IM+CO
0038B5r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
0038B9r 3  rr rr        
0038BBr 3  70 6F 73 74          .byte "postpone"
0038BFr 3  70 6F 6E 65  
0038C3r 3               
0038C3r 3               nt_s_backslash_quote:
0038C3r 3  03 04                .byte 3, IM
0038C5r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
0038C9r 3  rr rr        
0038CBr 3  73 5C 22             .byte "s", $5C, $22
0038CEr 3               
0038CEr 3               nt_s_quote:
0038CEr 3  02 0C                .byte 2, IM+NN
0038D0r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
0038D4r 3  rr rr        
0038D6r 3  73 22                .byte "s", $22
0038D8r 3               
0038D8r 3               nt_dot_quote:
0038D8r 3  02 05                .byte 2, CO+IM
0038DAr 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
0038DEr 3  rr rr        
0038E0r 3  2E 22                .byte ".", $22
0038E2r 3               
0038E2r 3               nt_sliteral:
0038E2r 3  08 15                .byte 8, CO+IM+UF
0038E4r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
0038E8r 3  rr rr        
0038EAr 3  73 6C 69 74          .byte "sliteral"
0038EEr 3  65 72 61 6C  
0038F2r 3               
0038F2r 3               nt_literal:
0038F2r 3  07 15                .byte 7, IM+CO+UF
0038F4r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
0038F8r 3  rr rr        
0038FAr 3  6C 69 74 65          .byte "literal"
0038FEr 3  72 61 6C     
003901r 3               
003901r 3               nt_right_bracket:
003901r 3  01 04                .byte 1, IM
003903r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003907r 3  rr rr        
003909r 3  5D                   .byte "]"
00390Ar 3               
00390Ar 3               nt_left_bracket:
00390Ar 3  01 05                .byte 1, IM+CO
00390Cr 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
003910r 3  rr rr        
003912r 3  5B                   .byte "["
003913r 3               
003913r 3               nt_compile_comma:
003913r 3  08 18                .byte 8, UF+NN
003915r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
003919r 3  rr rr        
00391Br 3  63 6F 6D 70          .byte "compile,"
00391Fr 3  69 6C 65 2C  
003923r 3               
003923r 3               nt_colon_noname:
003923r 3  07 00                .byte 7, 0
003925r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
003929r 3  rr rr        
00392Br 3  3A 6E 6F 6E          .byte ":noname"
00392Fr 3  61 6D 65     
003932r 3               
003932r 3               nt_semicolon:
003932r 3  01 05                .byte 1, CO+IM
003934r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
003938r 3  rr rr        
00393Ar 3  3B                   .byte ";"
00393Br 3               
00393Br 3               nt_colon:
00393Br 3  01 00                .byte 1, 0
00393Dr 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
003941r 3  rr rr        
003943r 3  3A                   .byte ":"
003944r 3               
003944r 3               nt_source_id:
003944r 3  09 00                .byte 9, 0
003946r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
00394Ar 3  rr rr        
00394Cr 3  73 6F 75 72          .byte "source-id"
003950r 3  63 65 2D 69  
003954r 3  64           
003955r 3               
003955r 3               nt_source:
003955r 3  06 00                .byte 6, 0
003957r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
00395Br 3  rr rr        
00395Dr 3  73 6F 75 72          .byte "source"
003961r 3  63 65        
003963r 3               
003963r 3               nt_execute_parsing:
003963r 3  0F 10                .byte 15, UF
003965r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
003969r 3  rr rr        
00396Br 3  65 78 65 63          .byte "execute-parsing"
00396Fr 3  75 74 65 2D  
003973r 3  70 61 72 73  
00397Ar 3               
00397Ar 3               nt_parse:
00397Ar 3  05 10                .byte 5, UF
00397Cr 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
003980r 3  rr rr        
003982r 3  70 61 72 73          .byte "parse"
003986r 3  65           
003987r 3               
003987r 3               nt_parse_name:
003987r 3  0A 08                .byte 10, NN
003989r 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
00398Dr 3  rr rr        
00398Fr 3  70 61 72 73          .byte "parse-name"
003993r 3  65 2D 6E 61  
003997r 3  6D 65        
003999r 3               
003999r 3               nt_latestnt:
003999r 3  08 00                .byte 8, 0
00399Br 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
00399Fr 3  rr rr        
0039A1r 3  6C 61 74 65          .byte "latestnt"
0039A5r 3  73 74 6E 74  
0039A9r 3               
0039A9r 3               nt_latestxt:
0039A9r 3  08 00                .byte 8, 0
0039ABr 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
0039AFr 3  rr rr        
0039B1r 3  6C 61 74 65          .byte "latestxt"
0039B5r 3  73 74 78 74  
0039B9r 3               
0039B9r 3               nt_defer:
0039B9r 3  05 00                .byte 5, 0
0039BBr 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
0039BFr 3  rr rr        
0039C1r 3  64 65 66 65          .byte "defer"
0039C5r 3  72           
0039C6r 3               
0039C6r 3               nt_to_body:
0039C6r 3  05 10                .byte 5, UF
0039C8r 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
0039CCr 3  rr rr        
0039CEr 3  3E 62 6F 64          .byte ">body"
0039D2r 3  79           
0039D3r 3               
0039D3r 3               nt_name_to_string:
0039D3r 3  0B 10                .byte 11, UF
0039D5r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
0039D9r 3  rr rr        
0039DBr 3  6E 61 6D 65          .byte "name>string"
0039DFr 3  3E 73 74 72  
0039E3r 3  69 6E 67     
0039E6r 3               
0039E6r 3               nt_int_to_name:
0039E6r 3  08 10                .byte 8, UF
0039E8r 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
0039ECr 3  rr rr        
0039EEr 3  69 6E 74 3E          .byte "int>name"
0039F2r 3  6E 61 6D 65  
0039F6r 3               
0039F6r 3               nt_name_to_int:
0039F6r 3  08 10                .byte 8, UF
0039F8r 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
0039FCr 3  rr rr        
0039FEr 3  6E 61 6D 65          .byte "name>int"
003A02r 3  3E 69 6E 74  
003A06r 3               
003A06r 3               nt_bracket_tick:
003A06r 3  03 05                .byte 3, CO+IM
003A08r 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
003A0Cr 3  rr rr        
003A0Er 3  5B 27 5D             .byte "[']"
003A11r 3               
003A11r 3               nt_tick:
003A11r 3  01 00                .byte 1, 0
003A13r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003A17r 3  rr rr        
003A19r 3  27                   .byte "'"
003A1Ar 3               
003A1Ar 3               nt_find_name:
003A1Ar 3  09 10                .byte 9, UF
003A1Cr 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003A20r 3  rr rr        
003A22r 3  66 69 6E 64          .byte "find-name"
003A26r 3  2D 6E 61 6D  
003A2Ar 3  65           
003A2Br 3               
003A2Br 3               nt_fill:
003A2Br 3  04 10                .byte 4, UF
003A2Dr 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
003A31r 3  rr rr        
003A33r 3  66 69 6C 6C          .byte "fill"
003A37r 3               
003A37r 3               nt_blank:
003A37r 3  05 00                .byte 5, 0     ; underflow checked by FILL
003A39r 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
003A3Dr 3  rr rr        
003A3Fr 3  62 6C 61 6E          .byte "blank"
003A43r 3  6B           
003A44r 3               
003A44r 3               nt_erase:
003A44r 3  05 00                .byte 5, 0      ; underflow checked by FILL
003A46r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
003A4Ar 3  rr rr        
003A4Cr 3  65 72 61 73          .byte "erase"
003A50r 3  65           
003A51r 3               
003A51r 3               nt_d_plus:
003A51r 3  02 10                .byte 2, UF
003A53r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
003A57r 3  rr rr        
003A59r 3  64 2B                .byte "d+"
003A5Br 3               
003A5Br 3               nt_d_minus:
003A5Br 3  02 10                .byte 2, UF
003A5Dr 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
003A61r 3  rr rr        
003A63r 3  64 2D                .byte "d-"
003A65r 3               
003A65r 3               nt_d_to_s:
003A65r 3  03 10                .byte 3, UF
003A67r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
003A6Br 3  rr rr        
003A6Dr 3  64 3E 73             .byte "d>s"
003A70r 3               
003A70r 3               nt_s_to_d:
003A70r 3  03 10                .byte 3, UF
003A72r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
003A76r 3  rr rr        
003A78r 3  73 3E 64             .byte "s>d"
003A7Br 3               
003A7Br 3               nt_to:
003A7Br 3  02 0C                .byte 2, NN+IM
003A7Dr 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
003A81r 3  rr rr        
003A83r 3  74 6F                .byte "to"
003A85r 3               
003A85r 3               nt_value:               ; same code as CONSTANT
003A85r 3  05 10                .byte 5, UF
003A87r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003A8Br 3  rr rr        
003A8Dr 3  76 61 6C 75          .byte "value"
003A91r 3  65           
003A92r 3               
003A92r 3               nt_constant:
003A92r 3  08 10                .byte 8, UF
003A94r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003A98r 3  rr rr        
003A9Ar 3  63 6F 6E 73          .byte "constant"
003A9Er 3  74 61 6E 74  
003AA2r 3               
003AA2r 3               nt_variable:
003AA2r 3  08 00                .byte 8, 0
003AA4r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003AA8r 3  rr rr        
003AAAr 3  76 61 72 69          .byte "variable"
003AAEr 3  61 62 6C 65  
003AB2r 3               
003AB2r 3               nt_does:
003AB2r 3  05 05                .byte 5, CO+IM
003AB4r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003AB8r 3  rr rr        
003ABAr 3  64 6F 65 73          .byte "does>"
003ABEr 3  3E           
003ABFr 3               
003ABFr 3               nt_create:
003ABFr 3  06 00                .byte 6, 0
003AC1r 3  rr rr rr rr          .word nt_does, xt_create, z_create
003AC5r 3  rr rr        
003AC7r 3  63 72 65 61          .byte "create"
003ACBr 3  74 65        
003ACDr 3               
003ACDr 3               nt_allot:
003ACDr 3  05 10                .byte 5, UF
003ACFr 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003AD3r 3  rr rr        
003AD5r 3  61 6C 6C 6F          .byte "allot"
003AD9r 3  74           
003ADAr 3               
003ADAr 3               nt_key:
003ADAr 3  03 00                .byte 3, 0
003ADCr 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003AE0r 3  rr rr        
003AE2r 3  6B 65 79             .byte "key"
003AE5r 3               
003AE5r 3               nt_depth:
003AE5r 3  05 00                .byte 5, 0
003AE7r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003AEBr 3  rr rr        
003AEDr 3  64 65 70 74          .byte "depth"
003AF1r 3  68           
003AF2r 3               
003AF2r 3               nt_unused:
003AF2r 3  06 00                .byte 6, 0
003AF4r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003AF8r 3  rr rr        
003AFAr 3  75 6E 75 73          .byte "unused"
003AFEr 3  65 64        
003B00r 3               
003B00r 3               nt_r_to_input:
003B00r 3  07 08                .byte 7, NN
003B02r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003B06r 3  rr rr        
003B08r 3  72 3E 69 6E          .byte "r>input"
003B0Cr 3  70 75 74     
003B0Fr 3               
003B0Fr 3               nt_input_to_r:
003B0Fr 3  07 08                .byte 7, NN
003B11r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
003B15r 3  rr rr        
003B17r 3  69 6E 70 75          .byte "input>r"
003B1Br 3  74 3E 72     
003B1Er 3               
003B1Er 3               nt_accept:
003B1Er 3  06 18                .byte 6, UF+NN
003B20r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
003B24r 3  rr rr        
003B26r 3  61 63 63 65          .byte "accept"
003B2Ar 3  70 74        
003B2Cr 3               
003B2Cr 3               nt_refill:
003B2Cr 3  06 00                .byte 6, 0
003B2Er 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
003B32r 3  rr rr        
003B34r 3  72 65 66 69          .byte "refill"
003B38r 3  6C 6C        
003B3Ar 3               
003B3Ar 3               nt_slash_string:
003B3Ar 3  07 10                .byte 7, UF
003B3Cr 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
003B40r 3  rr rr        
003B42r 3  2F 73 74 72          .byte "/string"
003B46r 3  69 6E 67     
003B49r 3               
003B49r 3               nt_minus_leading:
003B49r 3  08 10                .byte 8, UF
003B4Br 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
003B4Fr 3  rr rr        
003B51r 3  2D 6C 65 61          .byte "-leading"
003B55r 3  64 69 6E 67  
003B59r 3               
003B59r 3               nt_minus_trailing:
003B59r 3  09 10                .byte 9, UF
003B5Br 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
003B5Fr 3  rr rr        
003B61r 3  2D 74 72 61          .byte "-trailing"
003B65r 3  69 6C 69 6E  
003B69r 3  67           
003B6Ar 3               
003B6Ar 3               nt_bl:
003B6Ar 3  02 00                .byte 2, 0
003B6Cr 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
003B70r 3  rr rr        
003B72r 3  62 6C                .byte "bl"
003B74r 3               
003B74r 3               nt_spaces:
003B74r 3  06 10                .byte 6, UF
003B76r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
003B7Ar 3  rr rr        
003B7Cr 3  73 70 61 63          .byte "spaces"
003B80r 3  65 73        
003B82r 3               
003B82r 3               nt_bounds:
003B82r 3  06 10                .byte 6, UF
003B84r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003B88r 3  rr rr        
003B8Ar 3  62 6F 75 6E          .byte "bounds"
003B8Er 3  64 73        
003B90r 3               
003B90r 3               nt_c_comma:
003B90r 3  02 10                .byte 2, UF
003B92r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003B96r 3  rr rr        
003B98r 3  63 2C                .byte "c,"
003B9Ar 3               
003B9Ar 3               nt_dnegate:
003B9Ar 3  07 10                .byte 7, UF
003B9Cr 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003BA0r 3  rr rr        
003BA2r 3  64 6E 65 67          .byte "dnegate"
003BA6r 3  61 74 65     
003BA9r 3               
003BA9r 3               nt_negate:
003BA9r 3  06 10                .byte 6, UF
003BABr 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003BAFr 3  rr rr        
003BB1r 3  6E 65 67 61          .byte "negate"
003BB5r 3  74 65        
003BB7r 3               
003BB7r 3               nt_invert:
003BB7r 3  06 10                .byte 6, UF
003BB9r 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003BBDr 3  rr rr        
003BBFr 3  69 6E 76 65          .byte "invert"
003BC3r 3  72 74        
003BC5r 3               
003BC5r 3               nt_two_to_r:
003BC5r 3  03 11                .byte 3, CO+UF          ; native is special case
003BC7r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003BCBr 3  rr rr        
003BCDr 3  32 3E 72             .byte "2>r"
003BD0r 3               
003BD0r 3               nt_two_r_from:
003BD0r 3  03 01                .byte 3, CO             ; native is special case
003BD2r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003BD6r 3  rr rr        
003BD8r 3  32 72 3E             .byte "2r>"
003BDBr 3               
003BDBr 3               nt_two_r_fetch:
003BDBr 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003BDDr 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003BE1r 3  rr rr        
003BE3r 3  32 72 40             .byte "2r@"
003BE6r 3               
003BE6r 3               nt_two_literal:
003BE6r 3  08 14                .byte 8, UF+IM
003BE8r 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003BECr 3  rr rr        
003BEEr 3  32 6C 69 74          .byte "2literal"
003BF2r 3  65 72 61 6C  
003BF6r 3               
003BF6r 3               nt_two_constant:
003BF6r 3  09 10                .byte 9, UF
003BF8r 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003BFCr 3  rr rr        
003BFEr 3  32 63 6F 6E          .byte "2constant"
003C02r 3  73 74 61 6E  
003C06r 3  74           
003C07r 3               
003C07r 3               nt_two_variable:
003C07r 3  09 00                .byte 9, 0
003C09r 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003C0Dr 3  rr rr        
003C0Fr 3  32 76 61 72          .byte "2variable"
003C13r 3  69 61 62 6C  
003C17r 3  65           
003C18r 3               
003C18r 3               nt_two_fetch:
003C18r 3  02 10                .byte 2, UF
003C1Ar 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003C1Er 3  rr rr        
003C20r 3  32 40                .byte "2@"
003C22r 3               
003C22r 3               nt_two_store:
003C22r 3  02 10                .byte 2, UF
003C24r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
003C28r 3  rr rr        
003C2Ar 3  32 21                .byte "2!"
003C2Cr 3               
003C2Cr 3               nt_two_over:
003C2Cr 3  05 10                .byte 5, UF
003C2Er 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003C32r 3  rr rr        
003C34r 3  32 6F 76 65          .byte "2over"
003C38r 3  72           
003C39r 3               
003C39r 3               nt_two_swap:
003C39r 3  05 10                .byte 5, UF
003C3Br 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003C3Fr 3  rr rr        
003C41r 3  32 73 77 61          .byte "2swap"
003C45r 3  70           
003C46r 3               
003C46r 3               nt_two_drop:
003C46r 3  05 10                .byte 5, UF
003C48r 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003C4Cr 3  rr rr        
003C4Er 3  32 64 72 6F          .byte "2drop"
003C52r 3  70           
003C53r 3               
003C53r 3               nt_max:
003C53r 3  03 10                .byte 3, UF
003C55r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003C59r 3  rr rr        
003C5Br 3  6D 61 78             .byte "max"
003C5Er 3               
003C5Er 3               nt_min:
003C5Er 3  03 10                .byte 3, UF
003C60r 3  rr rr rr rr          .word nt_max, xt_min, z_min
003C64r 3  rr rr        
003C66r 3  6D 69 6E             .byte "min"
003C69r 3               
003C69r 3               nt_zero_less:
003C69r 3  02 10                .byte 2, UF
003C6Br 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003C6Fr 3  rr rr        
003C71r 3  30 3C                .byte "0<"
003C73r 3               
003C73r 3               nt_zero_greater:
003C73r 3  02 10                .byte 2, UF
003C75r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003C79r 3  rr rr        
003C7Br 3  30 3E                .byte "0>"
003C7Dr 3               
003C7Dr 3               nt_zero_unequal:
003C7Dr 3  03 10                .byte 3, UF
003C7Fr 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003C83r 3  rr rr        
003C85r 3  30 3C 3E             .byte "0<>"
003C88r 3               
003C88r 3               nt_zero_equal:
003C88r 3  02 10                .byte 2, UF
003C8Ar 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003C8Er 3  rr rr        
003C90r 3  30 3D                .byte "0="
003C92r 3               
003C92r 3               nt_greater_than:
003C92r 3  01 10                .byte 1, UF
003C94r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003C98r 3  rr rr        
003C9Ar 3  3E                   .byte ">"
003C9Br 3               
003C9Br 3               nt_u_greater_than:
003C9Br 3  02 10                .byte 2, UF
003C9Dr 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003CA1r 3  rr rr        
003CA3r 3  75 3E                .byte "u>"
003CA5r 3               
003CA5r 3               nt_u_less_than:
003CA5r 3  02 10                .byte 2, UF
003CA7r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003CABr 3  rr rr        
003CADr 3  75 3C                .byte "u<"
003CAFr 3               
003CAFr 3               nt_less_than:
003CAFr 3  01 10                .byte 1, UF
003CB1r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003CB5r 3  rr rr        
003CB7r 3  3C                   .byte "<"
003CB8r 3               
003CB8r 3               nt_not_equals:
003CB8r 3  02 10                .byte 2, UF
003CBAr 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003CBEr 3  rr rr        
003CC0r 3  3C 3E                .byte "<>"
003CC2r 3               
003CC2r 3               nt_equal:
003CC2r 3  01 10                .byte 1, UF
003CC4r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003CC8r 3  rr rr        
003CCAr 3  3D                   .byte "="
003CCBr 3               
003CCBr 3               nt_two_slash:
003CCBr 3  02 10                .byte 2, UF
003CCDr 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003CD1r 3  rr rr        
003CD3r 3  32 2F                .byte "2/"
003CD5r 3               
003CD5r 3               nt_two_star:
003CD5r 3  02 10                .byte 2, UF
003CD7r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003CDBr 3  rr rr        
003CDDr 3  32 2A                .byte "2*"
003CDFr 3               
003CDFr 3               nt_one_plus:
003CDFr 3  02 10                .byte 2, UF
003CE1r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003CE5r 3  rr rr        
003CE7r 3  31 2B                .byte "1+"
003CE9r 3               
003CE9r 3               nt_one_minus:
003CE9r 3  02 10                .byte 2, UF
003CEBr 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003CEFr 3  rr rr        
003CF1r 3  31 2D                .byte "1-"
003CF3r 3               
003CF3r 3               nt_here:
003CF3r 3  04 00                .byte 4, 0
003CF5r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003CF9r 3  rr rr        
003CFBr 3  68 65 72 65          .byte "here"
003CFFr 3               
003CFFr 3               nt_cell_plus:
003CFFr 3  05 10                .byte 5, UF
003D01r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003D05r 3  rr rr        
003D07r 3  63 65 6C 6C          .byte "cell+"
003D0Br 3  2B           
003D0Cr 3               
003D0Cr 3               nt_cells:
003D0Cr 3  05 00                .byte 5, 0
003D0Er 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003D12r 3  rr rr        
003D14r 3  63 65 6C 6C          .byte "cells"
003D18r 3  73           
003D19r 3               
003D19r 3               nt_chars:
003D19r 3  05 12                .byte 5, AN+UF   ; deleted during compile
003D1Br 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003D1Fr 3  rr rr        
003D21r 3  63 68 61 72          .byte "chars"
003D25r 3  73           
003D26r 3               
003D26r 3               nt_char_plus:
003D26r 3  05 00                .byte 5, 0
003D28r 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003D2Cr 3  rr rr        
003D2Er 3  63 68 61 72          .byte "char+"
003D32r 3  2B           
003D33r 3               
003D33r 3               nt_bracket_char:
003D33r 3  06 05                .byte 6, CO+IM
003D35r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003D39r 3  rr rr        
003D3Br 3  5B 63 68 61          .byte "[char]"
003D3Fr 3  72 5D        
003D41r 3               
003D41r 3               nt_char:
003D41r 3  04 00                .byte 4, 0
003D43r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003D47r 3  rr rr        
003D49r 3  63 68 61 72          .byte "char"
003D4Dr 3               
003D4Dr 3               nt_pick:
003D4Dr 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003D4Fr 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003D53r 3  rr rr        
003D55r 3  70 69 63 6B          .byte "pick"
003D59r 3               
003D59r 3               nt_lshift:
003D59r 3  06 10                .byte 6, UF
003D5Br 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003D5Fr 3  rr rr        
003D61r 3  6C 73 68 69          .byte "lshift"
003D65r 3  66 74        
003D67r 3               
003D67r 3               nt_rshift:
003D67r 3  06 10                .byte 6, UF
003D69r 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003D6Dr 3  rr rr        
003D6Fr 3  72 73 68 69          .byte "rshift"
003D73r 3  66 74        
003D75r 3               
003D75r 3               nt_xor:
003D75r 3  03 10                .byte 3, UF
003D77r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003D7Br 3  rr rr        
003D7Dr 3  78 6F 72             .byte "xor"
003D80r 3               
003D80r 3               nt_or:
003D80r 3  02 10                .byte 2, UF
003D82r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003D86r 3  rr rr        
003D88r 3  6F 72                .byte "or"
003D8Ar 3               
003D8Ar 3               nt_and:
003D8Ar 3  03 10                .byte 3, UF
003D8Cr 3  rr rr rr rr          .word nt_or, xt_and, z_and
003D90r 3  rr rr        
003D92r 3  61 6E 64             .byte "and"
003D95r 3               
003D95r 3               nt_dabs:
003D95r 3  04 10                .byte 4, UF
003D97r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003D9Br 3  rr rr        
003D9Dr 3  64 61 62 73          .byte "dabs"
003DA1r 3               
003DA1r 3               nt_abs:
003DA1r 3  03 10                .byte 3, UF
003DA3r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003DA7r 3  rr rr        
003DA9r 3  61 62 73             .byte "abs"
003DACr 3               
003DACr 3               nt_minus:
003DACr 3  01 10                .byte 1, UF
003DAEr 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003DB2r 3  rr rr        
003DB4r 3  2D                   .byte "-"
003DB5r 3               
003DB5r 3               nt_plus:
003DB5r 3  01 10                .byte 1, UF
003DB7r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003DBBr 3  rr rr        
003DBDr 3  2B                   .byte "+"
003DBEr 3               
003DBEr 3               nt_question_dup:
003DBEr 3  04 10                .byte 4, UF
003DC0r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003DC4r 3  rr rr        
003DC6r 3  3F 64 75 70          .byte "?dup"
003DCAr 3               
003DCAr 3               nt_two_dup:
003DCAr 3  04 10                .byte 4, UF
003DCCr 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003DD0r 3  rr rr        
003DD2r 3  32 64 75 70          .byte "2dup"
003DD6r 3               
003DD6r 3               nt_two:
003DD6r 3  01 00                .byte 1, 0
003DD8r 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003DDCr 3  rr rr        
003DDEr 3  32                   .byte "2"
003DDFr 3               
003DDFr 3               nt_one:
003DDFr 3  01 00                .byte 1, 0
003DE1r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003DE5r 3  rr rr        
003DE7r 3  31                   .byte "1"
003DE8r 3               
003DE8r 3               nt_zero:
003DE8r 3  01 00                .byte 1, 0
003DEAr 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003DEEr 3  rr rr        
003DF0r 3  30                   .byte "0"
003DF1r 3               
003DF1r 3               nt_space:
003DF1r 3  05 00                .byte 5, 0
003DF3r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003DF7r 3  rr rr        
003DF9r 3  73 70 61 63          .byte "space"
003DFDr 3  65           
003DFEr 3               
003DFEr 3               nt_true:
003DFEr 3  04 00                .byte 4, 0
003E00r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003E04r 3  rr rr        
003E06r 3  74 72 75 65          .byte "true"
003E0Ar 3               
003E0Ar 3               nt_false:
003E0Ar 3  05 00                .byte 5, 0
003E0Cr 3  rr rr rr rr          .word nt_true, xt_false, z_false
003E10r 3  rr rr        
003E12r 3  66 61 6C 73          .byte "false"
003E16r 3  65           
003E17r 3               
003E17r 3               nt_question:
003E17r 3  01 00                .byte 1, 0
003E19r 3  rr rr rr rr          .word nt_false, xt_question, z_question
003E1Dr 3  rr rr        
003E1Fr 3  3F                   .byte "?"
003E20r 3               
003E20r 3               nt_ud_dot_r:
003E20r 3  04 10                .byte 4, UF
003E22r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003E26r 3  rr rr        
003E28r 3  75 64 2E 72          .byte "ud.r"
003E2Cr 3               
003E2Cr 3               nt_ud_dot:
003E2Cr 3  03 10                .byte 3, UF
003E2Er 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003E32r 3  rr rr        
003E34r 3  75 64 2E             .byte "ud."
003E37r 3               
003E37r 3               nt_d_dot_r:
003E37r 3  03 10                .byte 3, UF
003E39r 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003E3Dr 3  rr rr        
003E3Fr 3  64 2E 72             .byte "d.r"
003E42r 3               
003E42r 3               nt_d_dot:
003E42r 3  02 10                .byte 2, UF
003E44r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003E48r 3  rr rr        
003E4Ar 3  64 2E                .byte "d."
003E4Cr 3               
003E4Cr 3               nt_dot_r:
003E4Cr 3  02 10                .byte 2, UF
003E4Er 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003E52r 3  rr rr        
003E54r 3  2E 72                .byte ".r"
003E56r 3               
003E56r 3               nt_u_dot_r:
003E56r 3  03 10                .byte 3, UF
003E58r 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003E5Cr 3  rr rr        
003E5Er 3  75 2E 72             .byte "u.r"
003E61r 3               
003E61r 3               nt_u_dot:
003E61r 3  02 10                .byte 2, UF
003E63r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003E67r 3  rr rr        
003E69r 3  75 2E                .byte "u."
003E6Br 3               
003E6Br 3               nt_dot:
003E6Br 3  01 10                .byte 1, UF
003E6Dr 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003E71r 3  rr rr        
003E73r 3  2E                   .byte "."
003E74r 3               
003E74r 3               nt_type:
003E74r 3  04 10                .byte 4, UF
003E76r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003E7Ar 3  rr rr        
003E7Cr 3  74 79 70 65          .byte "type"
003E80r 3               
003E80r 3               nt_emit:
003E80r 3  04 18                .byte 4, NN+UF
003E82r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003E86r 3  rr rr        
003E88r 3  65 6D 69 74          .byte "emit"
003E8Cr 3               
003E8Cr 3               nt_execute:
003E8Cr 3  07 10                .byte 7, UF
003E8Er 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003E92r 3  rr rr        
003E94r 3  65 78 65 63          .byte "execute"
003E98r 3  75 74 65     
003E9Br 3               
003E9Br 3               nt_plus_store:
003E9Br 3  02 10                .byte 2, UF
003E9Dr 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003EA1r 3  rr rr        
003EA3r 3  2B 21                .byte "+!"
003EA5r 3               
003EA5r 3               nt_c_store:
003EA5r 3  02 10                .byte 2, UF
003EA7r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003EABr 3  rr rr        
003EADr 3  63 21                .byte "c!"
003EAFr 3               
003EAFr 3               nt_c_fetch:
003EAFr 3  02 10                .byte 2, UF
003EB1r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003EB5r 3  rr rr        
003EB7r 3  63 40                .byte "c@"
003EB9r 3               
003EB9r 3               nt_comma:
003EB9r 3  01 10                .byte 1, UF
003EBBr 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003EBFr 3  rr rr        
003EC1r 3  2C                   .byte ","
003EC2r 3               
003EC2r 3               nt_tuck:
003EC2r 3  04 10                .byte 4, UF
003EC4r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003EC8r 3  rr rr        
003ECAr 3  74 75 63 6B          .byte "tuck"
003ECEr 3               
003ECEr 3               nt_not_rote:
003ECEr 3  04 10                .byte 4, UF
003ED0r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003ED4r 3  rr rr        
003ED6r 3  2D 72 6F 74          .byte "-rot"
003EDAr 3               
003EDAr 3               nt_rot:
003EDAr 3  03 10                .byte 3, UF
003EDCr 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003EE0r 3  rr rr        
003EE2r 3  72 6F 74             .byte "rot"
003EE5r 3               
003EE5r 3               nt_nip:
003EE5r 3  03 10                .byte 3, UF
003EE7r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003EEBr 3  rr rr        
003EEDr 3  6E 69 70             .byte "nip"
003EF0r 3               
003EF0r 3               nt_r_fetch:
003EF0r 3  02 01                .byte 2, CO    ; native is special case
003EF2r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003EF6r 3  rr rr        
003EF8r 3  72 40                .byte "r@"
003EFAr 3               
003EFAr 3               nt_r_from:
003EFAr 3  02 01                .byte 2, CO    ; native is special case
003EFCr 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003F00r 3  rr rr        
003F02r 3  72 3E                .byte "r>"
003F04r 3               
003F04r 3               nt_to_r:
003F04r 3  02 11                .byte 2, CO+UF ; native is special case
003F06r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003F0Ar 3  rr rr        
003F0Cr 3  3E 72                .byte ">r"
003F0Er 3               
003F0Er 3               nt_over:
003F0Er 3  04 10                .byte 4, UF
003F10r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003F14r 3  rr rr        
003F16r 3  6F 76 65 72          .byte "over"
003F1Ar 3               
003F1Ar 3               nt_fetch:
003F1Ar 3  01 10                .byte 1, UF
003F1Cr 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003F20r 3  rr rr        
003F22r 3  40                   .byte "@"
003F23r 3               
003F23r 3               nt_store:
003F23r 3  01 10                .byte 1, UF
003F25r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003F29r 3  rr rr        
003F2Br 3  21                   .byte "!"
003F2Cr 3               
003F2Cr 3               nt_swap:
003F2Cr 3  04 10                .byte 4, UF
003F2Er 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003F32r 3  rr rr        
003F34r 3  73 77 61 70          .byte "swap"
003F38r 3               
003F38r 3               nt_dup:
003F38r 3  03 10                .byte 3, UF
003F3Ar 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003F3Er 3  rr rr        
003F40r 3  64 75 70             .byte "dup"
003F43r 3               
003F43r 3               ; DROP is always the first native word in the Dictionary
003F43r 3               dictionary_start:
003F43r 3               nt_drop:
003F43r 3  04 10                .byte 4, UF
003F45r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003F49r 3  rr rr        
003F4Br 3  64 72 6F 70          .byte "drop"
003F4Fr 3               
003F4Fr 3               ; END of FORTH-WORDLIST
003F4Fr 3               
003F4Fr 3               
003F4Fr 3               ; ROOT-WORDLIST
003F4Fr 3                       ; This is a short wordlist that has just the words needed to
003F4Fr 3                       ; set the wordlists. These words are also included in the
003F4Fr 3                       ; FORTH-WORDLIST as well.
003F4Fr 3               
003F4Fr 3               nt_root_words:
003F4Fr 3  05 00                .byte 5, 0
003F51r 3  00 00 rr rr          .word 0000, xt_words, z_words
003F55r 3  rr rr        
003F57r 3  77 6F 72 64          .byte "words"
003F5Br 3  73           
003F5Cr 3               
003F5Cr 3               nt_root_forth_wordlist: ; shares code with ZERO
003F5Cr 3  0E 00                .byte 14, 0
003F5Er 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003F62r 3  rr rr        
003F64r 3  66 6F 72 74          .byte "forth-wordlist"
003F68r 3  68 2D 77 6F  
003F6Cr 3  72 64 6C 69  
003F72r 3               
003F72r 3               nt_root_forth:
003F72r 3  05 00                .byte 5, 0
003F74r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003F78r 3  rr rr        
003F7Ar 3  66 6F 72 74          .byte "forth"
003F7Er 3  68           
003F7Fr 3               
003F7Fr 3               root_dictionary_start:
003F7Fr 3               nt_root_set_order:
003F7Fr 3  09 00                .byte 9, 0
003F81r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003F85r 3  rr rr        
003F87r 3  73 65 74 2D          .byte "set-order"
003F8Br 3  6F 72 64 65  
003F8Fr 3  72           
003F90r 3               
003F90r 3               ; END of ROOT-WORDLIST
003F90r 3               
003F90r 3               
003F90r 3               ; ; EDITOR-WORDLIST
003F90r 3               
003F90r 3               ; nt_editor_enter_screen:
003F90r 3               ;         .byte 12, 0
003F90r 3               ;         .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003F90r 3               ;         .byte "enter-screen"
003F90r 3               
003F90r 3               ; nt_editor_erase_screen:
003F90r 3               ;         .byte 12, 0
003F90r 3               ;         .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003F90r 3               ;         .byte "erase-screen"
003F90r 3               
003F90r 3               ; nt_editor_el:
003F90r 3               ;         .byte 2, 0
003F90r 3               ;         .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003F90r 3               ;         .byte "el"
003F90r 3               
003F90r 3               ; nt_editor_l:
003F90r 3               ;         .byte 1, 0
003F90r 3               ;         .word nt_editor_el, xt_editor_l, z_editor_l
003F90r 3               ;         .byte "l"
003F90r 3               
003F90r 3               ; nt_editor_line:
003F90r 3               ;         .byte 4, UF
003F90r 3               ;         .word nt_editor_l, xt_editor_line, z_editor_line
003F90r 3               ;         .byte "line"
003F90r 3               
003F90r 3               editor_dictionary_start:
003F90r 3               ; nt_editor_o:
003F90r 3               ;         .byte 1, 0
003F90r 3               ;         .word nt_editor_line, xt_editor_o, z_editor_o
003F90r 3               ;         .byte "o"
003F90r 3               
003F90r 3               ; ; END of EDITOR-WORDLIST
003F90r 3               
003F90r 3               
003F90r 3               ; ; ASSEMBLER-WORDLIST
003F90r 3               
003F90r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003F90r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003F90r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003F90r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003F90r 3               assembler_dictionary_start:
003F90r 3               ; nt_asm_adc_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_adc_x
003F90r 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003F90r 3               ; 		.byte "adc.#"
003F90r 3               
003F90r 3               ; nt_asm_adc_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_adc_y
003F90r 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003F90r 3               ; 		.byte "adc.x"
003F90r 3               
003F90r 3               ; nt_asm_adc_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_adc_z
003F90r 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003F90r 3               ; 		.byte "adc.y"
003F90r 3               
003F90r 3               ; nt_asm_adc_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_adc_zi
003F90r 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003F90r 3               ; 		.byte "adc.z"
003F90r 3               
003F90r 3               ; nt_asm_adc_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_adc_ziy
003F90r 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003F90r 3               ; 		.byte "adc.zi"
003F90r 3               
003F90r 3               ; nt_asm_adc_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_adc_zx
003F90r 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003F90r 3               ; 		.byte "adc.ziy"
003F90r 3               
003F90r 3               ; nt_asm_adc_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_adc_zxi
003F90r 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003F90r 3               ; 		.byte "adc.zx"
003F90r 3               
003F90r 3               ; nt_asm_adc_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_and
003F90r 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003F90r 3               ; 		.byte "adc.zxi"
003F90r 3               
003F90r 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003F90r 3               ; 		.byte 4, IM
003F90r 3               ;                 .word nt_asm_and_h
003F90r 3               ; 		.word xt_asm_and, z_asm_and
003F90r 3               ; 		.byte "and."
003F90r 3               
003F90r 3               ; nt_asm_and_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_and_x
003F90r 3               ; 		.word xt_asm_and_h, z_asm_and_h
003F90r 3               ; 		.byte "and.#"
003F90r 3               
003F90r 3               ; nt_asm_and_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_and_y
003F90r 3               ; 		.word xt_asm_and_x, z_asm_and_x
003F90r 3               ; 		.byte "and.x"
003F90r 3               
003F90r 3               ; nt_asm_and_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_and_z
003F90r 3               ; 		.word xt_asm_and_y, z_asm_and_y
003F90r 3               ; 		.byte "and.y"
003F90r 3               
003F90r 3               ; nt_asm_and_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_and_zi
003F90r 3               ; 		.word xt_asm_and_z, z_asm_and_z
003F90r 3               ; 		.byte "and.z"
003F90r 3               
003F90r 3               ; nt_asm_and_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_and_ziy
003F90r 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003F90r 3               ; 		.byte "and.zi"
003F90r 3               
003F90r 3               ; nt_asm_and_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_and_zx
003F90r 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003F90r 3               ; 		.byte "and.ziy"
003F90r 3               
003F90r 3               ; nt_asm_and_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_and_zxi
003F90r 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003F90r 3               ; 		.byte "and.zx"
003F90r 3               
003F90r 3               ; nt_asm_and_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_asl
003F90r 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003F90r 3               ; 		.byte "and.zxi"
003F90r 3               
003F90r 3               ; nt_asm_asl:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_asl_a
003F90r 3               ; 		.word xt_asm_asl, z_asm_asl
003F90r 3               ; 		.byte "asl"
003F90r 3               
003F90r 3               ; nt_asm_asl_a:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_asl_x
003F90r 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003F90r 3               ; 		.byte "asl.a"
003F90r 3               
003F90r 3               ; nt_asm_asl_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_asl_z
003F90r 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003F90r 3               ; 		.byte "asl.x"
003F90r 3               
003F90r 3               ; nt_asm_asl_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_asl_zx
003F90r 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003F90r 3               ; 		.byte "asl.z"
003F90r 3               
003F90r 3               ; nt_asm_asl_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_bcc
003F90r 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003F90r 3               ; 		.byte "asl.zx"
003F90r 3               
003F90r 3               ; nt_asm_bcc:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bcs
003F90r 3               ; 		.word xt_asm_bcc, z_asm_bcc
003F90r 3               ; 		.byte "bcc"
003F90r 3               
003F90r 3               ; nt_asm_bcs:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_beq
003F90r 3               ; 		.word xt_asm_bcs, z_asm_bcs
003F90r 3               ; 		.byte "bcs"
003F90r 3               
003F90r 3               ; nt_asm_beq:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bit
003F90r 3               ; 		.word xt_asm_beq, z_asm_beq
003F90r 3               ; 		.byte "beq"
003F90r 3               
003F90r 3               ; nt_asm_bit:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bit_h
003F90r 3               ; 		.word xt_asm_bit, z_asm_bit
003F90r 3               ; 		.byte "bit"
003F90r 3               
003F90r 3               ; nt_asm_bit_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_bit_x
003F90r 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003F90r 3               ; 		.byte "bit.#"
003F90r 3               
003F90r 3               ; nt_asm_bit_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_bit_z
003F90r 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003F90r 3               ; 		.byte "bit.x"
003F90r 3               
003F90r 3               ; nt_asm_bit_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_bit_zx
003F90r 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003F90r 3               ; 		.byte "bit.z"
003F90r 3               
003F90r 3               ; nt_asm_bit_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_bmi
003F90r 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003F90r 3               ; 		.byte "bit.zx"
003F90r 3               
003F90r 3               ; nt_asm_bmi:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bne
003F90r 3               ; 		.word xt_asm_bmi, z_asm_bmi
003F90r 3               ; 		.byte "bmi"
003F90r 3               
003F90r 3               ; nt_asm_bne:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bpl
003F90r 3               ; 		.word xt_asm_bne, z_asm_bne
003F90r 3               ; 		.byte "bne"
003F90r 3               
003F90r 3               ; nt_asm_bpl:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bra
003F90r 3               ; 		.word xt_asm_bpl, z_asm_bpl
003F90r 3               ; 		.byte "bpl"
003F90r 3               
003F90r 3               ; nt_asm_bra:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_brk
003F90r 3               ; 		.word xt_asm_bra, z_asm_bra
003F90r 3               ; 		.byte "bra"
003F90r 3               
003F90r 3               ; nt_asm_brk:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bvc
003F90r 3               ; 		.word xt_asm_brk, z_asm_brk
003F90r 3               ; 		.byte "brk"
003F90r 3               
003F90r 3               ; nt_asm_bvc:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_bvs
003F90r 3               ; 		.word xt_asm_bvc, z_asm_bvc
003F90r 3               ; 		.byte "bvc"
003F90r 3               
003F90r 3               ; nt_asm_bvs:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_clc
003F90r 3               ; 		.word xt_asm_bvs, z_asm_bvs
003F90r 3               ; 		.byte "bvs"
003F90r 3               
003F90r 3               ; nt_asm_clc:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_cld
003F90r 3               ; 		.word xt_asm_clc, z_asm_clc
003F90r 3               ; 		.byte "clc"
003F90r 3               
003F90r 3               ; nt_asm_cld:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_cli
003F90r 3               ; 		.word xt_asm_cld, z_asm_cld
003F90r 3               ; 		.byte "cld"
003F90r 3               
003F90r 3               ; nt_asm_cli:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_clv
003F90r 3               ; 		.word xt_asm_cli, z_asm_cli
003F90r 3               ; 		.byte "cli"
003F90r 3               
003F90r 3               ; nt_asm_clv:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_cmp
003F90r 3               ; 		.word xt_asm_clv, z_asm_clv
003F90r 3               ; 		.byte "clv"
003F90r 3               
003F90r 3               ; nt_asm_cmp:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_cmp_h
003F90r 3               ; 		.word xt_asm_cmp, z_asm_cmp
003F90r 3               ; 		.byte "cmp"
003F90r 3               
003F90r 3               ; nt_asm_cmp_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_cmp_x
003F90r 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003F90r 3               ; 		.byte "cmp.#"
003F90r 3               
003F90r 3               ; nt_asm_cmp_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_cmp_y
003F90r 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003F90r 3               ; 		.byte "cmp.x"
003F90r 3               
003F90r 3               ; nt_asm_cmp_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_cmp_z
003F90r 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003F90r 3               ; 		.byte "cmp.y"
003F90r 3               
003F90r 3               ; nt_asm_cmp_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_cmp_zi
003F90r 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003F90r 3               ; 		.byte "cmp.z"
003F90r 3               
003F90r 3               ; nt_asm_cmp_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_cmp_ziy
003F90r 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003F90r 3               ; 		.byte "cmp.zi"
003F90r 3               
003F90r 3               ; nt_asm_cmp_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_cmp_zx
003F90r 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003F90r 3               ; 		.byte "cmp.ziy"
003F90r 3               
003F90r 3               ; nt_asm_cmp_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_cmp_zxi
003F90r 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003F90r 3               ; 		.byte "cmp.zx"
003F90r 3               
003F90r 3               ; nt_asm_cmp_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_cpx
003F90r 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003F90r 3               ; 		.byte "cmp.zxi"
003F90r 3               
003F90r 3               ; nt_asm_cpx:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_cpx_h
003F90r 3               ; 		.word xt_asm_cpx, z_asm_cpx
003F90r 3               ; 		.byte "cpx"
003F90r 3               
003F90r 3               ; nt_asm_cpx_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_cpx_z
003F90r 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003F90r 3               ; 		.byte "cpx.#"
003F90r 3               
003F90r 3               ; nt_asm_cpx_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_cpy
003F90r 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003F90r 3               ; 		.byte "cpx.z"
003F90r 3               
003F90r 3               ; nt_asm_cpy:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_cpy_h
003F90r 3               ; 		.word xt_asm_cpy, z_asm_cpy
003F90r 3               ; 		.byte "cpy"
003F90r 3               
003F90r 3               ; nt_asm_cpy_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_cpy_z
003F90r 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003F90r 3               ; 		.byte "cpy.#"
003F90r 3               
003F90r 3               ; nt_asm_cpy_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_dec
003F90r 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003F90r 3               ; 		.byte "cpy.z"
003F90r 3               
003F90r 3               ; nt_asm_dec:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_dec_a
003F90r 3               ; 		.word xt_asm_dec, z_asm_dec
003F90r 3               ; 		.byte "dec"
003F90r 3               
003F90r 3               ; nt_asm_dec_a:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_dec_x
003F90r 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003F90r 3               ; 		.byte "dec.a"
003F90r 3               
003F90r 3               ; nt_asm_dec_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_dec_z
003F90r 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003F90r 3               ; 		.byte "dec.x"
003F90r 3               
003F90r 3               ; nt_asm_dec_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_dec_zx
003F90r 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003F90r 3               ; 		.byte "dec.z"
003F90r 3               
003F90r 3               ; nt_asm_dec_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_dex
003F90r 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003F90r 3               ; 		.byte "dec.zx"
003F90r 3               
003F90r 3               ; nt_asm_dex:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_dey
003F90r 3               ; 		.word xt_asm_dex, z_asm_dex
003F90r 3               ; 		.byte "dex"
003F90r 3               
003F90r 3               ; nt_asm_dey:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_eor
003F90r 3               ; 		.word xt_asm_dey, z_asm_dey
003F90r 3               ; 		.byte "dey"
003F90r 3               
003F90r 3               ; nt_asm_eor:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_eor_h
003F90r 3               ; 		.word xt_asm_eor, z_asm_eor
003F90r 3               ; 		.byte "eor"
003F90r 3               
003F90r 3               ; nt_asm_eor_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_eor_x
003F90r 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003F90r 3               ; 		.byte "eor.#"
003F90r 3               
003F90r 3               ; nt_asm_eor_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_eor_y
003F90r 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003F90r 3               ; 		.byte "eor.x"
003F90r 3               
003F90r 3               ; nt_asm_eor_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_eor_z
003F90r 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003F90r 3               ; 		.byte "eor.y"
003F90r 3               
003F90r 3               ; nt_asm_eor_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_eor_zi
003F90r 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003F90r 3               ; 		.byte "eor.z"
003F90r 3               
003F90r 3               ; nt_asm_eor_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_eor_ziy
003F90r 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003F90r 3               ; 		.byte "eor.zi"
003F90r 3               
003F90r 3               ; nt_asm_eor_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_eor_zx
003F90r 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003F90r 3               ; 		.byte "eor.ziy"
003F90r 3               
003F90r 3               ; nt_asm_eor_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_eor_zxi
003F90r 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003F90r 3               ; 		.byte "eor.zx"
003F90r 3               
003F90r 3               ; nt_asm_eor_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_inc
003F90r 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003F90r 3               ; 		.byte "eor.zxi"
003F90r 3               
003F90r 3               ; nt_asm_inc:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_inc_a
003F90r 3               ; 		.word xt_asm_inc, z_asm_inc
003F90r 3               ; 		.byte "inc"
003F90r 3               
003F90r 3               ; nt_asm_inc_a:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_inc_x
003F90r 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003F90r 3               ; 		.byte "inc.a"
003F90r 3               
003F90r 3               ; nt_asm_inc_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_inc_z
003F90r 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003F90r 3               ; 		.byte "inc.x"
003F90r 3               
003F90r 3               ; nt_asm_inc_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_inc_zx
003F90r 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003F90r 3               ; 		.byte "inc.z"
003F90r 3               
003F90r 3               ; nt_asm_inc_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_inx
003F90r 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003F90r 3               ; 		.byte "inc.zx"
003F90r 3               
003F90r 3               ; nt_asm_inx:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_iny
003F90r 3               ; 		.word xt_asm_inx, z_asm_inx
003F90r 3               ; 		.byte "inx"
003F90r 3               
003F90r 3               ; nt_asm_iny:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_jmp
003F90r 3               ; 		.word xt_asm_iny, z_asm_iny
003F90r 3               ; 		.byte "iny"
003F90r 3               
003F90r 3               ; nt_asm_jmp:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_jmp_i
003F90r 3               ; 		.word xt_asm_jmp, z_asm_jmp
003F90r 3               ; 		.byte "jmp"
003F90r 3               
003F90r 3               ; nt_asm_jmp_i:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_jmp_xi
003F90r 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003F90r 3               ; 		.byte "jmp.i"
003F90r 3               
003F90r 3               ; nt_asm_jmp_xi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_jsr
003F90r 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003F90r 3               ; 		.byte "jmp.xi"
003F90r 3               
003F90r 3               ; nt_asm_jsr:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_lda
003F90r 3               ; 		.word xt_asm_jsr, z_asm_jsr
003F90r 3               ; 		.byte "jsr"
003F90r 3               
003F90r 3               ; nt_asm_lda:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_lda_h
003F90r 3               ; 		.word xt_asm_lda, z_asm_lda
003F90r 3               ; 		.byte "lda"
003F90r 3               
003F90r 3               ; nt_asm_lda_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_lda_x
003F90r 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003F90r 3               ; 		.byte "lda.#"
003F90r 3               
003F90r 3               ; nt_asm_lda_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_lda_y
003F90r 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003F90r 3               ; 		.byte "lda.x"
003F90r 3               
003F90r 3               ; nt_asm_lda_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_lda_z
003F90r 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003F90r 3               ; 		.byte "lda.y"
003F90r 3               
003F90r 3               ; nt_asm_lda_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_lda_zi
003F90r 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003F90r 3               ; 		.byte "lda.z"
003F90r 3               
003F90r 3               ; nt_asm_lda_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_lda_ziy
003F90r 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003F90r 3               ; 		.byte "lda.zi"
003F90r 3               
003F90r 3               ; nt_asm_lda_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_lda_zx
003F90r 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003F90r 3               ; 		.byte "lda.ziy"
003F90r 3               
003F90r 3               ; nt_asm_lda_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_lda_zxi
003F90r 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003F90r 3               ; 		.byte "lda.zx"
003F90r 3               
003F90r 3               ; nt_asm_lda_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_ldx
003F90r 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003F90r 3               ; 		.byte "lda.zxi"
003F90r 3               
003F90r 3               ; nt_asm_ldx:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_ldx_h
003F90r 3               ; 		.word xt_asm_ldx, z_asm_ldx
003F90r 3               ; 		.byte "ldx"
003F90r 3               
003F90r 3               ; nt_asm_ldx_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ldx_y
003F90r 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003F90r 3               ; 		.byte "ldx.#"
003F90r 3               
003F90r 3               ; nt_asm_ldx_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ldx_z
003F90r 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003F90r 3               ; 		.byte "ldx.y"
003F90r 3               
003F90r 3               ; nt_asm_ldx_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ldx_zy
003F90r 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003F90r 3               ; 		.byte "ldx.z"
003F90r 3               
003F90r 3               ; nt_asm_ldx_zy:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_ldy
003F90r 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003F90r 3               ; 		.byte "ldx.zy"
003F90r 3               
003F90r 3               ; nt_asm_ldy:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_ldy_h
003F90r 3               ; 		.word xt_asm_ldy, z_asm_ldy
003F90r 3               ; 		.byte "ldy"
003F90r 3               
003F90r 3               ; nt_asm_ldy_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ldy_x
003F90r 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003F90r 3               ; 		.byte "ldy.#"
003F90r 3               
003F90r 3               ; nt_asm_ldy_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ldy_z
003F90r 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003F90r 3               ; 		.byte "ldy.x"
003F90r 3               
003F90r 3               ; nt_asm_ldy_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ldy_zx
003F90r 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003F90r 3               ; 		.byte "ldy.z"
003F90r 3               
003F90r 3               ; nt_asm_ldy_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_lsr
003F90r 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003F90r 3               ; 		.byte "ldy.zx"
003F90r 3               
003F90r 3               ; nt_asm_lsr:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_lsr_a
003F90r 3               ; 		.word xt_asm_lsr, z_asm_lsr
003F90r 3               ; 		.byte "lsr"
003F90r 3               
003F90r 3               ; nt_asm_lsr_a:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_lsr_x
003F90r 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003F90r 3               ; 		.byte "lsr.a"
003F90r 3               
003F90r 3               ; nt_asm_lsr_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_lsr_z
003F90r 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003F90r 3               ; 		.byte "lsr.x"
003F90r 3               
003F90r 3               ; nt_asm_lsr_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_lsr_zx
003F90r 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003F90r 3               ; 		.byte "lsr.z"
003F90r 3               
003F90r 3               ; nt_asm_lsr_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_nop
003F90r 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003F90r 3               ; 		.byte "lsr.zx"
003F90r 3               
003F90r 3               ; nt_asm_nop:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_ora
003F90r 3               ; 		.word xt_asm_nop, z_asm_nop
003F90r 3               ; 		.byte "nop"
003F90r 3               
003F90r 3               ; nt_asm_ora:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_ora_h
003F90r 3               ; 		.word xt_asm_ora, z_asm_ora
003F90r 3               ; 		.byte "ora"
003F90r 3               
003F90r 3               ; nt_asm_ora_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ora_x
003F90r 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003F90r 3               ; 		.byte "ora.#"
003F90r 3               
003F90r 3               ; nt_asm_ora_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ora_y
003F90r 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003F90r 3               ; 		.byte "ora.x"
003F90r 3               
003F90r 3               ; nt_asm_ora_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ora_z
003F90r 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003F90r 3               ; 		.byte "ora.y"
003F90r 3               
003F90r 3               ; nt_asm_ora_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ora_zi
003F90r 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003F90r 3               ; 		.byte "ora.z"
003F90r 3               
003F90r 3               ; nt_asm_ora_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_ora_ziy
003F90r 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003F90r 3               ; 		.byte "ora.zi"
003F90r 3               
003F90r 3               ; nt_asm_ora_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_ora_zx
003F90r 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003F90r 3               ; 		.byte "ora.ziy"
003F90r 3               
003F90r 3               ; nt_asm_ora_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_ora_zxi
003F90r 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003F90r 3               ; 		.byte "ora.zx"
003F90r 3               
003F90r 3               ; nt_asm_ora_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_pha
003F90r 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003F90r 3               ; 		.byte "ora.zxi"
003F90r 3               
003F90r 3               ; nt_asm_pha:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_php
003F90r 3               ; 		.word xt_asm_pha, z_asm_pha
003F90r 3               ; 		.byte "pha"
003F90r 3               
003F90r 3               ; nt_asm_php:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_phx
003F90r 3               ; 		.word xt_asm_php, z_asm_php
003F90r 3               ; 		.byte "php"
003F90r 3               
003F90r 3               ; nt_asm_phx:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_phy
003F90r 3               ; 		.word xt_asm_phx, z_asm_phx
003F90r 3               ; 		.byte "phx"
003F90r 3               
003F90r 3               ; nt_asm_phy:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_pla
003F90r 3               ; 		.word xt_asm_phy, z_asm_phy
003F90r 3               ; 		.byte "phy"
003F90r 3               
003F90r 3               ; nt_asm_pla:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_plp
003F90r 3               ; 		.word xt_asm_pla, z_asm_pla
003F90r 3               ; 		.byte "pla"
003F90r 3               
003F90r 3               ; nt_asm_plp:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_plx
003F90r 3               ; 		.word xt_asm_plp, z_asm_plp
003F90r 3               ; 		.byte "plp"
003F90r 3               
003F90r 3               ; nt_asm_plx:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_ply
003F90r 3               ; 		.word xt_asm_plx, z_asm_plx
003F90r 3               ; 		.byte "plx"
003F90r 3               
003F90r 3               ; nt_asm_ply:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_rol
003F90r 3               ; 		.word xt_asm_ply, z_asm_ply
003F90r 3               ; 		.byte "ply"
003F90r 3               
003F90r 3               ; nt_asm_rol:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_rol_a
003F90r 3               ; 		.word xt_asm_rol, z_asm_rol
003F90r 3               ; 		.byte "rol"
003F90r 3               
003F90r 3               ; nt_asm_rol_a:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_rol_x
003F90r 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003F90r 3               ; 		.byte "rol.a"
003F90r 3               
003F90r 3               ; nt_asm_rol_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_rol_z
003F90r 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003F90r 3               ; 		.byte "rol.x"
003F90r 3               
003F90r 3               ; nt_asm_rol_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_rol_zx
003F90r 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003F90r 3               ; 		.byte "rol.z"
003F90r 3               
003F90r 3               ; nt_asm_rol_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_ror
003F90r 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003F90r 3               ; 		.byte "rol.zx"
003F90r 3               
003F90r 3               ; nt_asm_ror:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_ror_a
003F90r 3               ; 		.word xt_asm_ror, z_asm_ror
003F90r 3               ; 		.byte "ror"
003F90r 3               
003F90r 3               ; nt_asm_ror_a:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ror_x
003F90r 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003F90r 3               ; 		.byte "ror.a"
003F90r 3               
003F90r 3               ; nt_asm_ror_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ror_z
003F90r 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003F90r 3               ; 		.byte "ror.x"
003F90r 3               
003F90r 3               ; nt_asm_ror_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_ror_zx
003F90r 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003F90r 3               ; 		.byte "ror.z"
003F90r 3               
003F90r 3               ; nt_asm_ror_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_rti
003F90r 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003F90r 3               ; 		.byte "ror.zx"
003F90r 3               
003F90r 3               ; nt_asm_rti:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_rts
003F90r 3               ; 		.word xt_asm_rti, z_asm_rti
003F90r 3               ; 		.byte "rti"
003F90r 3               
003F90r 3               ; nt_asm_rts:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_sbc
003F90r 3               ; 		.word xt_asm_rts, z_asm_rts
003F90r 3               ; 		.byte "rts"
003F90r 3               
003F90r 3               ; nt_asm_sbc:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_sbc_h
003F90r 3               ; 		.word xt_asm_sbc, z_asm_sbc
003F90r 3               ; 		.byte "sbc"
003F90r 3               
003F90r 3               ; nt_asm_sbc_h:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sbc_x
003F90r 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003F90r 3               ; 		.byte "sbc.#"
003F90r 3               
003F90r 3               ; nt_asm_sbc_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sbc_y
003F90r 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003F90r 3               ; 		.byte "sbc.x"
003F90r 3               
003F90r 3               ; nt_asm_sbc_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sbc_z
003F90r 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003F90r 3               ; 		.byte "sbc.y"
003F90r 3               
003F90r 3               ; nt_asm_sbc_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sbc_zi
003F90r 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003F90r 3               ; 		.byte "sbc.z"
003F90r 3               
003F90r 3               ; nt_asm_sbc_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_sbc_ziy
003F90r 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003F90r 3               ; 		.byte "sbc.zi"
003F90r 3               
003F90r 3               ; nt_asm_sbc_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_sbc_zx
003F90r 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003F90r 3               ; 		.byte "sbc.ziy"
003F90r 3               
003F90r 3               ; nt_asm_sbc_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_sbc_zxi
003F90r 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003F90r 3               ; 		.byte "sbc.zx"
003F90r 3               
003F90r 3               ; nt_asm_sbc_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_sec
003F90r 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003F90r 3               ; 		.byte "sbc.zxi"
003F90r 3               
003F90r 3               ; nt_asm_sec:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_sed
003F90r 3               ; 		.word xt_asm_sec, z_asm_sec
003F90r 3               ; 		.byte "sec"
003F90r 3               
003F90r 3               ; nt_asm_sed:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_sei
003F90r 3               ; 		.word xt_asm_sed, z_asm_sed
003F90r 3               ; 		.byte "sed"
003F90r 3               
003F90r 3               ; nt_asm_sei:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_sta
003F90r 3               ; 		.word xt_asm_sei, z_asm_sei
003F90r 3               ; 		.byte "sei"
003F90r 3               
003F90r 3               ; nt_asm_sta:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_sta_x
003F90r 3               ; 		.word xt_asm_sta, z_asm_sta
003F90r 3               ; 		.byte "sta"
003F90r 3               
003F90r 3               ; nt_asm_sta_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sta_y
003F90r 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003F90r 3               ; 		.byte "sta.x"
003F90r 3               
003F90r 3               ; nt_asm_sta_y:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sta_z
003F90r 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003F90r 3               ; 		.byte "sta.y"
003F90r 3               
003F90r 3               ; nt_asm_sta_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sta_zi
003F90r 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003F90r 3               ; 		.byte "sta.z"
003F90r 3               
003F90r 3               ; nt_asm_sta_zi:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_sta_ziy
003F90r 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003F90r 3               ; 		.byte "sta.zi"
003F90r 3               
003F90r 3               ; nt_asm_sta_ziy:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_sta_zx
003F90r 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003F90r 3               ; 		.byte "sta.ziy"
003F90r 3               
003F90r 3               ; nt_asm_sta_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_sta_zxi
003F90r 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003F90r 3               ; 		.byte "sta.zx"
003F90r 3               
003F90r 3               ; nt_asm_sta_zxi:
003F90r 3               ; 		.byte 7, IM
003F90r 3               ;                 .word nt_asm_stx
003F90r 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003F90r 3               ; 		.byte "sta.zxi"
003F90r 3               
003F90r 3               ; nt_asm_stx:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_stx_z
003F90r 3               ; 		.word xt_asm_stx, z_asm_stx
003F90r 3               ; 		.byte "stx"
003F90r 3               
003F90r 3               ; nt_asm_stx_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_stx_zy
003F90r 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003F90r 3               ; 		.byte "stx.z"
003F90r 3               
003F90r 3               ; nt_asm_stx_zy:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_sty
003F90r 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003F90r 3               ; 		.byte "stx.zy"
003F90r 3               
003F90r 3               ; nt_asm_sty:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_sty_z
003F90r 3               ; 		.word xt_asm_sty, z_asm_sty
003F90r 3               ; 		.byte "sty"
003F90r 3               
003F90r 3               ; nt_asm_sty_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_sty_zx
003F90r 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003F90r 3               ; 		.byte "sty.z"
003F90r 3               
003F90r 3               ; nt_asm_sty_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_stz
003F90r 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003F90r 3               ; 		.byte "sty.zx"
003F90r 3               
003F90r 3               ; nt_asm_stz:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_stz_x
003F90r 3               ; 		.word xt_asm_stz, z_asm_stz
003F90r 3               ; 		.byte "stz"
003F90r 3               
003F90r 3               ; nt_asm_stz_x:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_stz_z
003F90r 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003F90r 3               ; 		.byte "stz.x"
003F90r 3               
003F90r 3               ; nt_asm_stz_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_stz_zx
003F90r 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003F90r 3               ; 		.byte "stz.z"
003F90r 3               
003F90r 3               ; nt_asm_stz_zx:
003F90r 3               ; 		.byte 6, IM
003F90r 3               ;                 .word nt_asm_tax
003F90r 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003F90r 3               ; 		.byte "stz.zx"
003F90r 3               
003F90r 3               ; nt_asm_tax:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_tay
003F90r 3               ; 		.word xt_asm_tax, z_asm_tax
003F90r 3               ; 		.byte "tax"
003F90r 3               
003F90r 3               ; nt_asm_tay:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_trb
003F90r 3               ; 		.word xt_asm_tay, z_asm_tay
003F90r 3               ; 		.byte "tay"
003F90r 3               
003F90r 3               ; nt_asm_trb:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_trb_z
003F90r 3               ; 		.word xt_asm_trb, z_asm_trb
003F90r 3               ; 		.byte "trb"
003F90r 3               
003F90r 3               ; nt_asm_trb_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_tsb
003F90r 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003F90r 3               ; 		.byte "trb.z"
003F90r 3               
003F90r 3               ; nt_asm_tsb:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_tsb_z
003F90r 3               ; 		.word xt_asm_tsb, z_asm_tsb
003F90r 3               ; 		.byte "tsb"
003F90r 3               
003F90r 3               ; nt_asm_tsb_z:
003F90r 3               ; 		.byte 5, IM
003F90r 3               ;                 .word nt_asm_tsx
003F90r 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003F90r 3               ; 		.byte "tsb.z"
003F90r 3               
003F90r 3               ; nt_asm_tsx:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_txa
003F90r 3               ; 		.word xt_asm_tsx, z_asm_tsx
003F90r 3               ; 		.byte "tsx"
003F90r 3               
003F90r 3               ; nt_asm_txa:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_txs
003F90r 3               ; 		.word xt_asm_txa, z_asm_txa
003F90r 3               ; 		.byte "txa"
003F90r 3               
003F90r 3               ; nt_asm_txs:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_tya
003F90r 3               ; 		.word xt_asm_txs, z_asm_txs
003F90r 3               ; 		.byte "txs"
003F90r 3               
003F90r 3               ; nt_asm_tya:
003F90r 3               ; 		.byte 3, IM
003F90r 3               ;                 .word nt_asm_arrow
003F90r 3               ; 		.word xt_asm_tya, z_asm_tya
003F90r 3               ; 		.byte "tya"
003F90r 3               
003F90r 3               ; ; Assembler pseudo-instructions, directives and macros
003F90r 3               
003F90r 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003F90r 3               ;                 .byte 3, IM
003F90r 3               ;                 .word nt_asm_back_jump
003F90r 3               ;                 .word xt_asm_arrow, z_asm_arrow
003F90r 3               ;                 .byte "-->"
003F90r 3               
003F90r 3               
003F90r 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003F90r 3               ;                 .byte 2, IM
003F90r 3               ;                 .word nt_asm_back_branch
003F90r 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003F90r 3               ;                 .byte "<j"
003F90r 3               
003F90r 3               ; nt_asm_back_branch:
003F90r 3               ;                 .byte 2, IM
003F90r 3               ;                 .word nt_asm_push_a
003F90r 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003F90r 3               ;                 .byte "<b"
003F90r 3               
003F90r 3               ; nt_asm_push_a:
003F90r 3               ;                 .byte 6, IM
003F90r 3               ;                 .word 0000
003F90r 3               ;                 .word xt_asm_push_a, z_asm_push_a
003F90r 3               ;                 .byte "push-a"
003F90r 3               
003F90r 3               
003F90r 3               
003F90r 3               ; END of ASSEMBLER-WORDLIST
003F90r 3               
003F90r 3               ; END
003F90r 3               
003F90r 2                   .include "strings.s"          ; Headers of native words
003F90r 3               ; List of Strings for Tali Forth 2
003F90r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003F90r 3               ; First version: 01. Apr 2016 (for Liara Forth)
003F90r 3               ; This version: 28. Dec 2018
003F90r 3               
003F90r 3               ; This file is included by taliforth.asm
003F90r 3               
003F90r 3               ; ## GENERAL STRINGS
003F90r 3               
003F90r 3               ; All general strings must be zero-terminated, names start with "s_",
003F90r 3               ; aliases with "str_"
003F90r 3               
003F90r 3               str_ok =              0
003F90r 3               str_compile =         1
003F90r 3               str_redefined =       2
003F90r 3               str_wid_forth =       3
003F90r 3               str_abc_lower =       4
003F90r 3               str_abc_upper =       5
003F90r 3               str_wid_editor =      6
003F90r 3               str_wid_assembler =   7
003F90r 3               str_wid_root =        8
003F90r 3               str_see_flags =       9
003F90r 3               str_see_nt =         10
003F90r 3               str_see_xt =         11
003F90r 3               str_see_size =       12
003F90r 3               
003F90r 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003F90r 3               ; to tables as error and string numbers.
003F90r 3               string_table:
003F90r 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
003F94r 3  rr rr rr rr  
003F98r 3  rr rr        
003F9Ar 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003F9Er 3  rr rr rr rr  
003FA2r 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
003FA6r 3  rr rr rr rr  
003FAAr 3               
003FAAr 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
003FAEr 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
003FB2r 3  70 69 6C 65  
003FB6r 3  64 00        
003FB8r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
003FBCr 3  66 69 6E 65  
003FC0r 3  64 20 00     
003FC3r 3               
003FC3r 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
003FC7r 3  34 35 36 37  
003FCBr 3  38 39 61 62  
003FE7r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
003FEBr 3  34 35 36 37  
003FEFr 3  38 39 41 42  
00400Br 3               
00400Br 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
00400Fr 3  6D 62 6C 65  
004013r 3  72 20 00     
004016r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
00401Ar 3  6F 72 20 00  
00401Er 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
004022r 3  68 20 00     
004025r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
004029r 3  20 00        
00402Br 3               
00402Br 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
00402Fr 3  73 20 28 43  
004033r 3  4F 20 41 4E  
004047r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
00404Br 3  00           
00404Cr 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
004050r 3  00           
004051r 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
004055r 3  20 28 64 65  
004059r 3  63 69 6D 61  
004062r 3               
004062r 3               
004062r 3               ; ## ERROR STRINGS
004062r 3               
004062r 3               ; All error strings must be zero-terminated, all names start with "es_",
004062r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
004062r 3               ; as well
004062r 3               
004062r 3               err_allot =        0
004062r 3               err_badsource =    1
004062r 3               err_compileonly =  2
004062r 3               err_defer =        3
004062r 3               err_divzero =      4
004062r 3               err_noname =       5
004062r 3               err_refill =       6
004062r 3               err_state =        7
004062r 3               err_syntax =       8
004062r 3               err_underflow =    9
004062r 3               err_negallot =     10
004062r 3               err_wordlist =     11
004062r 3               err_blockwords =   12
004062r 3               
004062r 3               error_table:
004062r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
004066r 3  rr rr rr rr  
00406Ar 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
00406Er 3  rr rr rr rr  
004072r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
004076r 3  rr rr rr rr  
00407Ar 3  rr rr                .word es_blockwords                                    ; 12
00407Cr 3               
00407Cr 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
004080r 3  54 20 75 73  
004084r 3  69 6E 67 20  
00409Dr 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
0040A1r 3  67 61 6C 20  
0040A5r 3  53 4F 55 52  
0040BDr 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
0040C1r 3  72 70 72 65  
0040C5r 3  74 69 6E 67  
0040DEr 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
0040E2r 3  52 65 64 20  
0040E6r 3  77 6F 72 64  
0040FBr 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
0040FFr 3  73 69 6F 6E  
004103r 3  20 62 79 20  
00410Cr 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
004110r 3  69 6E 67 20  
004114r 3  66 61 69 6C  
00411Cr 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
004120r 3  20 63 6F 75  
004124r 3  6C 64 20 6E  
00414Ar 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
00414Er 3  61 64 79 20  
004152r 3  69 6E 20 63  
004162r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
004166r 3  66 69 6E 65  
00416Ar 3  64 20 77 6F  
004171r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
004175r 3  6B 20 75 6E  
004179r 3  64 65 72 66  
004181r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
004185r 3  6D 65 6D 6F  
004189r 3  72 79 20 66  
00419Dr 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
0041A1r 3  6F 72 64 6C  
0041A5r 3  69 73 74 73  
0041B4r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
0041B8r 3  73 65 20 61  
0041BCr 3  73 73 69 67  
0041F3r 3               
0041F3r 3               ; ## ENVIRONMENT STRINGS
0041F3r 3               
0041F3r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
0041F3r 3               ; Length byte first, then the string itself that is not rpt. not
0041F3r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
0041F3r 3               ; "envs_".
0041F3r 3               
0041F3r 3               ; These return a single-cell number
0041F3r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
0041F7r 3  55 4E 54 45  
0041FBr 3  44 2D 53 54  
004203r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
004207r 3  4C 44        
004209r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
00420Dr 3  44           
00420Er 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
004212r 3  52 45 53 53  
004216r 3  2D 55 4E 49  
004220r 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
004224r 3  4F 52 45 44  
004228r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
00422Cr 3  2D 43 48 41  
004230r 3  52           
004231r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
004235r 3  2D 4E        
004237r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
00423Br 3  2D 55        
00423Dr 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
004241r 3  55 52 4E 2D  
004245r 3  53 54 41 43  
004250r 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
004254r 3  43 4B 2D 43  
004258r 3  45 4C 4C 53  
00425Cr 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
004260r 3  44 4C 49 53  
004264r 3  54 53        
004266r 3               
004266r 3               ; These return a double-cell number
004266r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
00426Ar 3  2D 44        
00426Cr 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
004270r 3  2D 55 44     
004273r 3               
004273r 3               ; END
004273r 3               
004273r 2               
004273r 2               ; High-level Forth words, see forth_code/README.md
004273r 2               forth_words_start:
004273r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
004277r 2  2E 28 20 52  
00427Br 2  65 61 64 79  
004285r 2               forth_words_end:
004285r 2               
004285r 2               ; User-defined Forth words, see forth_code/README.md
004285r 2               user_words_start:
004285r 2  20 32 30 20  .incbin "forth_code/user_words.asc"
004289r 2  63 6F 6E 73  
00428Dr 2  74 61 6E 74  
004947r 2               user_words_end:
004947r 2               
004947r 2               
004947r 2               ; =====================================================================
004947r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
004947r 2               
004947r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
004947r 2               ; at compile time so they are available at run time. Words that use this
004947r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
004947r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
004947r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
004947r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
004947r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
004947r 2               ; Bowie.
004947r 2               
004947r 2               ;               ldy #>addr      ; MSB   ; "Young"
004947r 2               ;               lda #<addr      ; LSB   ; "Americans"
004947r 2               ;               jsr cmpl_subroutine
004947r 2               
004947r 2               ; Also, we keep a routine here to compile a single byte passed through A.
004947r 2               
004947r 2               cmpl_subroutine:
004947r 2                   ; This is the entry point to compile JSR <ADDR>
004947r 2  48               pha             ; save LSB of address
004948r 2  A9 20            lda #$20        ; load opcode for JSR
00494Ar 2  80 03            bra cmpl_common
00494Cr 2               cmpl_jump:
00494Cr 2                   ; This is the entry point to compile JMP <ADDR>
00494Cr 2  48               pha             ; save LSB of address
00494Dr 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
00494Fr 2               cmpl_common:
00494Fr 2                   ; At this point, A contains the opcode to be compiled,
00494Fr 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
00494Fr 2                   ; the address is in Y
00494Fr 2  20 rr rr         jsr cmpl_a      ; compile opcode
004952r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
004953r 2               cmpl_word:
004953r 2                   ; This is the entry point to compile a word (little-endian)
004953r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
004956r 2  98               tya             ; fall thru for MSB
004957r 2               cmpl_a:
004957r 2                   ; This is the entry point to compile a single byte which
004957r 2                   ; is passed in A. The built-in assembler assumes that this
004957r 2                   ; routine does not modify Y.
004957r 2  92 rr            sta (cp)
004959r 2  E6 rr            inc cp
00495Br 2  D0 02            bne _done
00495Dr 2  E6 rr            inc cp+1
00495Fr 2               _done:
00495Fr 2  60               rts
004960r 2               
004960r 2               
004960r 2               
004960r 2               ; =====================================================================
004960r 2               ; CODE FIELD ROUTINES
004960r 2               
004960r 2               doconst:
004960r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
004960r 2               ; the Data Field onto the Data Stack
004960r 2               ; """
004960r 2  CA               dex             ; make room for constant
004961r 2  CA               dex
004962r 2               
004962r 2                   ; The value we need is stored in the two bytes after the
004962r 2                   ; JSR return address, which in turn is what is on top of
004962r 2                   ; the Return Stack
004962r 2  68               pla             ; LSB of return address
004963r 2  85 rr            sta tmp1
004965r 2  68               pla             ; MSB of return address
004966r 2  85 rr            sta tmp1+1
004968r 2               
004968r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
004968r 2                   ; the return address on the 65c02
004968r 2  A0 01            ldy #1
00496Ar 2  B1 rr            lda (tmp1),y
00496Cr 2  95 00            sta 0,x
00496Er 2  C8               iny
00496Fr 2  B1 rr            lda (tmp1),y
004971r 2  95 01            sta 1,x
004973r 2               
004973r 2                   ; This takes us back to the original caller, not the
004973r 2                   ; DOCONST caller
004973r 2  60               rts
004974r 2               
004974r 2               
004974r 2               dodefer:
004974r 2               ; """Execute a DEFER statement at runtime: Execute the address we
004974r 2               ; find after the caller in the Data Field
004974r 2               ; """
004974r 2                   ; The xt we need is stored in the two bytes after the JSR
004974r 2                   ; return address, which is what is on top of the Return
004974r 2                   ; Stack. So all we have to do is replace our return jump
004974r 2                   ; with what we find there
004974r 2  68               pla             ; LSB
004975r 2  85 rr            sta tmp1
004977r 2  68               pla             ; MSB
004978r 2  85 rr            sta tmp1+1
00497Ar 2               
00497Ar 2  A0 01            ldy #1
00497Cr 2  B1 rr            lda (tmp1),y
00497Er 2  85 rr            sta tmp2
004980r 2  C8               iny
004981r 2  B1 rr            lda (tmp1),y
004983r 2  85 rr            sta tmp2+1
004985r 2               
004985r 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
004988r 2               
004988r 2               defer_error:
004988r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
004988r 2  A9 03            lda #err_defer
00498Ar 2  4C rr rr         jmp error
00498Dr 2               
00498Dr 2               dodoes:
00498Dr 2               ; """Execute the runtime portion of DOES>. See DOES> and
00498Dr 2               ; docs/create-does.txt for details and
00498Dr 2               ; http://www.bradrodriguez.com/papers/moving3.htm
00498Dr 2               ; """
00498Dr 2                   ; Assumes the address of the CFA of the original defining word
00498Dr 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
00498Dr 2                   ; for a later jump, adding one byte because of the way the
00498Dr 2                   ; 6502 works
00498Dr 2  7A               ply             ; LSB
00498Er 2  68               pla             ; MSB
00498Fr 2  C8               iny
004990r 2  D0 01            bne @1
004992r 2  1A               inc
004993r 2               @1:
004993r 2  84 rr            sty tmp2
004995r 2  85 rr            sta tmp2+1
004997r 2               
004997r 2                   ; Next on the Return Stack should be the address of the PFA of
004997r 2                   ; the calling defined word (say, the name of whatever constant we
004997r 2                   ; just defined). Move this to the Data Stack, again adding one.
004997r 2  CA               dex
004998r 2  CA               dex
004999r 2               
004999r 2  7A               ply
00499Ar 2  68               pla
00499Br 2  C8               iny
00499Cr 2  D0 01            bne @2
00499Er 2  1A               inc
00499Fr 2               @2:
00499Fr 2  94 00            sty 0,x         ; LSB
0049A1r 2  95 01            sta 1,x         ; MSB
0049A3r 2               
0049A3r 2                   ; This leaves the return address from the original main routine
0049A3r 2                   ; on top of the Return Stack. We leave that untouched and jump
0049A3r 2                   ; to the special code of the defining word. It's RTS instruction
0049A3r 2                   ; will take us back to the main routine
0049A3r 2  6C rr rr         jmp (tmp2)
0049A6r 2               
0049A6r 2               
0049A6r 2               dovar:
0049A6r 2               ; """Execute a variable: Push the address of the first bytes of
0049A6r 2               ; the Data Field onto the stack. This is called with JSR so we
0049A6r 2               ; can pick up the address of the calling variable off the 65c02's
0049A6r 2               ; stack. The final RTS takes us to the original caller of the
0049A6r 2               ; routine that itself called DOVAR. This is the default
0049A6r 2               ; routine installed with CREATE.
0049A6r 2               ; """
0049A6r 2                   ; Pull the return address off the machine's stack, adding
0049A6r 2                   ; one because of the way the 65c02 handles subroutines
0049A6r 2  7A               ply             ; LSB
0049A7r 2  68               pla             ; MSB
0049A8r 2  C8               iny
0049A9r 2  D0 01            bne @1
0049ABr 2  1A               inc
0049ACr 2               @1:
0049ACr 2  CA               dex
0049ADr 2  CA               dex
0049AEr 2               
0049AEr 2  95 01            sta 1,x
0049B0r 2  98               tya
0049B1r 2  95 00            sta 0,x
0049B3r 2               
0049B3r 2  60               rts
0049B4r 2               
0049B4r 2               ; =====================================================================
0049B4r 2               ; LOW LEVEL HELPER FUNCTIONS
0049B4r 2               
0049B4r 2               byte_to_ascii:
0049B4r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
0049B4r 2               .scope
0049B4r 2  48               pha
0049B5r 2  4A               lsr             ; convert high nibble first
0049B6r 2  4A               lsr
0049B7r 2  4A               lsr
0049B8r 2  4A               lsr
0049B9r 2  20 rr rr         jsr _nibble_to_ascii
0049BCr 2  68               pla
0049BDr 2               
0049BDr 2                   ; fall through to _nibble_to_ascii
0049BDr 2               
0049BDr 2               _nibble_to_ascii:
0049BDr 2               ; """Private helper function for byte_to_ascii: Print lower nibble
0049BDr 2               ; of A and and EMIT it. This does the actual work.
0049BDr 2               ; """
0049BDr 2  29 0F            and #$0F
0049BFr 2  09 30            ora #'0'
0049C1r 2  C9 3A            cmp #$3A        ; '9+1
0049C3r 2  90 02            bcc @1
0049C5r 2  69 06            adc #$06
0049C7r 2               
0049C7r 2  4C rr rr     @1:               jmp emit_a
0049CAr 2               
0049CAr 2  60               rts
0049CBr 2               .endscope
0049CBr 2               
0049CBr 2               compare_16bit:
0049CBr 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
0049CBr 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
0049CBr 2               ; also http://www.6502.org/tutorials/compare_beyond.html
0049CBr 2               ; For signed numbers, Z signals equality and N which number is larger:
0049CBr 2               ;       if TOS = NOS: Z=1 and N=0
0049CBr 2               ;       if TOS > NOS: Z=0 and N=0
0049CBr 2               ;       if TOS < NOS: Z=0 and N=1
0049CBr 2               ; For unsigned numbers, Z signals equality and C which number is larger:
0049CBr 2               ;       if TOS = NOS: Z=1 and N=0
0049CBr 2               ;       if TOS > NOS: Z=0 and C=1
0049CBr 2               ;       if TOS < NOS: Z=0 and C=0
0049CBr 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
0049CBr 2               ;                               WORD2 (SUBTRAHEND) is NOS
0049CBr 2               ; """
0049CBr 2               .scope
0049CBr 2                   ; Compare LSB first to set the carry flag
0049CBr 2  B5 00            lda 0,x                 ; LSB of TOS
0049CDr 2  D5 02            cmp 2,x                 ; LSB of NOS
0049CFr 2  F0 0A            beq _equal
0049D1r 2               
0049D1r 2                   ; LSBs are not equal, compare MSB
0049D1r 2  B5 01            lda 1,x                 ; MSB of TOS
0049D3r 2  F5 03            sbc 3,x                 ; MSB of NOS
0049D5r 2  09 01            ora #1                  ; Make zero flag 0 because not equal
0049D7r 2  70 08            bvs _overflow
0049D9r 2  80 08            bra _not_equal
0049DBr 2               _equal:
0049DBr 2                   ; Low bytes are equal, so we compare high bytes
0049DBr 2  B5 01            lda 1,x                 ; MSB of TOS
0049DDr 2  F5 03            sbc 3,x                 ; MSB of NOS
0049DFr 2  50 04            bvc _done
0049E1r 2               _overflow:
0049E1r 2                   ; Handle overflow because we use signed numbers
0049E1r 2  49 80            eor #$80                ; complement negative flag
0049E3r 2               _not_equal:
0049E3r 2  09 01            ora #1                  ; if overflow, we can't be eqal
0049E5r 2               _done:
0049E5r 2  60               rts
0049E6r 2               .endscope
0049E6r 2               
0049E6r 2               current_to_dp:
0049E6r 2               ; """Look up the current (compilation) dictionary pointer
0049E6r 2               ; in the wordlist set and put it into the dp zero-page
0049E6r 2               ; variable. Uses A and Y.
0049E6r 2               ; """
0049E6r 2                   ; Determine which wordlist is current
0049E6r 2  A0 04            ldy #current_offset
0049E8r 2  B1 rr            lda (up),y      ; current is a byte variable
0049EAr 2  0A               asl             ; turn it into an offset (in cells)
0049EBr 2               
0049EBr 2                   ; Get the dictionary pointer for that wordlist.
0049EBr 2  18               clc
0049ECr 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0049EEr 2  A8               tay
0049EFr 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
0049F1r 2  85 rr            sta dp
0049F3r 2  C8               iny
0049F4r 2  B1 rr            lda (up),y
0049F6r 2  85 rr            sta dp+1
0049F8r 2               
0049F8r 2  60               rts
0049F9r 2               
0049F9r 2               
0049F9r 2               dp_to_current:
0049F9r 2               ; """Look up which wordlist is current and update its pointer
0049F9r 2               ; with the value in dp. Uses A and Y.
0049F9r 2               ; """
0049F9r 2                   ; Determine which wordlist is current
0049F9r 2  A0 04            ldy #current_offset
0049FBr 2  B1 rr            lda (up),y      ; current is a byte variable
0049FDr 2  0A               asl             ; turn it into an offset (in cells)
0049FEr 2               
0049FEr 2                   ; Get the dictionary pointer for that wordlist.
0049FEr 2  18               clc
0049FFr 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004A01r 2  A8               tay
004A02r 2  A5 rr            lda dp
004A04r 2  91 rr            sta (up),y              ; get the dp for that wordlist.
004A06r 2  C8               iny
004A07r 2  A5 rr            lda dp+1
004A09r 2  91 rr            sta (up),y
004A0Br 2               
004A0Br 2  60               rts
004A0Cr 2               
004A0Cr 2               interpret:
004A0Cr 2               .scope
004A0Cr 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
004A0Cr 2               ; Process one line only. Assumes that the address of name is in
004A0Cr 2               ; cib and the length of the whole input line string is in ciblen
004A0Cr 2               ; """
004A0Cr 2                   ; Normally we would use PARSE here with the SPACE character as
004A0Cr 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
004A0Cr 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
004A0Cr 2                   ; delimiters per default and skips any leading spaces, which
004A0Cr 2                   ; PARSE doesn't
004A0Cr 2               _loop:
004A0Cr 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
004A0Fr 2               
004A0Fr 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
004A0Fr 2                   ; in the line and we need to go get a new line
004A0Fr 2  B5 00            lda 0,x
004A11r 2  15 01            ora 1,x
004A13r 2  F0 70            beq _line_done
004A15r 2               
004A15r 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
004A15r 2                   ; make a copy of the address in case it isn't a word we know and
004A15r 2                   ; we have to go see if it is a number
004A15r 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
004A18r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
004A1Br 2               
004A1Br 2                   ; A zero signals that we didn't find a word in the Dictionary
004A1Br 2  B5 00            lda 0,x
004A1Dr 2  15 01            ora 1,x
004A1Fr 2  D0 28            bne _got_name_token
004A21r 2               
004A21r 2                   ; We didn't get any nt we know of, so let's see if this is
004A21r 2                   ; a number.
004A21r 2  E8               inx                     ; ( addr u 0 -- addr u )
004A22r 2  E8               inx
004A23r 2               
004A23r 2                   ; If the number conversion doesn't work, NUMBER will do the
004A23r 2                   ; complaining for us
004A23r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
004A26r 2               
004A26r 2                   ; Otherweise, if we're interpreting, we're done
004A26r 2  A5 rr            lda state
004A28r 2  F0 E2            beq _loop
004A2Ar 2               
004A2Ar 2                   ; We're compiling, so there is a bit more work.  Check
004A2Ar 2                   ; status bit 5 to see if it's a single or double-cell
004A2Ar 2                   ; number.
004A2Ar 2  A9 20            lda #$20
004A2Cr 2  24 rr            bit status
004A2Er 2  F0 0D            beq _single_number
004A30r 2               
004A30r 2                   ; It's a double cell number.  If we swap the
004A30r 2                   ; upper and lower half, we can use the literal_runtime twice
004A30r 2                   ; to compile it into the dictionary.
004A30r 2  20 rr rr         jsr xt_swap
004A33r 2  A0 rr            ldy #>literal_runtime
004A35r 2  A9 rr            lda #<literal_runtime
004A37r 2  20 rr rr         jsr cmpl_subroutine
004A3Ar 2               
004A3Ar 2                   ; compile our number
004A3Ar 2  20 rr rr         jsr xt_comma
004A3Dr 2               
004A3Dr 2                   ; Fall into _single_number to process the other half.
004A3Dr 2               _single_number:
004A3Dr 2  A0 rr            ldy #>literal_runtime
004A3Fr 2  A9 rr            lda #<literal_runtime
004A41r 2  20 rr rr         jsr cmpl_subroutine
004A44r 2               
004A44r 2                   ; compile our number
004A44r 2  20 rr rr         jsr xt_comma
004A47r 2               
004A47r 2                   ; That was so much fun, let's do it again!
004A47r 2  80 C3            bra _loop
004A49r 2               
004A49r 2               _got_name_token:
004A49r 2                   ; We have a known word's nt TOS. We're going to need its xt
004A49r 2                   ; though, which is four bytes father down.
004A49r 2               
004A49r 2                   ; We arrive here with ( addr u nt ), so we NIP twice
004A49r 2  B5 00            lda 0,x
004A4Br 2  95 04            sta 4,x
004A4Dr 2  B5 01            lda 1,x
004A4Fr 2  95 05            sta 5,x
004A51r 2               
004A51r 2  E8               inx
004A52r 2  E8               inx
004A53r 2  E8               inx
004A54r 2  E8               inx                     ; ( nt )
004A55r 2               
004A55r 2                   ; Save a version of nt for error handling and compilation stuff
004A55r 2  B5 00            lda 0,x
004A57r 2  85 rr            sta tmpbranch
004A59r 2  B5 01            lda 1,x
004A5Br 2  85 rr            sta tmpbranch+1
004A5Dr 2               
004A5Dr 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
004A60r 2               
004A60r 2                   ; See if we are in interpret or compile mode, 0 is interpret
004A60r 2  A5 rr            lda state
004A62r 2  D0 13            bne _compile
004A64r 2               
004A64r 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
004A64r 2                   ; though, see if this isn't a compile-only word, which would be
004A64r 2                   ; illegal. The status byte is the second one of the header.
004A64r 2  A0 01            ldy #1
004A66r 2  B1 rr            lda (tmpbranch),y
004A68r 2  29 01            and #CO                 ; mask everything but Compile Only bit
004A6Ar 2  F0 05            beq _interpret
004A6Cr 2               
004A6Cr 2  A9 02            lda #err_compileonly
004A6Er 2  4C rr rr         jmp error
004A71r 2               
004A71r 2               _interpret:
004A71r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
004A71r 2                   ; the RTS of the word we're executing will bring us back here,
004A71r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
004A71r 2                   ; xt directly, we have to fool around with the Return Stack
004A71r 2                   ; instead, which is actually slightly slower
004A71r 2  20 rr rr         jsr xt_execute
004A74r 2               
004A74r 2                   ; That's quite enough for this word, let's get the next one
004A74r 2  4C rr rr         jmp _loop
004A77r 2               
004A77r 2               _compile:
004A77r 2                   ; We're compiling! However, we need to see if this is an
004A77r 2                   ; IMMEDIATE word, which would mean we execute it right now even
004A77r 2                   ; during compilation mode. Fortunately, we saved the nt so life
004A77r 2                   ; is easier. The flags are in the second byte of the header
004A77r 2  A0 01            ldy #1
004A79r 2  B1 rr            lda (tmpbranch),y
004A7Br 2  29 04            and #IM                 ; Mask all but IM bit
004A7Dr 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
004A7Fr 2               
004A7Fr 2                   ; Compile the xt into the Dictionary with COMPILE,
004A7Fr 2  20 rr rr         jsr xt_compile_comma
004A82r 2  4C rr rr         jmp _loop
004A85r 2               
004A85r 2               _line_done:
004A85r 2                   ; drop stuff from PARSE_NAME
004A85r 2  E8               inx
004A86r 2  E8               inx
004A87r 2  E8               inx
004A88r 2  E8               inx
004A89r 2               
004A89r 2  60               rts
004A8Ar 2               .endscope
004A8Ar 2               
004A8Ar 2               
004A8Ar 2               is_printable:
004A8Ar 2               .scope
004A8Ar 2               ; """Given a character in A, check if it is a printable ASCII
004A8Ar 2               ; character in the range from $20 to $7E inclusive. Returns the
004A8Ar 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
004A8Ar 2               ; is printable. Keeps A. See
004A8Ar 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
004A8Ar 2               ; discussion of various ways to do this
004A8Ar 2  C9 20            cmp #AscSP              ; $20
004A8Cr 2  90 08            bcc _done
004A8Er 2  C9 7F            cmp #'~' + 1             ; $7E
004A90r 2  B0 03            bcs _failed
004A92r 2               
004A92r 2  38               sec
004A93r 2  80 01            bra _done
004A95r 2               _failed:
004A95r 2  18               clc
004A96r 2               _done:
004A96r 2  60               rts
004A97r 2               .endscope
004A97r 2               
004A97r 2               
004A97r 2               is_whitespace:
004A97r 2               .scope
004A97r 2               ; """Given a character in A, check if it is a whitespace
004A97r 2               ; character, that is, an ASCII value from 0 to 32 (where
004A97r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
004A97r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
004A97r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
004A97r 2               ; a discussion of the uses. Does not change A or Y.
004A97r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
004A99r 2  90 08            bcc _done
004A9Br 2               
004A9Br 2  C9 21            cmp #AscSP+1
004A9Dr 2  B0 03            bcs _failed
004A9Fr 2               
004A9Fr 2  38               sec
004AA0r 2  80 01            bra _done
004AA2r 2               _failed:
004AA2r 2  18               clc
004AA3r 2               _done:
004AA3r 2  60               rts
004AA4r 2               .endscope
004AA4r 2               
004AA4r 2               
004AA4r 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
004AA4r 2               ; required for the word. This routine flows into the generic error handling
004AA4r 2               ; code
004AA4r 2               underflow_1:
004AA4r 2               ; """Make sure we have at least one cell on the Data Stack"""
004AA4r 2  E0 rr            cpx #dsp0-1
004AA6r 2  10 10            bpl underflow_error
004AA8r 2  60               rts
004AA9r 2               underflow_2:
004AA9r 2               ; """Make sure we have at least two cells on the Data Stack"""
004AA9r 2  E0 rr            cpx #dsp0-3
004AABr 2  10 0B            bpl underflow_error
004AADr 2  60               rts
004AAEr 2               underflow_3:
004AAEr 2               ; """Make sure we have at least three cells on the Data Stack"""
004AAEr 2  E0 rr            cpx #dsp0-5
004AB0r 2  10 06            bpl underflow_error
004AB2r 2  60               rts
004AB3r 2               underflow_4:
004AB3r 2               ; """Make sure we have at least four cells on the Data Stack"""
004AB3r 2  E0 rr            cpx #dsp0-7
004AB5r 2  10 01            bpl underflow_error
004AB7r 2  60               rts
004AB8r 2               
004AB8r 2               underflow_error:
004AB8r 2                   ; Entry for COLD/ABORT/QUIT
004AB8r 2  A9 09            lda #err_underflow      ; fall through to error
004ABAr 2               
004ABAr 2               error:
004ABAr 2               ; """Given the error number in a, print the associated error string and
004ABAr 2               ; call abort. Uses tmp3.
004ABAr 2               ; """
004ABAr 2  0A               asl
004ABBr 2  A8               tay
004ABCr 2  B9 rr rr         lda error_table,y
004ABFr 2  85 rr            sta tmp3                ; LSB
004AC1r 2  C8               iny
004AC2r 2  B9 rr rr         lda error_table,y
004AC5r 2  85 rr            sta tmp3+1              ; MSB
004AC7r 2               
004AC7r 2  20 rr rr         jsr print_common
004ACAr 2  20 rr rr         jsr xt_cr
004ACDr 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
004AD0r 2               
004AD0r 2               
004AD0r 2               ; =====================================================================
004AD0r 2               ; PRINTING ROUTINES
004AD0r 2               
004AD0r 2               ; We distinguish two types of print calls, both of which take the string number
004AD0r 2               ; (see strings.asm) in A:
004AD0r 2               
004AD0r 2               ;       print_string       - with a line feed
004AD0r 2               ;       print_string_no_lf - without a line feed
004AD0r 2               
004AD0r 2               ; In addition, print_common provides a lower-level alternative for error
004AD0r 2               ; handling and anything else that provides the address of the
004AD0r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
004AD0r 2               ; printing should be more concerned with size than speed, because anything to
004AD0r 2               ; do with humans reading text is going to be slow.
004AD0r 2               
004AD0r 2               print_string_no_lf:
004AD0r 2               ; """Given the number of a zero-terminated string in A, print it to the
004AD0r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
004AD0r 2               ; through to print_common
004AD0r 2               ; """
004AD0r 2                   ; Get the entry from the string table
004AD0r 2  0A               asl
004AD1r 2  A8               tay
004AD2r 2  B9 rr rr         lda string_table,y
004AD5r 2  85 rr            sta tmp3                ; LSB
004AD7r 2  C8               iny
004AD8r 2  B9 rr rr         lda string_table,y
004ADBr 2  85 rr            sta tmp3+1              ; MSB
004ADDr 2               
004ADDr 2                   ; fall through to print_common
004ADDr 2               print_common:
004ADDr 2               ; """Common print routine used by both the print functions and
004ADDr 2               ; the error printing routine. Assumes string address is in tmp3. Uses
004ADDr 2               ; Y.
004ADDr 2               ; """
004ADDr 2               .scope
004ADDr 2  A0 00            ldy #0
004ADFr 2               _loop:
004ADFr 2  B1 rr            lda (tmp3),y
004AE1r 2  F0 06            beq _done               ; strings are zero-terminated
004AE3r 2               
004AE3r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
004AE6r 2  C8               iny
004AE7r 2  80 F6            bra _loop
004AE9r 2               _done:
004AE9r 2  60               rts
004AEAr 2               .endscope
004AEAr 2               
004AEAr 2               print_string:
004AEAr 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
004AEAr 2               ; We do not check to see if the index is out of range. Uses tmp3.
004AEAr 2               ; """
004AEAr 2  20 rr rr         jsr print_string_no_lf
004AEDr 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
004AF0r 2               
004AF0r 2               
004AF0r 2               print_u:
004AF0r 2               ; """basic printing routine used by higher-level constructs,
004AF0r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
004AF0r 2               ; basically u. without the space at the end. used for various
004AF0r 2               ; outputs
004AF0r 2               ; """
004AF0r 2  20 rr rr         jsr xt_zero                     ; 0
004AF3r 2  20 rr rr         jsr xt_less_number_sign         ; <#
004AF6r 2  20 rr rr         jsr xt_number_sign_s            ; #S
004AF9r 2  20 rr rr         jsr xt_number_sign_greater      ; #>
004AFCr 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
004AFFr 2               
004AFFr 2               ; END
004AFFr 2               
004AFFr 1               ; .include "../../ed.s"
004AFFr 1               
004AFFr 1               
004AFFr 1               .segment "DATA"
004AFFr 1               
004AFFr 1               platform_bye:
004AFFr 1               kernel_init:
004AFFr 1               v_nmi:
004AFFr 1  A9 FF            lda #$FF
004B01r 1  8D 82 FF         sta DDRB
004B04r 1  8D 83 FF         sta DDRA
004B07r 1  9C 81 FF         stz PORTA
004B0Ar 1  9C 80 FF         stz PORTB
004B0Dr 1               .ifdef video_init
004B0Dr 1                   jsr video_init
004B0Dr 1               .endif
004B0Dr 1               .ifdef ps2_init
004B0Dr 1  20 rr rr         jsr ps2_init
004B10r 1               .endif
004B10r 1               
004B10r 1               .ifdef timer_init
004B10r 1  20 rr rr         jsr timer_init
004B13r 1               .endif
004B13r 1  20 rr rr         jsr acia_init
004B16r 1               .ifdef lcd_init
004B16r 1  20 rr rr         jsr lcd_init
004B19r 1               .endif
004B19r 1               .ifdef spi_init
004B19r 1                   jsr spi_init
004B19r 1               .endif
004B19r 1               .ifdef kb_init
004B19r 1                   jsr kb_init
004B19r 1               .endif
004B19r 1               
004B19r 1               
004B19r 1               
004B19r 1  DA A2 00 BD      printascii welcome_message
004B1Dr 1  rr rr F0 06  
004B21r 1  20 rr rr E8  
004B28r 1               
004B28r 1               
004B28r 1  4C rr rr         jmp forth
004B2Br 1               
004B2Br 1               
004B2Br 1               kernel_putc:
004B2Br 1                   ; """Print a single character to the console. """
004B2Br 1                   ;; Send_Char - send character in A out serial port.
004B2Br 1                   ;; Uses: A (original value restored)
004B2Br 1               send_char:
004B2Br 1  48               pha
004B2Cr 1                   .ifdef char_out
004B2Cr 1                   jsr char_out
004B2Cr 1                   .endif
004B2Cr 1                   .ifdef acia_out
004B2Cr 1  20 rr rr         jsr acia_out
004B2Fr 1                   .endif
004B2Fr 1               send_char_exit:
004B2Fr 1               .ifdef lcd_print
004B2Fr 1                   ; jsr lcd_print
004B2Fr 1               .endif
004B2Fr 1  68               pla
004B30r 1  60               rts
004B31r 1               
004B31r 1               
004B31r 1                       ;; Get_Char - get a character from the serial port into A.
004B31r 1                       ;; Set the carry flag if char is valid.
004B31r 1                       ;; Return immediately with carry flag clear if no char available.
004B31r 1                       ;; Uses: A (return value)
004B31r 1               
004B31r 1               Get_Char:
004B31r 1  20 rr rr         jsr acia_getc
004B34r 1  90 05            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
004B36r 1  20 rr rr         jsr check_ctrl_c
004B39r 1  38               sec                             ; Set Carry to show we got a character
004B3Ar 1  60               rts                             ; Return
004B3Br 1               
004B3Br 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
004B3Br 1               .ifdef ps2_get_char
004B3Br 1  20 rr rr         jsr ps2_get_char
004B3Er 1               .endif
004B3Er 1  90 02            bcc get_kb_char
004B40r 1  38               sec
004B41r 1               
004B41r 1  60               rts
004B42r 1               get_kb_char:
004B42r 1                   .ifdef kb_get_char
004B42r 1               
004B42r 1                   ; ldy #5
004B42r 1                   ; jsr delay_short
004B42r 1                   ; ply
004B42r 1                       jsr kb_get_char
004B42r 1               
004B42r 1                   .endif
004B42r 1               exit:                         ; Indicate no char available.
004B42r 1  60               rts                             ; return
004B43r 1               
004B43r 1               kernel_getc:
004B43r 1                   ; """Get a single character from the keyboard (waits for key).
004B43r 1                   ; """
004B43r 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
004B43r 1                   ;; Uses: A (return value)
004B43r 1               Get_Char_Wait:
004B43r 1  20 rr rr         jsr Get_Char
004B46r 1  90 FB            bcc Get_Char_Wait
004B48r 1  60               rts
004B49r 1               
004B49r 1               check_ctrl_c:
004B49r 1                   ;; Check if we have ctrl-C character, if so jump to nmi
004B49r 1  C9 03            cmp #$03
004B4Br 1  D0 12            bne exit_ctrl_c
004B4Dr 1  DA A2 00 BD      printascii abort_message
004B51r 1  rr rr F0 06  
004B55r 1  20 rr rr E8  
004B5Cr 1  4C rr rr         jmp xt_abort
004B5Fr 1               
004B5Fr 1               exit_ctrl_c:
004B5Fr 1  60               rts
004B60r 1               
004B60r 1               
004B60r 1               v_irq:                          ; IRQ handler
004B60r 1  48                   pha
004B61r 1  5A                   phy
004B62r 1                       ; check if bit 7 of IFR is set
004B62r 1  AD 8D FF             lda IFR
004B65r 1  10 0B                bpl v_kb_irq  ; Interrupt not from VIA, exit
004B67r 1               
004B67r 1  29 08                and #$08        ; ps2 has priority
004B69r 1  D0 12                bne v_irq_ps2
004B6Br 1  AD 8D FF             lda IFR
004B6Er 1  29 40                and #$40
004B70r 1  D0 20                bne v_irq_timer
004B72r 1               v_kb_irq:
004B72r 1  AD 9D FF             lda KB_IFR
004B75r 1  10 26                bpl v_irq_exit
004B77r 1  29 40                and #$40
004B79r 1  D0 22                bne v_kb_irq_timer
004B7Br 1  80 20                bra v_irq_exit
004B7Dr 1               
004B7Dr 1               
004B7Dr 1               v_irq_ps2:
004B7Dr 1                   .ifdef ps2_irq
004B7Dr 1  A5 rr                lda time
004B7Fr 1  85 rr                sta last_ps2_time
004B81r 1  A5 rr                lda time+1
004B83r 1  85 rr                sta last_ps2_time+1
004B85r 1  A5 rr                lda time+2
004B87r 1  85 rr                sta last_ps2_time+2
004B89r 1  A5 rr                lda time+3
004B8Br 1  85 rr                sta last_ps2_time+3
004B8Dr 1                       ; this delay is here to ensure we prevent desynchronization
004B8Dr 1                       ;ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004B8Dr 1                       ; jsr delay_short
004B8Dr 1               
004B8Dr 1               
004B8Dr 1  20 rr rr             jsr ps2_irq
004B90r 1               
004B90r 1                       ; ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004B90r 1                       ; jsr delay_short
004B90r 1                   .endif
004B90r 1  80 0B                bra v_irq_exit
004B92r 1               
004B92r 1               v_irq_timer:
004B92r 1  AD 84 FF             lda T1CL
004B95r 1                       ; clear timer interrupt
004B95r 1                   .ifdef timer_irq
004B95r 1  20 rr rr             jsr timer_irq
004B98r 1                   .endif
004B98r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
004B9Br 1                       ; check if there is a char waiting to be printed to the lcd
004B9Br 1                       ; lda lcd_char
004B9Br 1                       ; beq v_exit
004B9Br 1                       ; jsr lcd_print
004B9Br 1                       ; stz lcd_char
004B9Br 1               
004B9Br 1               
004B9Br 1  80 00                bra v_irq_exit
004B9Dr 1               v_kb_irq_timer:
004B9Dr 1               .ifdef kb_time
004B9Dr 1                   lda KB_T1CL ; clear timer interrupt
004B9Dr 1                   inc kb_time
004B9Dr 1                   bne v_irq_exit
004B9Dr 1               .endif
004B9Dr 1                   ;jsr kb_scan
004B9Dr 1               v_irq_exit:
004B9Dr 1  7A               ply
004B9Er 1  68               pla
004B9Fr 1  40               rti
004BA0r 1               
004BA0r 1               
004BA0r 1               
004BA0r 1               .segment "RODATA"
0000FFr 1               
0000FFr 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", 0
000103r 1  6F 6D 65 20  
000107r 1  74 6F 20 50  
000137r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
00013Ar 1               
00013Ar 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
