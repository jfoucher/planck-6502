ca65 V2.18 - N/A
Main file   : platform/py65mon/main.s
Current file: platform/py65mon/main.s

000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl32 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2                   rol src + 2
000000r 2                   rol src + 3
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc32 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment next byte if LSB wrapped round
000000r 2                   bne @done
000000r 2                   inc src+2       ;Increment the next byte the previous wrapped round
000000r 2                   bne @done
000000r 2                   inc src+3       ;Increment the MSB if previous wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, just decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2               @skip:
000000r 2                   dec src
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16zero src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2                   beq @end            ; if high byte is also zero, we reached zero, exit now
000000r 2               @skip:
000000r 2                   dec src
000000r 2                   bne @end            ; if low byte is not zero exit now
000000r 2                   lda src + 1         ; if low byte was zero, load high byte to check if it's also zero
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               ; compare data at two adresses for defined length
000000r 2               ; On exit, carry is set if there is a match
000000r 2               ; and unset if no match
000000r 2               ; length of data to check is in X
000000r 2               
000000r 2               .macro memcmp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               .local @exit_fail
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   cmp second, x
000000r 2                   bne @exit_fail
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; check 0th element
000000r 2                   cmp second
000000r 2                   bne @exit_fail
000000r 2                   sec
000000r 2                   bra @exit
000000r 2               @exit_fail:
000000r 2                   clc
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               ; copy data from one address to another for defined length
000000r 2               ; length of data to copy is in X
000000r 2               .macro memcp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   sta second, x
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; copy zeroth item
000000r 2                   sta second
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               ; calculates length of zero terminated string
000000r 2               ; result is in x
000000r 2               .macro strlen address
000000r 2               .local @loop
000000r 2               .local @exit
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda address, x
000000r 2                   beq @exit
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               .segment "ZEROPAGE": zeropage
000000r 1  xx xx        stack_p: .res 2
000002r 1  xx xx xx xx  io_current_sector: .res 4
000006r 1  xx xx        io_buffer_ptr: .res 2
000008r 1  xx xx        io_read_location: .res 2
00000Ar 1  xx xx        io_sector_tmp: .res 2
00000Cr 1               
00000Cr 1  xx xx        zp_tmp: .res 2
00000Er 1               
00000Er 1               .segment "BSS"
000000r 1  xx xx        current_sector: .res 2
000002r 1               
000002r 1  xx xx xx xx  IO_BUFFER: .res $400
000006r 1  xx xx xx xx  
00000Ar 1  xx xx xx xx  
000402r 1               
000402r 1               .import    copydata
000402r 1               .import zerobss
000402r 1               .segment "STARTUP"
000000r 1               
000000r 1               v_reset:
000000r 1  20 rr rr         JSR     copydata
000003r 1  20 rr rr         jsr zerobss
000006r 1  4C rr rr         jmp kernel_init
000009r 1               
000009r 1               
000009r 1               
000009r 1               .include "../../forth.s"
000009r 2               
000009r 2               
000009r 2               ; Definitions for Tali Forth 2
000009r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
000009r 2               ; First version: 01. Apr 2016 (Liara Forth)
000009r 2               ; This version: 29. Jan 2020
000009r 2               
000009r 2               ; This file is included by taliforth.asm. These are the general
000009r 2               ; definitions; platform-specific definitions such as the
000009r 2               ; memory map are kept in the platform folder.
000009r 2               
000009r 2               stack0 =    $0100   ; location of the stack
000009r 2               
000009r 2               ; User Variables:
000009r 2               ; Block variables
000009r 2               blk_offset =  0        ; BLK : UP + 0
000009r 2               scr_offset =  2        ; SCR : UP + 2
000009r 2               
000009r 2               ; Wordlists
000009r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
000009r 2               num_wordlists_offset =  5
000009r 2                                          ; #WORDLISTS (byte) : UP + 5
000009r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
000009r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
000009r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
000009r 2                                          ;          (Number of wordlists in search order)
000009r 2               search_order_offset =  31
000009r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
000009r 2                                          ; Allowing for 9 to keep offsets even.
000009r 2               max_wordlists =  12    ; Maximum number of wordlists supported
000009r 2                                          ; 4 Tali built-ins + 8 user wordlists
000009r 2               
000009r 2               ; Buffer variables
000009r 2               blkbuffer_offset =     40   ; Address of buffer
000009r 2               buffblocknum_offset =  42   ; Block number current in buffer
000009r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
000009r 2               
000009r 2               ; Block I/O vectors
000009r 2               blockread_offset =     46   ; Vector to block reading routine
000009r 2               blockwrite_offset =    48   ; Vector to block writing routine
000009r 2               
000009r 2               
000009r 2               ; ASCII CHARACTERS
000009r 2               AscCC =   $03  ; break (CTRL-c)
000009r 2               AscBELL = $07  ; bell sound
000009r 2               AscBS =   $08  ; backspace
000009r 2               AscLF =   $0a  ; line feed
000009r 2               AscCR =   $0d  ; carriage return
000009r 2               AscESC =  $1b  ; escape
000009r 2               AscSP =   $20  ; space
000009r 2               AscDEL =  $7f  ; delete (CTRL-h)
000009r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
000009r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
000009r 2               
000009r 2               ; DICTIONARY FLAGS
000009r 2               ; The first three bits are currently unused
000009r 2               CO = 1  ; Compile Only
000009r 2               AN = 2  ; Always Native Compile
000009r 2               IM = 4  ; Immediate Word
000009r 2               NN = 8  ; Never Native Compile
000009r 2               UF = 16 ; Includes Underflow Check (RESERVED)
000009r 2               HC = 32 ; Word has Code Field Area (CFA)
000009r 2               
000009r 2               
000009r 2               ; VARIOUS
000009r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
000009r 2               
000009r 2               ; END
000009r 2               
000009r 2               .segment "ZEROPAGE": zeropage
00000Er 2               ; ZERO PAGE ADDRESSES/VARIABLES
00000Er 2               
00000Er 2               ; These are kept at the top of Zero Page, with the most important variables at
00000Er 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
00000Er 2               ; an overflow, the lower, less important variables will be clobbered first,
00000Er 2               ; giving the system a chance to recover. In other words, they are part of the
00000Er 2               ; floodplain.
00000Er 2               
00000Er 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
00000Er 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
00000Er 2               
00000Er 2  xx xx        cp: .res 2   ; Compiler Pointer
000010r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000012r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000014r 2                                          ; a :NONAME declared word (see status)
000014r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000016r 2  xx xx        cib: .res 2   ; address of current input buffer
000018r 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Ar 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Cr 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
00001Er 2  xx xx        output: .res 2  ; vector for EMIT
000020r 2  xx xx        input: .res 2  ; vector for KEY
000022r 2  xx xx        havekey: .res 2  ; vector for KEY?
000024r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000026r 2  xx xx        base: .res 2  ; number radix, default decimal
000028r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Ar 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Cr 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
00002Er 2  xx xx        status: .res 2  ; internal status information
000030r 2                                          ; (used by : :NONAME ; ACCEPT)
000030r 2                                          ; Bit 7 = Redefined word message postpone
000030r 2                                          ;         When set before calling CREATE, it will
000030r 2                                          ;         not print the "redefined xxxx" message if
000030r 2                                          ;         the word exists. Instead, this bit will
000030r 2                                          ;         be reused and after CREATE has run, it will
000030r 2                                          ;         be set if the word was redefined and 0 if
000030r 2                                          ;         not. This bit should be 0 when not in use.
000030r 2                                          ; Bit 6 = 1 for normal ":" definitions
000030r 2                                          ;         WORKWORD contains nt of word being compiled
000030r 2                                          ;       = 0 for :NONAME definitions
000030r 2                                          ;         WORKWORD contains xt of word being compiled
000030r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000030r 2                                          ;       = 0 for NUMBER returning a single word
000030r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000030r 2                                          ;       = 0 CTRL-n recalls previous history
000030r 2                                          ; Bit 2 = Current history buffer msb
000030r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000030r 2                                          ; Bit 0 = Current history buffer lsb
000030r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000030r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000032r 2  xx xx        tmp1: .res 2  ; temporary storage
000034r 2  xx xx        tmp2: .res 2  ; temporary storage
000036r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000038r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Ar 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Cr 2  xx xx        editor1: .res 2  ; temporary for editors
00003Er 2  xx xx        editor2: .res 2  ; temporary for editors
000040r 2  xx xx        editor3: .res 2  ; temporary for editors
000042r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000044r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000048r 2  xx xx xx xx  
00004Cr 2               
00004Cr 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000402r 2  xx xx xx xx  hist_buff: .res $400
000406r 2  xx xx xx xx  
00040Ar 2  xx xx xx xx  
000802r 2  xx xx xx xx  buffer0: .res $100
000806r 2  xx xx xx xx  
00080Ar 2  xx xx xx xx  
000902r 2               
000902r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
000000r 2               
000000r 2               
000000r 2               
000000r 2               forth:
000000r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
000000r 3               ; Low-level Forth word routines
000000r 3               ; Tali Forth 2 for the 65c02
000000r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
000000r 3               ; First version: 19. Jan 2014
000000r 3               ; This version: 03. Jan 2018
000000r 3               
000000r 3               ; This list is ordered alphabetically by the names of the words, not their
000000r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
000000r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
000000r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
000000r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
000000r 3               
000000r 3               ;       TBA --> fragment --> coded --> tested --> auto
000000r 3               
000000r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
000000r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
000000r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
000000r 3               
000000r 3               ; ## COLD ( -- ) "Reset the Forth system"
000000r 3               ; ## "cold"  tested  Tali Forth
000000r 3               ;       """Reset the Forth system. Does not restart the kernel,
000000r 3               ;       use the 65c02 reset for that. Flows into ABORT.
000000r 3               ;       """
000000r 3               xt_cold:
000000r 3  D8                           cld
000001r 3               
000001r 3                               ; Set the OUTPUT vector to the default kernel_putc
000001r 3                               ; We do this really early so we can print error messages
000001r 3                               ; during debugging
000001r 3  A9 rr                        lda #<kernel_putc
000003r 3  85 rr                        sta output
000005r 3  A9 rr                        lda #>kernel_putc
000007r 3  85 rr                        sta output+1
000009r 3               
000009r 3                               ; Load all of the important zero page variables from ROM
000009r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
00000Br 3               
00000Br 3               @load_zp_loop:
00000Br 3                               ; This loop loads them back to front. We can use X here
00000Br 3                               ; because Tali hasn't started using the stack yet.
00000Br 3  BD rr rr                     lda cold_zp_table,x
00000Er 3  95 rr                        sta cp,x
000010r 3  CA                           dex
000011r 3  D0 F8                        bne @load_zp_loop
000013r 3               
000013r 3                               ; Copy the 0th element.
000013r 3  AD rr rr                     lda cold_zp_table
000016r 3  85 rr                        sta cp
000018r 3                               ; Initialize 65c02 stack (Return Stack)
000018r 3  A2 rr                        ldx #rsp0
00001Ar 3  9A                           txs
00001Br 3               
00001Br 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
00001Br 3                               ; can load high-level words with EVALUATE
00001Br 3  A2 rr                        ldx #dsp0
00001Dr 3               
00001Dr 3               
00001Dr 3                               ; Initialize the user variables.
00001Dr 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
00001Fr 3  A9 00                        lda #0
000021r 3               
000021r 3               @load_user_vars_loop:
000021r 3                               ; Like the zero page variables, these are initialized
000021r 3                               ; back to front.
000021r 3  B9 rr rr                     lda cold_user_table,y
000024r 3  91 rr                        sta (up),y
000026r 3  88                           dey
000027r 3  D0 F8                        bne @load_user_vars_loop
000029r 3               
000029r 3                               ; Copy the 0th element.
000029r 3  AD rr rr                     lda cold_user_table
00002Cr 3  92 rr                        sta (up)
00002Er 3  20 rr rr                     jsr xt_cr
000031r 3               
000031r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
000031r 3                               ; you do not have any high-level words, this part can be
000031r 3                               ; commented out.
000031r 3  CA                           dex
000032r 3  CA                           dex
000033r 3  CA                           dex
000034r 3  CA                           dex
000035r 3               
000035r 3               
000035r 3                               ; start address goes NOS
000035r 3  A9 rr                        lda #<forth_words_start
000037r 3  95 02                        sta 2,x
000039r 3  A9 rr                        lda #>forth_words_start
00003Br 3  95 03                        sta 3,x
00003Dr 3               
00003Dr 3                               ; length goes TOS
00003Dr 3  A9 rr                        lda #<forth_words_end
00003Fr 3  38                           sec
000040r 3  E9 rr                        sbc #<forth_words_start
000042r 3  95 00                        sta 0,x
000044r 3               
000044r 3  A9 rr                        lda #>forth_words_end
000046r 3  E9 rr                        sbc #>forth_words_start
000048r 3  95 01                        sta 1,x
00004Ar 3               
00004Ar 3               
00004Ar 3  20 rr rr                     jsr xt_evaluate
00004Dr 3               
00004Dr 3                               ; Now define any user words via EVALUATE. If you do not have
00004Dr 3                               ; any user-defined words, this part can be commented out as
00004Dr 3                               ; well.
00004Dr 3  CA                           dex
00004Er 3  CA                           dex
00004Fr 3  CA                           dex
000050r 3  CA                           dex
000051r 3               
000051r 3               
000051r 3                               ; start address goes NOS
000051r 3  A9 rr                        lda #<user_words_start
000053r 3  95 02                        sta 2,x
000055r 3  A9 rr                        lda #>user_words_start
000057r 3  95 03                        sta 3,x
000059r 3               
000059r 3                               ; length goes TOS
000059r 3  A9 rr                        lda #<user_words_end
00005Br 3  38                           sec
00005Cr 3  E9 rr                        sbc #<user_words_start
00005Er 3  95 00                        sta 0,x
000060r 3               
000060r 3  A9 rr                        lda #>user_words_end
000062r 3  E9 rr                        sbc #>user_words_start
000064r 3  95 01                        sta 1,x
000066r 3               
000066r 3  20 rr rr                     jsr xt_evaluate
000069r 3               
000069r 3                               ; Initialize all of the history buffers by putting a zero in
000069r 3                               ; each length byte.
000069r 3  9C rr rr                     stz hist_buff
00006Cr 3  9C rr rr                     stz hist_buff+$80
00006Fr 3  9C rr rr                     stz hist_buff+$100
000072r 3  9C rr rr                     stz hist_buff+$180
000075r 3  9C rr rr                     stz hist_buff+$200
000078r 3  9C rr rr                     stz hist_buff+$280
00007Br 3  9C rr rr                     stz hist_buff+$300
00007Er 3  9C rr rr                     stz hist_buff+$380
000081r 3               
000081r 3               
000081r 3                               ; fall through to ABORT
000081r 3               
000081r 3               
000081r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
000081r 3               ; ## "abort"  tested  ANS core
000081r 3                       ; """https://forth-standard.org/standard/core/ABORT
000081r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
000081r 3                       ; subroutine if we want to because we are going to reset the 65c02's
000081r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
000081r 3                       ; actually delete the stuff on the Data Stack.
000081r 3                       ; """
000081r 3               xt_abort:
000081r 3  A2 rr                        ldx #dsp0
000083r 3               
000083r 3                               ; fall through to QUIT
000083r 3               
000083r 3               
000083r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
000083r 3               ; ## "quit"  tested  ANS core
000083r 3                       ; """https://forth-standard.org/standard/core/QUIT
000083r 3                       ; Rest the input and start command loop
000083r 3                       ; """
000083r 3               
000083r 3               xt_quit:
000083r 3                               ; Clear the Return Stack. This is a little screwed up
000083r 3                               ; because the 65c02 can only set the Return Stack via X,
000083r 3                               ; which is our Data Stack pointer. The ANS specification
000083r 3                               ; demands, however, that ABORT reset the Data Stack pointer
000083r 3  8A                           txa             ; Save the DSP that we just defined
000084r 3  A2 rr                        ldx #rsp0
000086r 3  9A                           txs
000087r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
000088r 3               
000088r 3                               ; make sure instruction pointer is empty
000088r 3  64 rr                        stz ip
00008Ar 3  64 rr                        stz ip+1
00008Cr 3               
00008Cr 3                               ; SOURCE-ID is zero (keyboard input)
00008Cr 3  64 rr                        stz insrc
00008Er 3  64 rr                        stz insrc+1
000090r 3               
000090r 3                               ; STATE is zero (interpret, not compile)
000090r 3  64 rr                        stz state
000092r 3  64 rr                        stz state+1
000094r 3               @get_line:
000094r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000096r 3  85 rr                        sta cib
000098r 3  A9 rr                        lda #>buffer0
00009Ar 3  85 rr                        sta cib+1
00009Cr 3               
00009Cr 3                               ; Size of current input buffer (CIB) is zero
00009Cr 3  64 rr                        stz ciblen
00009Er 3  64 rr                        stz ciblen+1
0000A0r 3               
0000A0r 3                               ; Accept a line from the current import source. This is how
0000A0r 3                               ; modern Forths to it.
0000A0r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0000A3r 3               
0000A3r 3                               ; Test flag: LSB of TOS
0000A3r 3  B5 00                        lda 0,x
0000A5r 3  D0 05                        bne @success
0000A7r 3               
0000A7r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
0000A7r 3                               ; need to print an error message and reset the machine. We
0000A7r 3                               ; don't need to save TOS because we're going to clobber it
0000A7r 3                               ; anyway when we go back to ABORT.
0000A7r 3  A9 06                        lda #err_refill
0000A9r 3  4C rr rr                     jmp error
0000ACr 3               
0000ACr 3               @success:
0000ACr 3                               ; Assume we have successfully accepted a string of input from
0000ACr 3                               ; a source, with address cib and length of input in ciblen. We
0000ACr 3                               ; arrive here still with the TRUE flag from REFILL as TOS
0000ACr 3  E8                           inx                     ; drop
0000ADr 3  E8                           inx
0000AEr 3               
0000AEr 3                               ; Main compile/execute routine
0000AEr 3  20 rr rr                     jsr interpret
0000B1r 3               
0000B1r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
0000B1r 3                               ; overflow because it is so rare
0000B1r 3  E0 rr                        cpx #dsp0
0000B3r 3  F0 05                        beq @stack_ok
0000B5r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
0000B7r 3               
0000B7r 3  4C rr rr                     jmp underflow_error
0000BAr 3               
0000BAr 3               @stack_ok:
0000BAr 3                               ; Display system prompt if all went well. If we're interpreting,
0000BAr 3                               ; this is " ok", if we're compiling, it's " compiled". Note
0000BAr 3                               ; space at beginning of the string.
0000BAr 3  A5 rr                        lda state
0000BCr 3  F0 02                        beq @print
0000BEr 3               
0000BEr 3  A9 01                        lda #1                  ; number for "compile" string
0000C0r 3               @print:
0000C0r 3  20 rr rr                     jsr print_string
0000C3r 3               
0000C3r 3                               ; Awesome line, everybody! Now get the next one.
0000C3r 3  80 CF                        bra @get_line
0000C5r 3               
0000C5r 3               z_cold:
0000C5r 3               z_abort:
0000C5r 3               z_quit:         ; no RTS required
0000C5r 3               
0000C5r 3               
0000C5r 3               
0000C5r 3               ; This table holds all of the initial values for the variables in zero page.
0000C5r 3               ; This table is used by COLD.
0000C5r 3               cold_zp_table:
0000C5r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
0000C7r 3                                               ; block buffer
0000C7r 3  rr rr                .word dictionary_start  ; dp
0000C9r 3  00 00                .word 0                 ; workword
0000CBr 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0000CDr 3  rr rr                .word buffer0           ; cib
0000CFr 3  00 00                .word 0                 ; ciblen
0000D1r 3  00 00                .word 0                 ; toin
0000D3r 3  00 00                .word 0                 ; ip
0000D5r 3  rr rr                .word kernel_putc       ; output
0000D7r 3  rr rr                .word kernel_getc       ; input
0000D9r 3  00 00                .word 0                 ; havekey
0000DBr 3  00 00                .word 0                 ; state (0 = interpret)
0000DDr 3  0A 00                .word 10                ; base
0000DFr 3  14 00                .word 20                ; nc-limit
0000E1r 3  00 00                .word 0                 ; uf_strip (off by default)
0000E3r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
0000E5r 3                                               ; available RAM)
0000E5r 3  00 00                .word 0                 ; status
0000E7r 3               cold_zp_table_end:
0000E7r 3               
0000E7r 3               ; No further ZP variables are initialized. The variables past this point are
0000E7r 3               ; all temporaries.
0000E7r 3               
0000E7r 3               ; This table holds the inital values for the user variables. This table is
0000E7r 3               ; used by COLD.
0000E7r 3               cold_user_table:
0000E7r 3  00 00                .word 0                         ; BLK
0000E9r 3  00 00                .word 0                         ; SCR
0000EBr 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
0000ECr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
0000EDr 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
0000EFr 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
0000F1r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
0000F3r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
0000F5r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
0000F9r 3  00 00 00 00  
0000FDr 3  00 00 00 00  
000105r 3  01                   .byte 1                         ; #ORDER
000106r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
00010Ar 3  00 00 00 00  
00010Er 3  00           
00010Fr 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
000111r 3  00 00                .word 0                         ; block in buffer
000113r 3  00 00                .word 0                         ; buffer status (not in use)
000115r 3  rr rr                .word xt_block_word_error       ; block-read vector
000117r 3  rr rr                .word xt_block_word_error       ; block-write vector
000119r 3               cold_user_table_end:
000119r 3               
000119r 3               
000119r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
000119r 3               ; ## "abort""  tested  ANS core
000119r 3                       ; """https://forth-standard.org/standard/core/ABORTq
000119r 3                       ; Abort and print a string.
000119r 3                       ; """
000119r 3               
000119r 3               xt_abort_quote:
000119r 3                               ; save the string
000119r 3  20 rr rr                     jsr xt_s_quote          ; S"
00011Cr 3               
00011Cr 3                               ; compile run-time part
00011Cr 3  A0 rr                        ldy #>abort_quote_runtime
00011Er 3  A9 rr                        lda #<abort_quote_runtime
000120r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
000123r 3               
000123r 3  60           z_abort_quote:  rts
000124r 3               
000124r 3               
000124r 3               abort_quote_runtime:
000124r 3                       ; """Runtime aspect of ABORT_QUOTE"""
000124r 3               
000124r 3                               ; We arrive here with ( f addr u )
000124r 3  B5 04                        lda 4,x
000126r 3  15 05                        ora 5,x
000128r 3  F0 09                        beq @done       ; if FALSE, we're done
00012Ar 3               
00012Ar 3                               ; We're true, so print string and ABORT. We follow Gforth
00012Ar 3                               ; in going to a new line after the string
00012Ar 3  20 rr rr                     jsr xt_type
00012Dr 3  20 rr rr                     jsr xt_cr
000130r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
000133r 3               @done:
000133r 3                               ; Drop three entries from the Data Stack
000133r 3  8A                           txa
000134r 3  18                           clc
000135r 3  69 06                        adc #6
000137r 3  AA                           tax
000138r 3               
000138r 3  60                           rts
000139r 3               
000139r 3               
000139r 3               
000139r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
000139r 3               ; ## "abs"  auto  ANS core
000139r 3                       ; """https://forth-standard.org/standard/core/ABS
000139r 3                       ; Return the absolute value of a number.
000139r 3                       ; """
000139r 3               
000139r 3               xt_abs:
000139r 3  20 rr rr                     jsr underflow_1
00013Cr 3               
00013Cr 3  B5 01                        lda 1,x
00013Er 3  10 0D                        bpl @done       ; positive number, easy money!
000140r 3               
000140r 3                               ; negative: calculate 0 - n
000140r 3  38                           sec
000141r 3  A9 00                        lda #0
000143r 3  F5 00                        sbc 0,x         ; LSB
000145r 3  95 00                        sta 0,x
000147r 3               
000147r 3  A9 00                        lda #0          ; MSB
000149r 3  F5 01                        sbc 1,x
00014Br 3  95 01                        sta 1,x
00014Dr 3               
00014Dr 3               @done:
00014Dr 3  60           z_abs:          rts
00014Er 3               
00014Er 3               
00014Er 3               
00014Er 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
00014Er 3               ; ## "accept"  auto  ANS core
00014Er 3                       ; """https://forth-standard.org/standard/core/ACCEPT
00014Er 3                       ; Receive a string of at most n1 characters, placing them at
00014Er 3                       ; addr. Return the actual number of characters as n2. Characters
00014Er 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
00014Er 3                       ; modern Forths.
00014Er 3                       ; """
00014Er 3               
00014Er 3               xt_accept:
00014Er 3  20 rr rr                     jsr underflow_2
000151r 3               
000151r 3                               ; Abort if we were asked to receive 0 chars
000151r 3  B5 00                        lda 0,x
000153r 3  15 01                        ora 1,x
000155r 3  D0 09                        bne @not_zero
000157r 3               
000157r 3  E8                           inx
000158r 3  E8                           inx
000159r 3  74 00                        stz 0,x
00015Br 3  74 01                        stz 1,x
00015Dr 3               
00015Dr 3  4C rr rr                     jmp accept_done
000160r 3               
000160r 3               @not_zero:
000160r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000162r 3  85 rr                        sta tmp2
000164r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000166r 3               
000166r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000168r 3  85 rr                        sta tmp1
00016Ar 3  B5 03                        lda 3,x
00016Cr 3  85 rr                        sta tmp1+1
00016Er 3               
00016Er 3  E8                           inx
00016Fr 3  E8                           inx
000170r 3               
000170r 3  A0 00                        ldy #0
000172r 3               
000172r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
000172r 3                               ; from bit 2 to 3 is OK)
000172r 3  A5 rr                        lda status
000174r 3  29 F7                        and #$f7
000176r 3               
000176r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000176r 3  1A                           inc
000177r 3               
000177r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000177r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000177r 3                               ; received and won't be used to calculate the history buffer
000177r 3                               ; offset.
000177r 3  09 08                        ora #$08
000179r 3  85 rr                        sta status
00017Br 3               
00017Br 3               accept_loop:
00017Br 3                               ; Out of the box, py65mon catches some CTRL sequences such as
00017Br 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
00017Br 3                               ; vt100 terminal clears the screen automatically.
00017Br 3               
00017Br 3                               ; This is the internal version of KEY without all the mucking
00017Br 3                               ; about with the Data Stack while still using the input vector
00017Br 3  20 rr rr                     jsr key_a
00017Er 3               
00017Er 3                               ; We quit on both line feed and carriage return
00017Er 3  C9 0A                        cmp #AscLF
000180r 3  F0 20                        beq @eol
000182r 3  C9 0D                        cmp #AscCR
000184r 3  F0 1C                        beq @eol
000186r 3               
000186r 3                               ; BACKSPACE and DEL do the same thing for the moment
000186r 3  C9 08                        cmp #AscBS
000188r 3  F0 22                        beq @backspace
00018Ar 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
00018Cr 3  F0 1E                        beq @backspace
00018Er 3               
00018Er 3                               ; Check for CTRL-p and CTRL-n to recall input history
00018Er 3  C9 10                        cmp #AscCP
000190r 3  F0 36                        beq @ctrl_p
000192r 3  C9 0E                        cmp #AscCN
000194r 3  F0 44                        beq @ctrl_n
000196r 3               
000196r 3                               ; That's enough for now. Save and echo character.
000196r 3  91 rr                        sta (tmp1),y
000198r 3  C8                           iny
000199r 3               
000199r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
000199r 3  20 rr rr                     jsr emit_a
00019Cr 3               
00019Cr 3  C4 rr                        cpy tmp2        ; reached character limit?
00019Er 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
0001A0r 3  80 03                        bra @buffer_full
0001A2r 3               
0001A2r 3               @eol:
0001A2r 3  20 rr rr                     jsr xt_space    ; print final space
0001A5r 3               
0001A5r 3               @buffer_full:
0001A5r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
0001A5r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
0001A7r 3  74 01                        stz 1,x         ; we only accept 256 chars
0001A9r 3               
0001A9r 3  4C rr rr                     jmp accept_done
0001ACr 3               
0001ACr 3               @backspace:
0001ACr 3                               ; Handle backspace and delete kex, which currently do the same
0001ACr 3                               ; thing
0001ACr 3  C0 00                        cpy #0          ; buffer empty?
0001AEr 3  D0 06                        bne @1
0001B0r 3               
0001B0r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
0001B2r 3  20 rr rr                     jsr emit_a
0001B5r 3  C8                           iny
0001B6r 3               @1:
0001B6r 3  88                           dey
0001B7r 3  A9 08                        lda #AscBS      ; move back one
0001B9r 3  20 rr rr                     jsr emit_a
0001BCr 3  A9 20                        lda #AscSP      ; print a space (rubout)
0001BEr 3  20 rr rr                     jsr emit_a
0001C1r 3  A9 08                        lda #AscBS      ; move back over space
0001C3r 3  20 rr rr                     jsr emit_a
0001C6r 3               
0001C6r 3  80 B3                        bra accept_loop
0001C8r 3               
0001C8r 3               @ctrl_p:
0001C8r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
0001C8r 3               
0001C8r 3                               ; Select the previous buffer
0001C8r 3  A5 rr                        lda status
0001CAr 3               
0001CAr 3                               ; Check for 0 (need to wrap back to 7)
0001CAr 3  29 07                        and #7
0001CCr 3  D0 08                        bne @ctrl_p_dec
0001CEr 3               
0001CEr 3                               ; We need to wrap back to 7.
0001CEr 3  A5 rr                        lda status
0001D0r 3  09 07                        ora #7
0001D2r 3  85 rr                        sta status
0001D4r 3  80 11                        bra @recall_history
0001D6r 3               
0001D6r 3               @ctrl_p_dec:
0001D6r 3                               ; It's safe to decrement the buffer index directly.
0001D6r 3  C6 rr                        dec status
0001D8r 3  80 0D                        bra @recall_history
0001DAr 3               
0001DAr 3               @ctrl_n:
0001DAr 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0001DAr 3                               ; the next buffer Check bit 3. If it's set, this is the first
0001DAr 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0001DAr 3                               ; history buffer.
0001DAr 3  A9 08                        lda #$8
0001DCr 3  24 rr                        bit status
0001DEr 3  D0 07                        bne @recall_history
0001E0r 3               
0001E0r 3                               ; This isn't the first time CTRL-n has been pressed, select the
0001E0r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0001E0r 3  A5 rr                        lda status
0001E2r 3  29 F7                        and #$f7
0001E4r 3               
0001E4r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0001E4r 3  1A                           inc
0001E5r 3               
0001E5r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
0001E5r 3                               ; be cleared below.
0001E5r 3  85 rr                        sta status
0001E7r 3               
0001E7r 3                               ; Falls through to @recall_history
0001E7r 3               
0001E7r 3               @recall_history:
0001E7r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
0001E7r 3  A9 08                        lda #%00001000
0001E9r 3  14 rr                        trb status
0001EBr 3               
0001EBr 3  20 rr rr                     jsr total_recall
0001EEr 3               
0001EEr 3                               ; tmp3 now has the address of the previous history buffer.
0001EEr 3                               ; First byte of buffer is length. Clear the line by sending
0001EEr 3                               ; CR, Y spaces, then CR.
0001EEr 3  A9 0D                        lda #AscCR
0001F0r 3  20 rr rr                     jsr emit_a
0001F3r 3               
0001F3r 3               input_clear:
0001F3r 3  C0 00                        cpy #0
0001F5r 3  F0 08                        beq input_cleared
0001F7r 3               
0001F7r 3  A9 20                        lda #AscSP
0001F9r 3  20 rr rr                     jsr emit_a
0001FCr 3  88                           dey
0001FDr 3  80 F4                        bra input_clear
0001FFr 3               
0001FFr 3               input_cleared:
0001FFr 3  A9 0D                        lda #AscCR
000201r 3  20 rr rr                     jsr emit_a
000204r 3               
000204r 3                               ; Save the history length byte into histinfo+1
000204r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
000204r 3  B1 rr                        lda (tmp3),y
000206r 3  85 rr                        sta status+1
000208r 3               
000208r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
000208r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
000208r 3                               ; buffer)
000208r 3  E6 rr                        inc tmp3
00020Ar 3  D0 02                        bne @2           ; Increment the upper byte on carry.
00020Cr 3  E6 rr                        inc tmp3+1
00020Er 3               @2:
00020Er 3                               ; Copy the history buffer into the input buffer,
00020Er 3                               ; sending the characters to the output as we go.
00020Er 3  A9 0D                        lda #AscCR
000210r 3  20 rr rr                     jsr emit_a
000213r 3               
000213r 3               @history_loop:
000213r 3                               ; See if we have reached the end of the history buffer.
000213r 3  C4 rr                        cpy status+1
000215r 3  D0 03                        bne @3
000217r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
00021Ar 3               @3:
00021Ar 3                               ; See if we have reached the end of the input buffer.
00021Ar 3                               ; (only comparing to lower byte as we currently limit
00021Ar 3                               ; to 255 characters max)
00021Ar 3  C4 rr                        cpy tmp2
00021Cr 3  F0 0A                        beq @hist_filled_buffer
00021Er 3               
00021Er 3                               ; Copy a character and echo.
00021Er 3  B1 rr                        lda (tmp3),y
000220r 3  91 rr                        sta (tmp1),y
000222r 3  20 rr rr                     jsr emit_a
000225r 3               
000225r 3                               ; Move to the next character.
000225r 3  C8                           iny
000226r 3  80 EB                        bra @history_loop
000228r 3               
000228r 3               @hist_filled_buffer:
000228r 3                               ; We don't want a history recall to EOL our buffer,
000228r 3                               ; so back up one character and return to editing.
000228r 3  88                           dey
000229r 3  4C rr rr                     jmp accept_loop
00022Cr 3               accept_done:
00022Cr 3               @done:
00022Cr 3                               ; Copy the input buffer into the currently
00022Cr 3                               ; selected history buffer.
00022Cr 3  20 rr rr                     jsr total_recall
00022Fr 3  85 rr                        sta status+1
000231r 3               
000231r 3                               ; Also save it in the first buffer byte.
000231r 3  A0 00                        ldy #0
000233r 3  91 rr                        sta (tmp3),y
000235r 3               
000235r 3                               ; Move path the count to the data bytes
000235r 3  E6 rr                        inc tmp3
000237r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
000239r 3  E6 rr                        inc tmp3+1
00023Br 3               @4:
00023Br 3                               ; Copy the characters from the input buffer to the
00023Br 3                               ; history buffer.
00023Br 3               
00023Br 3               @save_history_loop:
00023Br 3  C4 rr                        cpy status+1
00023Dr 3  F0 07                        beq @save_history_done
00023Fr 3               
00023Fr 3  B1 rr                        lda (tmp1),y
000241r 3  91 rr                        sta (tmp3),y
000243r 3  C8                           iny
000244r 3  80 F5                        bra @save_history_loop
000246r 3               
000246r 3               @save_history_done:
000246r 3               z_accept:
000246r 3  60                           rts
000247r 3               
000247r 3               total_recall:
000247r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
000247r 3               
000247r 3                               ; Generate the address of the buffer in tmp3. Start with the
000247r 3                               ; base address.
000247r 3  A9 rr                        lda #<hist_buff
000249r 3  85 rr                        sta tmp3
00024Br 3  A9 rr                        lda #>hist_buff
00024Dr 3  85 rr                        sta tmp3+1
00024Fr 3               
00024Fr 3                               ; This is a bit annoying as some bits go into each byte.
00024Fr 3                               ; .....xxx gets put into address like ......xx x.......
00024Fr 3  A5 rr                        lda status
000251r 3  6A                           ror
000252r 3  29 03                        and #3
000254r 3  18                           clc
000255r 3  65 rr                        adc tmp3+1
000257r 3  85 rr                        sta tmp3+1
000259r 3               
000259r 3  A5 rr                        lda status
00025Br 3  6A                           ror             ; Rotate through carry into msb.
00025Cr 3  6A                           ror
00025Dr 3  29 80                        and #$80
00025Fr 3  18                           clc
000260r 3  65 rr                        adc tmp3
000262r 3  85 rr                        sta tmp3
000264r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000266r 3  E6 rr                        inc tmp3+1
000268r 3               @1:
000268r 3                               ; Save the current length of the input buffer in
000268r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000268r 3  98                           tya
000269r 3  C9 80                        cmp #$80
00026Br 3  90 02                        bcc @2
00026Dr 3  A9 7F                        lda #$7F
00026Fr 3               @2:
00026Fr 3  60                           rts
000270r 3               
000270r 3               
000270r 3               
000270r 3               
000270r 3               
000270r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
000270r 3               ; ## "action-of"  auto  ANS core ext
000270r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
000270r 3               
000270r 3               xt_action_of:
000270r 3                               ; This is a state aware word with differet behavior
000270r 3                               ; when used while compiling vs interpreting.
000270r 3                               ; Check STATE
000270r 3  A5 rr                        lda state
000272r 3  05 rr                        ora state+1
000274r 3  F0 0C                        beq @interpreting
000276r 3               
000276r 3               @compiling:
000276r 3                               ; Run ['] to compile the xt of the next word
000276r 3                               ; as a literal.
000276r 3  20 rr rr                     jsr xt_bracket_tick
000279r 3               
000279r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000279r 3  A0 rr                        ldy #>xt_defer_fetch
00027Br 3  A9 rr                        lda #<xt_defer_fetch
00027Dr 3  20 rr rr                     jsr cmpl_subroutine
000280r 3  80 06                        bra @done
000282r 3               
000282r 3               @interpreting:
000282r 3  20 rr rr                     jsr xt_tick
000285r 3  20 rr rr                     jsr xt_defer_fetch
000288r 3               
000288r 3               @done:
000288r 3  60           z_action_of:           rts
000289r 3               
000289r 3               
000289r 3               
000289r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
000289r 3               ; ## "again"  tested  ANS core ext
000289r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
000289r 3               
000289r 3               xt_again:
000289r 3  20 rr rr                     jsr underflow_1
00028Cr 3               
00028Cr 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
00028Cr 3                               ; so we have the range and don't have to calculate the
00028Cr 3                               ; offset.
00028Cr 3  A0 00                        ldy #0
00028Er 3  A9 4C                        lda #$4C        ; JMP
000290r 3  91 rr                        sta (cp),y
000292r 3  C8                           iny
000293r 3               
000293r 3  B5 00                        lda 0,x         ; LSB of address
000295r 3  91 rr                        sta (cp),y
000297r 3  C8                           iny
000298r 3               
000298r 3  B5 01                        lda 1,x         ; MSB of address
00029Ar 3  91 rr                        sta (cp),y
00029Cr 3  C8                           iny
00029Dr 3               
00029Dr 3                               ; Allot the space we just used
00029Dr 3  98                           tya
00029Er 3  18                           clc
00029Fr 3  65 rr                        adc cp
0002A1r 3  85 rr                        sta cp
0002A3r 3  90 02                        bcc @done
0002A5r 3  E6 rr                        inc cp+1
0002A7r 3               @done:
0002A7r 3  E8                           inx
0002A8r 3  E8                           inx
0002A9r 3               
0002A9r 3  60           z_again:        rts
0002AAr 3               
0002AAr 3               
0002AAr 3               
0002AAr 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
0002AAr 3               ; ## "align"  auto  ANS core
0002AAr 3                       ; """https://forth-standard.org/standard/core/ALIGN
0002AAr 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
0002AAr 3                       ; routine as well, and also does nothing
0002AAr 3                       ; """
0002AAr 3               
0002AAr 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
0002AAr 3               ; ## "aligned"  auto  ANS core
0002AAr 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
0002AAr 3               
0002AAr 3               xt_align:
0002AAr 3               xt_aligned:
0002AAr 3               z_align:
0002AAr 3  60           z_aligned:      rts             ; stripped out during native compile
0002ABr 3               
0002ABr 3               
0002ABr 3               
0002ABr 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
0002ABr 3               ; ## "allot"  auto  ANS core
0002ABr 3                       ; """https://forth-standard.org/standard/core/ALLOT
0002ABr 3                       ; Reserve a certain number of bytes (not cells) or release them.
0002ABr 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
0002ABr 3                       ; to the beginning of the Dictionary. If n is positive (the most
0002ABr 3                       ; common case), reserve n bytes, but not past the end of the
0002ABr 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
0002ABr 3                       ; """
0002ABr 3               
0002ABr 3               xt_allot:
0002ABr 3  20 rr rr                     jsr underflow_1
0002AEr 3               
0002AEr 3                               ; Releasing memory is going to be a very rare operation,
0002AEr 3                               ; so we check for it at the beginning and try to make
0002AEr 3                               ; the most common case as fast as possible
0002AEr 3  B5 01                        lda 1,x
0002B0r 3  30 22                        bmi @release
0002B2r 3               
0002B2r 3                               ; Common case: We are reserving memory, not releasing it
0002B2r 3  18                           clc
0002B3r 3  A5 rr                        lda cp
0002B5r 3  75 00                        adc 0,x
0002B7r 3  85 rr                        sta cp
0002B9r 3               
0002B9r 3  A5 rr                        lda cp+1
0002BBr 3  75 01                        adc 1,x
0002BDr 3  85 rr                        sta cp+1
0002BFr 3               
0002BFr 3                               ; Wait, did we just grant more space than we have? This is
0002BFr 3                               ; a check we only do here, not for other situations like cmpl_a
0002BFr 3                               ; where smaller amounts are reserved.
0002BFr 3  A0 FF                        ldy #<cp_end
0002C1r 3  C4 rr                        cpy cp
0002C3r 3  A9 7F                        lda #>cp_end
0002C5r 3  E5 rr                        sbc cp+1
0002C7r 3  B0 48                        bcs @done               ; we're fine.
0002C9r 3               
0002C9r 3                               ; Oops, that was too much, we're beyond the end of
0002C9r 3                               ; legal Dictionary RAM. Reduce to max memory and report
0002C9r 3                               ; an error
0002C9r 3  84 rr                        sty cp                  ; still #<cp_end
0002CBr 3  A9 7F                        lda #>cp_end
0002CDr 3  85 rr                        sta cp+1
0002CFr 3               
0002CFr 3  A9 00                        lda #err_allot
0002D1r 3  4C rr rr                     jmp error
0002D4r 3               
0002D4r 3               @release:
0002D4r 3                  		; The ANS standard doesn't really say what to do if too much
0002D4r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0002D4r 3                               ; even an official test. Gforth is little help either. The good
0002D4r 3                               ; news is, this is going to be a rare case. We want to use as
0002D4r 3                               ; few bytes as possible.
0002D4r 3               
0002D4r 3                               ; What we do is let the user free anything up to the beginning
0002D4r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0002D4r 3                               ; their own risk. This means that the Dictionary pointer DP
0002D4r 3                               ; might end up pointing to garbage. However, an attempt to
0002D4r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0002D4r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0002D4r 3                               ; an error message.
0002D4r 3               
0002D4r 3                               ; We arrive here with ( n ) which is negative. First step,
0002D4r 3                               ; subtract the number TOS from the CP for a new CP
0002D4r 3  CA                           dex
0002D5r 3  CA                           dex
0002D6r 3  A5 rr                        lda cp
0002D8r 3  95 00                        sta 0,x
0002DAr 3  A5 rr                        lda cp+1
0002DCr 3  95 01                        sta 1,x
0002DEr 3               
0002DEr 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0002E1r 3               
0002E1r 3                               ; Second step, see if we've gone too far. We compare the new
0002E1r 3                               ; CP on TOS (which, if we've really screwed up, might be
0002E1r 3                               ; negative) with CP0. This is a signed comparison
0002E1r 3  CA                           dex
0002E2r 3  CA                           dex                             ; new CP now NOS
0002E3r 3  A9 rr                        lda #<cp0
0002E5r 3  95 00                        sta 0,x
0002E7r 3  A9 rr                        lda #>cp0
0002E9r 3  95 01                        sta 1,x                         ; CP0 is TOS
0002EBr 3               
0002EBr 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
0002EEr 3               
0002EEr 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
0002EEr 3                               ; This means we want Z=1 or N=1
0002EEr 3  F0 17                        beq @nega_done
0002F0r 3  30 15                        bmi @nega_done
0002F2r 3               
0002F2r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
0002F2r 3                               ; word in ROM (should be DROP), and abort with an error
0002F2r 3  A9 rr                        lda #<cp0
0002F4r 3  85 rr                        sta cp
0002F6r 3  A9 rr                        lda #>cp0
0002F8r 3  85 rr                        sta cp+1
0002FAr 3               
0002FAr 3  A9 rr                        lda #<dictionary_start
0002FCr 3  85 rr                        sta dp
0002FEr 3  A9 rr                        lda #>dictionary_start
000300r 3  85 rr                        sta dp+1
000302r 3               
000302r 3  A9 0A                        lda #err_negallot
000304r 3  4C rr rr                     jmp error
000307r 3               
000307r 3               @nega_done:
000307r 3                               ; Save new CP, which is NOS
000307r 3  B5 02                        lda 2,x
000309r 3  85 rr                        sta cp
00030Br 3  B5 03                        lda 3,x
00030Dr 3  85 rr                        sta cp+1
00030Fr 3               
00030Fr 3  E8                           inx
000310r 3  E8                           inx                     ; drop through to @done
000311r 3               @done:
000311r 3  E8                           inx
000312r 3  E8                           inx
000313r 3               z_allot:
000313r 3  60                           rts
000314r 3               
000314r 3               
000314r 3               
000314r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
000314r 3               ; ## "allow-native"  auto  Tali Forth
000314r 3               xt_allow_native:
000314r 3  20 rr rr                     jsr current_to_dp
000317r 3  A0 01                        ldy #1          ; offset for status byte
000319r 3  B1 rr                        lda (dp),y
00031Br 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
00031Dr 3  91 rr                        sta (dp),y
00031Fr 3               z_allow_native:
00031Fr 3  60                           rts
000320r 3               
000320r 3               
000320r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
000320r 3               ; ## "also"  auto  ANS search ext
000320r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
000320r 3               xt_also:
000320r 3  20 rr rr                     jsr xt_get_order
000323r 3  20 rr rr                     jsr xt_over
000326r 3  20 rr rr                     jsr xt_swap
000329r 3  20 rr rr                     jsr xt_one_plus
00032Cr 3  20 rr rr                     jsr xt_set_order
00032Fr 3               
00032Fr 3  60           z_also:         rts
000330r 3               
000330r 3               
000330r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
000330r 3               ; ## "always-native"  auto  Tali Forth
000330r 3               xt_always_native:
000330r 3  20 rr rr                     jsr current_to_dp
000333r 3  A0 01                        ldy #1          ; offset for status byte
000335r 3  B1 rr                        lda (dp),y
000337r 3  09 02                        ora #AN         ; Make sure AN flag is set
000339r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
00033Br 3  91 rr                        sta (dp),y
00033Dr 3               z_always_native:
00033Dr 3  60                           rts
00033Er 3               
00033Er 3               
00033Er 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
00033Er 3               ; ## "and"  auto  ANS core
00033Er 3                       ; """https://forth-standard.org/standard/core/AND"""
00033Er 3               xt_and:
00033Er 3  20 rr rr                     jsr underflow_2
000341r 3               
000341r 3  B5 00                        lda 0,x
000343r 3  35 02                        and 2,x
000345r 3  95 02                        sta 2,x
000347r 3               
000347r 3  B5 01                        lda 1,x
000349r 3  35 03                        and 3,x
00034Br 3  95 03                        sta 3,x
00034Dr 3               
00034Dr 3  E8                           inx
00034Er 3  E8                           inx
00034Fr 3               
00034Fr 3  60           z_and:          rts
000350r 3               
000350r 3               
000350r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
000350r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
000350r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
000350r 3                       ; assembler words to the search order so they can be used.
000350r 3                       ; See the tutorial on Wordlists and the Search Order for
000350r 3                       ; more information.
000350r 3                       ;
000350r 3                       ; This is a dummy entry, the code is shared with TWO
000350r 3                       ; """
000350r 3               
000350r 3               
000350r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
000350r 3               ; ## "at-xy"  tested  ANS facility
000350r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
000350r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
000350r 3                       ; ANSI code is ESC[<n>;<m>H
000350r 3                       ;
000350r 3                       ; Do not use U. to print the numbers because the
000350r 3                       ; trailing space will not work with xterm
000350r 3                       ; """
000350r 3               xt_at_xy:
000350r 3  20 rr rr                     jsr underflow_2
000353r 3               
000353r 3  A9 1B                        lda #AscESC
000355r 3  20 rr rr                     jsr emit_a
000358r 3  A9 5B                        lda #$5B        ; ASCII for "["
00035Ar 3  20 rr rr                     jsr emit_a
00035Dr 3  20 rr rr                     jsr print_u
000360r 3  A9 3B                        lda #$3B        ; ASCII for ";"
000362r 3  20 rr rr                     jsr emit_a
000365r 3  20 rr rr                     jsr print_u
000368r 3  A9 48                        lda #'H'
00036Ar 3  20 rr rr                     jsr emit_a
00036Dr 3               
00036Dr 3  60           z_at_xy:        rts
00036Er 3               
00036Er 3               
00036Er 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
00036Er 3               ; ## "\"  auto  ANS core ext
00036Er 3                       ; """https://forth-standard.org/standard/core/bs"""
00036Er 3               xt_backslash:
00036Er 3  A5 rr                        lda ciblen
000370r 3  85 rr                        sta toin
000372r 3  A5 rr                        lda ciblen+1
000374r 3  85 rr                        sta toin+1
000376r 3               
000376r 3  60           z_backslash:    rts
000377r 3               
000377r 3               
000377r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000377r 3               ; ## "base"  auto  ANS core
000377r 3                       ; """https://forth-standard.org/standard/core/BASE
000377r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000377r 3                       ; ingore the MSB
000377r 3                       ; """
000377r 3               xt_base:
000377r 3  CA                           dex
000378r 3  CA                           dex
000379r 3  A9 rr                        lda #<base
00037Br 3  95 00                        sta 0,x         ; LSB
00037Dr 3  74 01                        stz 1,x         ; MSB is always 0
00037Fr 3               
00037Fr 3  60           z_base:         rts
000380r 3               
000380r 3               
000380r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
000380r 3               ; ## "begin"  auto  ANS core
000380r 3                       ; """https://forth-standard.org/standard/core/BEGIN
000380r 3                       ;
000380r 3                       ; This is just an immediate version of here which could just
000380r 3                       ; as well be coded in Forth as
000380r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
000380r 3                       ; Since this is a compiling word, we don't care that much about
000380r 3                       ; about speed
000380r 3                       ; """
000380r 3               
000380r 3               xt_begin:
000380r 3  20 rr rr                     jsr xt_here
000383r 3  60           z_begin:        rts
000384r 3               
000384r 3               
000384r 3               
000384r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000384r 3               ; ## "bell"  tested  Tali Forth
000384r 3               xt_bell:
000384r 3  A9 07                        lda #7          ; ASCII value for BELl
000386r 3  20 rr rr                     jsr emit_a
000389r 3               
000389r 3  60           z_bell:         rts
00038Ar 3               
00038Ar 3               
00038Ar 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
00038Ar 3               ; ## "bl"  auto  ANS core
00038Ar 3                       ; """https://forth-standard.org/standard/core/BL"""
00038Ar 3               
00038Ar 3               xt_bl:
00038Ar 3  CA                           dex
00038Br 3  CA                           dex
00038Cr 3  A9 20                        lda #AscSP
00038Er 3  95 00                        sta 0,x
000390r 3  74 01                        stz 1,x
000392r 3               
000392r 3  60           z_bl:           rts
000393r 3               
000393r 3               
000393r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
000393r 3               ; ## "block"  auto  ANS block
000393r 3                       ; """https://forth-standard.org/standard/block/BLK"""
000393r 3               xt_blk:
000393r 3                               ; BLK is at UP + blk_offset
000393r 3  CA                           dex
000394r 3  CA                           dex
000395r 3  18                           clc
000396r 3  A5 rr                        lda up
000398r 3  69 00                        adc #blk_offset ; Add offset
00039Ar 3  95 00                        sta 0,x
00039Cr 3  A5 rr                        lda up+1
00039Er 3  69 00                        adc #0          ; Adding carry
0003A0r 3  95 01                        sta 1,x
0003A2r 3               
0003A2r 3  60           z_blk:          rts
0003A3r 3               
0003A3r 3               
0003A3r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
0003A3r 3               ; ## "blkbuffer"  auto  Tali block
0003A3r 3               xt_blkbuffer:
0003A3r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
0003A3r 3                               ; Unlike some of the other user variables, we actually
0003A3r 3                               ; want to push the address stored here, which will
0003A3r 3                               ; point to somewhere outside of the user variables.
0003A3r 3  CA                           dex
0003A4r 3  CA                           dex
0003A5r 3                               ; Put the address on the stack.
0003A5r 3  A0 28                        ldy #blkbuffer_offset
0003A7r 3  B1 rr                        lda (up),y
0003A9r 3  95 00                        sta 0,x
0003ABr 3  C8                           iny             ; Move along to the next byte
0003ACr 3  B1 rr                        lda (up),y
0003AEr 3  95 01                        sta 1,x
0003B0r 3               
0003B0r 3  60           z_blkbuffer:    rts
0003B1r 3               
0003B1r 3               
0003B1r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
0003B1r 3               ; ## "block"  auto  ANS block
0003B1r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
0003B1r 3               
0003B1r 3               xt_block:
0003B1r 3               
0003B1r 3                               ; See if the block requested is the same as the one we
0003B1r 3                               ; currently have in the buffer. Check the LSB.
0003B1r 3  A0 2A                        ldy #buffblocknum_offset
0003B3r 3  B1 rr                        lda (up),y
0003B5r 3  D5 00                        cmp 0,x
0003B7r 3  D0 0F                        bne @not_in_buffer
0003B9r 3               
0003B9r 3                               ; Check the MSB.
0003B9r 3  C8                           iny
0003BAr 3  B1 rr                        lda (up),y
0003BCr 3  D5 01                        cmp 1,x
0003BEr 3  D0 08                        bne @not_in_buffer
0003C0r 3               
0003C0r 3                               ; The block is in the buffer. See if the buffer is in use.
0003C0r 3  A0 2C                        ldy #buffstatus_offset
0003C2r 3  B1 rr                        lda (up),y
0003C4r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
0003C6r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
0003C8r 3                                               ; @done will replace the block# with the
0003C8r 3                                               ; buffer address.
0003C8r 3               @not_in_buffer:
0003C8r 3                               ; Check the buffer status
0003C8r 3  A0 2C                        ldy #buffstatus_offset
0003CAr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0003CCr 3  C9 03                        cmp #3          ; LSB is needed.
0003CEr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0003D0r 3               
0003D0r 3                               ; We need to save the block.
0003D0r 3  20 rr rr                     jsr xt_blkbuffer
0003D3r 3  20 rr rr                     jsr xt_buffblocknum
0003D6r 3  20 rr rr                     jsr xt_fetch
0003D9r 3  20 rr rr                     jsr xt_block_write
0003DCr 3               
0003DCr 3               @buffer_available:
0003DCr 3                               ; Save the block number.
0003DCr 3  A0 2A                        ldy #buffblocknum_offset
0003DEr 3  B5 00                        lda 0,x
0003E0r 3  91 rr                        sta (up),y
0003E2r 3  C8                           iny
0003E3r 3  B5 01                        lda 1,x
0003E5r 3  91 rr                        sta (up),y
0003E7r 3               
0003E7r 3                               ; Get the requested block.
0003E7r 3  20 rr rr                     jsr xt_blkbuffer
0003EAr 3  20 rr rr                     jsr xt_swap
0003EDr 3  20 rr rr                     jsr xt_block_read
0003F0r 3               
0003F0r 3                               ; Mark the buffer as clean and in-use.
0003F0r 3  A9 01                        lda #1
0003F2r 3  A0 2C                        ldy #buffstatus_offset
0003F4r 3  91 rr                        sta (up),y
0003F6r 3               
0003F6r 3                               ; Make room on the stack for the return address.
0003F6r 3  CA                           dex
0003F7r 3  CA                           dex
0003F8r 3               
0003F8r 3               @done:
0003F8r 3                               ; It's in the buffer. Return the buffer address.
0003F8r 3  A0 28                        ldy #blkbuffer_offset
0003FAr 3  B1 rr                        lda (up),y
0003FCr 3  95 00                        sta 0,x
0003FEr 3  C8                           iny
0003FFr 3  B1 rr                        lda (up),y
000401r 3  95 01                        sta 1,x
000403r 3               
000403r 3  60           z_block:        rts
000404r 3               
000404r 3               
000404r 3               
000404r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
000404r 3               ; ## "block-ramdrive-init"  auto  Tali block
000404r 3                       ; """Create a RAM drive, with the given number of
000404r 3                       ; blocks, in the dictionary along with setting up the block words to
000404r 3                       ; use it.  The read/write routines do not provide bounds checking.
000404r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
000404r 3                       ; """
000404r 3               
000404r 3               xt_block_ramdrive_init:
000404r 3  20 rr rr                     jsr underflow_1
000407r 3               
000407r 3                               ; Store the string to run here as a string literal.
000407r 3                               ; See SLITERAL for the format information. This way, we
000407r 3                               ; don't have the words defined below in the Dictionary until
000407r 3                               ; we really use them.
000407r 3  4C rr rr                     jmp @after_ramdrive_code
00040Ar 3               
00040Ar 3               @ramdrive_code:
00040Ar 3  62 61 73 65          .byte "base @ swap decimal"
00040Er 3  20 40 20 73  
000412r 3  77 61 70 20  
00041Dr 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
000421r 3  34 20 2A     
000424r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
000428r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
00042Cr 3  66 65 72 3A  
000430r 3  20 72 61 6D  
000439r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
000439r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
00043Dr 3  6C 6F 63 6B  
000441r 3  2D 72 65 61  
00044Fr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000453r 3  64 72 69 76  
000457r 3  65 20 73 77  
000477r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
00047Br 3  6C 6F 63 6B  
00047Fr 3  2D 77 72 69  
00048Er 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000492r 3  64 72 69 76  
000496r 3  65 20 73 77  
0004B1r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
0004B5r 3  6C 6F 63 6B  
0004B9r 3  2D 72 65 61  
0004DBr 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
0004DFr 3  6C 6F 63 6B  
0004E3r 3  2D 77 72 69  
000507r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
00050Br 3  64 72 69 76  
00050Fr 3  65 20 73 77  
000522r 3               
000522r 3               @after_ramdrive_code:
000522r 3  20 rr rr                     jsr sliteral_runtime
000525r 3               
000525r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000529r 3               
000529r 3                               ; The address and length of the ramdrive code is now on the
000529r 3                               ; stack. Call EVALUATE to run it.
000529r 3  20 rr rr                     jsr xt_evaluate
00052Cr 3               
00052Cr 3               z_block_ramdrive_init:
00052Cr 3  60                           rts
00052Dr 3               
00052Dr 3               
00052Dr 3               
00052Dr 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
00052Dr 3               ; ## "block-read"  auto  Tali block
00052Dr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
00052Dr 3                       ; with their own version to read a block from storage.
00052Dr 3                       ; The stack parameters are ( buffer_address block# -- ).
00052Dr 3                       ; """
00052Dr 3               xt_block_read:
00052Dr 3                               ; Execute the BLOCK-READ-VECTOR
00052Dr 3  A0 2E                        ldy #blockread_offset
00052Fr 3  B1 rr                        lda (up),y
000531r 3  85 rr                        sta tmp1
000533r 3  C8                           iny
000534r 3  B1 rr                        lda (up),y
000536r 3  85 rr                        sta tmp1+1
000538r 3               
000538r 3  6C rr rr                     jmp (tmp1)
00053Br 3               
00053Br 3               z_block_read:   ; No RTS needed
00053Br 3               
00053Br 3               
00053Br 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
00053Br 3               ; ## "block-read-vector"  auto  Tali block
00053Br 3                       ; """BLOCK-READ is a vectored word that the user needs to override
00053Br 3                       ; with their own version to read a block from storage.
00053Br 3                       ; This word gives the address of the vector so it can be replaced.
00053Br 3                       ; """
00053Br 3               xt_block_read_vector:
00053Br 3                               ; Get the BLOCK-READ-VECTOR address
00053Br 3  CA                           dex
00053Cr 3  CA                           dex
00053Dr 3  18                           clc
00053Er 3  A5 rr                        lda up
000540r 3  69 2E                        adc #blockread_offset
000542r 3  95 00                        sta 0,x
000544r 3  A5 rr                        lda up+1
000546r 3  69 00                        adc #0          ; Add carry
000548r 3  95 01                        sta 1,x
00054Ar 3               
00054Ar 3               z_block_read_vector:
00054Ar 3  60                           rts
00054Br 3               
00054Br 3               
00054Br 3               ; This is the default error message the vectored words BLOCK-READ and
00054Br 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
00054Br 3               xt_block_word_error:
00054Br 3  A9 0C                        lda #err_blockwords
00054Dr 3  4C rr rr                     jmp error       ; no RTS needed
000550r 3               z_block_word_error:
000550r 3               
000550r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000550r 3               ; ## "block-write"  auto  Tali block
000550r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000550r 3                       ; with their own version to write a block to storage.
000550r 3                       ; The stack parameters are ( buffer_address block# -- ).
000550r 3                       ; """
000550r 3               xt_block_write:
000550r 3                               ; Execute the BLOCK-READ-VECTOR
000550r 3  A0 30                        ldy #blockwrite_offset
000552r 3  B1 rr                        lda (up),y
000554r 3  85 rr                        sta tmp1
000556r 3  C8                           iny
000557r 3  B1 rr                        lda (up),y
000559r 3  85 rr                        sta tmp1+1
00055Br 3  6C rr rr                     jmp (tmp1)
00055Er 3               
00055Er 3               z_block_write:  ; No RTS needed
00055Er 3               
00055Er 3               
00055Er 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
00055Er 3               ; ## "block-write-vector"  auto  Tali block
00055Er 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
00055Er 3                       ; with their own version to write a block to storage.
00055Er 3                       ; This word gives the address of the vector so it can be replaced.
00055Er 3                       ; """
00055Er 3               xt_block_write_vector:
00055Er 3                               ; Get the BLOCK-WRITE-VECTOR address
00055Er 3  CA                           dex
00055Fr 3  CA                           dex
000560r 3  18                           clc
000561r 3  A5 rr                        lda up
000563r 3  69 30                        adc #blockwrite_offset
000565r 3  95 00                        sta 0,x
000567r 3  A5 rr                        lda up+1
000569r 3  69 00                        adc #0          ; Add carry
00056Br 3  95 01                        sta 1,x
00056Dr 3               
00056Dr 3               z_block_write_vector:
00056Dr 3  60                           rts
00056Er 3               
00056Er 3               
00056Er 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
00056Er 3               ; ## "bounds"  auto  Gforth
00056Er 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
00056Er 3                       ; Given a string, return the correct Data Stack parameters for
00056Er 3                       ; a DO/LOOP loop over its characters. This is realized as
00056Er 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
00056Er 3                       ; """
00056Er 3               xt_bounds:
00056Er 3  20 rr rr                     jsr underflow_2
000571r 3               
000571r 3  18                           clc
000572r 3  B5 00                        lda 0,x                 ; LSB u
000574r 3  B4 02                        ldy 2,x                 ; LSB addr
000576r 3  75 02                        adc 2,x
000578r 3  95 02                        sta 2,x                 ; LSB addr+u
00057Ar 3  94 00                        sty 0,x
00057Cr 3               
00057Cr 3  B5 01                        lda 1,x                 ; MSB u
00057Er 3  B4 03                        ldy 3,x                 ; MSB addr
000580r 3  75 03                        adc 3,x
000582r 3  95 03                        sta 3,x                 ; MSB addr+u
000584r 3  94 01                        sty 1,x
000586r 3               
000586r 3  60           z_bounds:       rts
000587r 3               
000587r 3               
000587r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000587r 3               ; ## "[char]"  auto  ANS core
000587r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000587r 3                       ; Compile the ASCII value of a character as a literal. This is an
000587r 3                       ; immediate, compile-only word.
000587r 3                       ;
000587r 3                       ; A definition given in
000587r 3                       ; http://forth-standard.org/standard/implement is
000587r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000587r 3                       ; """
000587r 3               xt_bracket_char:
000587r 3  20 rr rr                     jsr xt_char
00058Ar 3  20 rr rr                     jsr xt_literal
00058Dr 3  60           z_bracket_char: rts
00058Er 3               
00058Er 3               
00058Er 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
00058Er 3               ; ## "[']"  auto  ANS core
00058Er 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
00058Er 3               xt_bracket_tick:
00058Er 3  20 rr rr                     jsr xt_tick
000591r 3  20 rr rr                     jsr xt_literal
000594r 3  60           z_bracket_tick: rts
000595r 3               
000595r 3               
000595r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000595r 3               ; ## "buffblocknum"  auto  Tali block
000595r 3               xt_buffblocknum:
000595r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000595r 3  CA                           dex
000596r 3  CA                           dex
000597r 3  18                           clc
000598r 3  A5 rr                        lda up
00059Ar 3  69 2A                        adc #buffblocknum_offset        ; Add offset
00059Cr 3  95 00                        sta 0,x
00059Er 3  A5 rr                        lda up+1
0005A0r 3  69 00                        adc #0                          ; Adding carry
0005A2r 3  95 01                        sta 1,x
0005A4r 3               
0005A4r 3  60           z_buffblocknum: rts
0005A5r 3               
0005A5r 3               
0005A5r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
0005A5r 3               ; ## "buffer"  auto  ANS block
0005A5r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
0005A5r 3               
0005A5r 3               xt_buffer:
0005A5r 3                               ; Check the buffer status
0005A5r 3  A0 2C                        ldy #buffstatus_offset
0005A7r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0005A9r 3  C9 03                        cmp #3          ; LSB is needed.
0005ABr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0005ADr 3               
0005ADr 3                               ; We need to save the block.
0005ADr 3  20 rr rr                     jsr xt_blkbuffer
0005B0r 3  20 rr rr                     jsr xt_buffblocknum
0005B3r 3  20 rr rr                     jsr xt_fetch
0005B6r 3  20 rr rr                     jsr xt_block_write
0005B9r 3               
0005B9r 3               @buffer_available:
0005B9r 3                               ; Save the block number.
0005B9r 3  A0 2A                        ldy #buffblocknum_offset
0005BBr 3  B5 00                        lda 0,x
0005BDr 3  91 rr                        sta (up),y
0005BFr 3  C8                           iny
0005C0r 3  B5 01                        lda 1,x
0005C2r 3  91 rr                        sta (up),y
0005C4r 3               
0005C4r 3                               ; Mark the buffer as clean and in-use.
0005C4r 3  A9 01                        lda #1
0005C6r 3  A0 2C                        ldy #buffstatus_offset
0005C8r 3  91 rr                        sta (up),y
0005CAr 3               
0005CAr 3               @done:
0005CAr 3                               ; Return the buffer address.
0005CAr 3  A0 28                        ldy #blkbuffer_offset
0005CCr 3  B1 rr                        lda (up),y
0005CEr 3  95 00                        sta 0,x
0005D0r 3  C8                           iny
0005D1r 3  B1 rr                        lda (up),y
0005D3r 3  95 01                        sta 1,x
0005D5r 3               
0005D5r 3  60           z_buffer:       rts
0005D6r 3               
0005D6r 3               
0005D6r 3               
0005D6r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
0005D6r 3               ; ## "buffer:"  auto  ANS core ext
0005D6r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
0005D6r 3                               ; Create a buffer of size u that puts its address on the stack
0005D6r 3                               ; when its name is used.
0005D6r 3                               ; """
0005D6r 3               xt_buffer_colon:
0005D6r 3  20 rr rr                     jsr xt_create
0005D9r 3  20 rr rr                     jsr xt_allot
0005DCr 3  60           z_buffer_colon: rts
0005DDr 3               
0005DDr 3               
0005DDr 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
0005DDr 3               ; ## "buffstatus"  auto  Tali block
0005DDr 3               xt_buffstatus:
0005DDr 3                               ; BUFFSTATUS is at UP + buffstatus_offset
0005DDr 3  CA                           dex
0005DEr 3  CA                           dex
0005DFr 3  18                           clc
0005E0r 3  A5 rr                        lda up
0005E2r 3  69 2C                        adc #buffstatus_offset  ; Add offset
0005E4r 3  95 00                        sta 0,x
0005E6r 3  A5 rr                        lda up+1
0005E8r 3  69 00                        adc #0                  ; Adding carry
0005EAr 3  95 01                        sta 1,x
0005ECr 3               
0005ECr 3  60           z_buffstatus:   rts
0005EDr 3               
0005EDr 3               
0005EDr 3               ; ## BYE ( -- ) "Break"
0005EDr 3               ; ## "bye"  tested  ANS tools ext
0005EDr 3                       ; """https://forth-standard.org/standard/tools/BYE"""
0005EDr 3               
0005EDr 3               xt_bye:
0005EDr 3                               ;brk
0005EDr 3  4C rr rr                     jmp platform_bye
0005F0r 3               z_bye:          ;rts             ; never reached
0005F0r 3               
0005F0r 3               
0005F0r 3               
0005F0r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
0005F0r 3               ; ## "c,"  auto  ANS core
0005F0r 3                       ; """https://forth-standard.org/standard/core/CComma"""
0005F0r 3               
0005F0r 3               xt_c_comma:
0005F0r 3  20 rr rr                     jsr underflow_1
0005F3r 3               
0005F3r 3  B5 00                        lda 0,x
0005F5r 3  20 rr rr                     jsr cmpl_a
0005F8r 3               
0005F8r 3  E8                           inx
0005F9r 3  E8                           inx
0005FAr 3               
0005FAr 3  60           z_c_comma:      rts
0005FBr 3               
0005FBr 3               
0005FBr 3               
0005FBr 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
0005FBr 3               ; ## "c@"  auto  ANS core
0005FBr 3                       ; """https://forth-standard.org/standard/core/CFetch"""
0005FBr 3               xt_c_fetch:
0005FBr 3  20 rr rr                     jsr underflow_1
0005FEr 3               
0005FEr 3  A1 00                        lda (0,x)
000600r 3  95 00                        sta 0,x
000602r 3  74 01                        stz 1,x         ; Ignore LSB
000604r 3               
000604r 3  60           z_c_fetch:      rts
000605r 3               
000605r 3               
000605r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000605r 3               ; ## "c!"  auto  ANS core
000605r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000605r 3               xt_c_store:
000605r 3  20 rr rr                     jsr underflow_2
000608r 3               
000608r 3  B5 02                        lda 2,x
00060Ar 3  81 00                        sta (0,x)
00060Cr 3               
00060Cr 3  E8                           inx
00060Dr 3  E8                           inx
00060Er 3  E8                           inx
00060Fr 3  E8                           inx
000610r 3               
000610r 3  60           z_c_store:      rts
000611r 3               
000611r 3               
000611r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000611r 3               ; ## "case"  auto  ANS core ext
000611r 3                       ; """http://forth-standard.org/standard/core/CASE
000611r 3                       ;
000611r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000611r 3                       ; """
000611r 3               
000611r 3               
000611r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000611r 3               ; ## "cell+"  auto  ANS core
000611r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000611r 3                       ; Add the number of bytes ("address units") that one cell needs.
000611r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000611r 3                       ; """
000611r 3               
000611r 3               xt_cell_plus:
000611r 3  20 rr rr                     jsr underflow_1
000614r 3               
000614r 3  F6 00                        inc 0,x
000616r 3  D0 02                        bne @1
000618r 3  F6 01                        inc 1,x
00061Ar 3               @1:
00061Ar 3  F6 00                        inc 0,x
00061Cr 3  D0 02                        bne @done
00061Er 3  F6 01                        inc 1,x
000620r 3               @done:
000620r 3  60           z_cell_plus:    rts
000621r 3               
000621r 3               
000621r 3               
000621r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000621r 3               ; ## "cells"  auto  ANS core
000621r 3                       ; """https://forth-standard.org/standard/core/CELLS
000621r 3                       ;
000621r 3                       ; Dummy entry for the CELLS word, the code is the same as for
000621r 3                       ; 2*, which is where the header directs us to
000621r 3                       ; """
000621r 3               
000621r 3               
000621r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000621r 3               ; ## "char"  auto  ANS core
000621r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000621r 3               
000621r 3               xt_char:
000621r 3                               ; get character from string, returns ( addr u )
000621r 3  20 rr rr                     jsr xt_parse_name
000624r 3               
000624r 3                               ; if we got back a zero, we have a problem
000624r 3  B5 00                        lda 0,x
000626r 3  15 01                        ora 1,x
000628r 3  D0 05                        bne @not_empty
00062Ar 3               
00062Ar 3  A9 05                        lda #err_noname
00062Cr 3  4C rr rr                     jmp error
00062Fr 3               
00062Fr 3               @not_empty:
00062Fr 3  E8                           inx             ; drop number of characters, leave addr
000630r 3  E8                           inx
000631r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000633r 3  95 00                        sta 0,x
000635r 3  74 01                        stz 1,x         ; MSB is always zero
000637r 3               
000637r 3  60           z_char:         rts
000638r 3               
000638r 3               
000638r 3               
000638r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000638r 3               ; ## "char+"  auto  ANS core
000638r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000638r 3                       ;
000638r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000638r 3                       ; """
000638r 3               
000638r 3               
000638r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000638r 3               ; ## "chars"  auto  ANS core
000638r 3                       ; """https://forth-standard.org/standard/core/CHARS
000638r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000638r 3                       ; machine, this does absolutely nothing and is included for
000638r 3                       ; compatibility with other Forth versions
000638r 3                       ; """
000638r 3               
000638r 3               xt_chars:
000638r 3                               ; Checking for underflow seems a bit stupid because this
000638r 3                               ; routine does nothing on this machine. However, the user
000638r 3                               ; should be warned that there is something wrong with the
000638r 3                               ; code if this occurs.
000638r 3  20 rr rr                     jsr underflow_1
00063Br 3               
00063Br 3  60           z_chars:        rts
00063Cr 3               
00063Cr 3               
00063Cr 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
00063Cr 3               ; ## "cleave"  auto  Tali Forth
00063Cr 3               
00063Cr 3                       ; """Given a range of memory with words delimited by whitespace,return
00063Cr 3                       ; the first word at the top of the stack and the rest of the word
00063Cr 3                       ; following it.
00063Cr 3                       ;
00063Cr 3                       ; Example:
00063Cr 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
00063Cr 3                       ; s" w1" cleave        -> "" "w1"
00063Cr 3                       ;
00063Cr 3                       ; Since it will be used in loops a lot, we want it to work in pure
00063Cr 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
00063Cr 3                       ; strip leading delimiters.
00063Cr 3                       ; """
00063Cr 3               
00063Cr 3               xt_cleave:
00063Cr 3  20 rr rr                     jsr underflow_2
00063Fr 3               
00063Fr 3                               ; We arrive here with ( addr u ). We need to strip any leading
00063Fr 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
00063Fr 3                               ; remember how many spaces were stripped. This means we can't
00063Fr 3                               ; calculate the length of the remainder. Fortunately, Tali
00063Fr 3                               ; Forth has just the word we need for this:
00063Fr 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000642r 3               
000642r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000642r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000642r 3                               ; We get around this by cheating: We place ( addr u ) in the
000642r 3                               ; input buffer and then call PARSE-NAME.
000642r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000645r 3               
000645r 3  B5 00                        lda 0,x         ; u is new ciblen
000647r 3  85 rr                        sta ciblen
000649r 3  B5 01                        lda 1,x
00064Br 3  85 rr                        sta ciblen+1
00064Dr 3               
00064Dr 3  B5 02                        lda 2,x         ; addr is new cib
00064Fr 3  85 rr                        sta cib
000651r 3  B5 03                        lda 3,x
000653r 3  85 rr                        sta cib+1
000655r 3               
000655r 3  64 rr                        stz toin        ; >IN pointer is zero
000657r 3  64 rr                        stz toin+1
000659r 3               
000659r 3                               ; PARSE-NAME gives us back the substring of the first word
000659r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
00065Cr 3               
00065Cr 3                               ; If we were given an empty string, then we're done. It's the
00065Cr 3                               ; resposibility of the user to catch this as a sign to end the
00065Cr 3                               ; any loop
00065Cr 3  B5 00                        lda 0,x
00065Er 3  15 01                        ora 1,x
000660r 3  F0 23                        beq @done
000662r 3               
000662r 3                               ; Now we have to adjust the original string
000662r 3  B5 04                        lda 4,x         ; LSB of original u
000664r 3  38                           sec
000665r 3  F5 00                        sbc 0,x
000667r 3  95 04                        sta 4,x
000669r 3               
000669r 3  B5 05                        lda 5,x         ; MSB of original u
00066Br 3  F5 01                        sbc 1,x
00066Dr 3  95 05                        sta 5,x
00066Fr 3               
00066Fr 3  B5 06                        lda 6,x         ; LSB of original addr
000671r 3  18                           clc
000672r 3  75 00                        adc 0,x
000674r 3  95 06                        sta 6,x
000676r 3               
000676r 3  B5 07                        lda 7,x         ; MSB of original addr
000678r 3  75 01                        adc 1,x
00067Ar 3  95 07                        sta 7,x
00067Cr 3               
00067Cr 3                               ; There is one small problem: PARSE-NAME will probably have
00067Cr 3                               ; left the string with the rest of the words with leading
00067Cr 3                               ; delimiters. We use our magic -LEADING again
00067Cr 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
00067Fr 3  20 rr rr                     jsr xt_minus_leading
000682r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000685r 3               @done:
000685r 3                               ; Restore input
000685r 3  20 rr rr                     jsr xt_r_to_input
000688r 3               
000688r 3  60           z_cleave:       rts
000689r 3               
000689r 3               
000689r 3               
000689r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000689r 3               ; ## "cmove"  auto  ANS string
000689r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000689r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000689r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000689r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000689r 3                       ; "move left".
000689r 3                       ;
000689r 3                       ; There are no official tests for this word.
000689r 3                       ; """
000689r 3               
000689r 3               xt_cmove:
000689r 3  20 rr rr                     jsr underflow_3
00068Cr 3               
00068Cr 3                               ; move destination address to where we can work with it
00068Cr 3  B5 02                        lda 2,x
00068Er 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000690r 3  B5 03                        lda 3,x
000692r 3  85 rr                        sta tmp2+1
000694r 3               
000694r 3                               ; move source address to where we can work with it
000694r 3  B5 04                        lda 4,x
000696r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000698r 3  B5 05                        lda 5,x
00069Ar 3  85 rr                        sta tmp1+1
00069Cr 3               
00069Cr 3  A0 00                        ldy #0
00069Er 3  B5 01                        lda 1,x         ; number of whole pages to move
0006A0r 3  F0 0F                        beq @dopartial
0006A2r 3               
0006A2r 3               @page:
0006A2r 3  B1 rr                        lda (tmp1),y
0006A4r 3  91 rr                        sta (tmp2),y
0006A6r 3  C8                           iny
0006A7r 3  D0 F9                        bne @page
0006A9r 3               
0006A9r 3  E6 rr                        inc tmp1+1
0006ABr 3  E6 rr                        inc tmp2+1
0006ADr 3  D6 01                        dec 1,x
0006AFr 3  D0 F1                        bne @page
0006B1r 3               
0006B1r 3               @dopartial:
0006B1r 3  B5 00                        lda 0,x         ; length of last page
0006B3r 3  F0 09                        beq @done
0006B5r 3               
0006B5r 3               @partial:
0006B5r 3  B1 rr                        lda (tmp1),y
0006B7r 3  91 rr                        sta (tmp2),y
0006B9r 3  C8                           iny
0006BAr 3               
0006BAr 3  D6 00                        dec 0,x
0006BCr 3  D0 F7                        bne @partial
0006BEr 3               
0006BEr 3               @done:          ; clear the stack
0006BEr 3  8A                           txa
0006BFr 3  18                           clc
0006C0r 3  69 06                        adc #6
0006C2r 3  AA                           tax
0006C3r 3               
0006C3r 3  60           z_cmove:        rts
0006C4r 3               
0006C4r 3               
0006C4r 3               
0006C4r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
0006C4r 3               ; ## "cmove>"  auto  ANS string
0006C4r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
0006C4r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
0006C4r 3                       ; Routines", p. 201, where it is called "move right".
0006C4r 3                       ;
0006C4r 3                       ; There are no official tests for this word.
0006C4r 3                       ; """
0006C4r 3               
0006C4r 3               xt_cmove_up:
0006C4r 3  20 rr rr                     jsr underflow_3
0006C7r 3               
0006C7r 3                               ; Move destination address to where we can work with it
0006C7r 3  B5 02                        lda 2,x
0006C9r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
0006CBr 3  B5 03                        lda 3,x
0006CDr 3  18                           clc
0006CEr 3  75 01                        adc 1,x
0006D0r 3  85 rr                        sta tmp2+1      ; point to last page of destination
0006D2r 3               
0006D2r 3                               ; Move source address to where we can work with it
0006D2r 3  B5 04                        lda 4,x
0006D4r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
0006D6r 3  B5 05                        lda 5,x
0006D8r 3  18                           clc
0006D9r 3  75 01                        adc 1,x
0006DBr 3  85 rr                        sta tmp1+1      ; point to last page of source
0006DDr 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
0006DFr 3               
0006DFr 3                               ; Move the last partial page first
0006DFr 3  B4 00                        ldy 0,x         ; length of last page
0006E1r 3  F0 0E                        beq @nopartial
0006E3r 3               
0006E3r 3               @outerloop:
0006E3r 3  88                           dey
0006E4r 3  F0 07                        beq @finishpage
0006E6r 3               
0006E6r 3               @innerloop:
0006E6r 3  B1 rr                        lda (tmp1),y
0006E8r 3  91 rr                        sta (tmp2),y
0006EAr 3  88                           dey
0006EBr 3  D0 F9                        bne @innerloop
0006EDr 3               
0006EDr 3               @finishpage:
0006EDr 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
0006EFr 3  92 rr                        sta (tmp2)
0006F1r 3               
0006F1r 3               @nopartial:
0006F1r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
0006F3r 3  C6 rr                        dec tmp2+1
0006F5r 3  D6 01                        dec 1,x
0006F7r 3  D0 EA                        bne @outerloop
0006F9r 3               @done:
0006F9r 3                               ; clear up the stack and leave
0006F9r 3  8A                           txa
0006FAr 3  18                           clc
0006FBr 3  69 06                        adc #6
0006FDr 3  AA                           tax
0006FEr 3               
0006FEr 3  60           z_cmove_up:     rts
0006FFr 3               
0006FFr 3               
0006FFr 3               
0006FFr 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
0006FFr 3               ; ## ":"  auto  ANS core
0006FFr 3                       ; """https://forth-standard.org/standard/core/Colon
0006FFr 3                       ;
0006FFr 3                       ; Use the CREATE routine and fill in the rest by hand.
0006FFr 3                       ; """
0006FFr 3               
0006FFr 3               xt_colon:
0006FFr 3                               ; If we're already in the compile state, complain
0006FFr 3                               ; and quit
0006FFr 3  A5 rr                        lda state
000701r 3  05 rr                        ora state+1
000703r 3  F0 05                        beq @1
000705r 3               
000705r 3  A9 07                        lda #err_state
000707r 3  4C rr rr                     jmp error
00070Ar 3               @1:
00070Ar 3                               ; switch to compile state
00070Ar 3  C6 rr                        dec state
00070Cr 3  C6 rr                        dec state+1
00070Er 3               
00070Er 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
00070Er 3                               ; word
00070Er 3  A9 40                        lda #%01000000
000710r 3  04 rr                        tsb status
000712r 3               
000712r 3                               ; CREATE is going to change the DP to point to the new word's
000712r 3                               ; header. While this is fine for (say) variables, it would mean
000712r 3                               ; that FIND-NAME etc would find a half-finished word when
000712r 3                               ; looking in the Dictionary. To prevent this, we save the old
000712r 3                               ; version of DP and restore it later. The new DP is placed in
000712r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000712r 3  20 rr rr                     jsr current_to_dp
000715r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000717r 3  48                           pha
000718r 3  A5 rr                        lda dp
00071Ar 3  48                           pha
00071Br 3               
00071Br 3                               ; Tell create not to print warning for duplicate name.
00071Br 3  A9 80                        lda #%10000000
00071Dr 3  04 rr                        tsb status
00071Fr 3               
00071Fr 3  20 rr rr                     jsr xt_create
000722r 3               
000722r 3                               ; Get the nt (not the xt!) of the new word as described above.
000722r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000722r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000725r 3  A5 rr                        lda dp
000727r 3  85 rr                        sta workword
000729r 3  A5 rr                        lda dp+1
00072Br 3  85 rr                        sta workword+1
00072Dr 3               
00072Dr 3                               ; Restore original DP
00072Dr 3  68                           pla
00072Er 3  85 rr                        sta dp
000730r 3  68                           pla
000731r 3  85 rr                        sta dp+1
000733r 3  20 rr rr                     jsr dp_to_current
000736r 3               
000736r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000736r 3                               ; back up three bytes and overwrite that.
000736r 3  A5 rr                        lda cp
000738r 3  38                           sec
000739r 3  E9 03                        sbc #3
00073Br 3  85 rr                        sta cp
00073Dr 3  B0 02                        bcs @done
00073Fr 3  C6 rr                        dec cp+1
000741r 3               @done:
000741r 3  60           z_colon:        rts
000742r 3               
000742r 3               
000742r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000742r 3               ; ## ":NONAME"  auto  ANS core
000742r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000742r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000742r 3                       ; """
000742r 3               
000742r 3               xt_colon_noname:
000742r 3                               ; If we're already in the compile state, complain
000742r 3                               ; and quit
000742r 3  A5 rr                        lda state
000744r 3  05 rr                        ora state+1
000746r 3  F0 05                        beq @1
000748r 3               
000748r 3  A9 07                        lda #err_state
00074Ar 3  4C rr rr                     jmp error
00074Dr 3               @1:
00074Dr 3                               ; switch to compile state
00074Dr 3  C6 rr                        dec state
00074Fr 3  C6 rr                        dec state+1
000751r 3               
000751r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000751r 3                               ; a :NONAME word.
000751r 3  A9 40                        lda #%01000000
000753r 3  14 rr                        trb status
000755r 3               
000755r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000755r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000755r 3                               ; nt and they will modify their behavior.
000755r 3  A5 rr                        lda cp
000757r 3  85 rr                        sta workword
000759r 3  A5 rr                        lda cp+1
00075Br 3  85 rr                        sta workword+1
00075Dr 3               @done:
00075Dr 3  60           z_colon_noname:        rts
00075Er 3               
00075Er 3               
00075Er 3               
00075Er 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
00075Er 3               ; ## ","  auto  ANS core
00075Er 3                       ; """https://forth-standard.org/standard/core/Comma
00075Er 3                       ; Store TOS at current place in memory.
00075Er 3                       ;
00075Er 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
00075Er 3                       ; """
00075Er 3               
00075Er 3               xt_comma:
00075Er 3  20 rr rr                     jsr underflow_1
000761r 3               
000761r 3  B5 00                        lda 0,x
000763r 3  92 rr                        sta (cp)
000765r 3               
000765r 3  E6 rr                        inc cp
000767r 3  D0 02                        bne @1
000769r 3  E6 rr                        inc cp+1
00076Br 3               @1:
00076Br 3  B5 01                        lda 1,x
00076Dr 3  92 rr                        sta (cp)
00076Fr 3               
00076Fr 3  E6 rr                        inc cp
000771r 3  D0 02                        bne @done
000773r 3  E6 rr                        inc cp+1
000775r 3               @done:
000775r 3  E8                           inx
000776r 3  E8                           inx
000777r 3               
000777r 3  60           z_comma:        rts
000778r 3               
000778r 3               
000778r 3               
000778r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000778r 3               ; ## "compare"   auto  ANS string
000778r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000778r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000778r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000778r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000778r 3                       ; that entirely matches the beginning of the other string, but is
000778r 3                       ; shorter, is considered less than the longer string.
000778r 3                       ; """
000778r 3               
000778r 3               xt_compare:
000778r 3  20 rr rr                     jsr underflow_4
00077Br 3               
00077Br 3                               ; Load the two string addresses into tmp1 and tmp2.
00077Br 3  B5 02                        lda 2,x
00077Dr 3  85 rr                        sta tmp2
00077Fr 3  B5 03                        lda 3,x
000781r 3  85 rr                        sta tmp2+1
000783r 3  B5 06                        lda 6,x
000785r 3  85 rr                        sta tmp1
000787r 3  B5 07                        lda 7,x
000789r 3  85 rr                        sta tmp1+1
00078Br 3                               ; The counts will be used in-place on the stack.
00078Br 3               
00078Br 3               @compare_loop:
00078Br 3                               ; Check to see if we are out of letters.
00078Br 3               
00078Br 3                               ; Check string1
00078Br 3  B5 04                        lda 4,x
00078Dr 3  15 05                        ora 5,x
00078Fr 3  F0 2C                        beq @str1_done
000791r 3               
000791r 3                               ; Check string2
000791r 3  B5 00                        lda 0,x
000793r 3  15 01                        ora 1,x
000795r 3  F0 3A                        beq @greater    ; Str2 empty first
000797r 3               
000797r 3               @check_letter:
000797r 3                               ; Both strings have at least one letter left.
000797r 3                               ; Check the letters against each other.
000797r 3  B2 rr                        lda (tmp1)
000799r 3  D2 rr                        cmp (tmp2)
00079Br 3  90 26                        bcc @less
00079Dr 3  D0 32                        bne @greater
00079Fr 3               @next_letter:
00079Fr 3                               ; Move both tmp pointers and decrement the counts
00079Fr 3                               ; on the stack.
00079Fr 3                               ; Increment tmp1
00079Fr 3  E6 rr                        inc tmp1
0007A1r 3  D0 02                        bne @1
0007A3r 3  E6 rr                        inc tmp1+1
0007A5r 3               @1:
0007A5r 3                               ; Increment tmp2
0007A5r 3  E6 rr                        inc tmp2
0007A7r 3  D0 02                        bne @2
0007A9r 3  E6 rr                        inc tmp2+1
0007ABr 3               @2:
0007ABr 3                               ; Decrement count1 on the stack.
0007ABr 3  B5 04                        lda 4,x
0007ADr 3  D0 02                        bne @3
0007AFr 3  D6 05                        dec 5,x
0007B1r 3               @3:
0007B1r 3  D6 04                        dec 4,x
0007B3r 3               
0007B3r 3                               ; Decrement count2 on the stack.
0007B3r 3  B5 00                        lda 0,x
0007B5r 3  D0 02                        bne @4
0007B7r 3  D6 01                        dec 1,x
0007B9r 3               @4:
0007B9r 3  D6 00                        dec 0,x
0007BBr 3               
0007BBr 3                               ; Loop around and check again.
0007BBr 3  80 CE                        bra @compare_loop
0007BDr 3               
0007BDr 3               @str1_done:
0007BDr 3                               ; String 1 is out of letters. Check string 2.
0007BDr 3  B5 00                        lda 0,x
0007BFr 3  15 01                        ora 1,x
0007C1r 3  F0 08                        beq @equal      ; Both out of letters
0007C3r 3               
0007C3r 3                               ; Falls into less (str1 is out but str2 has more)
0007C3r 3               @less:
0007C3r 3                               ; Return -1
0007C3r 3  A9 FF                        lda #$FF
0007C5r 3  95 06                        sta 6,x
0007C7r 3  95 07                        sta 7,x
0007C9r 3  80 0C                        bra @done
0007CBr 3               @equal:
0007CBr 3                               ; Return 0
0007CBr 3  74 06                        stz 6,x
0007CDr 3  74 07                        stz 7,x
0007CFr 3  80 06                        bra @done
0007D1r 3               @greater:
0007D1r 3                               ; Return 1
0007D1r 3  A9 01                        lda #1
0007D3r 3  95 06                        sta 6,x
0007D5r 3  74 07                        stz 7,x
0007D7r 3                               ; Falls into @done
0007D7r 3               @done:
0007D7r 3                               ; Remove all but the result from the stack.
0007D7r 3  8A                           txa
0007D8r 3  18                           clc
0007D9r 3  69 06                        adc #6
0007DBr 3  AA                           tax
0007DCr 3               
0007DCr 3  60           z_compare:      rts
0007DDr 3               
0007DDr 3               
0007DDr 3               
0007DDr 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
0007DDr 3               ; ## "compile,"  auto  ANS core ext
0007DDr 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
0007DDr 3                       ; Compile the given xt in the current word definition. It is an
0007DDr 3                       ; error if we are not in the compile state. Because we are using
0007DDr 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
0007DDr 3                       ; the traditional way. By default, native compiled is allowed, unless
0007DDr 3                       ; there is a NN (Never Native) flag associated. If not, we use the
0007DDr 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
0007DDr 3                       ; is too large to be natively coded: If the size is larger than
0007DDr 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
0007DDr 3                       ; Native) flag is set, the word is always natively compiled.
0007DDr 3                       ; """
0007DDr 3               
0007DDr 3               xt_compile_comma:
0007DDr 3  20 rr rr                     jsr underflow_1
0007E0r 3               
0007E0r 3                               ; See if this is an Always Native (AN) word by checking the
0007E0r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
0007E0r 3                               ; the Return Stack
0007E0r 3  B5 01                        lda 1,x                 ; MSB
0007E2r 3  48                           pha
0007E3r 3  B5 00                        lda 0,x
0007E5r 3  48                           pha                     ; LSB
0007E6r 3               
0007E6r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
0007E9r 3               
0007E9r 3                               ; See if this xt even has an nt.
0007E9r 3  B5 00                        lda 0,x
0007EBr 3  15 01                        ora 1,x
0007EDr 3  D0 03                        bne @check_nt
0007EFr 3               
0007EFr 3                               ; No nt in dictionary. Just compile as a JSR.
0007EFr 3  4C rr rr                     jmp @compile_as_jump
0007F2r 3               
0007F2r 3               @check_nt:
0007F2r 3                               ; put nt away for safe keeping
0007F2r 3  B5 00                        lda 0,x
0007F4r 3  85 rr                        sta tmptos
0007F6r 3  B5 01                        lda 1,x
0007F8r 3  85 rr                        sta tmptos+1
0007FAr 3               
0007FAr 3                               ; status byte is one further down
0007FAr 3  F6 00                        inc 0,x
0007FCr 3  D0 02                        bne @1
0007FEr 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000800r 3               @1:
000800r 3  A1 00                        lda (0,x)
000802r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000804r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000806r 3  F0 0D                        beq @compile_check
000808r 3               
000808r 3                               ; We're natively compiling no matter what. Get length and
000808r 3                               ; compile in code. Get the original nt back
000808r 3  A5 rr                        lda tmptos
00080Ar 3  95 00                        sta 0,x
00080Cr 3  A5 rr                        lda tmptos+1
00080Er 3  95 01                        sta 1,x
000810r 3               
000810r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000813r 3               
000813r 3  80 27                        bra @compile_as_code
000815r 3               
000815r 3               @compile_check:
000815r 3                               ; See if Native Compile is even alowed by checking the NN
000815r 3                               ; flag
000815r 3  A5 rr                        lda tmp3
000817r 3  29 08                        and #NN
000819r 3  F0 03                        beq @check_size_limit
00081Br 3               
00081Br 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
00081Er 3               
00081Er 3               @check_size_limit:
00081Er 3                               ; Native compile is a legal option, but we need to see what
00081Er 3                               ; limit the user set for size (in nc_limit)
00081Er 3  A5 rr                        lda tmptos
000820r 3  95 00                        sta 0,x
000822r 3  A5 rr                        lda tmptos+1
000824r 3  95 01                        sta 1,x
000826r 3               
000826r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000829r 3               
000829r 3                               ; Check the wordsize MSB against the user-defined limit.
000829r 3  B5 01                        lda 1,x
00082Br 3  C5 rr                        cmp nc_limit+1
00082Dr 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
00082Fr 3  D0 08                        bne @jumpto_compile_as_jump
000831r 3               
000831r 3                               ; Check the wordsize LSB against the user-defined limit.
000831r 3  B5 00                        lda 0,x
000833r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000835r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000837r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000839r 3               
000839r 3               @jumpto_compile_as_jump:
000839r 3                               ; If the wordsize is greater than the user-defined
000839r 3                               ; limit, it will be compiled as a subroutine jump.
000839r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
00083Cr 3               
00083Cr 3               @compile_as_code:
00083Cr 3                               ; We arrive here with the length of the word's code TOS and
00083Cr 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
00083Cr 3                               ; on the data stack
00083Cr 3  CA                           dex
00083Dr 3  CA                           dex                     ; ( -- u ? )
00083Er 3  CA                           dex
00083Fr 3  CA                           dex                     ; ( -- u ? ? )
000840r 3               
000840r 3  B5 04                        lda 4,x
000842r 3  95 00                        sta 0,x                 ; LSB of u
000844r 3  B5 05                        lda 5,x
000846r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000848r 3               
000848r 3  68                           pla
000849r 3  95 04                        sta 4,x                 ; LSB of xt
00084Br 3  68                           pla
00084Cr 3  95 05                        sta 5,x                 ; ( -- xt ? u )
00084Er 3               
00084Er 3  A5 rr                        lda cp                  ; LSB of cp
000850r 3  95 02                        sta 2,x
000852r 3  A5 rr                        lda cp+1
000854r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000856r 3               
000856r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000856r 3               
000856r 3                               ; Native compiling allows us to strip the stack antics off
000856r 3                               ; a number of words that use the Return Stack such as >R, R>,
000856r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000856r 3                               ; xt with the contents of the table
000856r 3  A0 00                        ldy #0
000858r 3               
000858r 3               @strip_loop:
000858r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
00085Br 3  D5 04                        cmp 4,x                 ; LSB of xt
00085Dr 3  D0 07                        bne @next_entry
00085Fr 3               
00085Fr 3                               ; LSB is the same, test MSB
00085Fr 3  B9 rr rr                     lda @strip_table+1,y
000862r 3  D5 05                        cmp 5,x
000864r 3  F0 0C                        beq @found_entry
000866r 3               
000866r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000866r 3                               ; so we can use the next step for both cases
000866r 3               @next_entry:
000866r 3                               ; Not a word that needs stripping, so check next entry in table
000866r 3                               ; Let's see if we're done with the table (marked by zero entry)
000866r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000869r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
00086Cr 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
00086Er 3               
00086Er 3  C8                           iny
00086Fr 3  C8                           iny
000870r 3  80 E6                        bra @strip_loop
000872r 3               @found_entry:
000872r 3                               ; This word is one of the ones that needs to have its size
000872r 3                               ; adjusted during native compile. We find the values in the
000872r 3                               ; next table with the same index, which is Y. However, Y is
000872r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000872r 3                               ; halve the index before we can use it.
000872r 3  98                           tya
000873r 3  4A                           lsr
000874r 3  A8                           tay
000875r 3               
000875r 3                               ; Get the adjustment out of the size table. We were clever
000875r 3                               ; enough to make sure the cut on both ends of the code is
000875r 3                               ; is the same size.
000875r 3  B9 rr rr                     lda @strip_size,y
000878r 3  85 rr                        sta tmptos              ; save a copy
00087Ar 3               
00087Ar 3                               ; Adjust xt: Start later
00087Ar 3  18                           clc
00087Br 3  75 04                        adc 4,x
00087Dr 3  95 04                        sta 4,x
00087Fr 3  90 02                        bcc @2
000881r 3  F6 05                        inc 5,x                 ; we just care about the carry
000883r 3               @2:
000883r 3               
000883r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000883r 3                               ; bottom of the code, we have to double the value
000883r 3  06 rr                        asl tmptos
000885r 3               
000885r 3  38                           sec
000886r 3  B5 00                        lda 0,x
000888r 3  E5 rr                        sbc tmptos
00088Ar 3  95 00                        sta 0,x
00088Cr 3  B0 02                        bcs @3
00088Er 3  D6 01                        dec 1,x                 ; we just care about the borrow
000890r 3               @3:
000890r 3                               ; drop through to underflow check stripping
000890r 3               
000890r 3               @underflow_strip:
000890r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000890r 3               
000890r 3                               ; The user can choose to remove the unterflow testing in those
000890r 3                               ; words that have the UF flag. This shortens the word by
000890r 3                               ; 3 bytes if there is no underflow.
000890r 3               
000890r 3                               ; See if the user wants underflow stripping turned on
000890r 3  A5 rr                        lda uf_strip
000892r 3  05 rr                        ora uf_strip+1
000894r 3  F0 1C                        beq @specials_done
000896r 3               
000896r 3                               ; See if this word even contains underflow checking
000896r 3  A5 rr                        lda tmp3
000898r 3  29 10                        and #UF
00089Ar 3  F0 16                        beq @specials_done
00089Cr 3               
00089Cr 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
00089Cr 3                               ; long. Note hat PICK is a special case.
00089Cr 3               
00089Cr 3                               ; Adjust xt: Start later
00089Cr 3  18                           clc
00089Dr 3  B5 04                        lda 4,x
00089Fr 3  69 03                        adc #3
0008A1r 3  95 04                        sta 4,x
0008A3r 3  90 02                        bcc @4
0008A5r 3  F6 05                        inc 5,x                  ; we just care about the carry
0008A7r 3               @4:
0008A7r 3                               ; Adjust u: End earlier
0008A7r 3  38                           sec
0008A8r 3  B5 00                        lda 0,x
0008AAr 3  E9 03                        sbc #3
0008ACr 3  95 00                        sta 0,x
0008AEr 3  B0 02                        bcs @5
0008B0r 3  D6 01                        dec 1,x                  ; we just care about the borrow
0008B2r 3               @5:
0008B2r 3               
0008B2r 3                               ; --- END OF SPECIAL CASES ---
0008B2r 3               @specials_done:
0008B2r 3                               ; Store size of area to be copied for calculation of
0008B2r 3                               ; new CP. We have to do this after all of the special cases
0008B2r 3                               ; because they might change the size
0008B2r 3  B5 01                        lda 1,x                 ; MSB
0008B4r 3  48                           pha
0008B5r 3  B5 00                        lda 0,x                 ; LSB
0008B7r 3  48                           pha
0008B8r 3               
0008B8r 3                               ; Enough of this, let's move those bytes already! We have
0008B8r 3                               ; ( xt cp u ) on the stack at this point
0008B8r 3  20 rr rr                     jsr xt_move
0008BBr 3               
0008BBr 3                               ; Update CP
0008BBr 3  18                           clc
0008BCr 3  68                           pla                     ; LSB
0008BDr 3  65 rr                        adc cp
0008BFr 3  85 rr                        sta cp
0008C1r 3               
0008C1r 3  68                           pla                     ; MSB
0008C2r 3  65 rr                        adc cp+1
0008C4r 3  85 rr                        sta cp+1
0008C6r 3               
0008C6r 3  80 2C                        bra @done
0008C8r 3               
0008C8r 3               @strip_table:
0008C8r 3                              ; List of words we strip the Return Stack antics from
0008C8r 3                              ; during native compile, zero terminated. The index here
0008C8r 3                              ; must be the same as for the sizes
0008C8r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
0008CCr 3  rr rr        
0008CEr 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
0008D2r 3  00 00        
0008D4r 3               
0008D4r 3               @strip_size:
0008D4r 3                               ; List of bytes to be stripped from the words that get their
0008D4r 3                               ; Return Stack antics removed during native compile. Index must
0008D4r 3                               ; be the same as for the xts. Zero terminated.
0008D4r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
0008D8r 3  06 00        
0008DAr 3               
0008DAr 3               @compile_as_jump:
0008DAr 3                               ; Compile xt as a subroutine jump
0008DAr 3  A9 20                        lda #$20
0008DCr 3  92 rr                        sta (cp)
0008DEr 3               
0008DEr 3  A0 01                        ldy #1
0008E0r 3  68                           pla             ; LSB
0008E1r 3  91 rr                        sta (cp),y
0008E3r 3  C8                           iny
0008E4r 3  68                           pla             ; MSB
0008E5r 3  91 rr                        sta (cp),y
0008E7r 3               
0008E7r 3                               ; allot space we just used
0008E7r 3  A9 03                        lda #3
0008E9r 3  18                           clc
0008EAr 3  65 rr                        adc cp
0008ECr 3  85 rr                        sta cp
0008EEr 3  90 02                        bcc @6
0008F0r 3  E6 rr                        inc cp+1
0008F2r 3               @6:
0008F2r 3  E8                           inx             ; drop xt
0008F3r 3  E8                           inx
0008F4r 3               @done:
0008F4r 3               z_compile_comma:
0008F4r 3  60                           rts
0008F5r 3               
0008F5r 3               
0008F5r 3               
0008F5r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
0008F5r 3               ; ## "compile-only"  tested  Tali Forth
0008F5r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
0008F5r 3                       ; word.
0008F5r 3                       ;
0008F5r 3                       ; The alternative way to do this is to define a word
0008F5r 3                       ; ?COMPILE that makes sure  we're in compile mode
0008F5r 3                       ; """
0008F5r 3               
0008F5r 3               xt_compile_only:
0008F5r 3  20 rr rr                     jsr current_to_dp
0008F8r 3  A0 01                        ldy #1          ; offset for status byte
0008FAr 3  B1 rr                        lda (dp),y
0008FCr 3  09 01                        ora #CO        ; make sure bit 7 is set
0008FEr 3  91 rr                        sta (dp),y
000900r 3               
000900r 3  60           z_compile_only: rts
000901r 3               
000901r 3               
000901r 3               
000901r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000901r 3               ; ## "constant"  auto  ANS core
000901r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000901r 3                       ;
000901r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000901r 3                       ; more in assembler and let CREATE do the heavy lifting.
000901r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000901r 3                       ; a primer on how this works in various Forths. This is the
000901r 3                       ; same code as VALUE in our case.
000901r 3                       ; """
000901r 3               xt_value:
000901r 3               xt_constant:
000901r 3  20 rr rr                     jsr underflow_1
000904r 3               
000904r 3  20 rr rr                     jsr xt_create
000907r 3               
000907r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000907r 3                               ; but we want DOCONST for constants. Go back two bytes and
000907r 3                               ; replace the subroutine jump target
000907r 3  38                           sec
000908r 3  A5 rr                        lda cp
00090Ar 3  E9 02                        sbc #2
00090Cr 3  85 rr                        sta tmp1
00090Er 3  A5 rr                        lda cp+1
000910r 3  E9 00                        sbc #0
000912r 3  85 rr                        sta tmp1+1
000914r 3               
000914r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000916r 3  92 rr                        sta (tmp1)
000918r 3  A0 01                        ldy #1
00091Ar 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
00091Cr 3  91 rr                        sta (tmp1),y
00091Er 3               
00091Er 3                               ; Now we save the constant number itself in the next cell
00091Er 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000921r 3               
000921r 3               adjust_z:
000921r 3                               ; Now the length of the complete word (z_word) has increased by
000921r 3                               ; two. We need to update that number or else words such as SEE
000921r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000921r 3                               ; VALUE and DEFER
000921r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000924r 3               
000924r 3                               ; z_word is six bytes further down
000924r 3  B5 00                        lda 0,x
000926r 3  85 rr                        sta tmp1
000928r 3  B5 01                        lda 1,x
00092Ar 3  85 rr                        sta tmp1+1
00092Cr 3               
00092Cr 3  A0 06                        ldy #6
00092Er 3  B1 rr                        lda (tmp1),y
000930r 3  18                           clc
000931r 3  69 02                        adc #2
000933r 3  91 rr                        sta (tmp1),y
000935r 3  C8                           iny
000936r 3  B1 rr                        lda (tmp1),y
000938r 3  69 00                        adc #0                  ; only need carry
00093Ar 3  91 rr                        sta (tmp1),y
00093Cr 3               
00093Cr 3  E8                           inx
00093Dr 3  E8                           inx
00093Er 3               
00093Er 3               z_value:
00093Er 3  60           z_constant:     rts
00093Fr 3               
00093Fr 3               
00093Fr 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
00093Fr 3               ; ## "count"  auto  ANS core
00093Fr 3                       ; """https://forth-standard.org/standard/core/COUNT
00093Fr 3                       ; Convert old-style character string to address-length pair. Note
00093Fr 3                       ; that the length of the string c-addr is stored in character length
00093Fr 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
00093Fr 3                       ; though COUNT can also be used to step through a string character by
00093Fr 3                       ; character.
00093Fr 3                       ; """
00093Fr 3               xt_count:
00093Fr 3  20 rr rr                     jsr underflow_1
000942r 3               
000942r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000944r 3  A8                           tay
000945r 3               
000945r 3                               ; move start address up by one
000945r 3  F6 00                        inc 0,x         ; LSB
000947r 3  D0 02                        bne @1
000949r 3  F6 01                        inc 1,x         ; MSB
00094Br 3               
00094Br 3                               ; save number of characters to stack
00094Br 3               @1:
00094Br 3  98                           tya
00094Cr 3  CA                           dex
00094Dr 3  CA                           dex
00094Er 3  95 00                        sta 0,x         ; LSB
000950r 3  74 01                        stz 1,x         ; MSB, always zero
000952r 3               
000952r 3  60           z_count:        rts
000953r 3               
000953r 3               
000953r 3               ; ## CR ( -- ) "Print a line feed"
000953r 3               ; ## "cr"  auto  ANS core
000953r 3                       ; """https://forth-standard.org/standard/core/CR"""
000953r 3               xt_cr:
000953r 3  A9 0A                        lda #AscLF
000955r 3  20 rr rr                     jsr emit_a
000958r 3  60           z_cr:           rts
000959r 3               
000959r 3               
000959r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000959r 3               ; ## "create"  auto  ANS core
000959r 3                       ; """https://forth-standard.org/standard/core/CREATE
000959r 3                       ;
000959r 3                       ; See the drawing in headers.asm for details on the header
000959r 3                       ; """
000959r 3               
000959r 3               xt_create:
000959r 3                               ; get string
000959r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
00095Cr 3               
00095Cr 3                               ; if we were given an empty string, we complain and quit
00095Cr 3  B5 00                        lda 0,x
00095Er 3  15 01                        ora 1,x
000960r 3  D0 05                        bne @got_name
000962r 3               
000962r 3  A9 05                        lda #err_noname
000964r 3  4C rr rr                     jmp error
000967r 3               
000967r 3               @got_name:
000967r 3                               ; Enforce maximal length of string by overwriting the MSB of
000967r 3                               ; the length. There is a possible error here: If the string
000967r 3                               ; is exactly 255 chars long, then a lot of the following
000967r 3                               ; additions will fail because of wrapping
000967r 3  74 01                        stz 1,x
000969r 3               
000969r 3                               ; Check to see if this name already exists.
000969r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
00096Cr 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
00096Fr 3               
00096Fr 3  B5 00                        lda 0,x
000971r 3  15 01                        ora 1,x
000973r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000975r 3               
000975r 3                               ; This name already exists.  See if we are supposed to print
000975r 3                               ; the message for it.
000975r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000976r 3  E8                           inx
000977r 3               
000977r 3                               ; Check bit 7
000977r 3  24 rr                        bit status
000979r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
00097Br 3               
00097Br 3                               ; We aren't supposed to print the redefined message ourselves,
00097Br 3                               ; but we should indicate that it is redefined (for ; to print
00097Br 3                               ; later).
00097Br 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
00097Dr 3  05 rr                        ora status
00097Fr 3  85 rr                        sta status
000981r 3  80 18                        bra @process_name
000983r 3               
000983r 3               @redefined_name:
000983r 3                               ; Print the message that the name is redefined.
000983r 3  A9 02                        lda #str_redefined
000985r 3  20 rr rr                     jsr print_string_no_lf
000988r 3               
000988r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
00098Br 3  20 rr rr                     jsr xt_type
00098Er 3  20 rr rr                     jsr xt_space
000991r 3               
000991r 3  80 08                        bra @process_name
000993r 3               
000993r 3               @new_name:
000993r 3  E8                           inx                     ; Drop flag (0) from find-name.
000994r 3  E8                           inx
000995r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000997r 3  25 rr                        and status
000999r 3  85 rr                        sta status
00099Br 3               
00099Br 3               @process_name:
00099Br 3  B5 00                        lda 0,x
00099Dr 3  85 rr                        sta tmp2                ; store length of string in tmp2
00099Fr 3               
00099Fr 3                               ; remember the first free byte of memory as the start of
00099Fr 3                               ; the new word
00099Fr 3  A5 rr                        lda cp
0009A1r 3  85 rr                        sta tmp1
0009A3r 3  A5 rr                        lda cp+1
0009A5r 3  85 rr                        sta tmp1+1
0009A7r 3               
0009A7r 3                               ; We need 8 bytes plus the length of the string for our new header.
0009A7r 3                               ; This is also the offset for the start of the code field (the
0009A7r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
0009A7r 3                               ; just allot the space afterwards
0009A7r 3  B5 00                        lda 0,x
0009A9r 3  18                           clc
0009AAr 3  69 08                        adc #8
0009ACr 3  85 rr                        sta tmp3                ; total header length
0009AEr 3               
0009AEr 3                               ; We need three more bytes for for the hardcoded code field
0009AEr 3                               ; area (CFA), the "payload" of the word which by default will
0009AEr 3                               ; be a subroutine jump to DOVAR
0009AEr 3  18                           clc
0009AFr 3  69 03                        adc #3
0009B1r 3               
0009B1r 3                               ; We overwrite the length of the string returned by PARSE-NAME
0009B1r 3                               ; and then call ALLOT
0009B1r 3  95 00                        sta 0,x
0009B3r 3  74 01                        stz 1,x         ; max header size is 255 chars
0009B5r 3  20 rr rr                     jsr xt_allot    ; ( addr )
0009B8r 3               
0009B8r 3                               ; Get the CURRENT dictionary pointer.
0009B8r 3  20 rr rr                     jsr current_to_dp
0009BBr 3               
0009BBr 3                               ; Now we walk through the header with Y as the index, adding
0009BBr 3                               ; information byte-by-byte
0009BBr 3  A0 00                        ldy #0
0009BDr 3               
0009BDr 3                               ; HEADER BYTE 0: Length of string
0009BDr 3  A5 rr                        lda tmp2
0009BFr 3  91 rr                        sta (tmp1),y
0009C1r 3               
0009C1r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
0009C1r 3                               ; to "never native", user will have to decide if they should
0009C1r 3                               ; be inlined
0009C1r 3  A9 08                        lda #NN
0009C3r 3               
0009C3r 3                               ; Also, words defined by CREATE are marked in the header has
0009C3r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
0009C3r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
0009C3r 3                               ; correctly with DOES> and CREATE. See the discussion at
0009C3r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
0009C3r 3  09 20                        ora #HC
0009C5r 3  C8                           iny
0009C6r 3  91 rr                        sta (tmp1),y
0009C8r 3  C8                           iny
0009C9r 3               
0009C9r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
0009C9r 3                               ; in the Dictionary
0009C9r 3  A5 rr                        lda dp
0009CBr 3  91 rr                        sta (tmp1),y
0009CDr 3  C8                           iny
0009CEr 3  A5 rr                        lda dp+1
0009D0r 3  91 rr                        sta (tmp1),y
0009D2r 3  C8                           iny
0009D3r 3               
0009D3r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
0009D3r 3  A5 rr                        lda tmp1+1
0009D5r 3  85 rr                        sta dp+1
0009D7r 3  A5 rr                        lda tmp1
0009D9r 3  85 rr                        sta dp
0009DBr 3               
0009DBr 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
0009DBr 3                               ; This begins after the header so we take the length of the
0009DBr 3                               ; header, which we cleverly saved in tmp3, and use it as an
0009DBr 3                               ; offset to the address of the start of the word. We come here
0009DBr 3                               ; with tmp1 in A
0009DBr 3  18                           clc
0009DCr 3  65 rr                        adc tmp3        ; add total header length
0009DEr 3  91 rr                        sta (tmp1),y
0009E0r 3  48                           pha             ; we need this in the next step
0009E1r 3  C8                           iny
0009E2r 3               
0009E2r 3  A5 rr                        lda tmp1+1
0009E4r 3  69 00                        adc #0          ; only need the carry
0009E6r 3  91 rr                        sta (tmp1),y
0009E8r 3  C8                           iny
0009E9r 3               
0009E9r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
0009E9r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
0009E9r 3                               ; bytes down, and then one more byte so that the z_ label points
0009E9r 3                               ; to the (still fictional) RTS instruction for correct compilation
0009E9r 3  68                           pla             ; LSB of "z_" address
0009EAr 3  18                           clc
0009EBr 3  69 03                        adc #3
0009EDr 3  91 rr                        sta (tmp1),y
0009EFr 3               
0009EFr 3  88                           dey             ; get the MSB of xt back
0009F0r 3  B1 rr                        lda (tmp1),y
0009F2r 3  69 00                        adc #0          ; only need the carry
0009F4r 3  C8                           iny
0009F5r 3  C8                           iny
0009F6r 3  91 rr                        sta (tmp1),y
0009F8r 3  C8                           iny
0009F9r 3               
0009F9r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
0009F9r 3                               ; length in tmp2. We subtract 8 from the address so we can
0009F9r 3                               ; use the same loop index, which is already 8 byte ahead at
0009F9r 3                               ; this point
0009F9r 3  B5 00                        lda 0,x
0009FBr 3  38                           sec
0009FCr 3  E9 08                        sbc #8
0009FEr 3  85 rr                        sta tmptos
000A00r 3               
000A00r 3  B5 01                        lda 1,x
000A02r 3  E9 00                        sbc #0          ; only need carry
000A04r 3  85 rr                        sta tmptos+1
000A06r 3               
000A06r 3               @name_loop:
000A06r 3  B1 rr                        lda (tmptos),y
000A08r 3               
000A08r 3                               ; Make sure it goes into the dictionary in lower case.
000A08r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000A0Ar 3  B0 07                        bcs @store_name
000A0Cr 3  C9 41                        cmp #$41        ; ASCII 'A'
000A0Er 3  90 03                        bcc @store_name
000A10r 3               
000A10r 3                               ; An uppercase letter has been located. Make it
000A10r 3                               ; lowercase.
000A10r 3  18                           clc
000A11r 3  69 20                        adc #$20
000A13r 3               
000A13r 3                               ; Fall into @store_name.
000A13r 3               
000A13r 3               @store_name:
000A13r 3  91 rr                        sta (tmp1),y
000A15r 3  C8                           iny
000A16r 3  C6 rr                        dec tmp2
000A18r 3  D0 EC                        bne @name_loop
000A1Ar 3               
000A1Ar 3                               ; After thename string comes the code field, starting at the
000A1Ar 3                               ; current xt of this word, which is initially a jump to the
000A1Ar 3                               ; subroutine to DOVAR. We code this jump by hand
000A1Ar 3  A9 20                        lda #$20        ; opcode of JSR
000A1Cr 3  91 rr                        sta (tmp1),y
000A1Er 3  C8                           iny
000A1Fr 3  A9 rr                        lda #<dovar
000A21r 3  91 rr                        sta (tmp1),y
000A23r 3  C8                           iny
000A24r 3  A9 rr                        lda #>dovar
000A26r 3  91 rr                        sta (tmp1),y
000A28r 3               
000A28r 3                               ; Update the CURRENT wordlist with the new DP.
000A28r 3                               ; We do this down here because this routine uses Y.
000A28r 3  20 rr rr                     jsr dp_to_current
000A2Br 3               
000A2Br 3                               ; And we're done. Restore stack
000A2Br 3  E8                           inx
000A2Cr 3  E8                           inx
000A2Dr 3               
000A2Dr 3  60           z_create:       rts
000A2Er 3               
000A2Er 3               
000A2Er 3               
000A2Er 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000A2Er 3               ; ## "d-"  auto  ANS double
000A2Er 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000A2Er 3               
000A2Er 3               xt_d_minus:
000A2Er 3  20 rr rr                     jsr underflow_4 ; two double numbers
000A31r 3               
000A31r 3  38                           sec
000A32r 3               
000A32r 3  B5 06                        lda 6,x         ; LSB of lower word
000A34r 3  F5 02                        sbc 2,x
000A36r 3  95 06                        sta 6,x
000A38r 3               
000A38r 3  B5 07                        lda 7,x         ; MSB of lower word
000A3Ar 3  F5 03                        sbc 3,x
000A3Cr 3  95 07                        sta 7,x
000A3Er 3               
000A3Er 3  B5 04                        lda 4,x         ; LSB of upper word
000A40r 3  F5 00                        sbc 0,x
000A42r 3  95 04                        sta 4,x
000A44r 3               
000A44r 3  B5 05                        lda 5,x         ; MSB of upper word
000A46r 3  F5 01                        sbc 1,x
000A48r 3  95 05                        sta 5,x
000A4Ar 3               
000A4Ar 3  E8                           inx
000A4Br 3  E8                           inx
000A4Cr 3  E8                           inx
000A4Dr 3  E8                           inx
000A4Er 3               
000A4Er 3  60           z_d_minus:      rts
000A4Fr 3               
000A4Fr 3               
000A4Fr 3               
000A4Fr 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000A4Fr 3               ; ## "d+"  auto  ANS double
000A4Fr 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000A4Fr 3               
000A4Fr 3               xt_d_plus:
000A4Fr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000A52r 3               
000A52r 3  18                           clc
000A53r 3  B5 02                        lda 2,x         ; LSB of lower word
000A55r 3  75 06                        adc 6,x
000A57r 3  95 06                        sta 6,x
000A59r 3               
000A59r 3  B5 03                        lda 3,x         ; MSB of lower word
000A5Br 3  75 07                        adc 7,x
000A5Dr 3  95 07                        sta 7,x
000A5Fr 3               
000A5Fr 3  B5 00                        lda 0,x         ; LSB of upper word
000A61r 3  75 04                        adc 4,x
000A63r 3  95 04                        sta 4,x
000A65r 3               
000A65r 3  B5 01                        lda 1,x         ; MSB of upper word
000A67r 3  75 05                        adc 5,x
000A69r 3  95 05                        sta 5,x
000A6Br 3               
000A6Br 3  E8                           inx
000A6Cr 3  E8                           inx
000A6Dr 3  E8                           inx
000A6Er 3  E8                           inx
000A6Fr 3               
000A6Fr 3  60           z_d_plus:       rts
000A70r 3               
000A70r 3               
000A70r 3               
000A70r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000A70r 3               ; ## "d>s"  auto  ANS double
000A70r 3                       ; """https://forth-standard.org/standard/double/DtoS
000A70r 3                       ; Though this is basically just DROP, we keep it
000A70r 3                       ; separate so we can test for underflow
000A70r 3                       ; """
000A70r 3               
000A70r 3               xt_d_to_s:
000A70r 3  20 rr rr                     jsr underflow_2
000A73r 3               
000A73r 3  E8                           inx
000A74r 3  E8                           inx
000A75r 3               
000A75r 3  60           z_d_to_s:       rts
000A76r 3               
000A76r 3               
000A76r 3               
000A76r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000A76r 3               ; ## "dabs"  auto  ANS double
000A76r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000A76r 3               
000A76r 3               xt_dabs:
000A76r 3  20 rr rr                     jsr underflow_2 ; double number
000A79r 3               
000A79r 3  B5 01                        lda 1,x         ; MSB of high cell
000A7Br 3  10 17                        bpl @done       ; positive, we get off light
000A7Dr 3               
000A7Dr 3                               ; negative, calculate 0 - d
000A7Dr 3  A0 00                        ldy #0
000A7Fr 3  38                           sec
000A80r 3               
000A80r 3  98                           tya
000A81r 3  F5 02                        sbc 2,x         ; LSB of low cell
000A83r 3  95 02                        sta 2,x
000A85r 3               
000A85r 3  98                           tya
000A86r 3  F5 03                        sbc 3,x         ; MSB of low cell
000A88r 3  95 03                        sta 3,x
000A8Ar 3               
000A8Ar 3  98                           tya
000A8Br 3  F5 00                        sbc 0,x         ; LSB of high cell
000A8Dr 3  95 00                        sta 0,x
000A8Fr 3               
000A8Fr 3  98                           tya
000A90r 3  F5 01                        sbc 1,x         ; MSB of high cell
000A92r 3  95 01                        sta 1,x
000A94r 3               @done:
000A94r 3  60           z_dabs:         rts
000A95r 3               
000A95r 3               
000A95r 3               
000A95r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000A95r 3               ; ## "decimal"  auto  ANS core
000A95r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000A95r 3               xt_decimal:
000A95r 3  A9 0A                        lda #10
000A97r 3  85 rr                        sta base
000A99r 3  64 rr                        stz base+1              ; paranoid
000A9Br 3               
000A9Br 3  60           z_decimal:      rts
000A9Cr 3               
000A9Cr 3               
000A9Cr 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000A9Cr 3               ; ## "defer"  auto  ANS core ext
000A9Cr 3                       ; """https://forth-standard.org/standard/core/DEFER
000A9Cr 3                       ; Reserve an name that can be linked to various xt by IS.
000A9Cr 3                       ;
000A9Cr 3                       ; The ANS reference implementation is
000A9Cr 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000A9Cr 3                       ; But we use this routine as a low-level word so things go faster
000A9Cr 3               
000A9Cr 3               xt_defer:
000A9Cr 3  20 rr rr                     jsr xt_create
000A9Fr 3               
000A9Fr 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000A9Fr 3                               ; but we actually want DODEFER this time. Go back two
000A9Fr 3                               ; bytes and repace the subroutine jump target
000A9Fr 3  A5 rr                        lda cp          ; LSB
000AA1r 3  38                           sec
000AA2r 3  E9 02                        sbc #2
000AA4r 3  85 rr                        sta tmp1
000AA6r 3               
000AA6r 3  A5 rr                        lda cp+1        ; MSB
000AA8r 3  E9 00                        sbc #0          ; we only care about the borrow
000AAAr 3  85 rr                        sta tmp1+1
000AACr 3               
000AACr 3                               ; Save the target address
000AACr 3  A0 00                        ldy #0
000AAEr 3  A9 rr                        lda #<dodefer   ; LSB
000AB0r 3  91 rr                        sta (tmp1),y
000AB2r 3  C8                           iny
000AB3r 3  A9 rr                        lda #>dodefer   ; MSB
000AB5r 3  91 rr                        sta (tmp1),y
000AB7r 3               
000AB7r 3               
000AB7r 3                               ; DODEFER executes the next address it finds after
000AB7r 3                               ; its call. As default, we include the error
000AB7r 3                               ; "Defer not defined"
000AB7r 3  A9 rr                        lda #<defer_error
000AB9r 3  92 rr                        sta (cp)
000ABBr 3  E6 rr                        inc cp
000ABDr 3  D0 02                        bne @1
000ABFr 3  E6 rr                        inc cp+1
000AC1r 3               @1:
000AC1r 3  A9 rr                        lda #>defer_error
000AC3r 3  92 rr                        sta (cp)
000AC5r 3  E6 rr                        inc cp
000AC7r 3  D0 02                        bne @2
000AC9r 3  E6 rr                        inc cp+1
000ACBr 3               @2:
000ACBr 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000ACEr 3               
000ACEr 3  60           z_defer:        rts
000ACFr 3               
000ACFr 3               
000ACFr 3               
000ACFr 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000ACFr 3               ; ## "defer@"  auto  ANS core ext
000ACFr 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000ACFr 3               
000ACFr 3               xt_defer_fetch:
000ACFr 3                               ; No underflow checking as >BODY does it.
000ACFr 3  20 rr rr                     jsr xt_to_body
000AD2r 3  20 rr rr                     jsr xt_fetch
000AD5r 3  60           z_defer_fetch:  rts
000AD6r 3               
000AD6r 3               
000AD6r 3               
000AD6r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000AD6r 3               ; ## "defer!"  auto  ANS core ext
000AD6r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000AD6r 3               
000AD6r 3               xt_defer_store:
000AD6r 3                               ; No underflow checking as >BODY and ! do it.
000AD6r 3  20 rr rr                     jsr xt_to_body
000AD9r 3  20 rr rr                     jsr xt_store
000ADCr 3  60           z_defer_store:  rts
000ADDr 3               
000ADDr 3               
000ADDr 3               
000ADDr 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000ADDr 3               ; ## "definitions" auto ANS search
000ADDr 3               xt_definitions:
000ADDr 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000ADFr 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000AE1r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000AE3r 3  91 rr                        sta (up),y
000AE5r 3  60           z_definitions:  rts
000AE6r 3               
000AE6r 3               
000AE6r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
000AE6r 3               ; ## "depth"  auto  ANS core
000AE6r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
000AE6r 3               xt_depth:
000AE6r 3  A9 rr                        lda #dsp0
000AE8r 3  86 rr                        stx tmpdsp
000AEAr 3  38                           sec
000AEBr 3  E5 rr                        sbc tmpdsp
000AEDr 3               
000AEDr 3                               ; divide by two because each cell is two bytes
000AEDr 3  4A                           lsr
000AEEr 3               
000AEEr 3  CA                           dex
000AEFr 3  CA                           dex
000AF0r 3  95 00                        sta 0,x
000AF2r 3  74 01                        stz 1,x
000AF4r 3               
000AF4r 3  60           z_depth:        rts
000AF5r 3               
000AF5r 3               
000AF5r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
000AF5r 3               ; ## "digit?"  auto  Tali Forth
000AF5r 3                       ; """Inspired by the pForth instruction DIGIT, see
000AF5r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
000AF5r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
000AF5r 3                       ; pForth, we get the base (radix) ourselves instead of having the
000AF5r 3                       ; user provide it. There is no standard name for this routine, which
000AF5r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
000AF5r 3                       ; """
000AF5r 3               
000AF5r 3               xt_digit_question:
000AF5r 3  20 rr rr                     jsr underflow_1
000AF8r 3               
000AF8r 3                               ; one way or another, we're going to need room for the
000AF8r 3                               ; flag on the stack
000AF8r 3  CA                           dex
000AF9r 3  CA                           dex
000AFAr 3  74 00                        stz 0,x                 ; default flag is failure
000AFCr 3  74 01                        stz 1,x
000AFEr 3  74 03                        stz 3,x                 ; paranoid
000B00r 3               
000B00r 3                               ; Check the character, now in the LSB of NOS. First, make
000B00r 3                               ; sure we're not below the ASCII code for "0"
000B00r 3  B5 02                        lda 2,x
000B02r 3  C9 30                        cmp #'0'
000B04r 3  90 23                        bcc @done               ; failure flag already set
000B06r 3               
000B06r 3                               ; Next, see if we are below "9", because that would make
000B06r 3                               ; this a normal number
000B06r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
000B08r 3  90 12                        bcc @checkbase
000B0Ar 3               
000B0Ar 3                               ; Well, then let's see if this is the gap between "9" and "A"
000B0Ar 3                               ; so we can treat the whole range as a number
000B0Ar 3  C9 41                        cmp #'A'
000B0Cr 3  90 1B                        bcc @done               ; failure flag is already set
000B0Er 3               
000B0Er 3                               ; probably a letter, so we make sure it is uppercase
000B0Er 3  C9 61                        cmp #'a'
000B10r 3  90 07                        bcc @case_done          ; not lower case, too low
000B12r 3  C9 7B                        cmp #'z'+1
000B14r 3  B0 03                        bcs @case_done          ; not lower case, too high
000B16r 3               
000B16r 3  18                           clc                     ; just right
000B17r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
000B19r 3               
000B19r 3               @case_done:
000B19r 3                               ; get rid of the gap between "9" and "A" so we can treat
000B19r 3                               ; the whole range as one number
000B19r 3  38                           sec
000B1Ar 3  E9 07                        sbc #7                  ; fall through to @checkbase
000B1Cr 3               
000B1Cr 3               @checkbase:
000B1Cr 3                               ; we have a number, now see if it falls inside the range
000B1Cr 3                               ; provided by BASE
000B1Cr 3  38                           sec
000B1Dr 3  E9 30                        sbc #'0'                 ; this is also the conversion step
000B1Fr 3  C5 rr                        cmp base
000B21r 3  B0 06                        bcs @done               ; already have false flag
000B23r 3               
000B23r 3                               ; Found a legal number
000B23r 3  95 02                        sta 2,x                 ; put number in NOS
000B25r 3  D6 00                        dec 0,x                 ; set success flag
000B27r 3  D6 01                        dec 1,x
000B29r 3               
000B29r 3               @done:
000B29r 3               z_digit_question:
000B29r 3  60                           rts
000B2Ar 3               
000B2Ar 3               
000B2Ar 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
000B2Ar 3               ; ## "disasm"  tested  Tali Forth
000B2Ar 3                       ; """Convert a segment of memory to assembler output. This
000B2Ar 3                       ; word is vectored so people can add their own disassembler.
000B2Ar 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
000B2Ar 3                       ; code, see the section on The Disassembler in the manual and
000B2Ar 3                       ; the file disassembler.asm for more details.
000B2Ar 3                       ; """
000B2Ar 3               xt_disasm:
000B2Ar 3  20 rr rr                     jsr underflow_2
000B2Dr 3                           .ifdef disassembler
000B2Dr 3                               jsr disassembler
000B2Dr 3                           .endif
000B2Dr 3               
000B2Dr 3  60           z_disasm:       rts
000B2Er 3               
000B2Er 3               
000B2Er 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
000B2Er 3               ; ## "dnegate"  auto  ANS double
000B2Er 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
000B2Er 3               xt_dnegate:
000B2Er 3  20 rr rr                     jsr underflow_2 ; double number
000B31r 3               
000B31r 3  A0 00             		ldy #0
000B33r 3  38                           sec
000B34r 3               
000B34r 3  98                           tya
000B35r 3  F5 02                        sbc 2,x         ; LSB of low cell
000B37r 3  95 02                        sta 2,x
000B39r 3               
000B39r 3  98                           tya
000B3Ar 3  F5 03                        sbc 3,x         ; MSB of low cell
000B3Cr 3  95 03                        sta 3,x
000B3Er 3               
000B3Er 3  98                           tya
000B3Fr 3  F5 00                        sbc 0,x         ; LSB of high cell
000B41r 3  95 00                        sta 0,x
000B43r 3               
000B43r 3  98                           tya
000B44r 3  F5 01                        sbc 1,x         ; MSB of high cell
000B46r 3  95 01                        sta 1,x
000B48r 3               
000B48r 3  60           z_dnegate:      rts
000B49r 3               
000B49r 3               
000B49r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
000B49r 3               ; ## "?do"  auto  ANS core ext
000B49r 3                       ; """https://forth-standard.org/standard/core/qDO"""
000B49r 3               xt_question_do:
000B49r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
000B49r 3                               ; to mark which is which
000B49r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
000B4Br 3  85 rr                        sta tmp1
000B4Dr 3  80 02                        bra do_common           ; skip flag for DO
000B4Fr 3               
000B4Fr 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
000B4Fr 3               ; ## "do"  auto  ANS core
000B4Fr 3                       ; """https://forth-standard.org/standard/core/DO
000B4Fr 3                       ;
000B4Fr 3                       ; Compile-time part of DO. Could be realized in Forth as
000B4Fr 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
000B4Fr 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
000B4Fr 3                       ; a routine that pushes the end address to the Return Stack at run
000B4Fr 3                       ; time. This is based on a suggestion by Garth Wilson, see
000B4Fr 3                       ; the Control Flow section of the manual for details.
000B4Fr 3                       ;
000B4Fr 3                       ; This may not be native compile. Don't check for a stack underflow
000B4Fr 3                       ; """
000B4Fr 3               
000B4Fr 3               xt_do:
000B4Fr 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
000B4Fr 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
000B51r 3               do_common:
000B51r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
000B51r 3                               ; compile the address we need to LDA at runtime
000B51r 3  CA                           dex
000B52r 3  CA                           dex
000B53r 3  A5 rr                        lda cp
000B55r 3  95 00                        sta 0,x                 ; LSB
000B57r 3  A5 rr                        lda cp+1
000B59r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
000B5Br 3               
000B5Br 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
000B5Br 3                               ; replace by the actual LDA/PHA instructions
000B5Br 3  A9 05                        lda #5                  ; we don't really care about the value,
000B5Dr 3  A8                           tay                     ; so we use 5 to be tricky
000B5Er 3               @loop:
000B5Er 3  91 rr                        sta (cp),y
000B60r 3  88                           dey
000B61r 3  10 FB                        bpl @loop
000B63r 3               
000B63r 3                               ; update CP
000B63r 3  1A                           inc             ; we used 5 as a dummy value, this is why
000B64r 3  18                           clc
000B65r 3  65 rr                        adc cp
000B67r 3  85 rr                        sta cp
000B69r 3  90 02                        bcc @1
000B6Br 3  E6 rr                        inc cp+1
000B6Dr 3               @1:
000B6Dr 3                               ; compile the (?DO) portion of ?DO if appropriate
000B6Dr 3  A5 rr                        lda tmp1
000B6Fr 3  F0 17                        beq @compile_do
000B71r 3               
000B71r 3                               ; We came from ?DO, so compile its runtime first. We do
000B71r 3                               ; this with a quick loop because we know it has to be
000B71r 3                               ; Always Native anyway
000B71r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
000B73r 3  5A                           phy             ; save counter to calculate new CP
000B74r 3               @2:
000B74r 3  B9 rr rr                     lda question_do_runtime,y
000B77r 3  91 rr                        sta (cp),y
000B79r 3  88                           dey
000B7Ar 3  10 F8                        bpl @2
000B7Cr 3               
000B7Cr 3                               ; adjust CP
000B7Cr 3  68                           pla             ; retrieve counter
000B7Dr 3  18                           clc
000B7Er 3  65 rr                        adc cp
000B80r 3  85 rr                        sta cp
000B82r 3  A5 rr                        lda cp+1
000B84r 3  69 00                        adc #0          ; only care about carry
000B86r 3  85 rr                        sta cp+1        ; fall through to @compile_do
000B88r 3               
000B88r 3               @compile_do:
000B88r 3                               ; compile runtime part of DO.
000B88r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
000B8Ar 3  5A                           phy             ; save counter to calculate new CP
000B8Br 3               @3:
000B8Br 3  B9 rr rr                     lda do_runtime,y
000B8Er 3  91 rr                        sta (cp),y
000B90r 3  88                           dey
000B91r 3  10 F8                        bpl @3
000B93r 3               
000B93r 3                               ; adjust CP
000B93r 3  68                           pla             ; retrieve counter
000B94r 3  18                           clc
000B95r 3  65 rr                        adc cp
000B97r 3  85 rr                        sta cp
000B99r 3  A5 rr                        lda cp+1
000B9Br 3  69 00                        adc #0          ; only care about carry
000B9Dr 3  85 rr                        sta cp+1
000B9Fr 3               
000B9Fr 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
000B9Fr 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
000B9Fr 3                               ; do with the HERE we're saving for LEAVE
000B9Fr 3  CA                           dex
000BA0r 3  CA                           dex
000BA1r 3  A5 rr                        lda cp          ; LSB
000BA3r 3  95 00                        sta 0,x
000BA5r 3  A5 rr                        lda cp+1        ; MSB
000BA7r 3  95 01                        sta 1,x
000BA9r 3               z_question_do:
000BA9r 3  60           z_do:           rts
000BAAr 3               
000BAAr 3               
000BAAr 3               do_runtime:
000BAAr 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
000BAAr 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
000BAAr 3                       ; the FIG Forth loop (you can see which version you have by running
000BAAr 3                       ; a loop with start and limit as the same value, for instance
000BAAr 3                       ; 0 0 DO -- these will walk through the number space). We use a
000BAAr 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
000BAAr 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
000BAAr 3                       ; for further discussion of this. The source given there for
000BAAr 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
000BAAr 3                       ; in some Forths. Usually, we would define this as a separate word
000BAAr 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
000BAAr 3                       ; However, we can do it faster if we just copy the bytes
000BAAr 3                       ; of this routine with a simple loop in DO.
000BAAr 3                       ; """
000BAAr 3                               ; First step: create fudge factor (FUFA) by subtracting the
000BAAr 3                               ; limit from $8000, the number that will trip the overflow
000BAAr 3                               ; flag
000BAAr 3  38                           sec
000BABr 3  A9 00                        lda #0
000BADr 3  F5 02                        sbc 2,x         ; LSB of limit
000BAFr 3  95 02                        sta 2,x         ; save FUFA for later use
000BB1r 3               
000BB1r 3  A9 80                        lda #$80
000BB3r 3  F5 03                        sbc 3,x         ; MSB of limit
000BB5r 3  95 03                        sta 3,x         ; save FUFA for later use
000BB7r 3  48                           pha             ; FUFA replaces limit on R stack
000BB8r 3  B5 02                        lda 2,x         ; LSB of limit
000BBAr 3  48                           pha
000BBBr 3               
000BBBr 3                               ; Second step: index is FUFA plus original index
000BBBr 3  18                           clc
000BBCr 3  B5 00                        lda 0,x         ; LSB of original index
000BBEr 3  75 02                        adc 2,x         ; add LSB of FUFA
000BC0r 3  95 00                        sta 0,x
000BC2r 3  B5 01                        lda 1,x         ; MSB of orginal index
000BC4r 3  75 03                        adc 3,x         ; add MSB of FUFA
000BC6r 3  48                           pha
000BC7r 3  B5 00                        lda 0,x         ; LSB of index
000BC9r 3  48                           pha
000BCAr 3               
000BCAr 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
000BCAr 3                               ; use it later. Clean the Data Stack
000BCAr 3  E8                           inx
000BCBr 3  E8                           inx
000BCCr 3  E8                           inx
000BCDr 3  E8                           inx             ; no RTS because this is copied into code
000BCEr 3               do_runtime_end:
000BCEr 3               
000BCEr 3               question_do_runtime:
000BCEr 3               
000BCEr 3                       ; """This is called (?DO) in some Forths. See the explanation at
000BCEr 3                       ; do_runtime for the background on this design
000BCEr 3                       ; """
000BCEr 3                               ; see if TOS and NOS are equal. Change this to assembler
000BCEr 3                               ; for speed
000BCEr 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
000BD1r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
000BD4r 3               
000BD4r 3  B5 00                        lda 0,x
000BD6r 3  15 01                        ora 1,x
000BD8r 3  F0 06                        beq @do_do
000BDAr 3               
000BDAr 3                               ; We're equal, so dump everything and jump beyond the loop.
000BDAr 3                               ; But first, dump six entries off of the Data Stack
000BDAr 3  8A                           txa
000BDBr 3  18                           clc
000BDCr 3  69 06                        adc #6
000BDEr 3  AA                           tax
000BDFr 3               
000BDFr 3                               ; Then abort the whole loop
000BDFr 3  60                           rts
000BE0r 3               @do_do:
000BE0r 3  E8                           inx             ; clear flag from EQUAL off stack
000BE1r 3  E8                           inx             ; no RTS because this is copied into code
000BE2r 3               question_do_runtime_end:
000BE2r 3               
000BE2r 3               
000BE2r 3               
000BE2r 3               ; ## DOES ( -- ) "Add payload when defining new words"
000BE2r 3               ; ## "does>"  auto  ANS core
000BE2r 3                       ; """https://forth-standard.org/standard/core/DOES
000BE2r 3                       ; Create the payload for defining new defining words. See
000BE2r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
000BE2r 3                       ; the Developer Guide in the manual for a discussion of
000BE2r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
000BE2r 3                       ; """
000BE2r 3               
000BE2r 3               xt_does:
000BE2r 3                               ; compile a subroutine jump to runtime of DOES>
000BE2r 3  A0 rr                        ldy #>does_runtime
000BE4r 3  A9 rr                        lda #<does_runtime
000BE6r 3  20 rr rr                     jsr cmpl_subroutine
000BE9r 3               
000BE9r 3                               ; compile a subroutine jump to DODOES. In traditional
000BE9r 3                               ; terms, this is the Code Field Area (CFA) of the new
000BE9r 3                               ; word
000BE9r 3  A0 rr                        ldy #>dodoes
000BEBr 3  A9 rr                        lda #<dodoes
000BEDr 3  20 rr rr                     jsr cmpl_subroutine
000BF0r 3               
000BF0r 3  60           z_does:         rts
000BF1r 3               
000BF1r 3               
000BF1r 3               does_runtime:
000BF1r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
000BF1r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
000BF1r 3                       ; address that contains a subroutine jump to DODOES. We don't
000BF1r 3                       ; jump to DODOES directly because we need to work our magic with
000BF1r 3                       ; the return addresses. This routine is also known as "(DOES)" in
000BF1r 3                       ; other Forths
000BF1r 3                       ; """
000BF1r 3               
000BF1r 3  7A                           ply             ; LSB
000BF2r 3  68                           pla             ; MSB
000BF3r 3               
000BF3r 3  C8                           iny
000BF4r 3  D0 01                        bne @1
000BF6r 3  1A                           inc
000BF7r 3               @1:
000BF7r 3  84 rr                        sty tmp1
000BF9r 3  85 rr                        sta tmp1+1
000BFBr 3               
000BFBr 3                               ; CREATE has also already modified the DP to point to the new
000BFBr 3                               ; word. We have no idea which instructions followed the CREATE
000BFBr 3                               ; command if there is a DOES> so the CP could point anywhere
000BFBr 3                               ; by now. The address of the word's xt is four bytes down.
000BFBr 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
000BFEr 3  A5 rr                        lda dp
000C00r 3  18                           clc
000C01r 3  69 04                        adc #4
000C03r 3  85 rr                        sta tmp2
000C05r 3  A5 rr                        lda dp+1
000C07r 3  69 00                        adc #0          ; we only care about the carry
000C09r 3  85 rr                        sta tmp2+1
000C0Br 3               
000C0Br 3                               ; Now we get that address and add one byte to skip over the JSR
000C0Br 3                               ; opcode
000C0Br 3  B2 rr                        lda (tmp2)
000C0Dr 3  18                           clc
000C0Er 3  69 01                        adc #1
000C10r 3  85 rr                        sta tmp3
000C12r 3  A0 01                        ldy #1
000C14r 3  B1 rr                        lda (tmp2),y
000C16r 3  69 00                        adc #0          ; we only care about the carry
000C18r 3  85 rr                        sta tmp3+1
000C1Ar 3               
000C1Ar 3                               ; Replace the DOVAR address with our own
000C1Ar 3  A5 rr                        lda tmp1        ; LSB
000C1Cr 3  92 rr                        sta (tmp3)
000C1Er 3  A5 rr                        lda tmp1+1
000C20r 3  91 rr                        sta (tmp3),y    ; Y is still 1
000C22r 3               
000C22r 3                               ; Since we removed the return address that brought us here, we
000C22r 3                               ; go back to whatever the main routine was. Otherwise, we we
000C22r 3                               ; smash into the subroutine jump to DODOES.
000C22r 3  60                           rts
000C23r 3               
000C23r 3               
000C23r 3               
000C23r 3               ; ## DOT ( u -- ) "Print TOS"
000C23r 3               ; ## "."  auto  ANS core
000C23r 3                       ; """https://forth-standard.org/standard/core/d"""
000C23r 3               
000C23r 3               xt_dot:
000C23r 3  20 rr rr                     jsr underflow_1
000C26r 3               
000C26r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
000C29r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
000C2Cr 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
000C2Fr 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
000C32r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
000C35r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
000C38r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
000C3Br 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
000C3Er 3  20 rr rr                     jsr xt_type
000C41r 3  20 rr rr                     jsr xt_space
000C44r 3               
000C44r 3  60           z_dot:          rts
000C45r 3               
000C45r 3               
000C45r 3               
000C45r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
000C45r 3               ; ## ".("  auto  ANS core
000C45r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
000C45r 3               
000C45r 3               xt_dot_paren:
000C45r 3                               ; Put a right paren on the stack.
000C45r 3  CA                           dex
000C46r 3  CA                           dex
000C47r 3  A9 29                        lda #41     ; Right parenthesis
000C49r 3  95 00                        sta 0,x
000C4Br 3  74 01                        stz 1,x
000C4Dr 3               
000C4Dr 3  20 rr rr                     jsr xt_parse
000C50r 3  20 rr rr                     jsr xt_type
000C53r 3               
000C53r 3  60           z_dot_paren:    rts
000C54r 3               
000C54r 3               
000C54r 3               
000C54r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
000C54r 3               ; ## ".""  auto  ANS core ext
000C54r 3                       ; """https://forth-standard.org/standard/core/Dotq
000C54r 3                       ; Compile string that is printed during run time. ANS Forth wants
000C54r 3                       ; this to be compile-only, even though everybody and their friend
000C54r 3                       ; uses it for everything. We follow the book here, and recommend
000C54r 3                       ; `.(` for general printing.
000C54r 3                       ; """
000C54r 3               
000C54r 3               xt_dot_quote:
000C54r 3                               ; we let S" do the heavy lifting. Since we're in
000C54r 3                               ; compile mode, it will save the string and reproduce it
000C54r 3                               ; during runtime
000C54r 3  20 rr rr                     jsr xt_s_quote
000C57r 3               
000C57r 3                               ; We then let TYPE do the actual printing
000C57r 3  A0 rr                        ldy #>xt_type
000C59r 3  A9 rr                        lda #<xt_type
000C5Br 3  20 rr rr                     jsr cmpl_subroutine
000C5Er 3               
000C5Er 3  60           z_dot_quote:    rts
000C5Fr 3               
000C5Fr 3               
000C5Fr 3               
000C5Fr 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
000C5Fr 3               ; ## ".r"  tested  ANS core ext
000C5Fr 3                       ; """https://forth-standard.org/standard/core/DotR
000C5Fr 3                       ;
000C5Fr 3                       ; Based on the Forth code
000C5Fr 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
000C5Fr 3                       ; """
000C5Fr 3               
000C5Fr 3               xt_dot_r:
000C5Fr 3  20 rr rr                     jsr underflow_2
000C62r 3               
000C62r 3  20 rr rr                     jsr xt_to_r
000C65r 3  20 rr rr                     jsr xt_dup
000C68r 3  20 rr rr                     jsr xt_abs
000C6Br 3  20 rr rr                     jsr xt_zero
000C6Er 3  20 rr rr                     jsr xt_less_number_sign
000C71r 3  20 rr rr                     jsr xt_number_sign_s
000C74r 3  20 rr rr                     jsr xt_rot
000C77r 3  20 rr rr                     jsr xt_sign
000C7Ar 3  20 rr rr                     jsr xt_number_sign_greater
000C7Dr 3  20 rr rr                     jsr xt_r_from
000C80r 3  20 rr rr                     jsr xt_over
000C83r 3  20 rr rr                     jsr xt_minus
000C86r 3  20 rr rr                     jsr xt_spaces
000C89r 3  20 rr rr                     jsr xt_type
000C8Cr 3               
000C8Cr 3  60           z_dot_r:        rts
000C8Dr 3               
000C8Dr 3               
000C8Dr 3               
000C8Dr 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
000C8Dr 3               ; ## ".s"  tested  ANS tools
000C8Dr 3                       ; """https://forth-standard.org/standard/tools/DotS
000C8Dr 3                       ; Print content of Data Stack non-distructively. We follow the format
000C8Dr 3                       ; of Gforth and print the number of elements first in brackets,
000C8Dr 3                       ; followed by the Data Stack content (if any).
000C8Dr 3                       ;
000C8Dr 3                       ; Since this is for humans, we don't have to worry about speed.
000C8Dr 3                       ; """
000C8Dr 3               
000C8Dr 3               xt_dot_s:
000C8Dr 3  20 rr rr                     jsr xt_depth    ; ( -- u )
000C90r 3               
000C90r 3                               ; Print stack depth in brackets
000C90r 3  A9 3C                        lda #$3c        ; ASCII for "<"
000C92r 3  20 rr rr                     jsr emit_a
000C95r 3               
000C95r 3                               ; We keep a copy of the number of the things on the stack
000C95r 3                               ; to use as a counter later down. This assumes that there
000C95r 3                               ; are less than 255 elements on the stack
000C95r 3  B5 00                        lda 0,x
000C97r 3  48                           pha
000C98r 3               
000C98r 3                               ; print unsigned number without the trailing space
000C98r 3  CA                           dex             ; DUP
000C99r 3  CA                           dex
000C9Ar 3  95 00                        sta 0,x
000C9Cr 3  74 01                        stz 1,x
000C9Er 3               
000C9Er 3  20 rr rr                     jsr print_u
000CA1r 3               
000CA1r 3  A9 3E                        lda #$3e        ; ASCII for ">"
000CA3r 3  20 rr rr                     jsr emit_a
000CA6r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
000CA8r 3  20 rr rr                     jsr emit_a
000CABr 3               
000CABr 3  E8                           inx
000CACr 3  E8                           inx
000CADr 3               
000CADr 3                               ; There will be lots of cases where the stack is empty. If that
000CADr 3                               ; is so, get out of here quickly
000CADr 3  E0 rr                        cpx #dsp0
000CAFr 3  F0 1E                        beq @done
000CB1r 3               
000CB1r 3               @have_stack:
000CB1r 3                               ; We have at least one element on the stack. The depth of the
000CB1r 3                               ; stack is on the stack, we can use it as a counter. We go
000CB1r 3                               ; from bottom to top
000CB1r 3  7A                           ply
000CB2r 3               
000CB2r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
000CB4r 3  85 rr                        sta tmp3
000CB6r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
000CB8r 3               @loop:
000CB8r 3  CA                           dex
000CB9r 3  CA                           dex
000CBAr 3               
000CBAr 3  B2 rr                        lda (tmp3)
000CBCr 3  95 01                        sta 1,x
000CBEr 3  C6 rr                        dec tmp3
000CC0r 3               
000CC0r 3  B2 rr                        lda (tmp3)
000CC2r 3  95 00                        sta 0,x
000CC4r 3  C6 rr                        dec tmp3
000CC6r 3  5A                           phy
000CC7r 3               
000CC7r 3  20 rr rr                     jsr xt_dot
000CCAr 3               
000CCAr 3  7A                           ply
000CCBr 3  88                           dey
000CCCr 3  D0 EA                        bne @loop
000CCEr 3               
000CCEr 3  48                           pha             ; dummy to balance stack
000CCFr 3               @done:
000CCFr 3  68                           pla
000CD0r 3  60           z_dot_s:        rts
000CD1r 3               
000CD1r 3               
000CD1r 3               
000CD1r 3               ; ## D_DOT ( d -- ) "Print double"
000CD1r 3               ; ## "d."  tested  ANS double
000CD1r 3                       ; """http://forth-standard.org/standard/double/Dd"""
000CD1r 3                       ;
000CD1r 3                       ; From the Forth code:
000CD1r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
000CD1r 3                       ; """
000CD1r 3               
000CD1r 3               xt_d_dot:
000CD1r 3  20 rr rr                     jsr underflow_2
000CD4r 3               
000CD4r 3  20 rr rr                     jsr xt_tuck
000CD7r 3  20 rr rr                     jsr xt_dabs
000CDAr 3  20 rr rr                     jsr xt_less_number_sign
000CDDr 3  20 rr rr                     jsr xt_number_sign_s
000CE0r 3  20 rr rr                     jsr xt_rot
000CE3r 3  20 rr rr                     jsr xt_sign
000CE6r 3  20 rr rr                     jsr xt_number_sign_greater
000CE9r 3  20 rr rr                     jsr xt_type
000CECr 3  20 rr rr                     jsr xt_space
000CEFr 3               
000CEFr 3  60           z_d_dot:        rts
000CF0r 3               
000CF0r 3               
000CF0r 3               
000CF0r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
000CF0r 3               ; ## "d.r"  tested  ANS double
000CF0r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
000CF0r 3                       ; Based on the Forth code
000CF0r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
000CF0r 3                       ; """
000CF0r 3               
000CF0r 3               xt_d_dot_r:
000CF0r 3  20 rr rr                     jsr underflow_3
000CF3r 3                               ; From the forth code:
000CF3r 3  20 rr rr                     jsr xt_to_r
000CF6r 3  20 rr rr                     jsr xt_tuck
000CF9r 3  20 rr rr                     jsr xt_dabs
000CFCr 3  20 rr rr                     jsr xt_less_number_sign
000CFFr 3  20 rr rr                     jsr xt_number_sign_s
000D02r 3  20 rr rr                     jsr xt_rot
000D05r 3  20 rr rr                     jsr xt_sign
000D08r 3  20 rr rr                     jsr xt_number_sign_greater
000D0Br 3  20 rr rr                     jsr xt_r_from
000D0Er 3  20 rr rr                     jsr xt_over
000D11r 3  20 rr rr                     jsr xt_minus
000D14r 3  20 rr rr                     jsr xt_spaces
000D17r 3  20 rr rr                     jsr xt_type
000D1Ar 3               
000D1Ar 3  60           z_d_dot_r:      rts
000D1Br 3               
000D1Br 3               
000D1Br 3               
000D1Br 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
000D1Br 3               ; ## "drop"  auto  ANS core
000D1Br 3                       ; """https://forth-standard.org/standard/core/DROP"""
000D1Br 3               xt_drop:
000D1Br 3  20 rr rr                     jsr underflow_1
000D1Er 3               
000D1Er 3  E8                           inx
000D1Fr 3  E8                           inx
000D20r 3               
000D20r 3  60           z_drop:         rts
000D21r 3               
000D21r 3               
000D21r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
000D21r 3               ; ## "dump"  tested  ANS tools
000D21r 3                       ; """https://forth-standard.org/standard/tools/DUMP
000D21r 3                       ;
000D21r 3                       ; DUMP's exact output is defined as "implementation dependent".
000D21r 3                       ; This is in assembler because it is
000D21r 3                       ; useful for testing and development, so we want to have it work
000D21r 3                       ; as soon as possible. Uses TMP2
000D21r 3                       ; """
000D21r 3               
000D21r 3               xt_dump:
000D21r 3  20 rr rr                     jsr underflow_2
000D24r 3               @row:
000D24r 3                               ; start counter for 16 numbers per row
000D24r 3  A0 10                        ldy #16
000D26r 3               
000D26r 3                               ; We use TMP2 as the index for the ASCII characters
000D26r 3                               ; that we print at the and of the hex block. We
000D26r 3                               ; start saving them at HERE (CP)
000D26r 3  64 rr                        stz tmp2
000D28r 3               
000D28r 3  20 rr rr                     jsr xt_cr
000D2Br 3               
000D2Br 3                               ; print address number
000D2Br 3  B5 03                        lda 3,x
000D2Dr 3  20 rr rr                     jsr byte_to_ascii
000D30r 3  B5 02                        lda 2,x
000D32r 3  20 rr rr                     jsr byte_to_ascii
000D35r 3               
000D35r 3  20 rr rr                     jsr xt_space
000D38r 3  20 rr rr                     jsr xt_space
000D3Br 3               @loop:
000D3Br 3                               ; if there are zero bytes left to display, we're done
000D3Br 3  B5 00                        lda 0,x
000D3Dr 3  15 01                        ora 1,x
000D3Fr 3  F0 39                        beq @all_printed
000D41r 3               
000D41r 3                               ; dump the contents
000D41r 3  A1 02                        lda (2,x)
000D43r 3  48                           pha                     ; byte_to_ascii destroys A
000D44r 3  20 rr rr                     jsr byte_to_ascii
000D47r 3  20 rr rr                     jsr xt_space
000D4Ar 3  68                           pla
000D4Br 3               
000D4Br 3                               ; Handle ASCII printing
000D4Br 3  20 rr rr                     jsr is_printable
000D4Er 3  B0 02                        bcs @printable
000D50r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
000D52r 3               @printable:
000D52r 3  5A                           phy                     ; save counter
000D53r 3  A4 rr                        ldy tmp2
000D55r 3  91 rr                        sta (cp),y
000D57r 3  E6 rr                        inc tmp2
000D59r 3  7A                           ply
000D5Ar 3               
000D5Ar 3                               ; extra space after eight bytes
000D5Ar 3  C0 09                        cpy #9
000D5Cr 3  D0 03                        bne @next_char
000D5Er 3  20 rr rr                     jsr xt_space
000D61r 3               
000D61r 3               @next_char:
000D61r 3  F6 02                        inc 2,x
000D63r 3  D0 02                        bne @counter
000D65r 3  F6 03                        inc 3,x
000D67r 3               
000D67r 3               @counter:
000D67r 3                               ; loop counter
000D67r 3  B5 00                        lda 0,x
000D69r 3  D0 02                        bne @1
000D6Br 3  D6 01                        dec 1,x
000D6Dr 3               @1:
000D6Dr 3  D6 00                        dec 0,x
000D6Fr 3  88                           dey
000D70r 3  D0 C9                        bne @loop               ; next byte
000D72r 3               
000D72r 3                               ; Done with one line, print the ASCII version of these
000D72r 3                               ; characters
000D72r 3  20 rr rr                     jsr xt_space
000D75r 3  20 rr rr                     jsr print_ascii
000D78r 3               
000D78r 3  80 AA                        bra @row                ; new row
000D7Ar 3               
000D7Ar 3               @all_printed:
000D7Ar 3                               ; See if there are any ASCII characters in the buffer
000D7Ar 3                               ; left to print
000D7Ar 3  A5 rr                        lda tmp2
000D7Cr 3  F0 06                        beq @done
000D7Er 3               
000D7Er 3                               ; In theory, we could try to make the ASCII part line
000D7Er 3                               ; up with the line before it. But that is a hassle (we
000D7Er 3                               ; use three bytes for each missed hex entry, and
000D7Er 3                               ; then there is the gap after eight entries) and it
000D7Er 3                               ; makes it harder to read. We settle for one extra
000D7Er 3                               ; space instead for the moment
000D7Er 3  20 rr rr                     jsr xt_space
000D81r 3  20 rr rr                     jsr print_ascii
000D84r 3               @done:
000D84r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
000D87r 3  60           z_dump:         rts
000D88r 3               
000D88r 3               
000D88r 3               print_ascii:
000D88r 3                               ; Print the ASCII characters that we have saved from
000D88r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
000D88r 3                               ; is not compiled (DUMP is probably never compiled anyway)
000D88r 3                               ; but we keep it inside the scope of DUMP.
000D88r 3  A0 00                        ldy #0
000D8Ar 3               @ascii_loop:
000D8Ar 3  B1 rr                        lda (cp),y
000D8Cr 3  20 rr rr                     jsr emit_a
000D8Fr 3  C8                           iny
000D90r 3               
000D90r 3                               ; extra space after eight chars
000D90r 3  C0 08                        cpy #8
000D92r 3  D0 03                        bne @1
000D94r 3  20 rr rr                     jsr xt_space
000D97r 3               @1:
000D97r 3  C6 rr                        dec tmp2
000D99r 3  D0 EF                        bne @ascii_loop
000D9Br 3               
000D9Br 3  60                           rts
000D9Cr 3               
000D9Cr 3               
000D9Cr 3               
000D9Cr 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
000D9Cr 3               ; ## "dup"  auto  ANS core
000D9Cr 3                       ; """https://forth-standard.org/standard/core/DUP"""
000D9Cr 3               xt_dup:
000D9Cr 3  20 rr rr                     jsr underflow_1
000D9Fr 3               
000D9Fr 3  CA                           dex
000DA0r 3  CA                           dex
000DA1r 3               
000DA1r 3  B5 02                        lda 2,x         ; LSB
000DA3r 3  95 00                        sta 0,x
000DA5r 3  B5 03                        lda 3,x         ; MSB
000DA7r 3  95 01                        sta 1,x
000DA9r 3               
000DA9r 3  60           z_dup:          rts
000DAAr 3               
000DAAr 3               
000DAAr 3               ; ## ED ( -- u ) "Line-based editor"
000DAAr 3               ; ## "ed"  fragment  Tali Forth
000DAAr 3                       ; """Start the line-based editor ed6502. See separate file
000DAAr 3                       ; ed.asm or the manual for details.
000DAAr 3                       ; """
000DAAr 3               xt_ed:
000DAAr 3                           .ifdef ed6502
000DAAr 3                               jsr ed6502      ; kept in separate file
000DAAr 3                           .endif
000DAAr 3               
000DAAr 3  60           z_ed:           rts
000DABr 3               
000DABr 3               
000DABr 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
000DABr 3               ; ## "editor-wordlist"  tested  Tali Editor
000DABr 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
000DABr 3                       ; words to the search order so they can be used.  This will need
000DABr 3                       ; to be done before any of the words marked "Tali Editor" can be
000DABr 3                       ; used.  See the tutorial on Wordlists and the Search Order for
000DABr 3                       ; more information.
000DABr 3               
000DABr 3                       ;
000DABr 3                       ; This is a dummy entry, the code is shared with ONE
000DABr 3                       ; """
000DABr 3               
000DABr 3               
000DABr 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
000DABr 3               ; ## "else"  auto  ANS core
000DABr 3                       ; """http://forth-standard.org/standard/core/ELSE
000DABr 3                       ;
000DABr 3                       ; The code is shared with ENDOF
000DABr 3                       ; """
000DABr 3               
000DABr 3               xt_else:
000DABr 3               xt_endof:
000DABr 3                               ; Put an unconditional branch.
000DABr 3  A0 rr                        ldy #>branch_runtime
000DADr 3  A9 rr                        lda #<branch_runtime
000DAFr 3  20 rr rr                     jsr cmpl_subroutine
000DB2r 3               
000DB2r 3                               ; Put the address of the branch address on the stack.
000DB2r 3  20 rr rr                     jsr xt_here
000DB5r 3               
000DB5r 3                               ; Use zero for the branch address for now.
000DB5r 3                               ; THEN will fill it in later.
000DB5r 3  20 rr rr                     jsr xt_zero
000DB8r 3  20 rr rr                     jsr xt_comma
000DBBr 3               
000DBBr 3                               ; Get the address to jump to (just after the
000DBBr 3                               ; unconditional branch) for the IF to jump to
000DBBr 3                               ; when false.
000DBBr 3  20 rr rr                     jsr xt_here
000DBEr 3  20 rr rr                     jsr xt_rot
000DC1r 3               
000DC1r 3                               ; Update the original if 0branch address.
000DC1r 3  20 rr rr                     jsr xt_store
000DC4r 3               z_else:
000DC4r 3               z_endof:
000DC4r 3  60                           rts
000DC5r 3               
000DC5r 3               
000DC5r 3               
000DC5r 3               branch_runtime:
000DC5r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
000DC5r 3                       ; formally part of a separate word BRANCH which was later removed.
000DC5r 3                       ; """
000DC5r 3               
000DC5r 3                               ; The address on the Return Stack points to the last byte
000DC5r 3                               ; of the JSR address, one byte below the branch literal
000DC5r 3  68                           pla
000DC6r 3  85 rr                        sta tmpbranch
000DC8r 3  68                           pla
000DC9r 3  85 rr                        sta tmpbranch+1
000DCBr 3               
000DCBr 3                               ; Keep in mind: the address we just popped points one byte
000DCBr 3                               ; lower than the branch literal we want to grab
000DCBr 3  A0 01                        ldy #1
000DCDr 3  B1 rr                        lda (tmpbranch),y  ; LSB
000DCFr 3  85 rr                        sta tmp1
000DD1r 3  C8                           iny
000DD2r 3  B1 rr                        lda (tmpbranch),y  ; MSB
000DD4r 3  85 rr                        sta tmp1+1
000DD6r 3               
000DD6r 3  6C rr rr                     jmp (tmp1)
000DD9r 3               
000DD9r 3               
000DD9r 3               
000DD9r 3               ; ## EMIT ( char -- ) "Print character to current output"
000DD9r 3               ; ## "emit"  auto  ANS core
000DD9r 3                       ; """https://forth-standard.org/standard/core/EMIT
000DD9r 3                       ; Run-time default for EMIT. The user can revector this by changing
000DD9r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
000DD9r 3                       ; do not check to see if we have been given a valid ASCII character.
000DD9r 3                       ; Don't make this native compile.
000DD9r 3                       ; """
000DD9r 3               
000DD9r 3               xt_emit:
000DD9r 3  20 rr rr                     jsr underflow_1
000DDCr 3               
000DDCr 3  B5 00                        lda 0,x
000DDEr 3  E8                           inx
000DDFr 3  E8                           inx
000DE0r 3               
000DE0r 3               emit_a:
000DE0r 3                       ; We frequently want to print the character in A without fooling
000DE0r 3                       ; around with the Data Stack. This is emit_a's job, which still
000DE0r 3                       ; allows the output to be vectored. Call it with JSR as you
000DE0r 3                       ; would XT_EMIT
000DE0r 3  6C rr rr                     jmp (output)            ; JSR/RTS
000DE3r 3               
000DE3r 3               z_emit:         ; never reached
000DE3r 3               
000DE3r 3               
000DE3r 3               
000DE3r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
000DE3r 3               ; ## "empty-buffers"  tested  ANS block ext
000DE3r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
000DE3r 3               xt_empty_buffers:
000DE3r 3                               ; Set the buffer status to empty.
000DE3r 3  A0 2C                        ldy #buffstatus_offset
000DE5r 3  A9 00                        lda #0
000DE7r 3  91 rr                        sta (up),y      ; Only LSB is used.
000DE9r 3               z_empty_buffers:
000DE9r 3  60                           rts
000DEAr 3               
000DEAr 3               
000DEAr 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
000DEAr 3               ; ## "endcase"  auto  ANS core ext
000DEAr 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
000DEAr 3               
000DEAr 3               xt_endcase:
000DEAr 3                               ; Postpone DROP to remove the item
000DEAr 3                               ; being checked.
000DEAr 3  A0 rr                        ldy #>xt_drop
000DECr 3  A9 rr                        lda #<xt_drop
000DEEr 3  20 rr rr                     jsr cmpl_subroutine
000DF1r 3               
000DF1r 3                               ; There are a number of address (of branches that need their
000DF1r 3                               ; jump addressed filled in with the address of right here).
000DF1r 3                               ; Keep calling THEN to deal with them until we reach the
000DF1r 3                               ; 0 that CASE put on the stack at the beginning.
000DF1r 3               @endcase_loop:
000DF1r 3                               ; Check for 0 on the stack.
000DF1r 3  B5 00                        lda 0,x
000DF3r 3  15 01                        ora 1,x
000DF5r 3  F0 05                        beq @done
000DF7r 3               
000DF7r 3  20 rr rr                     jsr xt_then
000DFAr 3  80 F5                        bra @endcase_loop
000DFCr 3               @done:
000DFCr 3                               ; Remove the 0 from the stack.
000DFCr 3  E8                           inx
000DFDr 3  E8                           inx
000DFEr 3  60           z_endcase:      rts
000DFFr 3               
000DFFr 3               
000DFFr 3               
000DFFr 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
000DFFr 3               ; ## "endof"  auto  ANS core ext
000DFFr 3                       ; """http://forth-standard.org/standard/core/ENDOF
000DFFr 3                       ; This is a dummy entry, the code is shared with ELSE
000DFFr 3                       ; """
000DFFr 3               
000DFFr 3               
000DFFr 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
000DFFr 3               ; ## "environment?"  auto  ANS core
000DFFr 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
000DFFr 3                       ;
000DFFr 3                       ; By ANS definition, we use upper-case strings here, see the
000DFFr 3                       ; string file for details. This can be realized as a high-level
000DFFr 3                       ; Forth word as
000DFFr 3                       ;
000DFFr 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
000DFFr 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
000DFFr 3                       ; HEX
000DFFr 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
000DFFr 3                       ; CASE
000DFFr 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
000DFFr 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
000DFFr 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
000DFFr 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
000DFFr 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
000DFFr 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
000DFFr 3                       ; S" MAX-D"              STRING_OF
000DFFr 3                                                    ; 7FFFFFFF. TRUE ENDOF
000DFFr 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
000DFFr 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
000DFFr 3                       ; S" MAX-UD"             STRING_OF
000DFFr 3                                                    ; FFFFFFFF. TRUE ENDOF
000DFFr 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
000DFFr 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
000DFFr 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
000DFFr 3                       ; ENDCASE ;
000DFFr 3                       ;
000DFFr 3                       ; but that uses lots of memory and increases the start up time. This
000DFFr 3                       ; word is rarely used so we can try to keep it short at the expense
000DFFr 3                       ; of speed.
000DFFr 3                       ; """
000DFFr 3               
000DFFr 3               xt_environment_q:
000DFFr 3  20 rr rr                     jsr underflow_1
000E02r 3               
000E02r 3                               ; This code is table-driven: We walk through the list of
000E02r 3                               ; strings until we find one that matches, and then we take
000E02r 3                               ; the equivalent data from the results table. This is made
000E02r 3                               ; a bit harder by the fact that some of these return a
000E02r 3                               ; double-cell number and some a single-cell one.
000E02r 3               
000E02r 3                               ; We will walk through the table with variables that return
000E02r 3                               ; a single-cell result
000E02r 3  A0 00                        ldy #00                 ; counter for table
000E04r 3               
000E04r 3                               ; We use a flag on the the stack to signal if we have a single-cell
000E04r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
000E04r 3                               ; double-cell.
000E04r 3  5A                           phy
000E05r 3               @table_loop:
000E05r 3                               ; We arrived here with the address of the string to be checked
000E05r 3                               ; on the stack. We make a copy. Index is in Y
000E05r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
000E08r 3               
000E08r 3                               ; We do our work on the TOS to speed things up
000E08r 3  CA                           dex
000E09r 3  CA                           dex                     ; ( addr u addr u ? )
000E0Ar 3               
000E0Ar 3                               ; Get address of string to check from table
000E0Ar 3  B9 rr rr                     lda env_table_single,y
000E0Dr 3  95 00                        sta 0,x
000E0Fr 3  C8                           iny
000E10r 3  B9 rr rr                     lda env_table_single,y
000E13r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
000E15r 3  C8                           iny
000E16r 3               
000E16r 3                               ; See if this is the last entry. The LSB is still in A
000E16r 3  15 00                        ora 0,x
000E18r 3  F0 4D                        beq @table_done
000E1Ar 3               
000E1Ar 3                               ; We have a string entry. The address there is stored in
000E1Ar 3                               ; old-style address format, that is, the first byte is the
000E1Ar 3                               ; length of the string
000E1Ar 3  5A                           phy                     ; save Y, which is used by COUNT
000E1Br 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
000E1Er 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
000E21r 3  7A                           ply
000E22r 3               
000E22r 3                               ; If we found a match (flag is zero -- COMPARE is weird
000E22r 3                               ; that way), return the result
000E22r 3  B5 00                        lda 0,x
000E24r 3  15 01                        ora 1,x
000E26r 3  F0 04                        beq @got_result
000E28r 3               
000E28r 3                               ; Flag is not zero, so not a perfect match, so try next
000E28r 3                               ; word
000E28r 3  E8                           inx                     ; DROP, now ( addr u )
000E29r 3  E8                           inx
000E2Ar 3               
000E2Ar 3  80 D9                        bra @table_loop
000E2Cr 3               
000E2Cr 3               @got_result:
000E2Cr 3                               ; We arrive here with ( addr u -1 ) and know that we've found
000E2Cr 3                               ; a match. The index of the match+2 is in Y.
000E2Cr 3  E8                           inx                     ; drop flag, now ( addr u )
000E2Dr 3  E8                           inx
000E2Er 3  88                           dey                     ; go back to index we had
000E2Fr 3  88                           dey
000E30r 3               
000E30r 3                               ; See if this is a single-cell word.
000E30r 3  68                           pla
000E31r 3  D0 0D                        bne @double_result
000E33r 3               
000E33r 3                               ; Single-cell result
000E33r 3  B9 rr rr                     lda env_results_single,y
000E36r 3  95 02                        sta 2,x
000E38r 3  C8                           iny
000E39r 3  B9 rr rr                     lda env_results_single,y
000E3Cr 3  95 03                        sta 3,x                 ; ( res u )
000E3Er 3               
000E3Er 3  80 1F                        bra @set_flag
000E40r 3               
000E40r 3               @double_result:
000E40r 3                               ; This is a double-celled result, which means we have to
000E40r 3                               ; fool around with the index some more. We also need a
000E40r 3                               ; further cell on the stack
000E40r 3  CA                           dex                     ; ( addr u ? )
000E41r 3  CA                           dex
000E42r 3               
000E42r 3                               ; We have 11 single-cell words we check, plus the 0000 as
000E42r 3                               ; a marker for the end of the table, so we arrive here
000E42r 3                               ; with Y as 22 or more. To get the index for the double-
000E42r 3                               ; cell words, we move the result
000E42r 3  98                           tya
000E43r 3  38                           sec
000E44r 3  E9 18                        sbc #24
000E46r 3               
000E46r 3                               ; We have four bytes per entry in the table, but the index
000E46r 3                               ; keeps increasing by two, so we only have to multiply by
000E46r 3                               ; two (shift left once) to get the right result
000E46r 3  0A                           asl
000E47r 3  A8                           tay
000E48r 3               
000E48r 3  B9 rr rr                     lda env_results_double,y
000E4Br 3  95 02                        sta 2,x
000E4Dr 3  C8                           iny
000E4Er 3  B9 rr rr                     lda env_results_double,y
000E51r 3  95 03                        sta 3,x                 ; ( res u ? )
000E53r 3  C8                           iny
000E54r 3               
000E54r 3  B9 rr rr                     lda env_results_double,y
000E57r 3  95 04                        sta 4,x
000E59r 3  C8                           iny
000E5Ar 3  B9 rr rr                     lda env_results_double,y
000E5Dr 3  95 05                        sta 5,x                 ; ( res res ? )
000E5Fr 3               
000E5Fr 3                               ; fall through to @set_flag
000E5Fr 3               @set_flag:
000E5Fr 3  A9 FF                        lda #$ff
000E61r 3  95 00                        sta 0,x
000E63r 3  95 01                        sta 1,x                 ; ( res f )
000E65r 3               
000E65r 3  80 14                        bra @done
000E67r 3               @table_done:
000E67r 3                               ; We're done with a table, because the entry was a zero.
000E67r 3                               ; We arrive here with ( addr u addr u 0 )
000E67r 3               
000E67r 3                               ; We take the flag from stack and increase it by one. If the
000E67r 3                               ; flag is zero, we have just completed the single-cell number
000E67r 3                               ; strings, so we in increase the flag and try again. Otherwise,
000E67r 3                               ; we're done with the double-cell table without having found
000E67r 3                               ; a match, and we're done
000E67r 3  68                           pla
000E68r 3  D0 09                        bne @no_match
000E6Ar 3               
000E6Ar 3                               ; Flag is zero, increase it to one and start over to check
000E6Ar 3                               ; double-cell values
000E6Ar 3  1A                           inc
000E6Br 3  48                           pha
000E6Cr 3               
000E6Cr 3  8A                           txa
000E6Dr 3  18                           clc
000E6Er 3  69 06                        adc #6                  ; skip six bytes
000E70r 3  AA                           tax                     ; ( addr u )
000E71r 3               
000E71r 3  80 92                        bra @table_loop
000E73r 3               @no_match:
000E73r 3                               ; Bummer, not found. We arrive here with
000E73r 3                               ; ( addr u addr u 0 ) and need to return just a zero
000E73r 3  8A                           txa
000E74r 3  18                           clc
000E75r 3  69 0A                        adc #10
000E77r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
000E78r 3               
000E78r 3  20 rr rr                     jsr xt_false
000E7Br 3               @done:
000E7Br 3               z_environment_q:
000E7Br 3  60                           rts
000E7Cr 3               
000E7Cr 3               
000E7Cr 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
000E7Cr 3               ; results and one for the double-celled results. The zero cell at the
000E7Cr 3               ; end of each table marks its, uh, end. The strings themselves are defined
000E7Cr 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
000E7Cr 3               ; have to adapt the result code for double printout, where we subtract 22
000E7Cr 3               ; (two bytes each single-cell string and two bytes for the end-of-table
000E7Cr 3               ; marker 0000
000E7Cr 3               env_table_single:
000E7Cr 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
000E80r 3  rr rr rr rr  
000E84r 3  rr rr        
000E86r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
000E8Ar 3  rr rr rr rr  
000E8Er 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
000E92r 3  00 00        
000E94r 3               
000E94r 3               env_table_double:
000E94r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
000E98r 3  00 00        
000E9Ar 3               
000E9Ar 3               env_results_single:
000E9Ar 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
000E9Cr 3  FF 00                .word $00FF     ; /HOLD
000E9Er 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
000EA0r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
000EA2r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
000EA4r 3  FF 00                .word $00FF     ; MAX-CHAR
000EA6r 3  FF 7F                .word $7FFF     ; MAX-N
000EA8r 3  FF FF                .word $FFFF     ; MAX-U
000EAAr 3  80 00                .word $0080     ; RETURN-STACK-CELLS
000EACr 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
000EAEr 3  09 00                .word $0009     ; WORDLISTS
000EB0r 3               
000EB0r 3               env_results_double:
000EB0r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
000EB4r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
000EB8r 3               
000EB8r 3               
000EB8r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
000EB8r 3               ; ## "="  auto  ANS core
000EB8r 3                       ; """https://forth-standard.org/standard/core/Equal"""
000EB8r 3               
000EB8r 3               xt_equal:
000EB8r 3  20 rr rr                     jsr underflow_2
000EBBr 3               
000EBBr 3  B5 00                        lda 0,x                 ; LSB
000EBDr 3  D5 02                        cmp 2,x
000EBFr 3  D0 0A                        bne @false
000EC1r 3               
000EC1r 3  B5 01                        lda 1,x                 ; MSB
000EC3r 3  D5 03                        cmp 3,x
000EC5r 3  D0 04                        bne @false
000EC7r 3               
000EC7r 3  A9 FF                        lda #$ff
000EC9r 3  80 02                        bra @done
000ECBr 3               
000ECBr 3  A9 00        @false:         lda #0                  ; drop thru to done
000ECDr 3               
000ECDr 3  95 02        @done:          sta 2,x
000ECFr 3  95 03                        sta 3,x
000ED1r 3               
000ED1r 3  E8                           inx
000ED2r 3  E8                           inx
000ED3r 3               
000ED3r 3  60           z_equal:        rts
000ED4r 3               
000ED4r 3               
000ED4r 3               
000ED4r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
000ED4r 3               ; ## "blank"  auto  ANS string
000ED4r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
000ED4r 3               xt_blank:
000ED4r 3                               ; We don't check for underflow here because
000ED4r 3                               ; we deal with that in FILL
000ED4r 3  CA                           dex
000ED5r 3  CA                           dex
000ED6r 3  A9 20                        lda #AscSP
000ED8r 3  95 00                        sta 0,x
000EDAr 3  74 01                        stz 1,x
000EDCr 3               
000EDCr 3  80 06                        bra xt_fill     ; skip over code for ERASE
000EDEr 3               
000EDEr 3               
000EDEr 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
000EDEr 3               ; ## "erase"  auto  ANS core ext
000EDEr 3                       ; """https://forth-standard.org/standard/core/ERASE
000EDEr 3                       ; Note that ERASE works with "address" units
000EDEr 3                       ; (bytes), not cells.
000EDEr 3                       ; """
000EDEr 3               
000EDEr 3               xt_erase:
000EDEr 3                               ; We don't check for underflow here because
000EDEr 3                               ; we deal with that in FILL
000EDEr 3  CA                           dex
000EDFr 3  CA                           dex
000EE0r 3  74 00                        stz 0,x
000EE2r 3  74 01                        stz 1,x
000EE4r 3               
000EE4r 3                               ; fall through to FILL
000EE4r 3               
000EE4r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
000EE4r 3               ; ## "fill"  auto  ANS core
000EE4r 3                       ; """https://forth-standard.org/standard/core/FILL
000EE4r 3                       ; Fill u bytes of memory with char starting at addr. Note that
000EE4r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
000EE4r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
000EE4r 3                       ; happens when we reach the end of the address space
000EE4r 3                       ; """
000EE4r 3               xt_fill:
000EE4r 3  20 rr rr                     jsr underflow_3
000EE7r 3               
000EE7r 3                               ; We use tmp1 to hold the address
000EE7r 3  B5 04                        lda 4,x         ; LSB
000EE9r 3  85 rr                        sta tmp1
000EEBr 3  B5 05                        lda 5,x
000EEDr 3  85 rr                        sta tmp1+1
000EEFr 3               
000EEFr 3                               ; We use tmp2 to hold the counter
000EEFr 3  B5 02                        lda 2,x
000EF1r 3  85 rr                        sta tmp2
000EF3r 3  B5 03                        lda 3,x
000EF5r 3  85 rr                        sta tmp2+1
000EF7r 3               
000EF7r 3                               ; We use Y to hold the character
000EF7r 3  B5 00                        lda 0,x
000EF9r 3  A8                           tay
000EFAr 3               @loop:
000EFAr 3                               ; Unfortunately, we also need to make sure that we don't
000EFAr 3                               ; write further than the end of the RAM. So RAM_END must
000EFAr 3                               ; be larger or equal to the current address
000EFAr 3  A9 80                        lda #>ram_end           ; MSB
000EFCr 3  C5 rr                        cmp tmp1+1
000EFEr 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
000F00r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
000F02r 3               
000F02r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
000F04r 3  C5 rr                        cmp tmp1
000F06r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
000F08r 3               
000F08r 3               @check_counter:
000F08r 3                               ; See if our counter has reached zero
000F08r 3  A5 rr                        lda tmp2
000F0Ar 3  05 rr                        ora tmp2+1
000F0Cr 3  F0 13                        beq @done
000F0Er 3               
000F0Er 3                               ; We're not in ROM and we still have stuff on the counter, so
000F0Er 3                               ; let's actually do what we came here to do
000F0Er 3  98                           tya
000F0Fr 3  92 rr                        sta (tmp1)
000F11r 3               
000F11r 3                               ; Adjust the counter
000F11r 3  A5 rr                        lda tmp2
000F13r 3  D0 02                        bne @1
000F15r 3  C6 rr                        dec tmp2+1
000F17r 3  C6 rr        @1:               dec tmp2
000F19r 3               
000F19r 3                               ; Next address
000F19r 3  E6 rr                        inc tmp1
000F1Br 3  D0 DD                        bne @loop
000F1Dr 3  E6 rr                        inc tmp1+1
000F1Fr 3               
000F1Fr 3  80 D9                        bra @loop
000F21r 3               
000F21r 3               @done:
000F21r 3                               ; Drop three cells off the Data Stack. This uses one byte
000F21r 3                               ; less than six times INX
000F21r 3  8A                           txa
000F22r 3  18                           clc
000F23r 3  69 06                        adc #6
000F25r 3  AA                           tax
000F26r 3               z_blank:
000F26r 3               z_erase:
000F26r 3  60           z_fill:         rts
000F27r 3               
000F27r 3               
000F27r 3               
000F27r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
000F27r 3               ; ## "execute"  auto  ANS core
000F27r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
000F27r 3               xt_execute:
000F27r 3  20 rr rr                     jsr underflow_1
000F2Ar 3               
000F2Ar 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
000F2Dr 3               
000F2Dr 3  60           z_execute:      rts
000F2Er 3               
000F2Er 3               doexecute:
000F2Er 3  B5 00                        lda 0,x
000F30r 3  85 rr                        sta ip
000F32r 3  B5 01                        lda 1,x
000F34r 3  85 rr                        sta ip+1
000F36r 3               
000F36r 3  E8                           inx
000F37r 3  E8                           inx
000F38r 3               
000F38r 3                               ; we don't need a RTS here because we highjack the RTS of
000F38r 3                               ; the word we're calling to get back to xt_execute
000F38r 3  6C rr rr                     jmp (ip)
000F3Br 3               
000F3Br 3               ; end of doexecute
000F3Br 3               
000F3Br 3               
000F3Br 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
000F3Br 3               ; ## "execute-parsing"  auto  Gforth
000F3Br 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
000F3Br 3                       ; Execute the parsing word defined by the execution token (xt) on the
000F3Br 3                       ; string as if it were passed on the command line. See the file
000F3Br 3                       ; tests/tali.fs for examples.
000F3Br 3                       ;
000F3Br 3                       ; Note that this word is coded completely
000F3Br 3                       ; different in its Gforth version, see the file execute-parsing.fs
000F3Br 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
000F3Br 3                       ; """
000F3Br 3               xt_execute_parsing:
000F3Br 3  20 rr rr                     jsr underflow_3
000F3Er 3               
000F3Er 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
000F41r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
000F44r 3               
000F44r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
000F46r 3  85 rr                        sta ciblen
000F48r 3  B5 01                        lda 1,x
000F4Ar 3  85 rr                        sta ciblen+1
000F4Cr 3               
000F4Cr 3  B5 02                        lda 2,x                 ; NOS is new cib
000F4Er 3  85 rr                        sta cib
000F50r 3  B5 03                        lda 3,x
000F52r 3  85 rr                        sta cib+1
000F54r 3               
000F54r 3  64 rr                        stz toin                ; Set >IN to zero
000F56r 3  64 rr                        stz toin+1
000F58r 3               
000F58r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
000F5Br 3  20 rr rr                     jsr xt_execute
000F5Er 3               
000F5Er 3  20 rr rr                     jsr xt_r_to_input
000F61r 3               
000F61r 3               z_execute_parsing:
000F61r 3  60                           rts
000F62r 3               
000F62r 3               
000F62r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
000F62r 3               ; ## "exit"  auto  ANS core
000F62r 3                       ; """https://forth-standard.org/standard/core/EXIT
000F62r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
000F62r 3                       ; we we might have put on the Return Stack off as well. This should
000F62r 3                       ; be natively compiled.
000F62r 3                       ; """
000F62r 3               
000F62r 3               xt_exit:
000F62r 3  60                           rts             ; keep before z_exit
000F63r 3               z_exit:                         ; never reached
000F63r 3               
000F63r 3               
000F63r 3               
000F63r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
000F63r 3               ; ## "false"  auto  ANS core ext
000F63r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
000F63r 3               xt_false:
000F63r 3  CA                           dex
000F64r 3  CA                           dex
000F65r 3  74 00                        stz 0,x
000F67r 3  74 01                        stz 1,x
000F69r 3               
000F69r 3  60           z_false:        rts
000F6Ar 3               
000F6Ar 3               
000F6Ar 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
000F6Ar 3               ; ## "@"  auto  ANS core
000F6Ar 3                       ; """https://forth-standard.org/standard/core/Fetch"""
000F6Ar 3               xt_fetch:
000F6Ar 3  20 rr rr                     jsr underflow_1
000F6Dr 3               
000F6Dr 3  A1 00                        lda (0,x)               ; LSB
000F6Fr 3  A8                           tay
000F70r 3  F6 00                        inc 0,x
000F72r 3  D0 02                        bne @1
000F74r 3  F6 01                        inc 1,x
000F76r 3               @1:
000F76r 3  A1 00                        lda (0,x)               ; MSB
000F78r 3  95 01                        sta 1,x
000F7Ar 3  94 00                        sty 0,x
000F7Cr 3               
000F7Cr 3  60           z_fetch:        rts
000F7Dr 3               
000F7Dr 3               
000F7Dr 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
000F7Dr 3               ; ## "find"  auto  ANS core
000F7Dr 3                       ; """https://forth-standard.org/standard/core/FIND
000F7Dr 3                       ; Included for backwards compatibility only, because it still
000F7Dr 3                       ; can be found in so may examples. It should, however, be replaced
000F7Dr 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
000F7Dr 3                       ; flag if not found in the Dictionary, or the xt with a flag to
000F7Dr 3                       ; indicate if this is immediate or not. FIND is a wrapper around
000F7Dr 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
000F7Dr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
000F7Dr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
000F7Dr 3                       ; """
000F7Dr 3               
000F7Dr 3               xt_find:
000F7Dr 3  20 rr rr                     jsr underflow_1
000F80r 3               
000F80r 3                               ; Save address in case conversion fails. We use the
000F80r 3                               ; Return Stack instead of temporary variables like TMP1
000F80r 3                               ; because this is shorter and anybody still using FIND
000F80r 3                               ; can't be worried about speed anyway
000F80r 3  B5 01                        lda 1,x                 ; MSB
000F82r 3  48                           pha
000F83r 3  B5 00                        lda 0,x                 ; LSB
000F85r 3  48                           pha
000F86r 3               
000F86r 3                               ; Convert ancient-type counted string address to
000F86r 3                               ; modern format
000F86r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
000F89r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
000F8Cr 3               
000F8Cr 3  B5 00                        lda 0,x
000F8Er 3  15 01                        ora 1,x
000F90r 3  D0 0B                        bne @found_word
000F92r 3               
000F92r 3                               ; No word found. Return address of the string and a false
000F92r 3                               ; flag
000F92r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
000F95r 3               
000F95r 3                               ; The address needs to be restored.
000F95r 3  68                           pla                     ; LSB of address
000F96r 3  95 02                        sta 2,x
000F98r 3  68                           pla
000F99r 3  95 03                        sta 3,x                 ; MSB of address
000F9Br 3               
000F9Br 3  80 27                        bra @done               ; ( addr 0 )
000F9Dr 3               
000F9Dr 3               @found_word:
000F9Dr 3                               ; We don't need the address after all, dump it
000F9Dr 3  68                           pla
000F9Er 3  68                           pla
000F9Fr 3               
000F9Fr 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
000F9Fr 3                               ; convert the return values to FIND's format
000F9Fr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
000FA2r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
000FA5r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
000FA8r 3               
000FA8r 3  A0 00                        ldy #0                  ; Prepare flag
000FAAr 3               
000FAAr 3                               ; The flags are in the second byte of the header
000FAAr 3  F6 00                        inc 0,x
000FACr 3  D0 02                        bne @1
000FAEr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
000FB0r 3               @1:
000FB0r 3  A1 00                        lda (0,x)               ; ( xt char )
000FB2r 3  29 04                        and #IM
000FB4r 3  D0 08                        bne @immediate          ; bit set, we're immediate
000FB6r 3               
000FB6r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
000FB8r 3  95 00                        sta 0,x
000FBAr 3  95 01                        sta 1,x
000FBCr 3  80 06                        bra @done
000FBEr 3               
000FBEr 3               @immediate:
000FBEr 3  A9 01                        lda #1                  ; We're immediate, return 1
000FC0r 3  95 00                        sta 0,x
000FC2r 3  74 01                        stz 1,x
000FC4r 3               @done:
000FC4r 3  60           z_find:         rts
000FC5r 3               
000FC5r 3               
000FC5r 3               
000FC5r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
000FC5r 3               ; ## "find-name"  auto  Gforth
000FC5r 3               
000FC5r 3               xt_find_name:
000FC5r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
000FC5r 3                       ; Given a string, find the Name Token (nt) of a word or return
000FC5r 3                       ; zero if the word is not in the dictionary. We use this instead of
000FC5r 3                       ; ancient FIND to look up words in the Dictionary passed by
000FC5r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
000FC5r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
000FC5r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
000FC5r 3                       ; FIND calls this word
000FC5r 3                       ; """
000FC5r 3  20 rr rr                     jsr underflow_2
000FC8r 3               
000FC8r 3                               ; check for special case of an empty string (length zero)
000FC8r 3  B5 00                        lda 0,x
000FCAr 3  15 01                        ora 1,x
000FCCr 3  D0 03                        bne @nonempty
000FCEr 3               
000FCEr 3  4C rr rr                     jmp @fail_done
000FD1r 3               
000FD1r 3               @nonempty:
000FD1r 3                               ; Set up for traversing the wordlist search order.
000FD1r 3  64 rr                        stz tmp3                ; Start at the beginning
000FD3r 3               
000FD3r 3               @wordlist_loop:
000FD3r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
000FD5r 3  A5 rr                        lda tmp3
000FD7r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
000FD9r 3  D0 03                        bne @have_string
000FDBr 3               
000FDBr 3                               ; We ran out of wordlists to search.
000FDBr 3  4C rr rr                     jmp @fail_done
000FDEr 3               
000FDEr 3               @have_string:
000FDEr 3                               ; set up first loop iteration
000FDEr 3               
000FDEr 3                               ; Get the current wordlist id
000FDEr 3  18                           clc             ; SEARCH-ORDER is array of bytes.
000FDFr 3  69 1F                        adc #search_order_offset
000FE1r 3  A8                           tay
000FE2r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
000FE4r 3                                               ; into the cell array WORDLISTS
000FE4r 3               
000FE4r 3                               ; Get the DP for that wordlist.
000FE4r 3  0A                           asl                     ; Turn offset into cells offset.
000FE5r 3  18                           clc
000FE6r 3  69 06                        adc #wordlists_offset
000FE8r 3  A8                           tay
000FE9r 3  B1 rr                        lda (up),y
000FEBr 3  85 rr                        sta tmp1
000FEDr 3  C8                           iny
000FEEr 3  B1 rr                        lda (up),y
000FF0r 3  85 rr                        sta tmp1+1
000FF2r 3               
000FF2r 3  B5 02                        lda 2,x                 ; Address of mystery string
000FF4r 3  85 rr                        sta tmp2
000FF6r 3  B5 03                        lda 3,x
000FF8r 3  85 rr                        sta tmp2+1
000FFAr 3               
000FFAr 3               @loop:
000FFAr 3                               ; first quick test: Are strings the same length?
000FFAr 3  B2 rr                        lda (tmp1)
000FFCr 3  D5 00                        cmp 0,x
000FFEr 3  D0 54                        bne @next_entry
001000r 3               
001000r 3               @compare_string:
001000r 3                               ; are the same length, so we now have to compare each
001000r 3                               ; character
001000r 3               
001000r 3                               ; second quick test: Is the first character the same?
001000r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001002r 3               
001002r 3                               ; Lowercase the incoming charcter.
001002r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001004r 3  B0 07                        bcs @compare_first
001006r 3  C9 41                        cmp #$41        ; ASCII 'A'
001008r 3  90 03                        bcc @compare_first
00100Ar 3               
00100Ar 3                               ; An uppercase letter has been located.  Make it
00100Ar 3                               ; lowercase.
00100Ar 3  18                           clc
00100Br 3  69 20                        adc #$20
00100Dr 3               
00100Dr 3               @compare_first:
00100Dr 3  A0 08                        ldy #8          ; Offset in nt to name
00100Fr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001011r 3  D0 41                        bne @next_entry
001013r 3               
001013r 3                               ; String length is the same and the first character is the
001013r 3                               ; same. If the length of the string is 1, we're already done
001013r 3  B5 00                        lda 0,x
001015r 3  3A                           dec
001016r 3  F0 2C                        beq @success
001018r 3               
001018r 3                               ; No such luck: The strings are the same length and the first
001018r 3                               ; char is the same, but the word is more than one char long.
001018r 3                               ; So we suck it up and compare every single character. We go
001018r 3                               ; from back to front, because words like CELLS and CELL+ would
001018r 3                               ; take longer otherwise. We can also shorten the loop by one
001018r 3                               ; because we've already compared the first char.
001018r 3               
001018r 3                               ; The string of the word we're testing against is 8 bytes down
001018r 3  A5 rr                        lda tmp1
00101Ar 3  48                           pha             ; Preserve tmp1 on the return stack.
00101Br 3  18                           clc
00101Cr 3  69 08                        adc #8
00101Er 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001020r 3  A5 rr                        lda tmp1+1
001022r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001023r 3  69 00                        adc #0          ; we only need the carry
001025r 3  85 rr                        sta tmp1+1
001027r 3               
001027r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001029r 3  88                           dey
00102Ar 3               
00102Ar 3               @string_loop:
00102Ar 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
00102Cr 3               
00102Cr 3                               ; Lowercase the incoming charcter.
00102Cr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
00102Er 3  B0 07                        bcs @check_char
001030r 3  C9 41                        cmp #$41        ; ASCII 'A'
001032r 3  90 03                        bcc @check_char
001034r 3               
001034r 3                               ; An uppercase letter has been located.  Make it
001034r 3                               ; lowercase.
001034r 3  18                           clc
001035r 3  69 20                        adc #$20
001037r 3               
001037r 3               @check_char:
001037r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001039r 3  D0 13                        bne @next_entry_tmp1
00103Br 3               
00103Br 3  88                           dey
00103Cr 3  D0 EC                        bne @string_loop
00103Er 3               
00103Er 3               @success_tmp1:
00103Er 3  68                           pla             ; Restore tmp1 from the return stack.
00103Fr 3  85 rr                        sta tmp1+1
001041r 3  68                           pla
001042r 3  85 rr                        sta tmp1
001044r 3               
001044r 3               @success:
001044r 3                               ; The strings match. Put correct nt NOS, because we'll drop
001044r 3                               ; TOS before we leave
001044r 3  A5 rr                        lda tmp1
001046r 3  95 02                        sta 2,x
001048r 3  A5 rr                        lda tmp1+1
00104Ar 3  95 03                        sta 3,x
00104Cr 3               
00104Cr 3  80 20                        bra @done
00104Er 3               
00104Er 3               @next_entry_tmp1:
00104Er 3  68                           pla             ; Restore tmp1 from the return stack.
00104Fr 3  85 rr                        sta tmp1+1
001051r 3  68                           pla
001052r 3  85 rr                        sta tmp1
001054r 3               
001054r 3               @next_entry:
001054r 3                               ; Not the same, so we get the next word. Next header
001054r 3                               ; address is two bytes down
001054r 3  A0 02                        ldy #2
001056r 3  B1 rr                        lda (tmp1),y
001058r 3  48                           pha
001059r 3  C8                           iny
00105Ar 3  B1 rr                        lda (tmp1),y
00105Cr 3  85 rr                        sta tmp1+1
00105Er 3  68                           pla
00105Fr 3  85 rr                        sta tmp1
001061r 3               
001061r 3                               ; If we got a zero, we've walked the whole Dictionary and
001061r 3                               ; return as a failure, otherwise try again
001061r 3  05 rr                        ora tmp1+1
001063r 3  D0 95                        bne @loop
001065r 3               
001065r 3                               ; Move on to the next wordlist in the search order.
001065r 3  E6 rr                        inc tmp3
001067r 3  4C rr rr                     jmp @wordlist_loop
00106Ar 3               
00106Ar 3               @fail_done:
00106Ar 3  74 02                        stz 2,x         ; failure flag
00106Cr 3  74 03                        stz 3,x
00106Er 3               @done:
00106Er 3  E8                           inx
00106Fr 3  E8                           inx
001070r 3               
001070r 3  60           z_find_name:    rts
001071r 3               
001071r 3               
001071r 3               
001071r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
001071r 3               ; ## "flush"  auto  ANS block
001071r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
001071r 3               xt_flush:
001071r 3  20 rr rr                     jsr xt_save_buffers
001074r 3               
001074r 3                               ; Set the buffer status to empty.
001074r 3  A0 2C                        ldy #buffstatus_offset
001076r 3  A9 00                        lda #0
001078r 3  91 rr                        sta (up),y      ; Only LSB is used.
00107Ar 3               z_flush:
00107Ar 3  60                           rts
00107Br 3               
00107Br 3               
00107Br 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
00107Br 3               ; ## "fm/mod"  auto  ANS core
00107Br 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
00107Br 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
00107Br 3                       ;
00107Br 3                       ; There are various ways to realize this. We follow EForth with
00107Br 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
00107Br 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
00107Br 3                       ; See (http://www.forth.org/eforth.html). However you can also
00107Br 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
00107Br 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
00107Br 3                       ; """
00107Br 3               
00107Br 3               xt_fm_slash_mod:
00107Br 3  20 rr rr                     jsr underflow_3
00107Er 3               
00107Er 3                               ; if sign of n1 is negative, negate both n1 and d
00107Er 3  64 rr                        stz tmp2        ; default: n is positive
001080r 3  B5 01                        lda 1,x         ; MSB of n1
001082r 3  10 0E                        bpl @check_d
001084r 3               
001084r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
001086r 3  20 rr rr                     jsr xt_negate   ; NEGATE
001089r 3  20 rr rr                     jsr xt_to_r     ; >R
00108Cr 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
00108Fr 3  20 rr rr                     jsr xt_r_from   ; R>
001092r 3               
001092r 3               @check_d:
001092r 3                               ; If d is negative, add n1 to high cell of d
001092r 3  B5 03                        lda 3,x         ; MSB of high word of d
001094r 3  10 0D                        bpl @multiply
001096r 3               
001096r 3  18                           clc
001097r 3  B5 00                        lda 0,x         ; LSB of n1
001099r 3  75 02                        adc 2,x         ; LSB of dh
00109Br 3  95 02                        sta 2,x
00109Dr 3               
00109Dr 3  B5 01                        lda 1,x         ; MSB of n1
00109Fr 3  75 03                        adc 3,x         ; MSB of dh
0010A1r 3  95 03                        sta 3,x
0010A3r 3               
0010A3r 3               @multiply:
0010A3r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
0010A6r 3               
0010A6r 3                               ; if n was negative, negate the result
0010A6r 3  A5 rr                        lda tmp2
0010A8r 3  F0 07                        beq @done
0010AAr 3               
0010AAr 3  E8                           inx             ; pretend that we SWAP
0010ABr 3  E8                           inx
0010ACr 3  20 rr rr                     jsr xt_negate
0010AFr 3  CA                           dex
0010B0r 3  CA                           dex
0010B1r 3               @done:
0010B1r 3  60           z_fm_slash_mod: rts
0010B2r 3               
0010B2r 3               
0010B2r 3               
0010B2r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
0010B2r 3               ; ## "forth"  auto  ANS search ext
0010B2r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
0010B2r 3               xt_forth:
0010B2r 3  A0 1F                        ldy #search_order_offset
0010B4r 3  A9 00                        lda #0          ; The WID for Forth is 0.
0010B6r 3               
0010B6r 3  91 rr                        sta (up),y
0010B8r 3               z_forth:
0010B8r 3  60                           rts
0010B9r 3               
0010B9r 3               
0010B9r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
0010B9r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
0010B9r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
0010B9r 3               load_evaluate:
0010B9r 3                               ; Set a flag (using tmp1) to not zero BLK
0010B9r 3  A9 FF                        lda #$FF
0010BBr 3  85 rr                        sta tmp1
0010BDr 3  80 11                        bra load_evaluate_start
0010BFr 3               
0010BFr 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
0010BFr 3               ; ## "evaluate"  auto  ANS core
0010BFr 3                       ; """https://forth-standard.org/standard/core/EVALUATE
0010BFr 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
0010BFr 3                       ; After processing the line, revert to old input source. We use this
0010BFr 3                       ; to compile high-level Forth words and user-defined words during
0010BFr 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
0010BFr 3                       ; accept more than 255 characters here, even though it's a pain in
0010BFr 3                       ; the 8-bit.
0010BFr 3                       ; """
0010BFr 3               
0010BFr 3               xt_evaluate:
0010BFr 3  20 rr rr                     jsr underflow_2
0010C2r 3               
0010C2r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
0010C2r 3                               ; and will set the block number.
0010C2r 3  64 rr                        stz tmp1
0010C4r 3               
0010C4r 3                               ; If u is zero (which can happen a lot for the user-defined
0010C4r 3                               ; words), just leave again
0010C4r 3  B5 00                        lda 0,x
0010C6r 3  15 01                        ora 1,x
0010C8r 3  D0 06                        bne _eval_got_work
0010CAr 3               
0010CAr 3  E8                           inx
0010CBr 3  E8                           inx
0010CCr 3  E8                           inx
0010CDr 3  E8                           inx
0010CEr 3               
0010CEr 3  80 42                        bra _eval_done
0010D0r 3               
0010D0r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0010D0r 3               load_evaluate_start:
0010D0r 3               _eval_got_work:
0010D0r 3                               ; Save the current value of BLK on the return stack.
0010D0r 3  A0 01                        ldy #blk_offset+1
0010D2r 3  B1 rr                        lda (up),y
0010D4r 3  48                           pha
0010D5r 3  88                           dey
0010D6r 3  B1 rr                        lda (up),y
0010D8r 3  48                           pha
0010D9r 3               
0010D9r 3                               ; See if we should zero BLK.
0010D9r 3  A5 rr                        lda tmp1
0010DBr 3  D0 05                        bne @nozero
0010DDr 3               
0010DDr 3                               ; Set BLK to zero.
0010DDr 3                               ; lda #0        ; A is already zero from loading tmp1
0010DDr 3  91 rr                        sta (up),y
0010DFr 3  C8                           iny
0010E0r 3  91 rr                        sta (up),y
0010E2r 3               
0010E2r 3               @nozero:
0010E2r 3                               ; Save the input state to the Return Stack
0010E2r 3  20 rr rr                     jsr xt_input_to_r
0010E5r 3               
0010E5r 3                               ; set SOURCE-ID to -1
0010E5r 3  A9 FF                        lda #$ff
0010E7r 3  85 rr                        sta insrc
0010E9r 3  85 rr                        sta insrc+1
0010EBr 3               
0010EBr 3                               ; set >IN to zero
0010EBr 3  64 rr                        stz toin
0010EDr 3  64 rr                        stz toin+1
0010EFr 3               
0010EFr 3                               ; move TOS and NOS to input buffers
0010EFr 3  B5 00                        lda 0,x
0010F1r 3  85 rr                        sta ciblen
0010F3r 3  B5 01                        lda 1,x
0010F5r 3  85 rr                        sta ciblen+1
0010F7r 3               
0010F7r 3  B5 02                        lda 2,x
0010F9r 3  85 rr                        sta cib
0010FBr 3  B5 03                        lda 3,x
0010FDr 3  85 rr                        sta cib+1
0010FFr 3               
0010FFr 3  E8                           inx             ; A clean stack is a clean mind
001100r 3  E8                           inx
001101r 3  E8                           inx
001102r 3  E8                           inx
001103r 3               
001103r 3  20 rr rr                     jsr interpret   ; ( -- )
001106r 3               
001106r 3                               ; restore variables
001106r 3  20 rr rr                     jsr xt_r_to_input
001109r 3               
001109r 3                               ; Restore BLK from the return stack.
001109r 3  A0 00                        ldy #blk_offset
00110Br 3  68                           pla
00110Cr 3  91 rr                        sta (up),y
00110Er 3  C8                           iny
00110Fr 3  68                           pla
001110r 3  91 rr                        sta (up),y
001112r 3               
001112r 3               _eval_done:
001112r 3  60           z_evaluate:     rts
001113r 3               
001113r 3               
001113r 3               
001113r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
001113r 3               ; ## "forth-wordlist"  auto  ANS search
001113r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
001113r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
001113r 3               
001113r 3               
001113r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
001113r 3               ; ## "get-current" auto ANS search
001113r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
001113r 3               
001113r 3               xt_get_current:
001113r 3                               ; This is a little different than some of the variables
001113r 3                               ; in the user area as we want the value rather than
001113r 3                               ; the address.
001113r 3  CA                           dex
001114r 3  CA                           dex
001115r 3  A0 04                        ldy #current_offset
001117r 3  B1 rr                        lda (up),y
001119r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
00111Br 3  74 01                        stz 1,x         ; so the MSB is zero.
00111Dr 3               
00111Dr 3  60           z_get_current:  rts
00111Er 3               
00111Er 3               
00111Er 3               
00111Er 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
00111Er 3               ; ## "get-order" auto ANS search
00111Er 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
00111Er 3               
00111Er 3               xt_get_order:
00111Er 3                               ; Get #ORDER - the number of wordlists in the search order.
00111Er 3  A0 1E                        ldy #num_order_offset
001120r 3  B1 rr                        lda (up),y
001122r 3  85 rr                        sta tmp1
001124r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
001126r 3               
001126r 3               @loop:
001126r 3                               ; Count down towards the front of the list.
001126r 3                               ; By decrementing first, we also turn the length into an offset.
001126r 3  C6 rr                        dec tmp1        ; Count down by bytes.
001128r 3               
001128r 3                               ; Get a pointer to the current wordlist, working back to front.
001128r 3  A9 1F                        lda #search_order_offset
00112Ar 3  18                           clc
00112Br 3  65 rr                        adc tmp1
00112Dr 3  A8                           tay
00112Er 3               
00112Er 3                               ; Put that wordlist id on the stack.
00112Er 3  CA                           dex
00112Fr 3  CA                           dex
001130r 3  B1 rr                        lda (up),y
001132r 3  95 00                        sta 0,x         ; Search order array is bytes, so
001134r 3  74 01                        stz 1,x         ; put a zero in the high byte.
001136r 3               
001136r 3                               ; See if that was the last one to process (first in the list).
001136r 3  A9 00                        lda #0
001138r 3  C5 rr                        cmp tmp1
00113Ar 3  D0 EA                        bne @loop
00113Cr 3               
00113Cr 3               @done:
00113Cr 3                               ; Put the number of items on the stack.
00113Cr 3  CA                           dex
00113Dr 3  CA                           dex
00113Er 3  A0 1E                        ldy #num_order_offset
001140r 3  B1 rr                        lda (up),y
001142r 3  95 00                        sta 0,x
001144r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
001146r 3               
001146r 3  60           z_get_order:    rts
001147r 3               
001147r 3               
001147r 3               
001147r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
001147r 3               ; ## ">"  auto  ANS core
001147r 3                       ; """https://forth-standard.org/standard/core/more"""
001147r 3               
001147r 3               xt_greater_than:
001147r 3  20 rr rr                     jsr underflow_2
00114Ar 3               
00114Ar 3  A0 00                        ldy #0          ; default false
00114Cr 3  20 rr rr                     jsr compare_16bit
00114Fr 3               
00114Fr 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
00114Fr 3  F0 03                        beq @false
001151r 3  10 01                        bpl @false
001153r 3               
001153r 3                               ; true
001153r 3  88                           dey
001154r 3               @false:
001154r 3  98                           tya
001155r 3               
001155r 3  E8                           inx
001156r 3  E8                           inx
001157r 3  95 00                        sta 0,x
001159r 3  95 01                        sta 1,x
00115Br 3               
00115Br 3  60           z_greater_than: rts
00115Cr 3               
00115Cr 3               
00115Cr 3               
00115Cr 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
00115Cr 3               ; ## "here"  auto  ANS core
00115Cr 3                       ; """https://forth-standard.org/standard/core/HERE
00115Cr 3                       ; This code is also used by the assembler directive ARROW
00115Cr 3                       ; ("->") though as immediate"""
00115Cr 3               xt_here:
00115Cr 3               xt_asm_arrow:
00115Cr 3  CA                           dex
00115Dr 3  CA                           dex
00115Er 3  A5 rr                        lda cp
001160r 3  95 00                        sta 0,x
001162r 3  A5 rr                        lda cp+1
001164r 3  95 01                        sta 1,x
001166r 3               
001166r 3               z_asm_arrow:
001166r 3  60           z_here:         rts
001167r 3               
001167r 3               
001167r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001167r 3               ; ## "hex"  auto  ANS core ext
001167r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001167r 3               xt_hex:
001167r 3  A9 10                        lda #16
001169r 3  85 rr                        sta base
00116Br 3  64 rr                        stz base+1              ; paranoid
00116Dr 3               
00116Dr 3  60           z_hex:          rts
00116Er 3               
00116Er 3               
00116Er 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
00116Er 3               ; ## "hexstore"  auto  Tali
00116Er 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
00116Er 3                       ; by spaces, store the numbers at the address addr2, returning the
00116Er 3                       ; number of elements. Non-number elements are skipped, an zero-length
00116Er 3                       ; string produces a zero output.
00116Er 3                       ; """
00116Er 3               
00116Er 3               xt_hexstore:
00116Er 3  20 rr rr                     jsr underflow_3
001171r 3               
001171r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
001174r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001177r 3               
001177r 3               @loop:
001177r 3                               ; Loop until string is totally consumed
001177r 3  B5 00                        lda 0,x
001179r 3  15 01                        ora 1,x
00117Br 3  F0 36                        beq @done
00117Dr 3               
00117Dr 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
001180r 3               
001180r 3                               ; Prepare the conversion of the number.
001180r 3  20 rr rr                     jsr xt_two_to_r
001183r 3  20 rr rr                     jsr xt_zero
001186r 3  20 rr rr                     jsr xt_zero
001189r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
00118Cr 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
00118Fr 3               
00118Fr 3                               ; If u4 is not zero, we have leftover chars and have to do
00118Fr 3                               ; things differently
00118Fr 3  B5 00                        lda 0,x
001191r 3  15 01                        ora 1,x
001193r 3  D0 17                        bne @have_chars_left
001195r 3               
001195r 3                               ; Normal case, this number is all done
001195r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
001198r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
00119Br 3               
00119Br 3                               ; Store the new value
00119Br 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
00119Er 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
0011A1r 3               
0011A1r 3                               ; Increase counter
0011A1r 3  20 rr rr                     jsr xt_r_from           ; R>
0011A4r 3  20 rr rr                     jsr xt_one_plus         ; 1+
0011A7r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
0011AAr 3  80 CB                        bra @loop
0011ACr 3               
0011ACr 3               @have_chars_left:
0011ACr 3                               ; Pathological case: Drop the rest of this number off the stack
0011ACr 3                               ; and continue with the next word. Doesn't print a warning. We
0011ACr 3                               ; need to drop four cells, that is, eight bytes
0011ACr 3  8A                           txa
0011ADr 3  18                           clc
0011AEr 3  69 08                        adc #8
0011B0r 3  AA                           tax
0011B1r 3  80 C4                        bra @loop
0011B3r 3               
0011B3r 3               @done:
0011B3r 3                               ; Clean up return stack and calculate number of chars stored
0011B3r 3  E8                           inx
0011B4r 3  E8                           inx
0011B5r 3  E8                           inx
0011B6r 3  E8                           inx                     ; 2DROP
0011B7r 3               
0011B7r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
0011BAr 3  20 rr rr                     jsr xt_swap
0011BDr 3  20 rr rr                     jsr xt_minus            ; ( n )
0011C0r 3               
0011C0r 3  60           z_hexstore:     rts
0011C1r 3               
0011C1r 3               
0011C1r 3               
0011C1r 3               ; ## HOLD ( char -- ) "Insert character at current output"
0011C1r 3               ; ## "hold"  auto  ANS core
0011C1r 3                       ; """https://forth-standard.org/standard/core/HOLD
0011C1r 3                       ; Insert a character at the current position of a pictured numeric
0011C1r 3                       ; output string on
0011C1r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0011C1r 3                       ;
0011C1r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
0011C1r 3                       ; variable tohold instead of HLD.
0011C1r 3                       ; """
0011C1r 3               xt_hold:
0011C1r 3  20 rr rr                     jsr underflow_1
0011C4r 3               
0011C4r 3  A5 rr                        lda tohold
0011C6r 3  D0 02                        bne @1
0011C8r 3  C6 rr                        dec tohold+1
0011CAr 3               @1:
0011CAr 3  C6 rr                        dec tohold
0011CCr 3               
0011CCr 3  B5 00                        lda 0,x
0011CEr 3  92 rr                        sta (tohold)
0011D0r 3  E8                           inx
0011D1r 3  E8                           inx
0011D2r 3               
0011D2r 3  60           z_hold:         rts
0011D3r 3               
0011D3r 3               
0011D3r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0011D3r 3               ; ## "i"  auto  ANS core
0011D3r 3                       ; """https://forth-standard.org/standard/core/I
0011D3r 3                       ; Note that this is not the same as R@ because we use a fudge
0011D3r 3                       ; factor for loop control; see the Control Flow section of the
0011D3r 3                       ; manual for details.
0011D3r 3                       ;
0011D3r 3                       ; We should make this native compile for speed.
0011D3r 3                       ; """
0011D3r 3               
0011D3r 3               xt_i:
0011D3r 3  CA                           dex
0011D4r 3  CA                           dex
0011D5r 3               
0011D5r 3                               ; Get the fudged index off of the top of the stack. It's
0011D5r 3                               ; easier to do math on the stack directly than to pop and
0011D5r 3                               ; push stuff around
0011D5r 3  86 rr                        stx tmpdsp
0011D7r 3  BA                           tsx
0011D8r 3               
0011D8r 3  38                           sec
0011D9r 3  BD 01 01                     lda $0101,x     ; LSB
0011DCr 3  FD 03 01                     sbc $0103,x
0011DFr 3  A8                           tay
0011E0r 3               
0011E0r 3  BD 02 01                     lda $0102,x     ; MSB
0011E3r 3  FD 04 01                     sbc $0104,x
0011E6r 3               
0011E6r 3  A6 rr                        ldx tmpdsp
0011E8r 3               
0011E8r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0011EAr 3  94 00                        sty 0,x         ; LSB of de-fudged index
0011ECr 3               
0011ECr 3  60           z_i:            rts
0011EDr 3               
0011EDr 3               
0011EDr 3               
0011EDr 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
0011EDr 3               ; ## "if"  auto  ANS core
0011EDr 3                       ; """http://forth-standard.org/standard/core/IF"""
0011EDr 3               
0011EDr 3               xt_if:
0011EDr 3                               ; Compile a 0BRANCH
0011EDr 3  A0 rr                        ldy #>zero_branch_runtime
0011EFr 3  A9 rr                        lda #<zero_branch_runtime
0011F1r 3  20 rr rr                     jsr cmpl_subroutine
0011F4r 3               
0011F4r 3                               ; Put the origination address on the stack for else/then
0011F4r 3  20 rr rr                     jsr xt_here
0011F7r 3               
0011F7r 3                               ; Stuff zero in for the branch address right now.
0011F7r 3                               ; THEN or ELSE will fix it later.
0011F7r 3  20 rr rr                     jsr xt_zero
0011FAr 3  20 rr rr                     jsr xt_comma
0011FDr 3  60           z_if:           rts
0011FEr 3               
0011FEr 3               
0011FEr 3               zero_branch_runtime:
0011FEr 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
0011FEr 3                       ; included 0BRANCH as a high-level word that inserted this code at
0011FEr 3                       ; runtime.
0011FEr 3                       ; """
0011FEr 3               
0011FEr 3                               ; We use the return value on the 65c02 stack to determine
0011FEr 3                               ; where we want to return to.
0011FEr 3  68                           pla
0011FFr 3  85 rr                        sta tmpbranch
001201r 3  68                           pla
001202r 3  85 rr                        sta tmpbranch+1
001204r 3               
001204r 3                               ; See if the flag is zero, which is the whole purpose of
001204r 3                               ; this all
001204r 3  B5 00                        lda 0,x
001206r 3  15 01                        ora 1,x
001208r 3  F0 0F                        beq @zero
00120Ar 3               
00120Ar 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
00120Ar 3                               ; the part between IF and THEN
00120Ar 3  A5 rr                        lda tmpbranch   ; LSB
00120Cr 3  18                           clc
00120Dr 3  69 02                        adc #2
00120Fr 3  85 rr                        sta tmp1
001211r 3  A5 rr                        lda tmpbranch+1 ; MSB
001213r 3  69 00                        adc #0          ; For carry
001215r 3  85 rr                        sta tmp1+1
001217r 3               
001217r 3  80 13                        bra @done
001219r 3               
001219r 3               @zero:
001219r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
001219r 3                               ; the next two bytes. However, the address points to the last
001219r 3                               ; byte of the JSR instruction, not to the next byte afterwards
001219r 3  A0 01                        ldy #1
00121Br 3  B1 rr                        lda (tmpbranch),y
00121Dr 3  85 rr                        sta tmp1
00121Fr 3  C8                           iny
001220r 3  B1 rr                        lda (tmpbranch),y
001222r 3  85 rr                        sta tmp1+1
001224r 3               
001224r 3                               ; Now we have to subtract one byte from the address
001224r 3                               ; given because of the way the 6502 calculates RTS
001224r 3  A5 rr                        lda tmp1
001226r 3  D0 02                        bne @1
001228r 3  C6 rr                        dec tmp1+1
00122Ar 3               @1:
00122Ar 3  C6 rr                        dec tmp1
00122Cr 3               
00122Cr 3               @done:
00122Cr 3                               ; However we got here, tmp1 has the value we push to jump
00122Cr 3                               ; to
00122Cr 3  A5 rr                        lda tmp1+1
00122Er 3  48                           pha             ; MSB first
00122Fr 3  A5 rr                        lda tmp1
001231r 3  48                           pha
001232r 3               
001232r 3                               ; clean up the stack and jump
001232r 3  E8                           inx
001233r 3  E8                           inx
001234r 3               
001234r 3  60                           rts
001235r 3               
001235r 3               
001235r 3               
001235r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001235r 3               ; ## "immediate"  auto  ANS core
001235r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001235r 3                       ; Make sure the most recently defined word is immediate. Will only
001235r 3                       ; affect the last word in the dictionary. Note that if the word is
001235r 3                       ; defined in ROM, this will have no affect, but will not produce an
001235r 3                       ; error message.
001235r 3                       ; """
001235r 3               xt_immediate:
001235r 3  20 rr rr                     jsr current_to_dp
001238r 3  A0 01                        ldy #1          ; offset for status byte
00123Ar 3  B1 rr                        lda (dp),y
00123Cr 3  09 04                        ora #IM        ; make sure bit 7 is set
00123Er 3  91 rr                        sta (dp),y
001240r 3               
001240r 3  60           z_immediate:    rts
001241r 3               
001241r 3               
001241r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
001241r 3               ; ## "input" tested Tali Forth
001241r 3               
001241r 3               xt_input:
001241r 3  CA                           dex
001242r 3  CA                           dex
001243r 3  A9 rr                        lda #<input
001245r 3  95 00                        sta 0,x
001247r 3  A9 rr                        lda #>input
001249r 3  95 01                        sta 1,x
00124Br 3               
00124Br 3  60           z_input:        rts
00124Cr 3               
00124Cr 3               
00124Cr 3               
00124Cr 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
00124Cr 3               ; ## "input>r"  tested  Tali Forth
00124Cr 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
00124Cr 3                       ; toin to the Return Stack. Used by EVALUTE.
00124Cr 3                       ;
00124Cr 3                       ; The naive way of doing
00124Cr 3                       ; this is to push each two-byte variable to the stack in the form of
00124Cr 3                       ;
00124Cr 3                       ;       lda insrc
00124Cr 3                       ;       pha
00124Cr 3                       ;       lda insrc+1
00124Cr 3                       ;       pha
00124Cr 3                       ;
00124Cr 3                       ; for a total of 24 byte of instruction in one direction and later
00124Cr 3                       ; a further 24 bytes to reverse the process. We shorten this at the
00124Cr 3                       ; cost of some speed by assuming the four variables are grouped
00124Cr 3                       ; together on the Zero Page and start with insrc (see definitions.asm
00124Cr 3                       ; for details). The reverse operation is r_to_input. These words must
00124Cr 3                       ; be flagged as Never Native. Uses tmp1
00124Cr 3                       ; """
00124Cr 3               
00124Cr 3               xt_input_to_r:
00124Cr 3                               ; We arrive here with the return address on the top of the
00124Cr 3                               ; 65c02's stack. We need to move it out of the way first
00124Cr 3  68                           pla
00124Dr 3  85 rr                        sta tmp1
00124Fr 3  68                           pla
001250r 3  85 rr                        sta tmp1+1
001252r 3               
001252r 3                               ; This assumes that insrc is the first of eight bytes and
001252r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001252r 3                               ; Page.
001252r 3  A0 07                        ldy #7
001254r 3               @loop:
001254r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
001257r 3  48                           pha
001258r 3  88                           dey
001259r 3  10 F9                        bpl @loop
00125Br 3               
00125Br 3                               ; Restore address for return jump
00125Br 3  A5 rr                        lda tmp1+1
00125Dr 3  48                           pha
00125Er 3  A5 rr                        lda tmp1
001260r 3  48                           pha
001261r 3               
001261r 3  60           z_input_to_r: 	rts
001262r 3               
001262r 3               
001262r 3               
001262r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001262r 3               ; ## "int>name"  auto  Tali Forth
001262r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001262r 3                       ; This is called >NAME in Gforth, but we change it to
001262r 3                       ; INT>NAME to match NAME>INT
001262r 3                       ; """
001262r 3               
001262r 3               xt_int_to_name:
001262r 3  20 rr rr                     jsr underflow_1
001265r 3               
001265r 3                               ; Unfortunately, to find the header, we have to walk through
001265r 3                               ; all of the wordlists. We are running out of tmp variables.
001265r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001265r 3                               ; hold the current wordlist on the data stack. This searches
001265r 3                               ; all of the wordlists in id order.
001265r 3  CA                           dex
001266r 3  CA                           dex
001267r 3  74 00                        stz 0,x
001269r 3  74 01                        stz 1,x
00126Br 3               
00126Br 3               @wordlist_loop:
00126Br 3                               ; A needs to have the current wordlist id in it at
00126Br 3                               ; the top of this loop.
00126Br 3  B5 00                        lda 0,x                 ; Get the current wordlist.
00126Dr 3               
00126Dr 3                               ; Get the DP for that wordlist.
00126Dr 3  0A                           asl                     ; Turn offset into cells offset.
00126Er 3  18                           clc
00126Fr 3  69 06                        adc #wordlists_offset
001271r 3  A8                           tay
001272r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
001274r 3  85 rr                        sta tmp2                ; into tmp2
001276r 3  C8                           iny
001277r 3  B1 rr                        lda (up),y
001279r 3  85 rr                        sta tmp2+1
00127Br 3               
00127Br 3                               ; Check for an empty wordlist (DP will be 0)
00127Br 3  A5 rr                        lda tmp2
00127Dr 3  05 rr                        ora tmp2+1
00127Fr 3  F0 38                        beq @next_wordlist
001281r 3               
001281r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
001283r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
001285r 3  B5 03                        lda 3,x
001287r 3  85 rr                        sta tmp3+1
001289r 3               
001289r 3               @loop:
001289r 3  A0 04                        ldy #4          ; xt is four bytes down
00128Br 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
00128Dr 3  C5 rr                        cmp tmp3
00128Fr 3  D0 07                        bne @no_match
001291r 3               
001291r 3                               ; LSB is the same, now check MSB
001291r 3  C8                           iny
001292r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
001294r 3  C5 rr                        cmp tmp3+1
001296r 3  F0 32                        beq @match
001298r 3               
001298r 3               @no_match:
001298r 3                               ; no match, so we need to get the next word. Next nt is two
001298r 3                               ; bytes down
001298r 3  18                           clc
001299r 3  A5 rr                        lda tmp2
00129Br 3  69 02                        adc #2
00129Dr 3  85 rr                        sta tmp2
00129Fr 3  A5 rr                        lda tmp2+1
0012A1r 3  69 00                        adc #0          ; only care about carry
0012A3r 3  85 rr                        sta tmp2+1
0012A5r 3               
0012A5r 3  A0 00                        ldy #0
0012A7r 3  B1 rr                        lda (tmp2),y
0012A9r 3  48                           pha
0012AAr 3  C8                           iny
0012ABr 3  11 rr                        ora (tmp2),y
0012ADr 3  F0 09                        beq @zero
0012AFr 3               
0012AFr 3                               ; Not zero continue
0012AFr 3  B1 rr                        lda (tmp2),y
0012B1r 3  85 rr                        sta tmp2+1
0012B3r 3  68                           pla
0012B4r 3  85 rr                        sta tmp2
0012B6r 3  80 D1                        bra @loop
0012B8r 3               
0012B8r 3               @zero:
0012B8r 3                               ; if next word is zero, the xt has no nt in this wordlist
0012B8r 3  68                           pla             ; Leftover from above loop
0012B9r 3               
0012B9r 3               @next_wordlist:
0012B9r 3                               ; Move on to the next wordlist.
0012B9r 3  B5 00                        lda 0,x
0012BBr 3  1A                           inc
0012BCr 3  95 00                        sta 0,x
0012BEr 3  C9 0C                        cmp #max_wordlists
0012C0r 3  D0 A9                        bne @wordlist_loop
0012C2r 3               
0012C2r 3                               ; We didn't find it in any of the wordlists.
0012C2r 3                               ; Remove the wordlist id from the stack.
0012C2r 3  E8                           inx
0012C3r 3  E8                           inx
0012C4r 3               
0012C4r 3                               ; We return a zero to indicate that we didn't find it.
0012C4r 3  74 00                        stz 0,x
0012C6r 3  74 01                        stz 1,x
0012C8r 3  80 0A                        bra z_int_to_name
0012CAr 3               
0012CAr 3               @match:
0012CAr 3                               ; We found it. Remove wordlist id from stack.
0012CAr 3  E8                           inx
0012CBr 3  E8                           inx
0012CCr 3               
0012CCr 3                               ; It's a match! Replace TOS with nt
0012CCr 3  A5 rr                        lda tmp2
0012CEr 3  95 00                        sta 0,x
0012D0r 3  A5 rr                        lda tmp2+1
0012D2r 3  95 01                        sta 1,x
0012D4r 3               
0012D4r 3  60           z_int_to_name:  rts
0012D5r 3               
0012D5r 3               
0012D5r 3               
0012D5r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0012D5r 3               ; ## "invert"  auto  ANS core
0012D5r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0012D5r 3               xt_invert:
0012D5r 3  20 rr rr                     jsr underflow_1
0012D8r 3               
0012D8r 3  A9 FF                        lda #$FF
0012DAr 3  55 00                        eor 0,x         ; LSB
0012DCr 3  95 00                        sta 0,x
0012DEr 3               
0012DEr 3  A9 FF                        lda #$FF
0012E0r 3  55 01                        eor 1,x         ; MSB
0012E2r 3  95 01                        sta 1,x
0012E4r 3               
0012E4r 3  60           z_invert:       rts
0012E5r 3               
0012E5r 3               
0012E5r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
0012E5r 3               ; ## "is"  auto  ANS core ext
0012E5r 3                       ; """http://forth-standard.org/standard/core/IS"""
0012E5r 3               
0012E5r 3               xt_is:
0012E5r 3                               ; This is a state aware word with differet behavior
0012E5r 3                               ; when used while compiling vs interpreting.
0012E5r 3                               ; Check STATE
0012E5r 3  A5 rr                        lda state
0012E7r 3  05 rr                        ora state+1
0012E9r 3  F0 0C                        beq @interpreting
0012EBr 3               
0012EBr 3               @compiling:
0012EBr 3                               ; Run ['] to compile the xt of the next word as a literal.
0012EBr 3  20 rr rr                     jsr xt_bracket_tick
0012EEr 3               
0012EEr 3                               ; Postpone DEFER! by compiling a JSR to it.
0012EEr 3  A0 rr                        ldy #>xt_defer_store
0012F0r 3  A9 rr                        lda #<xt_defer_store
0012F2r 3  20 rr rr                     jsr cmpl_subroutine
0012F5r 3               
0012F5r 3  80 06                        bra @done
0012F7r 3               
0012F7r 3               @interpreting:
0012F7r 3  20 rr rr                     jsr xt_tick
0012FAr 3  20 rr rr                     jsr xt_defer_store
0012FDr 3               @done:
0012FDr 3  60           z_is:           rts
0012FEr 3               
0012FEr 3               
0012FEr 3               
0012FEr 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
0012FEr 3               ; ## "j"  auto  ANS core
0012FEr 3                       ; """https://forth-standard.org/standard/core/J
0012FEr 3                       ; Copy second loop counter from Return Stack to stack. Note we use
0012FEr 3                       ; a fudge factor for loop control; see the Control Flow section of
0012FEr 3                       ; the manual for more details.
0012FEr 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
0012FEr 3                       ; on the stack above this (three entries), whereas the ideal Forth
0012FEr 3                       ; implementation would just have two.
0012FEr 3                       ;
0012FEr 3                       ; Make this native compiled for speed
0012FEr 3                       ; """
0012FEr 3               
0012FEr 3               xt_j:
0012FEr 3  CA                           dex
0012FFr 3  CA                           dex
001300r 3               
001300r 3                               ; Get the fudged index off from the stack. It's easier to
001300r 3                               ; do math on the stack directly than to pop and push stuff
001300r 3                               ; around
001300r 3  86 rr                        stx tmpdsp
001302r 3  BA                           tsx
001303r 3               
001303r 3  38                           sec
001304r 3  BD 07 01                     lda $0107,x     ; LSB
001307r 3  FD 09 01                     sbc $0109,x
00130Ar 3  A8                           tay
00130Br 3               
00130Br 3  BD 08 01                     lda $0108,x     ; MSB
00130Er 3  FD 0A 01                     sbc $010A,x
001311r 3               
001311r 3  A6 rr                        ldx tmpdsp
001313r 3               
001313r 3  95 01                        sta 1,x         ; MSB of de-fudged index
001315r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001317r 3               
001317r 3  60           z_j:            rts
001318r 3               
001318r 3               
001318r 3               
001318r 3               ; ## KEY ( -- char ) "Get one character from the input"
001318r 3               ; ## "key"  tested  ANS core
001318r 3               xt_key:
001318r 3                       ; """https://forth-standard.org/standard/core/KEY
001318r 3                       ; Get a single character of input from the vectored
001318r 3                       ; input without echoing.
001318r 3                       ; """
001318r 3  20 rr rr                     jsr key_a               ; returns char in A
00131Br 3               
00131Br 3  CA                           dex
00131Cr 3  CA                           dex
00131Dr 3  95 00                        sta 0,x
00131Fr 3  74 01                        stz 1,x
001321r 3               
001321r 3  60           z_key:          rts
001322r 3               
001322r 3               key_a:
001322r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
001322r 3                       ; 65816, so we have to fake the indirect jump to vector it.
001322r 3                       ; This is depressingly slow. We use this routine internally
001322r 3                       ; to avoid manipulating the Data Stack when we just want a
001322r 3                       ; character
001322r 3  6C rr rr                     jmp (input)             ; JSR/RTS
001325r 3               
001325r 3               
001325r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
001325r 3               ; ## "latestnt"  auto  Tali Forth
001325r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001325r 3                       ; The Gforth version of this word is called LATEST
001325r 3                       ; """
001325r 3               xt_latestnt:
001325r 3  CA                           dex
001326r 3  CA                           dex
001327r 3               
001327r 3  20 rr rr                     jsr current_to_dp
00132Ar 3               
00132Ar 3  A5 rr                        lda dp
00132Cr 3  95 00                        sta 0,x
00132Er 3  A5 rr                        lda dp+1
001330r 3  95 01                        sta 1,x
001332r 3               
001332r 3  60           z_latestnt:     rts
001333r 3               
001333r 3               
001333r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
001333r 3               ; ## "latestxt"  auto  Gforth
001333r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
001333r 3               xt_latestxt:
001333r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001336r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
001339r 3               
001339r 3  60           z_latestxt:     rts
00133Ar 3               
00133Ar 3               
00133Ar 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
00133Ar 3               ; ## "leave"  auto  ANS core
00133Ar 3                       ; """https://forth-standard.org/standard/core/LEAVE
00133Ar 3                       ; Note that this does not work with anything but a DO/LOOP in
00133Ar 3                       ; contrast to other versions such as discussed at
00133Ar 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
00133Ar 3                       ;
00133Ar 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
00133Ar 3                       ; See the Control Flow section in the manual for details of how this works.
00133Ar 3                       ; This must be native compile and not IMMEDIATE
00133Ar 3                       ; """
00133Ar 3               
00133Ar 3               xt_leave:
00133Ar 3                               ; We dump the limit/start entries off the Return Stack
00133Ar 3                               ; (four bytes)
00133Ar 3  68                           pla
00133Br 3  68                           pla
00133Cr 3  68                           pla
00133Dr 3  68                           pla
00133Er 3               
00133Er 3  60                           rts             ; this must be compiled, so keep before z_leave
00133Fr 3               z_leave:                        ; not reached, not compiled
00133Fr 3               
00133Fr 3               
00133Fr 3               
00133Fr 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
00133Fr 3               ; ## "["  auto  ANS core
00133Fr 3                       ; """https://forth-standard.org/standard/core/Bracket
00133Fr 3                       ; This is an immediate and compile-only word
00133Fr 3                       ; """
00133Fr 3               xt_left_bracket:
00133Fr 3  64 rr                        stz state
001341r 3  64 rr                        stz state+1
001343r 3               
001343r 3  60           z_left_bracket: rts
001344r 3               
001344r 3               
001344r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
001344r 3               ; ## "<#"  auto  ANS core
001344r 3                       ; """https://forth-standard.org/standard/core/num-start
001344r 3                       ; Start the process to create pictured numeric output.
001344r 3                       ;
001344r 3                       ; The new
001344r 3                       ; string is constructed from back to front, saving the new character
001344r 3                       ; at the beginning of the output string. Since we use PAD as a
001344r 3                       ; starting address and work backward (!), the string is constructed
001344r 3                       ; in the space between the end of the Dictionary (as defined by CP)
001344r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
001344r 3                       ; programs don't fool around with the PAD but still use its address.
001344r 3                       ; Based on pForth
001344r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
001344r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
001344r 3                       ; internal variable tohold instead of HLD.
001344r 3                       ; """
001344r 3               xt_less_number_sign:
001344r 3  20 rr rr                     jsr xt_pad      ; ( addr )
001347r 3               
001347r 3  B5 00                        lda 0,x
001349r 3  85 rr                        sta tohold
00134Br 3  B5 01                        lda 1,x
00134Dr 3  85 rr                        sta tohold+1
00134Fr 3               
00134Fr 3  E8                           inx
001350r 3  E8                           inx
001351r 3               
001351r 3               z_less_number_sign:
001351r 3  60                           rts
001352r 3               
001352r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
001352r 3               ; ## "<"  auto  ANS core
001352r 3                       ; """https://forth-standard.org/standard/core/less"""
001352r 3               
001352r 3               xt_less_than:
001352r 3  20 rr rr                     jsr underflow_2
001355r 3               
001355r 3  A0 00                        ldy #0          ; default false
001357r 3  20 rr rr                     jsr compare_16bit
00135Ar 3               
00135Ar 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
00135Ar 3  F0 03                        beq @false
00135Cr 3  30 01                        bmi @false
00135Er 3               
00135Er 3                               ; true
00135Er 3  88                           dey
00135Fr 3               @false:
00135Fr 3  98                           tya
001360r 3               
001360r 3  E8                           inx
001361r 3  E8                           inx
001362r 3  95 00                        sta 0,x
001364r 3  95 01                        sta 1,x
001366r 3               
001366r 3  60           z_less_than:    rts
001367r 3               
001367r 3               
001367r 3               
001367r 3               ; ## LIST ( scr# -- ) "List the given screen"
001367r 3               ; ## "list"  tested  ANS block ext
001367r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001367r 3               
001367r 3               xt_list:
001367r 3  20 rr rr                     jsr underflow_1
00136Ar 3               
00136Ar 3                               ; Save the screen number in SCR
00136Ar 3  20 rr rr                     jsr xt_scr
00136Dr 3  20 rr rr                     jsr xt_store
001370r 3               
001370r 3                               ; Use L from the editor-wordlist to display the screen.
001370r 3  20 rr rr                     jsr xt_editor_l
001373r 3               
001373r 3  60           z_list:         rts
001374r 3               
001374r 3               
001374r 3               
001374r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
001374r 3               ; ## "literal"  auto  ANS core
001374r 3                       ; """https://forth-standard.org/standard/core/LITERAL
001374r 3                       ; Compile-only word to store TOS so that it is pushed on stack
001374r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
001374r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
001374r 3                       ;
001374r 3                       ; Note the cmpl_ routines use TMPTOS
001374r 3                       ; """
001374r 3               xt_literal:
001374r 3  20 rr rr                     jsr underflow_1
001377r 3               
001377r 3  A0 rr                        ldy #>literal_runtime
001379r 3  A9 rr                        lda #<literal_runtime
00137Br 3  20 rr rr                     jsr cmpl_subroutine
00137Er 3               
00137Er 3                               ; Compile the value that is to be pushed on the Stack during
00137Er 3                               ; runtime
00137Er 3  20 rr rr                     jsr xt_comma
001381r 3               
001381r 3  60           z_literal:      rts
001382r 3               
001382r 3               literal_runtime:
001382r 3               
001382r 3                               ; During runtime, we push the value following this word back
001382r 3                               ; on the Data Stack. The subroutine jump that brought us
001382r 3                               ; here put the address to return to on the Return Stack -
001382r 3                               ; this points to the data we need to get. This routine is
001382r 3                               ; also called (LITERAL) in some Forths
001382r 3  CA                           dex
001383r 3  CA                           dex
001384r 3               
001384r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
001384r 3                               ; so we are actually popping the address-1 of the literal
001384r 3  68                           pla             ; LSB
001385r 3  85 rr                        sta tmp1
001387r 3  68                           pla             ; MSB
001388r 3  85 rr                        sta tmp1+1
00138Ar 3               
00138Ar 3                               ; Fetch the actual literal value and push it on Data stack
00138Ar 3  A0 01                        ldy #1
00138Cr 3  B1 rr                        lda (tmp1),y    ; LSB
00138Er 3  95 00                        sta 0,x
001390r 3  C8                           iny
001391r 3  B1 rr                        lda (tmp1),y    ; MSB
001393r 3  95 01                        sta 1,x
001395r 3               
001395r 3                               ; Adjust return address and push back on the Return Stack
001395r 3  98                           tya
001396r 3  18                           clc
001397r 3  65 rr                        adc tmp1
001399r 3  A8                           tay
00139Ar 3  A5 rr                        lda tmp1+1
00139Cr 3  69 00                        adc #0
00139Er 3  48                           pha
00139Fr 3  5A                           phy
0013A0r 3               
0013A0r 3  60                           rts
0013A1r 3               
0013A1r 3               
0013A1r 3               
0013A1r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
0013A1r 3               ; ## "load"  auto  ANS block
0013A1r 3                       ; """https://forth-standard.org/standard/block/LOAD
0013A1r 3                       ;
0013A1r 3                       ; Note: LOAD current works because there is only one buffer.
0013A1r 3                       ; If/when multiple buffers are supported, we'll have to deal
0013A1r 3                       ; with the fact that it might re-load the old block into a
0013A1r 3                       ; different buffer.
0013A1r 3                       ; """
0013A1r 3               
0013A1r 3               xt_load:
0013A1r 3  20 rr rr                     jsr underflow_1
0013A4r 3               
0013A4r 3                               ; Save the current value of BLK on the return stack.
0013A4r 3  A0 01                        ldy #blk_offset+1
0013A6r 3  B1 rr                        lda (up),y
0013A8r 3  48                           pha
0013A9r 3  88                           dey
0013AAr 3  B1 rr                        lda (up),y
0013ACr 3  48                           pha
0013ADr 3               
0013ADr 3                               ; Set BLK to the given block/screen number.
0013ADr 3  B5 00                        lda 0,x
0013AFr 3  91 rr                        sta (up),y
0013B1r 3  C8                           iny
0013B2r 3  B5 01                        lda 1,x
0013B4r 3  91 rr                        sta (up),y
0013B6r 3               
0013B6r 3                               ; Load that block into a buffer
0013B6r 3  20 rr rr                     jsr xt_block
0013B9r 3               
0013B9r 3                               ; Put 1024 on the stack for the screen length.
0013B9r 3  CA                           dex
0013BAr 3  CA                           dex
0013BBr 3  A9 04                        lda #4
0013BDr 3  95 01                        sta 1,x
0013BFr 3  74 00                        stz 0,x
0013C1r 3               
0013C1r 3                               ; Jump to a special evluate target. This bypasses the underflow
0013C1r 3                               ; check and skips the zeroing of BLK.
0013C1r 3  20 rr rr                     jsr load_evaluate
0013C4r 3               
0013C4r 3                               ; Restore the value of BLK from before the LOAD command.
0013C4r 3  A0 00                        ldy #blk_offset
0013C6r 3  68                           pla
0013C7r 3  91 rr                        sta (up),y
0013C9r 3  C8                           iny
0013CAr 3  68                           pla
0013CBr 3  91 rr                        sta (up),y
0013CDr 3               
0013CDr 3                               ; If BLK is not zero, read it back into the buffer.
0013CDr 3                               ; A still has MSB
0013CDr 3  88                           dey
0013CEr 3  11 rr                        ora (up),y
0013D0r 3  F0 12                        beq @done
0013D2r 3               
0013D2r 3                               ; The block needs to be read back into the buffer.
0013D2r 3  CA                           dex
0013D3r 3  CA                           dex
0013D4r 3  A0 00                        ldy #blk_offset
0013D6r 3  B1 rr                        lda (up),y
0013D8r 3  95 00                        sta 0,x
0013DAr 3  C8                           iny
0013DBr 3  B1 rr                        lda (up),y
0013DDr 3  95 01                        sta 1,x
0013DFr 3  20 rr rr                     jsr xt_block
0013E2r 3               
0013E2r 3                               ; Drop the buffer address.
0013E2r 3  E8                           inx
0013E3r 3  E8                           inx
0013E4r 3               
0013E4r 3               @done:
0013E4r 3  60           z_load:         rts
0013E5r 3               
0013E5r 3               
0013E5r 3               
0013E5r 3               ; ## LOOP ( -- ) "Finish loop construct"
0013E5r 3               ; ## "loop"  auto  ANS core
0013E5r 3                       ; """https://forth-standard.org/standard/core/LOOP
0013E5r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
0013E5r 3                       ; the stack and then call +LOOP.
0013E5r 3                       ;
0013E5r 3                       ; In Forth, this is
0013E5r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
0013E5r 3                       ;       IMMEDIATE ; COMPILE-ONLY
0013E5r 3                       ; """
0013E5r 3               xt_loop:
0013E5r 3                               ; Have the finished word push 1 on the stack
0013E5r 3  A0 rr                        ldy #>xt_one
0013E7r 3  A9 rr                        lda #<xt_one
0013E9r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
0013ECr 3               
0013ECr 3               
0013ECr 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
0013ECr 3               ; ## "+loop"  auto  ANS core
0013ECr 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
0013ECr 3                       ;
0013ECr 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
0013ECr 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
0013ECr 3                       ;       COMPILE-ONLY
0013ECr 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
0013ECr 3                       ; address for looping as TOS and the address for aborting the loop
0013ECr 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
0013ECr 3                       ; DO and the Control Flow section of the manual for details).
0013ECr 3                       ; """
0013ECr 3               
0013ECr 3               xt_plus_loop:
0013ECr 3                               ; Compile the run-time part. We do this with a short loop
0013ECr 3                               ; and not a call to COMPILE, because it has to be natively
0013ECr 3                               ; coded anyway.
0013ECr 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
0013EEr 3  5A                           phy             ; save counter to adjust CP
0013EFr 3               @1:
0013EFr 3  B9 rr rr                     lda plus_loop_runtime,y
0013F2r 3  91 rr                        sta (cp),y
0013F4r 3  88                           dey
0013F5r 3  10 F8                        bpl @1
0013F7r 3               
0013F7r 3                               ; Adjust CP
0013F7r 3  68                           pla
0013F8r 3  18                           clc
0013F9r 3  65 rr                        adc cp
0013FBr 3  85 rr                        sta cp
0013FDr 3  A5 rr                        lda cp+1
0013FFr 3  69 00                        adc #0          ; only need carry
001401r 3  85 rr                        sta cp+1
001403r 3               
001403r 3                               ; The address we need to loop back to is TOS. Store it so
001403r 3                               ; the runtime part of +LOOP jumps back up there
001403r 3  20 rr rr                     jsr xt_comma
001406r 3               
001406r 3                               ; Compile an UNLOOP for when we're all done. This is a series
001406r 3                               ; of six PLA, so we just do it here instead jumping around
001406r 3                               ; all over the place
001406r 3  A9 68                        lda #$68                ; opcode for PLA
001408r 3  A0 06                        ldy #6
00140Ar 3               @2:
00140Ar 3  91 rr                        sta (cp),y
00140Cr 3  88                           dey
00140Dr 3  10 FB                        bpl @2
00140Fr 3               
00140Fr 3                               ; Adjust CP
00140Fr 3  A9 06                        lda #6
001411r 3  18                           clc
001412r 3  65 rr                        adc cp
001414r 3  85 rr                        sta cp
001416r 3  A5 rr                        lda cp+1
001418r 3  69 00                        adc #0                  ; only need carry
00141Ar 3  85 rr                        sta cp+1
00141Cr 3               
00141Cr 3                               ; Complete compile of DO/?DO by replacing the six
00141Cr 3                               ; dummy bytes by PHA instructions. The address where
00141Cr 3                               ; they are located is on the Data Stack
00141Cr 3  B5 00                        lda 0,x
00141Er 3  85 rr                        sta tmp1
001420r 3  B5 01                        lda 1,x
001422r 3  85 rr                        sta tmp1+1
001424r 3  E8                           inx
001425r 3  E8                           inx
001426r 3               
001426r 3                               ; Because of the way that CP works, we don't have to save
001426r 3                               ; CP, but CP-1
001426r 3  A5 rr                        lda cp
001428r 3  38                           sec
001429r 3  E9 01                        sbc #1
00142Br 3  85 rr                        sta tmp2
00142Dr 3  A5 rr                        lda cp+1
00142Fr 3  E9 00                        sbc #0
001431r 3  85 rr                        sta tmp2+1
001433r 3               
001433r 3                               ; now compile this in the DO/?DO routine
001433r 3  A0 00                        ldy #0
001435r 3               
001435r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001437r 3  91 rr                        sta (tmp1),y
001439r 3  C8                           iny
00143Ar 3  A5 rr                        lda tmp2+1      ; MSB
00143Cr 3  91 rr                        sta (tmp1),y
00143Er 3  C8                           iny
00143Fr 3  A9 48                        lda #$48        ; Opcode for PHA
001441r 3  91 rr                        sta (tmp1),y
001443r 3  C8                           iny
001444r 3               
001444r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001446r 3  91 rr                        sta (tmp1),y
001448r 3  C8                           iny
001449r 3  A5 rr                        lda tmp2        ; LSB
00144Br 3  91 rr                        sta (tmp1),y
00144Dr 3  C8                           iny
00144Er 3  A9 48                        lda #$48        ; Opcode for PHA
001450r 3  91 rr                        sta (tmp1),y
001452r 3               z_loop:
001452r 3  60           z_plus_loop:    rts
001453r 3               
001453r 3               
001453r 3               plus_loop_runtime:
001453r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001453r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001453r 3                       ; loop control so we can test with the Overflow Flag. See
001453r 3                       ; the Control Flow section of the manual for details.
001453r 3                       ; The step value is TOS in the loop. This
001453r 3                       ; must always be native compiled. In some Forths, this is a separate
001453r 3                       ; word called (+LOOP) or (LOOP)
001453r 3                       ; """
001453r 3               
001453r 3  18                           clc
001454r 3  68                           pla             ; LSB of index
001455r 3  75 00                        adc 0,x         ; LSB of step
001457r 3  A8                           tay             ; temporary storage of LSB
001458r 3               
001458r 3  B8                           clv
001459r 3  68                           pla             ; MSB of index
00145Ar 3  75 01                        adc 1,x         ; MSB of step
00145Cr 3  48                           pha             ; put MSB of index back on stack
00145Dr 3               
00145Dr 3  98                           tya             ; put LSB of index back on stack
00145Er 3  48                           pha
00145Fr 3               
00145Fr 3  E8                           inx             ; dump step from TOS
001460r 3  E8                           inx
001461r 3               
001461r 3                               ; If V flag is set, we're done looping and continue
001461r 3                               ; after the +LOOP instruction
001461r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001463r 3               
001463r 3               @hack:          ; This is why this routine must be natively compiled: We
001463r 3                               ; compile the opcode for JMP here without an address to
001463r 3                               ; go to, which is added by the next next instruction of
001463r 3                               ; LOOP/+LOOP during compile time
001463r 3  4C                           .byte $4C
001464r 3               
001464r 3               plus_loop_runtime_end:
001464r 3               
001464r 3               
001464r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001464r 3               ; ## "lshift"  auto  ANS core
001464r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001464r 3               
001464r 3               xt_lshift:
001464r 3  20 rr rr                     jsr underflow_2
001467r 3               
001467r 3                               ; max shift 16 times
001467r 3  B5 00                        lda 0,x
001469r 3  29 0F                        and #%00001111
00146Br 3  F0 08                        beq @done
00146Dr 3               
00146Dr 3  A8                           tay
00146Er 3               
00146Er 3               @loop:
00146Er 3  16 02                        asl 2,x
001470r 3  36 03                        rol 3,x
001472r 3  88                           dey
001473r 3  D0 F9                        bne @loop
001475r 3               
001475r 3               @done:
001475r 3  E8                           inx
001476r 3  E8                           inx
001477r 3               
001477r 3  60           z_lshift:       rts
001478r 3               
001478r 3               
001478r 3               
001478r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001478r 3               ; ## "m*"  auto  ANS core
001478r 3                       ; """https://forth-standard.org/standard/core/MTimes
001478r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001478r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001478r 3                       ;
001478r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001478r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001478r 3                       ; """
001478r 3               
001478r 3               xt_m_star:
001478r 3  20 rr rr                     jsr underflow_2
00147Br 3               
00147Br 3                               ; figure out the sign
00147Br 3  B5 01                        lda 1,x         ; MSB of n1
00147Dr 3  55 03                        eor 3,x         ; MSB of n2
00147Fr 3               
00147Fr 3                               ; UM* uses all kinds of temporary variables so we don't
00147Fr 3                               ; risk a conflict but just take the cycle hit and push
00147Fr 3                               ; this to the stack
00147Fr 3  48                           pha
001480r 3               
001480r 3                               ; get the absolute value of both numbers so we can feed
001480r 3                               ; them to UM*, which does the real work
001480r 3  20 rr rr                     jsr xt_abs
001483r 3  20 rr rr                     jsr xt_swap
001486r 3  20 rr rr                     jsr xt_abs
001489r 3               
001489r 3  20 rr rr                     jsr xt_um_star          ; ( d )
00148Cr 3               
00148Cr 3                               ; handle the sign
00148Cr 3  68                           pla
00148Dr 3  10 03                        bpl @done
00148Fr 3               
00148Fr 3  20 rr rr                     jsr xt_dnegate
001492r 3               @done:
001492r 3  60           z_m_star:       rts
001493r 3               
001493r 3               
001493r 3               
001493r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001493r 3               ; ## "marker"  auto  ANS core ext
001493r 3                       ; """https://forth-standard.org/standard/core/MARKER
001493r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001493r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001493r 3                       ; Run the named word at a later time to restore all of the wordlists
001493r 3                       ; to their state when the word was created with marker.  Any words
001493r 3                       ; created after the marker (including the marker) will be forgotten.
001493r 3                       ;
001493r 3                       ; To do this, we want to end up with something that jumps to a
001493r 3                       ; run-time component with a link to the original CP and DP values:
001493r 3                       ;
001493r 3                       ;       jsr marker_runtime
001493r 3                       ;       <Original CP MSB>
001493r 3                       ;       <Original CP LSB>
001493r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001493r 3                       ;       <Original DP LSB>
001493r 3                       ;       < USER variables from offset 4 to 39 >
001493r 3                       ;
001493r 3                       ;       The user variables include:
001493r 3                       ;       CURRENT (byte variable)
001493r 3                       ;       <All wordlists> (currently 12) (cell array)
001493r 3                       ;       <#ORDER> (byte variable)
001493r 3                       ;       <All search order> (currently 9) (byte array)
001493r 3                       ;
001493r 3                       ; This code uses tmp1 and tmp2
001493r 3                       ; """
001493r 3               
001493r 3               xt_marker:
001493r 3                               ; Before we do anything, we need to save CP, which
001493r 3                               ; after all is the whole point of this operation. CREATE
001493r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001493r 3                               ; to the stack
001493r 3  20 rr rr                     jsr current_to_dp
001496r 3               
001496r 3  A5 rr                        lda dp
001498r 3  48                           pha
001499r 3  A5 rr                        lda dp+1
00149Br 3  48                           pha
00149Cr 3               
00149Cr 3  A5 rr                        lda cp
00149Er 3  48                           pha
00149Fr 3  A5 rr                        lda cp+1
0014A1r 3  48                           pha
0014A2r 3               
0014A2r 3  20 rr rr                     jsr xt_create
0014A5r 3               
0014A5r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
0014A5r 3                               ; we have to replace by a jump to marker_runtime. We back up
0014A5r 3                               ; two bytes and then overwrite the address
0014A5r 3  A5 rr                        lda cp          ; LSB
0014A7r 3  38                           sec
0014A8r 3  E9 02                        sbc #2
0014AAr 3  85 rr                        sta cp
0014ACr 3               
0014ACr 3  A5 rr                        lda cp+1        ; MSB
0014AEr 3  E9 00                        sbc #0          ; we only care about the borrow
0014B0r 3  85 rr                        sta cp+1
0014B2r 3               
0014B2r 3                               ; Add the address of the runtime component
0014B2r 3  A0 rr                        ldy #>marker_runtime
0014B4r 3  A9 rr                        lda #<marker_runtime
0014B6r 3  20 rr rr                     jsr cmpl_word
0014B9r 3               
0014B9r 3                               ; Add original CP as payload
0014B9r 3  7A                           ply                     ; MSB
0014BAr 3  68                           pla                     ; LSB
0014BBr 3  20 rr rr                     jsr cmpl_word
0014BEr 3               
0014BEr 3                               ; Add original DP as payload
0014BEr 3  7A                           ply                     ; MSB
0014BFr 3  68                           pla                     ; LSB
0014C0r 3  20 rr rr                     jsr cmpl_word
0014C3r 3               
0014C3r 3                               ; Add the user variables for the wordlists and search order.
0014C3r 3                               ; We're compiling them in byte order.
0014C3r 3  A0 04                        ldy #4                  ; Start at CURRENT
0014C5r 3               @marker_loop:
0014C5r 3  B1 rr                        lda (up),y
0014C7r 3  20 rr rr                     jsr cmpl_a
0014CAr 3  C8                           iny
0014CBr 3  98                           tya
0014CCr 3  C9 28                        cmp #40                 ; One past the end of the search order.
0014CEr 3  D0 F5                        bne @marker_loop
0014D0r 3               
0014D0r 3  60           z_marker:       rts
0014D1r 3               
0014D1r 3               
0014D1r 3               
0014D1r 3               marker_runtime:
0014D1r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
0014D1r 3                       ; when this marker was defined. We arrive here with the return
0014D1r 3                       ; address on the Return Stack in the usual 65c02 format
0014D1r 3                       ; """
0014D1r 3               
0014D1r 3                               ; Get the address of the string address off the stack and
0014D1r 3                               ; increase by one because of the RTS mechanics
0014D1r 3  68                           pla
0014D2r 3  85 rr                        sta tmp1        ; LSB of address
0014D4r 3  68                           pla
0014D5r 3  85 rr                        sta tmp1+1      ; MSB of address
0014D7r 3               
0014D7r 3  E6 rr                        inc tmp1
0014D9r 3  D0 02                        bne @1
0014DBr 3  E6 rr                        inc tmp1+1
0014DDr 3               @1:
0014DDr 3  A0 00                        ldy #0
0014DFr 3               
0014DFr 3                               ; CP was stored first
0014DFr 3  B1 rr                        lda (tmp1),y
0014E1r 3  85 rr                        sta cp
0014E3r 3  C8                           iny
0014E4r 3  B1 rr                        lda (tmp1),y
0014E6r 3  85 rr                        sta cp+1
0014E8r 3               
0014E8r 3                               ; Next was DP
0014E8r 3  C8                           iny
0014E9r 3  B1 rr                        lda (tmp1),y
0014EBr 3  85 rr                        sta dp
0014EDr 3  C8                           iny
0014EEr 3  B1 rr                        lda (tmp1),y
0014F0r 3  85 rr                        sta dp+1
0014F2r 3               
0014F2r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
0014F2r 3                               ; to start restoring the wordlists and search order.
0014F2r 3  A0 04                        ldy #4
0014F4r 3               
0014F4r 3               @marker_restore_loop:
0014F4r 3                               ; Copy from the dictionary back on top of the wordlists
0014F4r 3                               ; and search order.
0014F4r 3  B1 rr                        lda (tmp1), y
0014F6r 3  91 rr                        sta (up), y
0014F8r 3  C8                           iny
0014F9r 3  98                           tya
0014FAr 3  C9 28                        cmp #40                 ; One past the end of the search order.
0014FCr 3  D0 F6                        bne @marker_restore_loop
0014FEr 3               
0014FEr 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001501r 3               
001501r 3                               ; The return instruction takes us back to the original caller
001501r 3  60                           rts
001502r 3               
001502r 3               
001502r 3               
001502r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001502r 3               ; ## "max"  auto  ANS core
001502r 3                       ; """https://forth-standard.org/standard/core/MAX
001502r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001502r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001502r 3                       ; Flag indicates which number is larger. See also
001502r 3                       ; http://6502.org/tutorials/compare_instructions.html and
001502r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001502r 3                       ; """
001502r 3               
001502r 3               xt_max:
001502r 3  20 rr rr                     jsr underflow_2
001505r 3               
001505r 3                               ; Compare LSB. We do this first to set the carry flag
001505r 3  B5 00                        lda 0,x         ; LSB of TOS
001507r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001509r 3               
001509r 3  B5 01                        lda 1,x         ; MSB of TOS
00150Br 3  F5 03                        sbc 3,x         ; MSB of NOS
00150Dr 3  50 02                        bvc @no_overflow
00150Fr 3               
00150Fr 3                               ; handle overflow, because we use signed numbers
00150Fr 3  49 80                        eor #$80        ; complement negative flag
001511r 3               
001511r 3               @no_overflow:
001511r 3                               ; if negative, NOS is larger and needs to be kept
001511r 3  30 08                        bmi @keep_nos
001513r 3               
001513r 3                               ; move TOS to NOS
001513r 3  B5 00                        lda 0,x
001515r 3  95 02                        sta 2,x
001517r 3  B5 01                        lda 1,x
001519r 3  95 03                        sta 3,x
00151Br 3               
00151Br 3               @keep_nos:
00151Br 3  E8                           inx
00151Cr 3  E8                           inx
00151Dr 3               
00151Dr 3  60           z_max:          rts
00151Er 3               
00151Er 3               
00151Er 3               
00151Er 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
00151Er 3               ; ## "min"  auto  ANS core
00151Er 3                       ; """https://forth-standard.org/standard/core/MIN
00151Er 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
00151Er 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
00151Er 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
00151Er 3                       ; """
00151Er 3               
00151Er 3               xt_min:
00151Er 3  20 rr rr                     jsr underflow_2
001521r 3               
001521r 3                               ; compare LSB. We do this first to set the carry flag
001521r 3  B5 00                        lda 0,x         ; LSB of TOS
001523r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001525r 3               
001525r 3  B5 01                        lda 1,x         ; MSB of TOS
001527r 3  F5 03                        sbc 3,x         ; MSB of NOS
001529r 3  50 02                        bvc @no_overflow
00152Br 3               
00152Br 3                               ; handle overflow because we use signed numbers
00152Br 3  49 80                        eor #$80
00152Dr 3               
00152Dr 3               @no_overflow:
00152Dr 3                               ; if negative, NOS is larger and needs to be dumped
00152Dr 3  10 08                        bpl @keep_nos
00152Fr 3               
00152Fr 3                               ; move TOS to NOS
00152Fr 3  B5 00                        lda 0,x
001531r 3  95 02                        sta 2,x
001533r 3  B5 01                        lda 1,x
001535r 3  95 03                        sta 3,x
001537r 3               
001537r 3               @keep_nos:
001537r 3  E8                           inx
001538r 3  E8                           inx
001539r 3               
001539r 3  60           z_min:          rts
00153Ar 3               
00153Ar 3               
00153Ar 3               
00153Ar 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
00153Ar 3               ; ## "-"  auto  ANS core
00153Ar 3                       ; """https://forth-standard.org/standard/core/Minus"""
00153Ar 3               xt_minus:
00153Ar 3  20 rr rr                     jsr underflow_2
00153Dr 3               
00153Dr 3  38                           sec
00153Er 3  B5 02                        lda 2,x         ; LSB
001540r 3  F5 00                        sbc 0,x
001542r 3  95 02                        sta 2,x
001544r 3               
001544r 3  B5 03                        lda 3,x         ; MSB
001546r 3  F5 01                        sbc 1,x
001548r 3  95 03                        sta 3,x
00154Ar 3               
00154Ar 3  E8                           inx
00154Br 3  E8                           inx
00154Cr 3               
00154Cr 3  60           z_minus:        rts
00154Dr 3               
00154Dr 3               
00154Dr 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
00154Dr 3               ; ## "-leading"  auto  Tali String
00154Dr 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
00154Dr 3                       ; """
00154Dr 3               
00154Dr 3               xt_minus_leading:
00154Dr 3  20 rr rr                     jsr underflow_2
001550r 3               
001550r 3               @loop:
001550r 3                               ; Quit if we were given an empty string. This also terminates
001550r 3                               ; the main loop
001550r 3  B5 00                        lda 0,x
001552r 3  15 01                        ora 1,x
001554r 3  F0 0F                        beq @done
001556r 3               
001556r 3  A1 02                        lda (2,x)               ; get first character
001558r 3  20 rr rr                     jsr is_whitespace
00155Br 3  90 08                        bcc @done
00155Dr 3               
00155Dr 3                               ; It's whitespace, move one down
00155Dr 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001560r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001563r 3               
001563r 3  80 EB                        bra @loop
001565r 3               @done:
001565r 3               z_minus_leading:
001565r 3  60                           rts
001566r 3               
001566r 3               
001566r 3               
001566r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001566r 3               ; ## "-trailing"  auto  ANS string
001566r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001566r 3                       ; Remove trailing spaces
001566r 3                       ; """
001566r 3               
001566r 3               xt_minus_trailing:
001566r 3  20 rr rr                     jsr underflow_2
001569r 3               
001569r 3                               ; if length entry is zero, return a zero and leave the
001569r 3                               ; address part untouched
001569r 3  B5 00                        lda 0,x         ; LSB of n
00156Br 3  15 01                        ora 1,x         ; MSB of n
00156Dr 3  F0 33                        beq @done
00156Fr 3               
00156Fr 3                               ; Compute address of last char in tmp1 as
00156Fr 3                               ; addr + u1 - 1
00156Fr 3               
00156Fr 3                               ; addr + u1
00156Fr 3  18                           clc
001570r 3  B5 02                        lda 2,x         ; LSB of addr
001572r 3  75 00                        adc 0,x
001574r 3  85 rr                        sta tmp1
001576r 3  B5 03                        lda 3,x         ; MSB of addr
001578r 3  75 01                        adc 1,x
00157Ar 3  85 rr                        sta tmp1+1
00157Cr 3               
00157Cr 3                               ; - 1
00157Cr 3  A5 rr                        lda tmp1
00157Er 3  D0 02                        bne @1
001580r 3  C6 rr                        dec tmp1+1
001582r 3               @1:
001582r 3  C6 rr                        dec tmp1
001584r 3               
001584r 3               @loop:
001584r 3                               ; While spaces are found, move tmp1 backwards and
001584r 3                               ; decrease the count on the data stack.
001584r 3  B2 rr                        lda (tmp1)
001586r 3  C9 20                        cmp #AscSP
001588r 3  D0 18                        bne @done
00158Ar 3               
00158Ar 3                               ; Move back one address.
00158Ar 3  A5 rr                        lda tmp1
00158Cr 3  D0 02                        bne @2
00158Er 3  C6 rr                        dec tmp1+1
001590r 3               @2:
001590r 3  C6 rr                        dec tmp1
001592r 3               
001592r 3                               ; Decrement count by one.
001592r 3  B5 00                        lda 0,x
001594r 3  D0 02                        bne @3
001596r 3  D6 01                        dec 1,x
001598r 3               @3:
001598r 3  D6 00                        dec 0,x
00159Ar 3               
00159Ar 3                               ; Check if there are any characters left.
00159Ar 3  B5 00                        lda 0,x
00159Cr 3  15 01                        ora 1,x
00159Er 3  F0 02                        beq @done       ; Count has reached zero - we're done!
0015A0r 3               
0015A0r 3  80 E2                        bra @loop
0015A2r 3               
0015A2r 3               @done:
0015A2r 3               z_minus_trailing:
0015A2r 3  60                           rts
0015A3r 3               
0015A3r 3               
0015A3r 3               
0015A3r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
0015A3r 3               ; ## "mod"  auto  ANS core
0015A3r 3                       ; """https://forth-standard.org/standard/core/MOD
0015A3r 3                       ;
0015A3r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
0015A3r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
0015A3r 3                       ; """
0015A3r 3               xt_mod:
0015A3r 3  20 rr rr                     jsr underflow_2
0015A6r 3               
0015A6r 3  20 rr rr                     jsr xt_slash_mod
0015A9r 3               
0015A9r 3  E8                           inx             ; DROP
0015AAr 3  E8                           inx
0015ABr 3               z_mod:
0015ABr 3  60                           rts
0015ACr 3               
0015ACr 3               
0015ACr 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
0015ACr 3               ; ## "move"  auto  ANS core
0015ACr 3                       ; """https://forth-standard.org/standard/core/MOVE
0015ACr 3                       ; Copy u "address units" from addr1 to addr2. Since our address
0015ACr 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
0015ACr 3                       ; is actually the only one of these three words that is in the CORE
0015ACr 3                       ; set.
0015ACr 3                       ;
0015ACr 3                       ; This word must not be natively compiled.
0015ACr 3                       ; """
0015ACr 3               
0015ACr 3               xt_move:
0015ACr 3                               ; We let CMOVE and CMOVE> check if there is underflow or
0015ACr 3                               ; we've been told to copy zero bytes
0015ACr 3               
0015ACr 3                               ; compare MSB first
0015ACr 3  B5 03                        lda 3,x                 ; MSB of addr2
0015AEr 3  D5 05                        cmp 5,x                 ; MSB of addr1
0015B0r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
0015B2r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
0015B4r 3               
0015B4r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
0015B7r 3               
0015B7r 3               @lsb:
0015B7r 3                               ; MSB were equal, so do the whole thing over with LSB
0015B7r 3  B5 02                        lda 2,x                 ; LSB of addr2
0015B9r 3  D5 04                        cmp 4,x                 ; LSB of addr1
0015BBr 3  F0 08                        beq @equal              ; LSB is equal as well
0015BDr 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
0015BFr 3               
0015BFr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
0015C2r 3               
0015C2r 3               @to_move_up:
0015C2r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
0015C5r 3               @equal:
0015C5r 3                               ; drop three entries from Data Stack
0015C5r 3  8A                           txa
0015C6r 3  18                           clc
0015C7r 3  69 06                        adc #6
0015C9r 3  AA                           tax
0015CAr 3               
0015CAr 3  60           z_move:         rts
0015CBr 3               
0015CBr 3               
0015CBr 3               
0015CBr 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
0015CBr 3               ; ## "name>int"  tested  Gforth
0015CBr 3                       ; """See
0015CBr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0015CBr 3                       ; """
0015CBr 3               
0015CBr 3               xt_name_to_int:
0015CBr 3  20 rr rr                     jsr underflow_1
0015CEr 3               
0015CEr 3                               ; The xt starts four bytes down from the nt
0015CEr 3  B5 00                        lda 0,x
0015D0r 3  18                           clc
0015D1r 3  69 04                        adc #4
0015D3r 3  85 rr                        sta tmp3
0015D5r 3               
0015D5r 3  B5 01                        lda 1,x
0015D7r 3  90 01                        bcc @done
0015D9r 3  1A                           inc
0015DAr 3               @done:
0015DAr 3  85 rr                        sta tmp3+1
0015DCr 3               
0015DCr 3  A0 00                        ldy #0
0015DEr 3  B1 rr                        lda (tmp3),y
0015E0r 3  95 00                        sta 0,x
0015E2r 3  C8                           iny
0015E3r 3  B1 rr                        lda (tmp3),y
0015E5r 3  95 01                        sta 1,x
0015E7r 3               
0015E7r 3  60           z_name_to_int:  rts
0015E8r 3               
0015E8r 3               
0015E8r 3               
0015E8r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
0015E8r 3               ; ## "name>string"  tested  Gforth
0015E8r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
0015E8r 3               
0015E8r 3               xt_name_to_string:
0015E8r 3  20 rr rr                     jsr underflow_1
0015EBr 3               
0015EBr 3  CA                           dex
0015ECr 3  CA                           dex
0015EDr 3               
0015EDr 3                               ; the length of the string is the first byte of the
0015EDr 3                               ; header pointed to by nt
0015EDr 3  A1 02                        lda (2,x)
0015EFr 3  95 00                        sta 0,x
0015F1r 3  74 01                        stz 1,x
0015F3r 3               
0015F3r 3                               ; the string itself always starts eight bytes down
0015F3r 3  B5 02                        lda 2,x         ; LSB
0015F5r 3  18                           clc
0015F6r 3  69 08                        adc #8
0015F8r 3  A8                           tay
0015F9r 3  B5 03                        lda 3,x         ; MSB
0015FBr 3  69 00                        adc #0          ; just need carry
0015FDr 3  95 03                        sta 3,x
0015FFr 3  94 02                        sty 2,x
001601r 3               
001601r 3               z_name_to_string:
001601r 3  60                           rts
001602r 3               
001602r 3               
001602r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001602r 3               ; ## "nc-limit"  tested  Tali Forth
001602r 3               
001602r 3               xt_nc_limit:
001602r 3  CA                           dex
001603r 3  CA                           dex
001604r 3  A9 rr                        lda #<nc_limit
001606r 3  95 00                        sta 0,x
001608r 3  A9 rr                        lda #>nc_limit
00160Ar 3  95 01                        sta 1,x
00160Cr 3               
00160Cr 3  60           z_nc_limit:     rts
00160Dr 3               
00160Dr 3               
00160Dr 3               
00160Dr 3               ; ## NEGATE ( n -- n ) "Two's complement"
00160Dr 3               ; ## "negate"  auto  ANS core
00160Dr 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
00160Dr 3               xt_negate:
00160Dr 3  20 rr rr                     jsr underflow_1
001610r 3               
001610r 3  A9 00                	lda #0
001612r 3  38                           sec
001613r 3  F5 00                        sbc 0,x         ; LSB
001615r 3  95 00                        sta 0,x
001617r 3               
001617r 3  A9 00                        lda #0
001619r 3  F5 01                        sbc 1,x         ; MSB
00161Br 3  95 01                        sta 1,x
00161Dr 3               
00161Dr 3  60           z_negate:       rts
00161Er 3               
00161Er 3               
00161Er 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
00161Er 3               ; ## "never-native"  auto  Tali Forth
00161Er 3               xt_never_native:
00161Er 3  20 rr rr                     jsr current_to_dp
001621r 3  A0 01                        ldy #1          ; offset for status byte
001623r 3  B1 rr                        lda (dp),y
001625r 3  09 08                        ora #NN         ; Make sure NN flag is set
001627r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001629r 3  91 rr                        sta (dp),y
00162Br 3               z_never_native:
00162Br 3  60                           rts
00162Cr 3               
00162Cr 3               
00162Cr 3               ; ## NIP ( b a -- a ) "Delete NOS"
00162Cr 3               ; ## "nip"  auto  ANS core ext
00162Cr 3                       ; """https://forth-standard.org/standard/core/NIP"""
00162Cr 3               xt_nip:
00162Cr 3  20 rr rr                     jsr underflow_2
00162Fr 3               
00162Fr 3  B5 00                        lda 0,x         ; LSB
001631r 3  95 02                        sta 2,x
001633r 3  B5 01                        lda 1,x         ; MSB
001635r 3  95 03                        sta 3,x
001637r 3               
001637r 3  E8                           inx
001638r 3  E8                           inx
001639r 3               
001639r 3  60           z_nip:          rts
00163Ar 3               
00163Ar 3               
00163Ar 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
00163Ar 3               ; ## "<>"  auto  ANS core ext
00163Ar 3                       ; """https://forth-standard.org/standard/core/ne
00163Ar 3                       ;
00163Ar 3                       ; This is just a variant of EQUAL, we code it separately
00163Ar 3                       ; for speed.
00163Ar 3                       ; """
00163Ar 3               
00163Ar 3               xt_not_equals:
00163Ar 3  20 rr rr                     jsr underflow_2
00163Dr 3               
00163Dr 3  A0 00                        ldy #0                  ; default is true
00163Fr 3               
00163Fr 3  B5 00                        lda 0,x                 ; LSB
001641r 3  D5 02                        cmp 2,x
001643r 3  D0 0A                        bne @not_equal
001645r 3               
001645r 3                               ; LSB is equal
001645r 3  B5 01                        lda 1,x                 ; MSB
001647r 3  D5 03                        cmp 3,x
001649r 3  D0 04                        bne @not_equal
00164Br 3               
00164Br 3  A9 FF                        lda #$FF
00164Dr 3  80 01                        bra @done
00164Fr 3               
00164Fr 3               @not_equal:
00164Fr 3  88                           dey                     ; drop thru to done
001650r 3               
001650r 3               @done:
001650r 3  98                           tya
001651r 3  E8                           inx
001652r 3  E8                           inx
001653r 3  95 00                        sta 0,x
001655r 3  95 01                        sta 1,x
001657r 3               
001657r 3  60           z_not_equals:   rts
001658r 3               
001658r 3               
001658r 3               
001658r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001658r 3               ; ## "-rot"  auto  Gforth
001658r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001658r 3               
001658r 3               xt_not_rote:
001658r 3  20 rr rr                     jsr underflow_3
00165Br 3               
00165Br 3  B4 01                        ldy 1,x         ; MSB first
00165Dr 3  B5 03                        lda 3,x
00165Fr 3  95 01                        sta 1,x
001661r 3               
001661r 3  B5 05                        lda 5,x
001663r 3  95 03                        sta 3,x
001665r 3  94 05                        sty 5,x
001667r 3               
001667r 3  B4 00                        ldy 0,x         ; LSB second
001669r 3  B5 02                        lda 2,x
00166Br 3  95 00                        sta 0,x
00166Dr 3               
00166Dr 3  B5 04                        lda 4,x
00166Fr 3  95 02                        sta 2,x
001671r 3  94 04                        sty 4,x
001673r 3               
001673r 3  60           z_not_rote:     rts
001674r 3               
001674r 3               
001674r 3               
001674r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001674r 3               ; ## "number"  auto  Tali Forth
001674r 3                       ; """Convert a number string to a double or single cell number. This
001674r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001674r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001674r 3                       ; Based in part on the "Starting Forth" code
001674r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001674r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001674r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001674r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001674r 3                       ; dot to signal a double cell number is required to be the last
001674r 3                       ; character of the string.
001674r 3                       ;
001674r 3                       ; Number calls >NUMBER which in turn calls UM*,
001674r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001674r 3                       ; a pain.
001674r 3                       ;"""
001674r 3               
001674r 3               xt_number:
001674r 3  20 rr rr                     jsr underflow_2
001677r 3               
001677r 3                               ; we keep the flags for sign and double in tmpdsp because
001677r 3                               ; we've run out of temporary variables
001677r 3  64 rr                        stz tmpdsp      ; flag for double
001679r 3  64 rr                        stz tmpdsp+1    ; flag for minus
00167Br 3               
00167Br 3                               ; If the first character is a minus, strip it off and set
00167Br 3                               ; the flag
00167Br 3  A1 02                        lda (2,x)
00167Dr 3  C9 2D                        cmp #$2D        ; ASCII for "-"
00167Fr 3  D0 0A                        bne @check_dot
001681r 3               
001681r 3                               ; It's a minus
001681r 3  C6 rr                        dec tmpdsp+1
001683r 3  F6 02                        inc 2,x         ; start one character later
001685r 3  D0 02                        bne @1
001687r 3  F6 03                        inc 3,x
001689r 3               @1:
001689r 3  D6 00                        dec 0,x         ; decrease string length by one
00168Br 3               
00168Br 3               @check_dot:
00168Br 3                               ; If the last character is a dot, strip it off and set a
00168Br 3                               ; flag. We can use tmptos as a temporary variable
00168Br 3  B5 02                        lda 2,x         ; LSB of address
00168Dr 3  18                           clc
00168Er 3  75 00                        adc 0,x         ; length of string
001690r 3  85 rr                        sta tmptos
001692r 3  B5 03                        lda 3,x
001694r 3  69 00                        adc #0          ; only need carry
001696r 3  85 rr                        sta tmptos+1
001698r 3               
001698r 3                               ; tmptos now points to the first character after the string,
001698r 3                               ; but we need the last character
001698r 3  A5 rr                        lda tmptos
00169Ar 3  D0 02                        bne @2
00169Cr 3  C6 rr                        dec tmptos+1
00169Er 3               @2:
00169Er 3  C6 rr                        dec tmptos
0016A0r 3               
0016A0r 3  B2 rr                        lda (tmptos)
0016A2r 3  C9 2E                        cmp #'.'
0016A4r 3  D0 04                        bne @main
0016A6r 3               
0016A6r 3                               ; We have a dot, which means this is a double number. Flag
0016A6r 3                               ; the fact and reduce string length by one
0016A6r 3  C6 rr                        dec tmpdsp
0016A8r 3  D6 00                        dec 0,x
0016AAr 3               
0016AAr 3               @main:
0016AAr 3                               ; Set up stack for subroutine jump to >NUMBER, which means
0016AAr 3                               ; we have to go ( addr u --> ud addr u )
0016AAr 3  CA                           dex
0016ABr 3  CA                           dex
0016ACr 3  CA                           dex
0016ADr 3  CA                           dex
0016AEr 3               
0016AEr 3  B5 04                        lda 4,x         ; LSB of length
0016B0r 3  95 00                        sta 0,x
0016B2r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
0016B4r 3               
0016B4r 3  B5 06                        lda 6,x         ; LSB of address
0016B6r 3  95 02                        sta 2,x
0016B8r 3  B5 07                        lda 7,x         ; MSB of address
0016BAr 3  95 03                        sta 3,x
0016BCr 3               
0016BCr 3  74 04                        stz 4,x         ; clear space for ud
0016BEr 3  74 05                        stz 5,x
0016C0r 3  74 06                        stz 6,x
0016C2r 3  74 07                        stz 7,x
0016C4r 3               
0016C4r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
0016C7r 3               
0016C7r 3                               ; test length of returned string, which should be zero
0016C7r 3  B5 00                        lda 0,x
0016C9r 3  F0 15                        beq @all_converted
0016CBr 3               
0016CBr 3                               ; Something went wrong, we still have characters left over,
0016CBr 3                               ; so we print an error and abort. If the NUMBER was called
0016CBr 3                               ; by INTERPRET, we've already checked for Forth words, so
0016CBr 3                               ; we're in deep trouble one way or another
0016CBr 3  A9 3E                        lda #$3E        ; ASCII for ">"
0016CDr 3  20 rr rr                     jsr emit_a
0016D0r 3  20 rr rr                     jsr xt_type
0016D3r 3  A9 3C                        lda #$3C        ; ASCII for "<"
0016D5r 3  20 rr rr                     jsr emit_a
0016D8r 3  20 rr rr                     jsr xt_space
0016DBr 3               
0016DBr 3  A9 08                        lda #err_syntax
0016DDr 3  4C rr rr                     jmp error
0016E0r 3               
0016E0r 3               @all_converted:
0016E0r 3                               ; We can drop the string info
0016E0r 3  E8                           inx
0016E1r 3  E8                           inx
0016E2r 3  E8                           inx
0016E3r 3  E8                           inx
0016E4r 3               
0016E4r 3                               ; We have a double-cell number on the Data Stack that might
0016E4r 3                               ; actually have a minus and might actually be single-cell
0016E4r 3  A5 rr                        lda tmpdsp      ; flag for double
0016E6r 3  F0 0D                        beq @single
0016E8r 3               
0016E8r 3                               ; Set status bit 5 to indicate this is a double number
0016E8r 3  A9 20                        lda #%00100000
0016EAr 3  04 rr                        tsb status
0016ECr 3               
0016ECr 3                               ; This is a double cell number. If it had a minus, we'll have
0016ECr 3                               ; to negate it
0016ECr 3  A5 rr                        lda tmpdsp+1
0016EEr 3  F0 12                        beq @done       ; no minus, all done
0016F0r 3               
0016F0r 3  20 rr rr                     jsr xt_dnegate
0016F3r 3               
0016F3r 3  80 0D                        bra @done
0016F5r 3               
0016F5r 3               @single:
0016F5r 3                               ; This is a single number, so we just drop the top cell
0016F5r 3  E8                           inx
0016F6r 3  E8                           inx
0016F7r 3               
0016F7r 3                               ; Clear status bit 5 to indicate this is a single number
0016F7r 3  A9 20                        lda #%00100000
0016F9r 3  14 rr                        trb status
0016FBr 3               
0016FBr 3                               ; If we had a minus, we'll have to negate it
0016FBr 3  A5 rr                        lda tmpdsp+1
0016FDr 3  F0 03                        beq @done       ; no minus, all done
0016FFr 3               
0016FFr 3  20 rr rr                     jsr xt_negate
001702r 3               @done:
001702r 3  60           z_number:       rts
001703r 3               
001703r 3               
001703r 3               
001703r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001703r 3               ; ## "#"  auto  ANS core
001703r 3                       ; """https://forth-standard.org/standard/core/num
001703r 3                       ; Add one char to the beginning of the pictured output string.
001703r 3                       ;
001703r 3                       ; Based on
001703r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001703r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001703r 3                       ; """
001703r 3               xt_number_sign:
001703r 3  20 rr rr                     jsr underflow_2         ; double number
001706r 3               
001706r 3  20 rr rr                     jsr xt_base
001709r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
00170Cr 3               
00170Cr 3                               ; The following code is the ancient Forth word UD/MOD, which in
00170Cr 3                               ; various Forths (including Gforth) lives on under the hood,
00170Cr 3                               ; even though it's not an ANS standard word, it doesn't appear
00170Cr 3                               ; in the docs, it's only used here, and there are no tests for
00170Cr 3                               ; it. This is why we got rid of it. We'll be converting this
00170Cr 3                               ; mess to something more sane in the long run.
00170Cr 3  20 rr rr                     jsr xt_to_r             ; >r
00170Fr 3  20 rr rr                     jsr xt_zero             ; 0
001712r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001715r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001718r 3  20 rr rr                     jsr xt_rot              ; rot
00171Br 3  20 rr rr                     jsr xt_rot              ; rot
00171Er 3  20 rr rr                     jsr xt_r_from           ; r>
001721r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001724r 3  20 rr rr                     jsr xt_rot              ; rot
001727r 3                               ; end of UD/MOD ( rem ud )
001727r 3               
001727r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
00172Ar 3               
00172Ar 3                               ; Convert the number that is left over to an ASCII character. We
00172Ar 3                               ; use a string lookup for speed. Use either abc_str_lower for
00172Ar 3                               ; lower case or abc_str_upper for upper case (prefered)
00172Ar 3  B5 00                        lda 0,x
00172Cr 3  A8                           tay
00172Dr 3  B9 rr rr                     lda s_abc_upper,y
001730r 3  95 00                        sta 0,x
001732r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001734r 3               
001734r 3  20 rr rr                     jsr xt_hold
001737r 3               
001737r 3               z_number_sign:
001737r 3  60                           rts
001738r 3               
001738r 3               
001738r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001738r 3               ; ## "#>"  auto  ANS core
001738r 3                       ; """https://forth-standard.org/standard/core/num-end
001738r 3                       ; Finish conversion of pictured number string, putting address and
001738r 3                       ; length on the Data Stack.
001738r 3                       ;
001738r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001738r 3                       ; Based on
001738r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001738r 3                       ; """
001738r 3               xt_number_sign_greater:
001738r 3               
001738r 3  20 rr rr                     jsr underflow_2         ; double number
00173Br 3               
00173Br 3                               ; The start address lives in tohold
00173Br 3  A5 rr                        lda tohold
00173Dr 3  95 00                        sta 0,x         ; LSB of tohold
00173Fr 3  95 02                        sta 2,x
001741r 3  A5 rr                        lda tohold+1
001743r 3  95 01                        sta 1,x         ; MSB of addr
001745r 3  95 03                        sta 3,x         ; ( addr addr )
001747r 3               
001747r 3                               ; The length of the string is pad - addr
001747r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
00174Ar 3               
00174Ar 3  38                           sec
00174Br 3  B5 00                        lda 0,x         ; LSB of pad address
00174Dr 3  F5 02                        sbc 2,x
00174Fr 3  95 02                        sta 2,x
001751r 3               
001751r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001753r 3  F5 03                        sbc 3,x
001755r 3  95 03                        sta 3,x         ; ( addr u pad )
001757r 3               
001757r 3  E8                           inx
001758r 3  E8                           inx
001759r 3               
001759r 3               z_number_sign_greater:
001759r 3  60                           rts
00175Ar 3               
00175Ar 3               
00175Ar 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
00175Ar 3               ; ## "#s"  auto  ANS core
00175Ar 3                       ; """https://forth-standard.org/standard/core/numS
00175Ar 3                       ; Completely convert number for pictured numerical output.
00175Ar 3                       ;
00175Ar 3                       ; Based on
00175Ar 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
00175Ar 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
00175Ar 3                       ; """
00175Ar 3               
00175Ar 3               xt_number_sign_s:
00175Ar 3  20 rr rr                     jsr underflow_2
00175Dr 3               @loop:
00175Dr 3                               ; convert a single number ("#")
00175Dr 3  20 rr rr                     jsr xt_number_sign
001760r 3               
001760r 3                               ; stop when double-celled number in TOS is zero:
001760r 3  B5 00                        lda 0,x
001762r 3  15 01                        ora 1,x
001764r 3  15 02                        ora 2,x
001766r 3  15 03                        ora 3,x
001768r 3  D0 F3                        bne @loop
00176Ar 3               
00176Ar 3               z_number_sign_s:
00176Ar 3  60                           rts
00176Br 3               
00176Br 3               
00176Br 3               
00176Br 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
00176Br 3               ; ## "of"  auto  ANS core ext
00176Br 3                       ; """http://forth-standard.org/standard/core/OF"""
00176Br 3               
00176Br 3               xt_of:
00176Br 3                               ; Check if value is equal to this case.
00176Br 3                               ; Postpone over (eg. compile a jsr to it)
00176Br 3  A0 rr                        ldy #>xt_over
00176Dr 3  A9 rr                        lda #<xt_over
00176Fr 3  20 rr rr                     jsr cmpl_subroutine
001772r 3               
001772r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001772r 3  A0 rr                        ldy #>xt_equal
001774r 3  A9 rr                        lda #<xt_equal
001776r 3  20 rr rr                     jsr cmpl_subroutine
001779r 3               
001779r 3  20 rr rr                     jsr xt_if
00177Cr 3               
00177Cr 3                               ; If it's true, consume the original value.
00177Cr 3                               ; Postpone DROP (eg. compile a jsr to it)
00177Cr 3  A0 rr                        ldy #>xt_drop
00177Er 3  A9 rr                        lda #<xt_drop
001780r 3  20 rr rr                     jsr cmpl_subroutine
001783r 3               
001783r 3  60           z_of:           rts
001784r 3               
001784r 3               
001784r 3               
001784r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001784r 3               ; ## "1"  auto  Tali Forth
001784r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001784r 3               xt_editor_wordlist:
001784r 3               xt_one:
001784r 3  CA                           dex
001785r 3  CA                           dex
001786r 3  A9 01                        lda #1
001788r 3  95 00                        sta 0,x
00178Ar 3  74 01                        stz 1,x
00178Cr 3               
00178Cr 3               z_editor_wordlist:
00178Cr 3               z_one:
00178Cr 3  60                           rts
00178Dr 3               
00178Dr 3               
00178Dr 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
00178Dr 3               ; ## "1-"  auto  ANS core
00178Dr 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
00178Dr 3               
00178Dr 3               xt_one_minus:
00178Dr 3  20 rr rr                     jsr underflow_1
001790r 3               
001790r 3  B5 00                        lda 0,x
001792r 3  D0 02                        bne @1
001794r 3  D6 01                        dec 1,x
001796r 3               @1:
001796r 3  D6 00                        dec 0,x
001798r 3               
001798r 3  60           z_one_minus:    rts
001799r 3               
001799r 3               
001799r 3               
001799r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001799r 3               ; ## "1+"  auto  ANS core
001799r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001799r 3                       ;
001799r 3                       ; Code is shared with CHAR-PLUS
001799r 3                       ; """
001799r 3               
001799r 3               xt_char_plus:
001799r 3               xt_one_plus:
001799r 3  20 rr rr                     jsr underflow_1
00179Cr 3               
00179Cr 3  F6 00                        inc 0,x
00179Er 3  D0 02                        bne @done
0017A0r 3  F6 01                        inc 1,x
0017A2r 3               
0017A2r 3               @done:
0017A2r 3               z_char_plus:
0017A2r 3  60           z_one_plus:     rts
0017A3r 3               
0017A3r 3               
0017A3r 3               
0017A3r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
0017A3r 3               ; ## "only"  auto  ANS search ext
0017A3r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
0017A3r 3               
0017A3r 3               xt_only:
0017A3r 3                               ; Put -1 on data stack.
0017A3r 3  CA                           dex
0017A4r 3  CA                           dex
0017A5r 3  A9 FF                        lda #$FF
0017A7r 3  95 00                        sta 0,x
0017A9r 3  95 01                        sta 1,x
0017ABr 3               
0017ABr 3                               ; Invoke set-order to set the minimum search order.
0017ABr 3  20 rr rr                     jsr xt_set_order
0017AEr 3               
0017AEr 3  60           z_only:         rts
0017AFr 3               
0017AFr 3               
0017AFr 3               
0017AFr 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
0017AFr 3               ; ## "or"  auto  ANS core
0017AFr 3                       ; """https://forth-standard.org/standard/core/OR"
0017AFr 3               xt_or:
0017AFr 3  20 rr rr                     jsr underflow_2
0017B2r 3               
0017B2r 3  B5 00                        lda 0,x
0017B4r 3  15 02                        ora 2,x
0017B6r 3  95 02                        sta 2,x
0017B8r 3               
0017B8r 3  B5 01                        lda 1,x
0017BAr 3  15 03                        ora 3,x
0017BCr 3  95 03                        sta 3,x
0017BEr 3               
0017BEr 3  E8                           inx
0017BFr 3  E8                           inx
0017C0r 3               
0017C0r 3  60           z_or:           rts
0017C1r 3               
0017C1r 3               
0017C1r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
0017C1r 3               ; ## "order"  auto  ANS core
0017C1r 3                       ; """https://forth-standard.org/standard/search/ORDER
0017C1r 3                       ; Note the search order is displayed from first search to last
0017C1r 3                       ; searched and is therefore exactly the reverse of the order in which
0017C1r 3                       ; Forth stacks are displayed.
0017C1r 3                       ;
0017C1r 3                       ; A Forth implementation of this word is:
0017C1r 3                       ;
0017C1r 3                       ; 	: .wid ( wid -- )
0017C1r 3                       ; 	dup 0=  if ." Forth "  drop    else
0017C1r 3                       ; 	dup 1 = if ." Editor " drop    else
0017C1r 3                       ; 	dup 2 = if ." Assembler " drop else
0017C1r 3                       ; 	dup 3 = if ." Root " drop      else
0017C1r 3                       ; 	           . ( just print the number )
0017C1r 3                       ; 	then then then then ;
0017C1r 3                       ;
0017C1r 3                       ; : ORDER ( -- )
0017C1r 3                       ; 	cr get-order 0 ?do .wid loop
0017C1r 3                       ; 	space space get-current .wid ;
0017C1r 3                       ;
0017C1r 3                       ; This is an interactive program, so speed
0017C1r 3                       ; is not as important as size. We assume we do not have more than 255
0017C1r 3                       ; wordlists.
0017C1r 3                       ; """
0017C1r 3               
0017C1r 3               xt_order:
0017C1r 3  20 rr rr                     jsr xt_cr
0017C4r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
0017C7r 3               
0017C7r 3                               ; Paranoid: Check if there are no wordlists, a rather
0017C7r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
0017C7r 3                               ; that case, we just drop n and run
0017C7r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
0017C9r 3  F0 1E                        beq @drop_done
0017CBr 3               
0017CBr 3               @have_wordlists:
0017CBr 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
0017CBr 3                               ; on the stack
0017CBr 3  A8                           tay
0017CCr 3               @loop:
0017CCr 3  E8                           inx
0017CDr 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
0017CEr 3  B5 00                        lda 0,x
0017D0r 3               
0017D0r 3  5A                           phy
0017D1r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
0017D4r 3  7A                           ply
0017D5r 3               
0017D5r 3  88                           dey
0017D6r 3  D0 F4                        bne @loop
0017D8r 3               
0017D8r 3                               ; We've printed the wordlists, now we add the current wordlist.
0017D8r 3                               ; This follows the convention of Gforth
0017D8r 3  20 rr rr                     jsr xt_space
0017DBr 3  20 rr rr                     jsr xt_space
0017DEr 3  20 rr rr                     jsr xt_get_current      ; ( wid )
0017E1r 3               
0017E1r 3  B5 00                        lda 0,x
0017E3r 3  20 rr rr                     jsr _print_wid_string
0017E6r 3  20 rr rr                     jsr xt_cr
0017E9r 3               
0017E9r 3               @drop_done:
0017E9r 3  E8                           inx
0017EAr 3  E8                           inx
0017EBr 3               z_order:
0017EBr 3  60                           rts
0017ECr 3               
0017ECr 3               _print_wid_string:
0017ECr 3                       ; """Helper function for ORDER: Given a WID in A, print the
0017ECr 3                       ; corresponding string. If there is no such word list defined, just
0017ECr 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
0017ECr 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
0017ECr 3                       ; theory, we could speed this up by having the WID be the same as the
0017ECr 3                       ; number of the strings. However, ORDER is used rather infrequently and
0017ECr 3                       ; this would make changes to the strings.asm file very dangerous, so we
0017ECr 3                       ; follow the slightly more complicated route with a translation table.
0017ECr 3                       ; """
0017ECr 3                               ; If the WID is larger than 3, we have no string avaliable and
0017ECr 3                               ; just print the number.
0017ECr 3                               ; See http://6502.org/tutorials/compare_instructions.html
0017ECr 3                               ; for details
0017ECr 3  C9 04                        cmp #4
0017EEr 3  90 09                        bcc @output_string      ; less than 4, print a real string
0017F0r 3               
0017F0r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
0017F0r 3                               ; print the number
0017F0r 3  CA                           dex
0017F1r 3  CA                           dex
0017F2r 3  95 00                        sta 0,x
0017F4r 3  74 01                        stz 1,x
0017F6r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
0017F9r 3               
0017F9r 3               @output_string:
0017F9r 3                               ; Get the string number based on WID 0 to 3
0017F9r 3  A8                           tay
0017FAr 3  B9 rr rr                     lda @wid_data,y
0017FDr 3               
0017FDr 3                               ; Print without a line feed
0017FDr 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001800r 3               
001800r 3               @wid_data:
001800r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001800r 3                       ; less than 4.
001800r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001801r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001802r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001803r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001804r 3               
001804r 3               
001804r 3               
001804r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001804r 3               ; ## "output"  tested  Tali Forth
001804r 3               xt_output:
001804r 3                       ; """Return the address where the jump target for EMIT is stored (but
001804r 3                       ; not the vector itself). By default, this will hold the value of
001804r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001804r 3                       ; routine.
001804r 3                       ; """
001804r 3  CA                           dex
001805r 3  CA                           dex
001806r 3  A9 rr                        lda #<output
001808r 3  95 00                        sta 0,x
00180Ar 3  A9 rr                        lda #>output
00180Cr 3  95 01                        sta 1,x
00180Er 3               
00180Er 3  60           z_output:       rts
00180Fr 3               
00180Fr 3               
00180Fr 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
00180Fr 3               ; ## "over"  auto  ANS core
00180Fr 3                       ; """https://forth-standard.org/standard/core/OVER"""
00180Fr 3               xt_over:
00180Fr 3  20 rr rr                     jsr underflow_2
001812r 3               
001812r 3  CA                           dex
001813r 3  CA                           dex
001814r 3               
001814r 3  B5 04                        lda 4,x         ; LSB
001816r 3  95 00                        sta 0,x
001818r 3  B5 05                        lda 5,x         ; MSB
00181Ar 3  95 01                        sta 1,x
00181Cr 3               
00181Cr 3  60           z_over:         rts
00181Dr 3               
00181Dr 3               
00181Dr 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
00181Dr 3               ; ## "pad"  auto  ANS core ext
00181Dr 3                       ; """https://forth-standard.org/standard/core/PAD
00181Dr 3                       ; Return address to a temporary area in free memory for user. Must
00181Dr 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
00181Dr 3                       ; the compile area pointer (CP) and therefore varies in position.
00181Dr 3                       ; This area is reserved for the user and not used by the system
00181Dr 3                       ; """
00181Dr 3               xt_pad:
00181Dr 3  CA                           dex
00181Er 3  CA                           dex
00181Fr 3               
00181Fr 3  A5 rr                        lda cp
001821r 3  18                           clc
001822r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001824r 3  95 00                        sta 0,x
001826r 3               
001826r 3  A5 rr                        lda cp+1
001828r 3  69 00                        adc #0          ; only need carry
00182Ar 3  95 01                        sta 1,x
00182Cr 3               
00182Cr 3  60           z_pad:          rts
00182Dr 3               
00182Dr 3               
00182Dr 3               ; ## PAGE ( -- ) "Clear the screen"
00182Dr 3               ; ## "page"  tested  ANS facility
00182Dr 3                       ; """https://forth-standard.org/standard/facility/PAGE
00182Dr 3                       ; Clears a page if supported by ANS terminal codes. This is
00182Dr 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
00182Dr 3                       ; left of the screen
00182Dr 3                       ; """
00182Dr 3               xt_page:
00182Dr 3  A9 1B                        lda #AscESC
00182Fr 3  20 rr rr                     jsr emit_a
001832r 3  A9 5B                        lda #$5B        ; ASCII for "["
001834r 3  20 rr rr                     jsr emit_a
001837r 3  A9 32                        lda #'2'
001839r 3  20 rr rr                     jsr emit_a
00183Cr 3  A9 4A                        lda #'J'
00183Er 3  20 rr rr                     jsr emit_a
001841r 3               
001841r 3                               ; move cursor to top left of screen
001841r 3  20 rr rr                     jsr xt_zero
001844r 3  20 rr rr                     jsr xt_zero
001847r 3  20 rr rr                     jsr xt_at_xy
00184Ar 3               
00184Ar 3  60           z_page:         rts
00184Br 3               
00184Br 3               
00184Br 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
00184Br 3               ; ## "("  auto  ANS core
00184Br 3                       ; """http://forth-standard.org/standard/core/p"""
00184Br 3               
00184Br 3               xt_paren:
00184Br 3                               ; Put a right paren on the stack.
00184Br 3  CA                           dex
00184Cr 3  CA                           dex
00184Dr 3  A9 29                        lda #41     ; Right parenthesis
00184Fr 3  95 00                        sta 0,x
001851r 3  74 01                        stz 1,x
001853r 3               
001853r 3                               ; Call parse.
001853r 3  20 rr rr                     jsr xt_parse
001856r 3               
001856r 3                               ; Throw away the result.
001856r 3  E8                           inx
001857r 3  E8                           inx
001858r 3  E8                           inx
001859r 3  E8                           inx
00185Ar 3               
00185Ar 3  60           z_paren:        rts
00185Br 3               
00185Br 3               
00185Br 3               
00185Br 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
00185Br 3               ; ## "parse-name"  auto  ANS core ext
00185Br 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
00185Br 3                       ; Find next word in input string, skipping leading whitespace. This is
00185Br 3                       ; a special form of PARSE and drops through to that word. See PARSE
00185Br 3                       ; for more detail. We use this word internally for the interpreter
00185Br 3                       ; because it is a lot easier to use. Reference implementations at
00185Br 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
00185Br 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
00185Br 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
00185Br 3                       ; though the ANS standard talks about skipping "spaces", whitespace
00185Br 3                       ; is actually perfectly legal (see for example
00185Br 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
00185Br 3                       ; Otherwise, PARSE-NAME chokes on tabs.
00185Br 3                       ; """
00185Br 3               
00185Br 3               xt_parse_name:
00185Br 3                               ; To enable the compilation of the high-level Forth words
00185Br 3                               ; in forth-words.asm and user-words.asm at boot time,
00185Br 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
00185Br 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
00185Br 3                               ; to the current location is in toin (>IN). We need to check,
00185Br 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
00185Br 3                               ; we can't just use Y as an index.
00185Br 3               
00185Br 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
00185Br 3  A5 rr                        lda ciblen              ; LSB of counter
00185Dr 3  38                           sec
00185Er 3  E5 rr                        sbc toin
001860r 3  85 rr                        sta tmp1
001862r 3  A5 rr                        lda ciblen+1            ; MSB
001864r 3  E5 rr                        sbc toin+1
001866r 3  85 rr                        sta tmp1+1
001868r 3               
001868r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001868r 3  A5 rr                        lda tmp1
00186Ar 3  05 rr                        ora tmp1+1
00186Cr 3  F0 28                        beq @empty_line
00186Er 3               
00186Er 3                               ; We walk through the characters starting at CIB+TOIN, so we
00186Er 3                               ; save a temp version of that in tmp2
00186Er 3  A5 rr                        lda cib
001870r 3  18                           clc
001871r 3  65 rr                        adc toin
001873r 3  85 rr                        sta tmp2                ; LSB of first character
001875r 3  A5 rr                        lda cib+1
001877r 3  65 rr                        adc toin+1
001879r 3  85 rr                        sta tmp2+1              ; MSB
00187Br 3               
00187Br 3               @skip_loop:
00187Br 3  B2 rr                        lda (tmp2)              ; work copy of cib
00187Dr 3  20 rr rr                     jsr is_whitespace
001880r 3  90 1F                        bcc @char_found
001882r 3               
001882r 3                               ; Char is still whitespace, continue
001882r 3  E6 rr                        inc tmp2
001884r 3  D0 02                        bne @2
001886r 3  E6 rr                        inc tmp2+1
001888r 3               @2:
001888r 3                               ; Adjust counter
001888r 3  A5 rr                        lda tmp1
00188Ar 3  D0 02                        bne @3
00188Cr 3  C6 rr                        dec tmp1+1
00188Er 3               @3:
00188Er 3  C6 rr                        dec tmp1
001890r 3               
001890r 3  A5 rr                        lda tmp1
001892r 3  05 rr                        ora tmp1+1
001894r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001896r 3               
001896r 3               @empty_line:
001896r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001896r 3                               ; what to return as an address if a string with only
001896r 3                               ; spaces is given. For speed reasons, we just return junk
001896r 3                               ; NOS, with the TOS zero as per standard
001896r 3  CA                           dex
001897r 3  CA                           dex
001898r 3  CA                           dex
001899r 3  CA                           dex
00189Ar 3               
00189Ar 3  74 00                        stz 0,x                 ; TOS is zero
00189Cr 3  74 01                        stz 1,x
00189Er 3               
00189Er 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
0018A1r 3               
0018A1r 3               @char_found:
0018A1r 3                               ; We arrive here with tmp2 pointing to the first non-space
0018A1r 3                               ; character. This is where the word really starts, so
0018A1r 3                               ; we use it to calculate the new >IN by subtracting
0018A1r 3  A5 rr                        lda tmp2
0018A3r 3  38                           sec
0018A4r 3  E5 rr                        sbc cib
0018A6r 3  85 rr                        sta toin
0018A8r 3  A5 rr                        lda tmp2+1
0018AAr 3  E5 rr                        sbc cib+1
0018ACr 3  85 rr                        sta toin+1
0018AEr 3               
0018AEr 3                               ; prepare Data Stack for PARSE by adding space
0018AEr 3                               ; as the delimiter
0018AEr 3  CA                           dex
0018AFr 3  CA                           dex
0018B0r 3               
0018B0r 3  A9 20                        lda #AscSP
0018B2r 3  95 00                        sta 0,x
0018B4r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
0018B6r 3               
0018B6r 3               
0018B6r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
0018B6r 3               ; ## "parse"  tested  ANS core ext
0018B6r 3                       ; """https://forth-standard.org/standard/core/PARSE
0018B6r 3                       ; Find word in input string delimited by character given. Do not
0018B6r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
0018B6r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
0018B6r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
0018B6r 3                       ;
0018B6r 3                       ;
0018B6r 3                       ;     cib  cib+toin   cib+ciblen
0018B6r 3                       ;      v      v            v
0018B6r 3                       ;     |###################|
0018B6r 3                       ;
0018B6r 3                       ;     |------>|  toin (>IN)
0018B6r 3                       ;     |------------------->|  ciblen
0018B6r 3                       ;
0018B6r 3                       ; The input string is stored starting at the address in the Current
0018B6r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
0018B6r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
0018B6r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
0018B6r 3                       ; useful string if there are any characters at all. As with
0018B6r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
0018B6r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
0018B6r 3                       ; """
0018B6r 3               
0018B6r 3               xt_parse:
0018B6r 3  20 rr rr                     jsr underflow_1
0018B9r 3               
0018B9r 3                               ; If the input buffer is empty, we just return
0018B9r 3  A5 rr                        lda ciblen
0018BBr 3  05 rr                        ora ciblen+1
0018BDr 3  F0 0C                        beq @abort_parse
0018BFr 3               
0018BFr 3                               ; If the pointer >IN is larger or equal to the length of
0018BFr 3                               ; the input buffer (CIBLEN), the line is done. Put
0018BFr 3                               ; differently, we only continue if >IN is smaller than
0018BFr 3                               ; CIBLEN
0018BFr 3  A5 rr                        lda toin+1              ; MSB
0018C1r 3  C5 rr                        cmp ciblen+1
0018C3r 3  90 0E                        bcc @go_parse           ; unsigned comparison
0018C5r 3               
0018C5r 3  A5 rr                        lda toin                ; LSB
0018C7r 3  C5 rr                        cmp ciblen
0018C9r 3  90 08                        bcc @go_parse
0018CBr 3               
0018CBr 3               @abort_parse:
0018CBr 3                               ; Sorry, this line is over
0018CBr 3  CA                           dex
0018CCr 3  CA                           dex
0018CDr 3  74 00                        stz 0,x
0018CFr 3  74 01                        stz 1,x
0018D1r 3               
0018D1r 3  80 7A                        bra @done
0018D3r 3               @go_parse:
0018D3r 3                               ; We actually have work to do. Save the delimiter in
0018D3r 3                               ; tmptos.
0018D3r 3  B5 00                        lda 0,x
0018D5r 3  85 rr                        sta tmptos
0018D7r 3               
0018D7r 3                               ; We can now prepare the Data Stack for the return value
0018D7r 3  CA                           dex
0018D8r 3  CA                           dex
0018D9r 3               
0018D9r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
0018D9r 3                               ; tmp2 is initially the same as tmp1, then the work index
0018D9r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
0018D9r 3               
0018D9r 3                               ; Calculate the beginning of the string, which is also the
0018D9r 3                               ; address to return
0018D9r 3  A5 rr                        lda cib
0018DBr 3  18                           clc
0018DCr 3  65 rr                        adc toin        ; LSB
0018DEr 3  85 rr                        sta tmp1
0018E0r 3  85 rr                        sta tmp2
0018E2r 3  95 02                        sta 2,x
0018E4r 3               
0018E4r 3  A5 rr                        lda cib+1
0018E6r 3  65 rr                        adc toin+1      ; MSB
0018E8r 3  85 rr                        sta tmp1+1
0018EAr 3  85 rr                        sta tmp2+1
0018ECr 3  95 03                        sta 3,x
0018EEr 3               
0018EEr 3                               ; Calculate the address where the input buffer ends plus 1, so
0018EEr 3                               ; we can compare it with TOIN, which is an index
0018EEr 3  A5 rr                        lda cib
0018F0r 3  18                           clc
0018F1r 3  65 rr                        adc ciblen
0018F3r 3  85 rr                        sta tmp3
0018F5r 3  A5 rr                        lda cib+1
0018F7r 3  65 rr                        adc ciblen+1
0018F9r 3  85 rr                        sta tmp3+1
0018FBr 3               
0018FBr 3                               ; Initialize the offset we use to adjust EOL or found delimiter
0018FBr 3  64 rr                        stz tmptos+1
0018FDr 3               @loop:
0018FDr 3                               ; If we are at the end of the string, quit
0018FDr 3  A5 rr                        lda tmp2
0018FFr 3  C5 rr                        cmp tmp3
001901r 3  D0 06                        bne @not_empty
001903r 3               
001903r 3  A5 rr                        lda tmp2+1
001905r 3  C5 rr                        cmp tmp3+1
001907r 3  F0 1D                        beq @eol
001909r 3               @not_empty:
001909r 3                               ; We have to do this the hard way. In fact, it's really
001909r 3                               ; hard since if we are dealing with a SPACE, the standard
001909r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001909r 3                               ; Tali would choke on tabs between words. For details, see
001909r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001909r 3                               ; In theory, we could make this faster by defining a delimiter
001909r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001909r 3                               ; avoiding having to test every time. However, somebody,
001909r 3                               ; somewhere might want to parse a zero-delimited list. Since
001909r 3                               ; any byte value could be chosen for that, we just test for
001909r 3                               ; a space every single time for the moment.
001909r 3  B2 rr                        lda (tmp2)
00190Br 3               
00190Br 3  A4 rr                        ldy tmptos
00190Dr 3  C0 20                        cpy #AscSP
00190Fr 3  D0 07                        bne @not_whitespace
001911r 3               
001911r 3                               ; The delimiter is a space, so we're looking for all
001911r 3                               ; whitespace
001911r 3  20 rr rr                     jsr is_whitespace
001914r 3  90 02                        bcc @not_whitespace
001916r 3  80 0C                        bra @found_delimiter
001918r 3               
001918r 3               @not_whitespace:
001918r 3                               ; The delimiter is not a space, so we're looking for
001918r 3                               ; whatever it is
001918r 3  C5 rr                        cmp tmptos
00191Ar 3  F0 08                        beq @found_delimiter
00191Cr 3               
00191Cr 3                               ; Not a delimiter, next character
00191Cr 3  E6 rr                        inc tmp2
00191Er 3  D0 DD                        bne @loop
001920r 3  E6 rr                        inc tmp2+1
001922r 3  80 D9                        bra @loop
001924r 3               
001924r 3               @found_delimiter:
001924r 3                               ; Increase the offset: If we've found a delimiter, we want
001924r 3                               ; TOIN to point to the character after it, not the delimiter
001924r 3                               ; itself
001924r 3  E6 rr                        inc tmptos+1
001926r 3               @eol:
001926r 3                               ; The length of the new string is tmp2-tmp1
001926r 3  A5 rr                        lda tmp2
001928r 3  38                           sec
001929r 3  E5 rr                        sbc tmp1
00192Br 3  95 00                        sta 0,x
00192Dr 3               
00192Dr 3  A5 rr                        lda tmp2+1
00192Fr 3  E5 rr                        sbc tmp1+1
001931r 3  95 01                        sta 1,x
001933r 3               
001933r 3                               ; The new offset is tmp2-cib
001933r 3  A5 rr                        lda tmp2
001935r 3  38                           sec
001936r 3  E5 rr                        sbc cib
001938r 3  85 rr                        sta toin
00193Ar 3  A5 rr                        lda tmp2+1
00193Cr 3  E5 rr                        sbc cib+1
00193Er 3  85 rr                        sta toin+1
001940r 3               
001940r 3                               ; Add in the delimiter
001940r 3  A5 rr                        lda toin
001942r 3  18                           clc
001943r 3  65 rr                        adc tmptos+1
001945r 3  85 rr                        sta toin
001947r 3  A5 rr                        lda toin+1
001949r 3  69 00                        adc #0          ; we only need the carry
00194Br 3  85 rr                        sta toin+1
00194Dr 3               @done:
00194Dr 3               z_parse_name:
00194Dr 3  60           z_parse:        rts
00194Er 3               
00194Er 3               
00194Er 3               
00194Er 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
00194Er 3               ; ## "pick"  auto  ANS core ext
00194Er 3                       ; """https://forth-standard.org/standard/core/PICK
00194Er 3                       ; Take the u-th element out of the stack and put it on TOS,
00194Er 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
00194Er 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
00194Er 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
00194Er 3                       ; """
00194Er 3               
00194Er 3               xt_pick:
00194Er 3                               ; Checking for underflow is difficult because it depends on
00194Er 3                               ; which element we want to grab. We could probably figure
00194Er 3                               ; something out, but it wouldn't work with underflow stripping
00194Er 3                               ; Since using PICK is considered poor form anyway, we just
00194Er 3                               ; leave it as it is
00194Er 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001950r 3  8A                           txa
001951r 3  75 00                        adc 0,x
001953r 3  A8                           tay
001954r 3               
001954r 3  B9 02 00                     lda 0002,y
001957r 3  95 00                        sta 0,x
001959r 3  B9 03 00                     lda 0003,y
00195Cr 3  95 01                        sta 1,x
00195Er 3               
00195Er 3  60           z_pick:         rts
00195Fr 3               
00195Fr 3               
00195Fr 3               
00195Fr 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
00195Fr 3               ; ## "+"  auto  ANS core
00195Fr 3                       ; """https://forth-standard.org/standard/core/Plus"""
00195Fr 3               xt_plus:
00195Fr 3  20 rr rr                     jsr underflow_2
001962r 3               
001962r 3  18                           clc
001963r 3  B5 00                        lda 0,x         ; LSB
001965r 3  75 02                        adc 2,x
001967r 3  95 02                        sta 2,x
001969r 3               
001969r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
00196Br 3  75 03                        adc 3,x
00196Dr 3  95 03                        sta 3,x
00196Fr 3               
00196Fr 3  E8                           inx
001970r 3  E8                           inx
001971r 3               
001971r 3  60           z_plus:         rts
001972r 3               
001972r 3               
001972r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001972r 3               ; ## "+!"  auto  ANS core
001972r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001972r 3               xt_plus_store:
001972r 3  20 rr rr                     jsr underflow_2
001975r 3               
001975r 3                               ; move address to tmp1 so we can work with it
001975r 3  B5 00                        lda 0,x
001977r 3  85 rr                        sta tmp1
001979r 3  B5 01                        lda 1,x
00197Br 3  85 rr                        sta tmp1+1
00197Dr 3               
00197Dr 3  A0 00                        ldy #0          ; LSB
00197Fr 3  B1 rr                        lda (tmp1),y
001981r 3  18                           clc
001982r 3  75 02                        adc 2,x
001984r 3  91 rr                        sta (tmp1),y
001986r 3               
001986r 3  C8                           iny             ; MSB
001987r 3  B1 rr                        lda (tmp1),y
001989r 3  75 03                        adc 3,x
00198Br 3  91 rr                        sta (tmp1),y
00198Dr 3               
00198Dr 3  E8                           inx
00198Er 3  E8                           inx
00198Fr 3  E8                           inx
001990r 3  E8                           inx
001991r 3               
001991r 3  60           z_plus_store:   rts
001992r 3               
001992r 3               
001992r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001992r 3               ; ## "postpone"  auto   ANS core
001992r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001992r 3                       ; Add the compilation behavior of a word to a new word at
001992r 3                       ; compile time. If the word that follows it is immediate, include
001992r 3                       ; it so that it will be compiled when the word being defined is
001992r 3                       ; itself used for a new word. Tricky, but very useful.
001992r 3                       ;
001992r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001992r 3                       ; on the Data Stack). This means we cannot build words with
001992r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001992r 3                       ; """
001992r 3               
001992r 3               xt_postpone:
001992r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001995r 3               
001995r 3                               ; if there was no word provided, complain and quit
001995r 3  B5 00                        lda 0,x
001997r 3  15 01                        ora 1,x
001999r 3  D0 05                        bne @1
00199Br 3               
00199Br 3  A9 05                        lda #err_noname
00199Dr 3  4C rr rr                     jmp error
0019A0r 3               @1:
0019A0r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
0019A3r 3               
0019A3r 3                               ; if word not in Dictionary, complain and quit
0019A3r 3  D0 05                        bne @2
0019A5r 3  A9 05                        lda #err_noname
0019A7r 3  4C rr rr                     jmp error
0019AAr 3               
0019AAr 3               @2:
0019AAr 3                               ; keep a copy of nt for later
0019AAr 3  B5 00                        lda 0,x
0019ACr 3  85 rr                        sta tmp1
0019AEr 3  B5 01                        lda 1,x
0019B0r 3  85 rr                        sta tmp1+1
0019B2r 3               
0019B2r 3                               ; We need the xt instead of the nt
0019B2r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
0019B5r 3               
0019B5r 3                               ; See if this is an immediate word. This is easier
0019B5r 3                               ; with nt than with xt. The status byte of the word
0019B5r 3                               ; is nt+1
0019B5r 3  E6 rr                        inc tmp1
0019B7r 3  D0 02                        bne @3
0019B9r 3  E6 rr                        inc tmp1+1
0019BBr 3               @3:
0019BBr 3  B2 rr                        lda (tmp1)
0019BDr 3  29 04                        and #IM         ; mask all but Intermediate flag
0019BFr 3  F0 05                        beq @not_immediate
0019C1r 3               
0019C1r 3                               ; We're immediate, so instead of executing it right now, we
0019C1r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
0019C1r 3                               ; takes us back to the original caller
0019C1r 3  20 rr rr                     jsr xt_compile_comma
0019C4r 3  80 0A                        bra @done
0019C6r 3               
0019C6r 3               @not_immediate:
0019C6r 3                               ; This is not an immediate word, so we enact "deferred
0019C6r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
0019C6r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
0019C6r 3                               ; a subroutine jump to COMPILE,
0019C6r 3  20 rr rr                     jsr xt_literal
0019C9r 3               
0019C9r 3                               ; Last, compile COMPILE,
0019C9r 3  A0 rr                        ldy #>xt_compile_comma
0019CBr 3  A9 rr                        lda #<xt_compile_comma
0019CDr 3  20 rr rr                     jsr cmpl_subroutine
0019D0r 3               @done:
0019D0r 3  60           z_postpone:     rts
0019D1r 3               
0019D1r 3               
0019D1r 3               
0019D1r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
0019D1r 3               ; ## "previous"  auto  ANS search ext
0019D1r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
0019D1r 3               
0019D1r 3               xt_previous:
0019D1r 3  20 rr rr                     jsr xt_get_order
0019D4r 3  20 rr rr                     jsr xt_nip
0019D7r 3  20 rr rr                     jsr xt_one_minus
0019DAr 3  20 rr rr                     jsr xt_set_order
0019DDr 3               
0019DDr 3  60           z_previous:     rts
0019DEr 3               
0019DEr 3               
0019DEr 3               
0019DEr 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
0019DEr 3               ; ## "?"  tested  ANS tools
0019DEr 3                       ; """https://forth-standard.org/standard/tools/q
0019DEr 3                       ;
0019DEr 3                       ; Only used interactively. Since humans are so slow, we
0019DEr 3                       ; save size and just go for the subroutine jumps
0019DEr 3                       ; """
0019DEr 3               xt_question:
0019DEr 3                               ; FETCH takes care of underflow check
0019DEr 3  20 rr rr                     jsr xt_fetch
0019E1r 3  20 rr rr                     jsr xt_dot
0019E4r 3               
0019E4r 3  60           z_question:     rts
0019E5r 3               
0019E5r 3               
0019E5r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
0019E5r 3               ; ## "?dup"  auto  ANS core
0019E5r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
0019E5r 3               
0019E5r 3               xt_question_dup:
0019E5r 3  20 rr rr                     jsr underflow_1
0019E8r 3               
0019E8r 3                               ; Check if TOS is zero
0019E8r 3  B5 00                        lda 0,x
0019EAr 3  15 01                        ora 1,x
0019ECr 3  F0 0A                        beq @done
0019EEr 3               
0019EEr 3                               ; not zero, duplicate
0019EEr 3  CA                           dex
0019EFr 3  CA                           dex
0019F0r 3  B5 02                        lda 2,x
0019F2r 3  95 00                        sta 0,x
0019F4r 3  B5 03                        lda 3,x
0019F6r 3  95 01                        sta 1,x
0019F8r 3               @done:
0019F8r 3  60           z_question_dup: rts
0019F9r 3               
0019F9r 3               
0019F9r 3               
0019F9r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
0019F9r 3               ; ## "r@"  auto  ANS core
0019F9r 3                       ; """https://forth-standard.org/standard/core/RFetch
0019F9r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
0019F9r 3                       ; work normally as well
0019F9r 3                       ;
0019F9r 3                       ; An alternative way to write this word
0019F9r 3                       ; would be to access the elements on the stack directly like 2R@
0019F9r 3                       ; does, these versions should be compared at some point.
0019F9r 3                       ; """
0019F9r 3               xt_r_fetch:
0019F9r 3                               ; get the return address
0019F9r 3  7A                           ply             ; LSB
0019FAr 3  84 rr                        sty tmp1
0019FCr 3  7A                           ply             ; MSB
0019FDr 3               
0019FDr 3                               ; --- CUT FOR NATIVE COMPILE ---
0019FDr 3               
0019FDr 3                               ; get the actual top of Return Stack
0019FDr 3  CA                           dex
0019FEr 3  CA                           dex
0019FFr 3               
0019FFr 3  68                           pla             ; LSB
001A00r 3  95 00                        sta 0,x
001A02r 3  68                           pla             ; MSB
001A03r 3  95 01                        sta 1,x
001A05r 3               
001A05r 3                               ; now we have to put that value back
001A05r 3  48                           pha
001A06r 3  B5 00                        lda 0,x
001A08r 3  48                           pha
001A09r 3               
001A09r 3                               ; --- CUT FOR NATIVE COMPILE ---
001A09r 3               
001A09r 3                               ; restore return value
001A09r 3  5A                           phy             ; MSB
001A0Ar 3  A4 rr                        ldy tmp1
001A0Cr 3  5A                           phy             ; LSB
001A0Dr 3               
001A0Dr 3  60           z_r_fetch:      rts
001A0Er 3               
001A0Er 3               
001A0Er 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001A0Er 3               ; ## "r>"  auto  ANS core
001A0Er 3                       ; """https://forth-standard.org/standard/core/Rfrom
001A0Er 3                       ; Move Top of Return Stack to Top of Data Stack.
001A0Er 3                       ;
001A0Er 3                       ; We have to move
001A0Er 3                       ; the RTS address out of the way first. This word is handled
001A0Er 3                       ; differently for native and and subroutine compilation, see COMPILE,
001A0Er 3                       ; This is a compile-only word
001A0Er 3                       ; """
001A0Er 3               
001A0Er 3               xt_r_from:
001A0Er 3                               ; Rescue the address of the return jump that is currently
001A0Er 3                               ; on top of the Return Stack. If this word is natively
001A0Er 3                               ; compiled, this is a total waste of time
001A0Er 3  68                           pla             ; LSB
001A0Fr 3  85 rr                        sta tmptos
001A11r 3  7A                           ply             ; MSB
001A12r 3               
001A12r 3                               ; --- CUT FOR NATIVE CODING ---
001A12r 3               
001A12r 3  CA                           dex
001A13r 3  CA                           dex
001A14r 3               
001A14r 3                               ; now we can access the actual data
001A14r 3               
001A14r 3  68                           pla             ; LSB
001A15r 3  95 00                        sta 0,x
001A17r 3  68                           pla             ; MSB
001A18r 3  95 01                        sta 1,x
001A1Ar 3               
001A1Ar 3                               ; --- CUT FOR NATIVE CODING ---
001A1Ar 3               
001A1Ar 3                               ; restore the return address
001A1Ar 3  5A                           phy             ; MSB
001A1Br 3  A5 rr                        lda tmptos
001A1Dr 3  48                           pha             ; LSB
001A1Er 3               
001A1Er 3  60           z_r_from:       rts
001A1Fr 3               
001A1Fr 3               
001A1Fr 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001A1Fr 3               ; ## "r>input"  tested  Tali Forth
001A1Fr 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001A1Fr 3                       ; and toin from the Return Stack.
001A1Fr 3                       ;
001A1Fr 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001A1Fr 3                       ; """
001A1Fr 3               
001A1Fr 3               xt_r_to_input:
001A1Fr 3               
001A1Fr 3                               ; We arrive here with the return address on the top of the
001A1Fr 3                               ; 65c02's stack. We need to move it out of the way first
001A1Fr 3  68                           pla
001A20r 3  85 rr                        sta tmp1
001A22r 3  68                           pla
001A23r 3  85 rr                        sta tmp1+1
001A25r 3               
001A25r 3                               ; This assumes that insrc is the first of eight bytes and
001A25r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001A25r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001A25r 3                               ; of the Return Stack.
001A25r 3  A0 00                        ldy #0
001A27r 3               @loop:
001A27r 3  68                           pla
001A28r 3  99 rr rr                     sta insrc,y
001A2Br 3  C8                           iny
001A2Cr 3  C0 08                        cpy #8
001A2Er 3  D0 F7                        bne @loop
001A30r 3               
001A30r 3                               ; Restore address for return jump
001A30r 3  A5 rr                        lda tmp1+1
001A32r 3  48                           pha
001A33r 3  A5 rr                        lda tmp1
001A35r 3  48                           pha
001A36r 3               
001A36r 3  60           z_r_to_input: 	rts
001A37r 3               
001A37r 3               
001A37r 3               
001A37r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001A37r 3               ; ## "recurse"  auto  ANS core
001A37r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001A37r 3                       ;
001A37r 3                       ; This word may not be natively compiled
001A37r 3                       ; """
001A37r 3               
001A37r 3               xt_recurse:
001A37r 3                               ; The whole routine amounts to compiling a reference to
001A37r 3                               ; the word that is being compiled. First, we save the JSR
001A37r 3                               ; instruction
001A37r 3  A0 00                        ldy #0
001A39r 3               
001A39r 3  A9 20                        lda #$20        ; opcode for JSR
001A3Br 3  91 rr                        sta (cp),y
001A3Dr 3  C8                           iny
001A3Er 3               
001A3Er 3                               ; Next, we save the LSB and MSB of the xt of the word
001A3Er 3                               ; we are currently working on. We first need to see if
001A3Er 3                               ; WORKWORD has the nt (: started the word) or the
001A3Er 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001A3Er 3  24 rr                        bit status
001A40r 3  70 0C                        bvs @nt_in_workword
001A42r 3               
001A42r 3                               ; This is a special :NONAME word. Just copy the xt
001A42r 3                               ; from WORKWORD into the dictionary.
001A42r 3  A5 rr                        lda workword
001A44r 3  91 rr                        sta (cp),y
001A46r 3  C8                           iny
001A47r 3  A5 rr                        lda workword+1
001A49r 3  91 rr                        sta (cp),y
001A4Br 3  C8                           iny
001A4Cr 3  80 1B                        bra @update_cp
001A4Er 3               
001A4Er 3               @nt_in_workword:
001A4Er 3                               ; This is a regular : word, so the xt is four bytes down
001A4Er 3                               ; from the nt which we saved in WORKWORD. We could probably
001A4Er 3                               ; use NAME>INT here but this is going to be faster, and
001A4Er 3                               ; fast counts with recursion
001A4Er 3  A5 rr                        lda workword            ; LSB
001A50r 3  18                           clc
001A51r 3  69 04                        adc #4
001A53r 3  85 rr                        sta tmp1
001A55r 3  A5 rr                        lda workword+1          ; MSB
001A57r 3  69 00                        adc #0
001A59r 3  85 rr                        sta tmp1+1
001A5Br 3               
001A5Br 3  B2 rr                        lda (tmp1)
001A5Dr 3  91 rr                        sta (cp),y
001A5Fr 3  5A                           phy
001A60r 3  A0 01                        ldy #1
001A62r 3  B1 rr                        lda (tmp1),y
001A64r 3  7A                           ply
001A65r 3  C8                           iny
001A66r 3  91 rr                        sta (cp),y
001A68r 3  C8                           iny
001A69r 3               
001A69r 3               @update_cp:
001A69r 3  98                           tya
001A6Ar 3  18                           clc
001A6Br 3  65 rr                        adc cp
001A6Dr 3  85 rr                        sta cp
001A6Fr 3  90 02                        bcc @done
001A71r 3  E6 rr                        inc cp+1
001A73r 3               @done:
001A73r 3  60           z_recurse:      rts
001A74r 3               
001A74r 3               
001A74r 3               
001A74r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001A74r 3               ; ## "refill"  tested  ANS core ext
001A74r 3                       ; """https://forth-standard.org/standard/core/REFILL
001A74r 3                       ; Attempt to fill the input buffer from the input source, returning
001A74r 3                       ; a true flag if successful. When the input source is the user input
001A74r 3                       ; device, attempt to receive input into the terminal input buffer. If
001A74r 3                       ; successful, make the result the input buffer, set >IN to zero, and
001A74r 3                       ; return true. Receipt of a line containing no characters is considered
001A74r 3                       ; successful. If there is no input available from the current input
001A74r 3                       ; source, return false. When the input source is a string from EVALUATE,
001A74r 3                       ; return false and perform no other action." See
001A74r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001A74r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001A74r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001A74r 3                       ; entire block as a 1024 byte string.
001A74r 3                       ; """"
001A74r 3               
001A74r 3               xt_refill:
001A74r 3                               ; Get input source from SOURCE-ID. This is an
001A74r 3                               ; optimized version of a subroutine jump to SOURCE-ID
001A74r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001A76r 3  D0 2D                        bne @src_not_kbd
001A78r 3               
001A78r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001A78r 3                               ; with ACCEPT, which wants the address of the current input
001A78r 3                               ; buffer NOS and the max number of characters to accept TOS
001A78r 3  CA                           dex
001A79r 3  CA                           dex
001A7Ar 3  CA                           dex
001A7Br 3  CA                           dex
001A7Cr 3               
001A7Cr 3  A5 rr                        lda cib                 ; address of CIB is NOS
001A7Er 3  95 02                        sta 2,x
001A80r 3  A5 rr                        lda cib+1
001A82r 3  95 03                        sta 3,x
001A84r 3               
001A84r 3  64 rr                        stz ciblen              ; go in with empty buffer
001A86r 3  64 rr                        stz ciblen+1
001A88r 3               
001A88r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001A8Ar 3  95 00                        sta 0,x
001A8Cr 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001A8Er 3               
001A8Er 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001A91r 3               
001A91r 3                               ; ACCEPT returns the number of characters accepted, which
001A91r 3                               ; belong in CIBLEN
001A91r 3  B5 00                        lda 0,x
001A93r 3  85 rr                        sta ciblen
001A95r 3  B5 01                        lda 1,x
001A97r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001A99r 3               
001A99r 3                               ; make >IN point to beginning of buffer
001A99r 3  64 rr                        stz toin
001A9Br 3  64 rr                        stz toin+1
001A9Dr 3               
001A9Dr 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001A9Fr 3  95 00                        sta 0,x
001AA1r 3  95 01                        sta 1,x
001AA3r 3               
001AA3r 3  80 10                        bra @done
001AA5r 3               
001AA5r 3               @src_not_kbd:
001AA5r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001AA5r 3                               ; memory or a file (remember, no blocks in this version).
001AA5r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001AA5r 3  1A                           inc
001AA6r 3  D0 08                        bne @src_not_string
001AA8r 3               
001AA8r 3                               ; Simply return FALSE flag as per specification
001AA8r 3  CA                           dex
001AA9r 3  CA                           dex
001AAAr 3  74 00                        stz 0,x
001AACr 3  74 01                        stz 1,x
001AAEr 3               
001AAEr 3  80 05                        bra z_refill
001AB0r 3               
001AB0r 3               @src_not_string:
001AB0r 3                               ; Since we don't have blocks, this must mean that we are trying
001AB0r 3                               ; to read from a file. However, we don't have files yet, so we
001AB0r 3                               ; report an error and jump to ABORT.
001AB0r 3  A9 01                        lda #err_badsource
001AB2r 3  4C rr rr                     jmp error
001AB5r 3               @done:
001AB5r 3  60           z_refill:       rts
001AB6r 3               
001AB6r 3               
001AB6r 3               
001AB6r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001AB6r 3               ; ## "repeat"  auto  ANS core
001AB6r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001AB6r 3               
001AB6r 3               xt_repeat:
001AB6r 3                               ; Run again first
001AB6r 3  20 rr rr                     jsr xt_again
001AB9r 3               
001AB9r 3                               ; Stuff HERE in for the branch address
001AB9r 3                               ; to get out of the loop
001AB9r 3  20 rr rr                     jsr xt_here
001ABCr 3  20 rr rr                     jsr xt_swap
001ABFr 3  20 rr rr                     jsr xt_store
001AC2r 3               
001AC2r 3  60           z_repeat:       rts
001AC3r 3               
001AC3r 3               
001AC3r 3               
001AC3r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001AC3r 3               ; ## "]"  auto  ANS core
001AC3r 3                       ; """https://forth-standard.org/standard/right-bracket
001AC3r 3                       ; This is an immediate word.
001AC3r 3                       ; """
001AC3r 3               xt_right_bracket:
001AC3r 3  A9 FF                        lda #$FF
001AC5r 3  85 rr                        sta state
001AC7r 3  85 rr                        sta state+1
001AC9r 3               z_right_bracket:
001AC9r 3  60                           rts
001ACAr 3               
001ACAr 3               
001ACAr 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001ACAr 3               ; ## "root-wordlist"  tested  Tali Editor
001ACAr 3               xt_root_wordlist:
001ACAr 3  CA                           dex             ; The WID for the Root wordlist is 3.
001ACBr 3  CA                           dex
001ACCr 3  A9 03                        lda #3
001ACEr 3  95 00                        sta 0,x
001AD0r 3  74 01                        stz 1,x
001AD2r 3               
001AD2r 3               z_root_wordlist:
001AD2r 3  60                           rts
001AD3r 3               
001AD3r 3               
001AD3r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001AD3r 3               ; ## "rot"  auto  ANS core
001AD3r 3                       ; """https://forth-standard.org/standard/core/ROT
001AD3r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001AD3r 3                       ; on top!
001AD3r 3                       ; """
001AD3r 3               
001AD3r 3               xt_rot:
001AD3r 3  20 rr rr                     jsr underflow_3
001AD6r 3               
001AD6r 3  B4 05                        ldy 5,x         ; MSB first
001AD8r 3  B5 03                        lda 3,x
001ADAr 3  95 05                        sta 5,x
001ADCr 3  B5 01                        lda 1,x
001ADEr 3  95 03                        sta 3,x
001AE0r 3  94 01                        sty 1,x
001AE2r 3               
001AE2r 3  B4 04                        ldy 4,x         ; LSB next
001AE4r 3  B5 02                        lda 2,x
001AE6r 3  95 04                        sta 4,x
001AE8r 3  B5 00                        lda 0,x
001AEAr 3  95 02                        sta 2,x
001AECr 3  94 00                        sty 0,x
001AEEr 3               
001AEEr 3  60           z_rot:          rts
001AEFr 3               
001AEFr 3               
001AEFr 3               
001AEFr 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
001AEFr 3               ; ## "rshift"  auto  ANS core
001AEFr 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
001AEFr 3               xt_rshift:
001AEFr 3  20 rr rr                     jsr underflow_2
001AF2r 3               
001AF2r 3                               ; We shift maximal by 16 bits, mask everything else
001AF2r 3  B5 00                        lda 0,x
001AF4r 3  29 0F                        and #%00001111
001AF6r 3  F0 08                        beq @done               ; if 0 shifts, quit
001AF8r 3               
001AF8r 3  A8                           tay
001AF9r 3               @loop:
001AF9r 3  56 03                        lsr 3,x
001AFBr 3  76 02                        ror 2,x
001AFDr 3  88                           dey
001AFEr 3  D0 F9                        bne @loop
001B00r 3               @done:
001B00r 3  E8                           inx
001B01r 3  E8                           inx
001B02r 3               
001B02r 3  60           z_rshift:       rts
001B03r 3               
001B03r 3               
001B03r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001B03r 3               ; ## "s\""  auto  ANS core
001B03r 3                       ; """https://forth-standard.org/standard/core/Seq
001B03r 3                       ; Store address and length of string given, returning ( addr u ).
001B03r 3                       ; ANS core claims this is compile-only, but the file set expands it
001B03r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001B03r 3                       ; are evil. We follow general usage. This is just like S" except
001B03r 3                       ; that it allows for some special escaped characters.
001B03r 3                       ; """
001B03r 3               
001B03r 3               xt_s_backslash_quote:
001B03r 3                               ; tmp2 will be used to determine if we are handling
001B03r 3                               ; escaped characters or not. In this case, we are,
001B03r 3                               ; so set it to $FF (the upper byte will be used to
001B03r 3                               ; determine if we just had a \ and the next character
001B03r 3                               ; needs to be modifed as an escaped character).
001B03r 3  A9 FF                        lda #$FF
001B05r 3  85 rr                        sta tmp2
001B07r 3  64 rr                        stz tmp2+1
001B09r 3               
001B09r 3                               ; Now that the flag is set, jump into s_quote to process
001B09r 3                               ; the string.
001B09r 3  20 rr rr                     jsr s_quote_start
001B0Cr 3               @done:
001B0Cr 3               z_s_backslash_quote:
001B0Cr 3  60                           rts
001B0Dr 3               
001B0Dr 3               
001B0Dr 3               ; This is a helper function for s_backslash_quote to convert a character
001B0Dr 3               ; from ASCII to the corresponding hex value, eg 'F'->15
001B0Dr 3               convert_hex_value:
001B0Dr 3               
001B0Dr 3  C9 41                cmp #'A'
001B0Fr 3  90 07                bcc @digit
001B11r 3               
001B11r 3                       ; It's A-F
001B11r 3  29 DF                and #$DF                ; Make it uppercase.
001B13r 3  38                   sec
001B14r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
001B16r 3  80 03                bra @done
001B18r 3               
001B18r 3               @digit:
001B18r 3                       ; It's 0-9
001B18r 3  38                   sec
001B19r 3  E9 30                sbc #'0'
001B1Br 3               
001B1Br 3               @done:
001B1Br 3  60                   rts
001B1Cr 3               
001B1Cr 3               
001B1Cr 3               
001B1Cr 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
001B1Cr 3               ; ## "search-wordlist" auto ANS search
001B1Cr 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
001B1Cr 3               
001B1Cr 3               xt_search_wordlist:
001B1Cr 3  20 rr rr                     jsr underflow_3
001B1Fr 3               
001B1Fr 3                               ; Set up tmp1 with the wordlist indicated by wid
001B1Fr 3                               ; on the stack. Start by putting the base address
001B1Fr 3                               ; of the wordlists in tmp2.
001B1Fr 3  A5 rr                        lda up
001B21r 3  18                           clc
001B22r 3  69 06                        adc #wordlists_offset
001B24r 3  85 rr                        sta tmp2
001B26r 3  A5 rr                        lda up+1
001B28r 3  69 00                        adc #0          ; Adding carry
001B2Ar 3  85 rr                        sta tmp2+1
001B2Cr 3               
001B2Cr 3                               ; Add the wid (in cells) to the base address.
001B2Cr 3  B5 00                        lda 0,x
001B2Er 3  0A                           asl             ; Convert wid to offset in cells (x2)
001B2Fr 3  65 rr                        adc tmp2
001B31r 3  85 rr                        sta tmp2
001B33r 3  90 02                        bcc @1
001B35r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
001B37r 3               
001B37r 3                               ; tmp2 now holds the address of the dictionary pointer
001B37r 3                               ; for the given wordlist.
001B37r 3               @1:
001B37r 3                               ; Remove the wid from the stack.
001B37r 3  E8                           inx
001B38r 3  E8                           inx
001B39r 3               
001B39r 3                               ; check for special case of an empty string (length zero)
001B39r 3  B5 00                        lda 0,x
001B3Br 3  15 01                        ora 1,x
001B3Dr 3  D0 03                        bne @check_wordlist
001B3Fr 3  4C rr rr                     jmp @done
001B42r 3               
001B42r 3               @check_wordlist:
001B42r 3                               ; Check for special case of empty wordlist
001B42r 3                               ; (dictionary pointer, in tmp2, is 0)
001B42r 3  A5 rr                        lda tmp2
001B44r 3  05 rr                        ora tmp2+1
001B46r 3  D0 03                        bne @have_string
001B48r 3  4C rr rr                     jmp @done
001B4Br 3               
001B4Br 3               @have_string:
001B4Br 3                               ; set up first loop iteration
001B4Br 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
001B4Dr 3  85 rr                        sta tmp1
001B4Fr 3               
001B4Fr 3  E6 rr                        inc tmp2                ; Move to the upper byte
001B51r 3  D0 02                        bne @2
001B53r 3  E6 rr                        inc tmp2+1
001B55r 3               @2:
001B55r 3  B2 rr                        lda (tmp2)
001B57r 3  85 rr                        sta tmp1+1
001B59r 3               
001B59r 3                               ; Reuse tmp2 to hold the address of the mystery string.
001B59r 3  B5 02                        lda 2,x                 ; Address of mystery string
001B5Br 3  85 rr                        sta tmp2
001B5Dr 3  B5 03                        lda 3,x
001B5Fr 3  85 rr                        sta tmp2+1
001B61r 3               
001B61r 3               @loop:
001B61r 3                               ; first quick test: Are strings the same length?
001B61r 3  B2 rr                        lda (tmp1)
001B63r 3  D5 00                        cmp 0,x
001B65r 3  D0 7B                        bne @next_entry
001B67r 3               
001B67r 3               @compare_string:
001B67r 3                               ; are the same length, so we now have to compare each
001B67r 3                               ; character
001B67r 3               
001B67r 3                               ; second quick test: Is the first character the same?
001B67r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001B69r 3               
001B69r 3                               ; Lowercase the incoming charcter.
001B69r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001B6Br 3  B0 07                        bcs @compare_first
001B6Dr 3  C9 41                        cmp #$41        ; ASCII 'A'
001B6Fr 3  90 03                        bcc @compare_first
001B71r 3               
001B71r 3                               ; An uppercase letter has been located.  Make it
001B71r 3                               ; lowercase.
001B71r 3  18                           clc
001B72r 3  69 20                        adc #$20
001B74r 3               
001B74r 3               @compare_first:
001B74r 3  A0 08                        ldy #8          ; Offset in nt to name
001B76r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001B78r 3  D0 68                        bne @next_entry
001B7Ar 3               
001B7Ar 3                               ; string length are the same and the first character is the
001B7Ar 3                               ; same. If the length of the string is 1, we're already done
001B7Ar 3  B5 00                        lda 0,x
001B7Cr 3  3A                           dec
001B7Dr 3  F0 2C                        beq @success
001B7Fr 3               
001B7Fr 3                               ; No such luck: The strings are the same length and the first
001B7Fr 3                               ; char is the same, but the word is more than one char long.
001B7Fr 3                               ; So we suck it up and compare every single character. We go
001B7Fr 3                               ; from back to front, because words like CELLS and CELL+ would
001B7Fr 3                               ; take longer otherwise. We can also shorten the loop by one
001B7Fr 3                               ; because we've already compared the first char.
001B7Fr 3               
001B7Fr 3                               ; The string of the word we're testing against is 8 bytes down
001B7Fr 3  A5 rr                        lda tmp1
001B81r 3  48                           pha             ; Preserve tmp1 on the return stack.
001B82r 3  18                           clc
001B83r 3  69 08                        adc #8
001B85r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001B87r 3  A5 rr                        lda tmp1+1
001B89r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001B8Ar 3  69 00                        adc #0          ; we only need the carry
001B8Cr 3  85 rr                        sta tmp1+1
001B8Er 3               
001B8Er 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001B90r 3  88                           dey
001B91r 3               
001B91r 3               @string_loop:
001B91r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001B93r 3               
001B93r 3                               ; Lowercase the incoming charcter.
001B93r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001B95r 3  B0 07                        bcs @check_char
001B97r 3  C9 41                        cmp #$41        ; ASCII 'A'
001B99r 3  90 03                        bcc @check_char
001B9Br 3               
001B9Br 3                               ; An uppercase letter has been located.  Make it
001B9Br 3                               ; lowercase.
001B9Br 3  18                           clc
001B9Cr 3  69 20                        adc #$20
001B9Er 3               @check_char:
001B9Er 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001BA0r 3  D0 3A                        bne @next_entry_tmp1
001BA2r 3               
001BA2r 3  88                           dey
001BA3r 3  D0 EC                        bne @string_loop
001BA5r 3               
001BA5r 3               @success_tmp1:
001BA5r 3  68                           pla             ; Restore tmp1 from the return stack.
001BA6r 3  85 rr                        sta tmp1+1
001BA8r 3  68                           pla
001BA9r 3  85 rr                        sta tmp1
001BABr 3               
001BABr 3               @success:
001BABr 3                               ; The strings match. Drop the count and put correct nt TOS
001BABr 3  E8                           inx
001BACr 3  E8                           inx
001BADr 3  A5 rr                        lda tmp1
001BAFr 3  95 00                        sta 0,x
001BB1r 3  A5 rr                        lda tmp1+1
001BB3r 3  95 01                        sta 1,x
001BB5r 3               
001BB5r 3                               ; Change the nt into an xt, but save a copy of the nt
001BB5r 3                               ; to look up whether the word is immediate or not.
001BB5r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001BB8r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001BBBr 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001BBEr 3               
001BBEr 3  A0 00                        ldy #0                  ; Prepare flag
001BC0r 3               
001BC0r 3                               ; The flags are in the second byte of the header
001BC0r 3  F6 00                        inc 0,x
001BC2r 3  D0 02                        bne @3
001BC4r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001BC6r 3               @3:
001BC6r 3  A1 00                        lda (0,x)               ; ( xt char )
001BC8r 3  29 04                        and #IM
001BCAr 3  D0 08                        bne @immediate          ; bit set, we're immediate
001BCCr 3               
001BCCr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001BCEr 3  95 00                        sta 0,x
001BD0r 3  95 01                        sta 1,x
001BD2r 3  80 28                        bra @done_nodrop
001BD4r 3               
001BD4r 3               @immediate:
001BD4r 3  A9 01                        lda #1                  ; We're immediate, return 1
001BD6r 3  95 00                        sta 0,x
001BD8r 3  74 01                        stz 1,x
001BDAr 3               
001BDAr 3  80 20                        bra @done_nodrop
001BDCr 3               
001BDCr 3               @next_entry_tmp1:
001BDCr 3  68                           pla             ; Restore tmp1 from the return stack.
001BDDr 3  85 rr                        sta tmp1+1
001BDFr 3  68                           pla
001BE0r 3  85 rr                        sta tmp1
001BE2r 3               @next_entry:
001BE2r 3                               ; Not the same, so we get the next word. Next header
001BE2r 3                               ; address is two bytes down
001BE2r 3  A0 02                        ldy #2
001BE4r 3  B1 rr                        lda (tmp1),y
001BE6r 3  48                           pha
001BE7r 3  C8                           iny
001BE8r 3  B1 rr                        lda (tmp1),y
001BEAr 3  85 rr                        sta tmp1+1
001BECr 3  68                           pla
001BEDr 3  85 rr                        sta tmp1
001BEFr 3               
001BEFr 3                               ; If we got a zero, we've walked the whole Dictionary and
001BEFr 3                               ; return as a failure, otherwise try again
001BEFr 3  05 rr                        ora tmp1+1
001BF1r 3  F0 03                        beq @fail_done
001BF3r 3  4C rr rr                     jmp @loop
001BF6r 3               
001BF6r 3               @fail_done:
001BF6r 3  74 02                        stz 2,x         ; failure flag
001BF8r 3  74 03                        stz 3,x
001BFAr 3               @done:
001BFAr 3  E8                           inx
001BFBr 3  E8                           inx
001BFCr 3               @done_nodrop:
001BFCr 3               z_search_wordlist:
001BFCr 3  60                           rts
001BFDr 3               
001BFDr 3               
001BFDr 3               
001BFDr 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
001BFDr 3               ; ## "see" tested  ANS tools
001BFDr 3                       ; """https://forth-standard.org/standard/tools/SEE
001BFDr 3                       ; SEE takes the name of a word and prints its name token (nt),
001BFDr 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
001BFDr 3                       ; code and disassembles it.
001BFDr 3                       ; """
001BFDr 3               
001BFDr 3               xt_see:
001BFDr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
001C00r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
001C03r 3               
001C03r 3                               ; If we got back a zero we don't know that word and so we quit
001C03r 3                               ; with an error
001C03r 3  B5 00                        lda 0,x
001C05r 3  15 01                        ora 1,x
001C07r 3  D0 05                        bne @1
001C09r 3               
001C09r 3  A9 05                        lda #err_noname
001C0Br 3  4C rr rr                     jmp error
001C0Er 3               @1:
001C0Er 3  20 rr rr                     jsr xt_cr
001C11r 3               
001C11r 3                               ; We have a legal word, so let's get serious. Save the current
001C11r 3                               ; number base and use hexadecimal instead.
001C11r 3  A5 rr                        lda base
001C13r 3  48                           pha
001C14r 3  20 rr rr                     jsr xt_hex
001C17r 3               
001C17r 3  A9 0A                        lda #str_see_nt
001C19r 3  20 rr rr                     jsr print_string_no_lf
001C1Cr 3               
001C1Cr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001C1Fr 3  20 rr rr                     jsr xt_u_dot
001C22r 3  20 rr rr                     jsr xt_space            ; ( nt )
001C25r 3               
001C25r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001C28r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001C2Br 3               
001C2Br 3  A9 0B                        lda #str_see_xt
001C2Dr 3  20 rr rr                     jsr print_string_no_lf
001C30r 3               
001C30r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
001C33r 3  20 rr rr                     jsr xt_u_dot
001C36r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
001C39r 3               
001C39r 3                               ; We print letters for flags and then later follow it with 1 or
001C39r 3                               ; 0 to mark if which flag is set
001C39r 3  A9 09                        lda #str_see_flags
001C3Br 3  20 rr rr                     jsr print_string_no_lf
001C3Er 3               
001C3Er 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
001C41r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
001C44r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
001C47r 3               
001C47r 3  B5 00                        lda 0,x
001C49r 3               
001C49r 3                               ; This is crude, but for the moment it is good enough
001C49r 3  A0 06                        ldy #6                  ; Not all bits are used
001C4Br 3               @flag_loop:
001C4Br 3  48                           pha
001C4Cr 3  29 01                        and #%00000001
001C4Er 3  18                           clc
001C4Fr 3  69 30                        adc #$30                ; ASCII "0"
001C51r 3  20 rr rr                     jsr emit_a
001C54r 3  20 rr rr                     jsr xt_space
001C57r 3               
001C57r 3  68                           pla
001C58r 3  6A                           ror                     ; Next flag
001C59r 3               
001C59r 3  88                           dey
001C5Ar 3  D0 EF                        bne @flag_loop
001C5Cr 3               
001C5Cr 3  20 rr rr                     jsr xt_cr
001C5Fr 3               
001C5Fr 3  E8                           inx
001C60r 3  E8                           inx                     ; ( nt xt )
001C61r 3               
001C61r 3                               ; Figure out the size
001C61r 3  A9 0C                        lda #str_see_size
001C63r 3  20 rr rr                     jsr print_string_no_lf
001C66r 3               
001C66r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001C69r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
001C6Cr 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
001C6Fr 3  20 rr rr                     jsr xt_decimal
001C72r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
001C75r 3  20 rr rr                     jsr xt_hex
001C78r 3  20 rr rr                     jsr xt_cr
001C7Br 3               
001C7Br 3                               ; Dump hex and disassemble
001C7Br 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
001C7Er 3  20 rr rr                     jsr xt_dump
001C81r 3  20 rr rr                     jsr xt_cr
001C84r 3  20 rr rr                     jsr xt_disasm
001C87r 3               
001C87r 3  68                           pla
001C88r 3  85 rr                        sta base
001C8Ar 3               
001C8Ar 3  60           z_see:          rts
001C8Br 3               
001C8Br 3               
001C8Br 3               
001C8Br 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
001C8Br 3               ; ## "set-current" auto ANS search
001C8Br 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
001C8Br 3               
001C8Br 3               xt_set_current:
001C8Br 3  20 rr rr                     jsr underflow_1
001C8Er 3               
001C8Er 3                               ; Save the value from the data stack.
001C8Er 3  A0 04                        ldy #current_offset
001C90r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
001C92r 3  91 rr                        sta (up),y      ; so only the LSB is used.
001C94r 3               
001C94r 3  E8                           inx
001C95r 3  E8                           inx
001C96r 3               
001C96r 3  60           z_set_current:  rts
001C97r 3               
001C97r 3               
001C97r 3               
001C97r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
001C97r 3               ; ## "set-order" auto ANS search
001C97r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
001C97r 3               
001C97r 3               xt_set_order:
001C97r 3                               ; Test for -1 TOS
001C97r 3  A9 FF                        lda #$FF
001C99r 3  D5 01                        cmp 1,x
001C9Br 3  D0 12                        bne @start
001C9Dr 3  D5 00                        cmp 0,x
001C9Fr 3  D0 0E                        bne @start
001CA1r 3               
001CA1r 3                               ; There is a -1 TOS.  Replace it with the default
001CA1r 3                               ; search order, which is just the FORTH-WORDLIST.
001CA1r 3  CA                           dex             ; Make room for the count.
001CA2r 3  CA                           dex
001CA3r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
001CA5r 3  A9 03                        lda #3
001CA7r 3  95 02                        sta 2,x
001CA9r 3  74 01                        stz 1,x         ; Count is 1.
001CABr 3  A9 01                        lda #1
001CADr 3  95 00                        sta 0,x
001CAFr 3               
001CAFr 3                               ; Continue processing with ( forth-wordlist 1 -- )
001CAFr 3               @start:
001CAFr 3                               ; Set #ORDER - the number of wordlists in the search order.
001CAFr 3  A0 1E                        ldy #num_order_offset
001CB1r 3  B5 00                        lda 0,x
001CB3r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
001CB5r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
001CB7r 3                                               ; Only the low byte is saved in tmp1 as
001CB7r 3                                               ; only 8 wordlists are allowed.
001CB7r 3               
001CB7r 3  E8                           inx             ; Drop the count off the data stack.
001CB8r 3  E8                           inx
001CB9r 3               
001CB9r 3                               ; Check if there are zero wordlists.
001CB9r 3  A5 rr                        lda tmp1
001CBBr 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
001CBDr 3               
001CBDr 3                               ; Move the wordlist ids from the data stack to the search order.
001CBDr 3  A0 1F                        ldy #search_order_offset
001CBFr 3               @loop:
001CBFr 3                               ; Move one wordlist id over into the search order.
001CBFr 3  B5 00                        lda 0,x         ; The search order is a byte array
001CC1r 3  91 rr                        sta (up),y      ; so only save the LSB
001CC3r 3  C8                           iny
001CC4r 3               
001CC4r 3                               ; Remove it from the data stack.
001CC4r 3  E8                           inx
001CC5r 3  E8                           inx
001CC6r 3               
001CC6r 3                               ; See if that was the last one to process (first in the list).
001CC6r 3  C6 rr                        dec tmp1
001CC8r 3  D0 F5                        bne @loop
001CCAr 3               
001CCAr 3               @done:
001CCAr 3  60           z_set_order:    rts
001CCBr 3               
001CCBr 3               
001CCBr 3               
001CCBr 3               
001CCBr 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001CCBr 3               ; ## "s""  auto  ANS core
001CCBr 3                       ; """https://forth-standard.org/standard/core/Sq
001CCBr 3                       ; Store address and length of string given, returning ( addr u ).
001CCBr 3                       ; ANS core claims this is compile-only, but the file set expands it
001CCBr 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001CCBr 3                       ; are evil. We follow general usage.
001CCBr 3                       ;
001CCBr 3                       ; Can also be realized as
001CCBr 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
001CCBr 3                       ; but it is used so much we want it in code.
001CCBr 3                       ; """
001CCBr 3               
001CCBr 3               xt_s_quote:
001CCBr 3                               ; tmp2 will be used to determine if we are handling
001CCBr 3                               ; escaped characters or not.  In this case, we are
001CCBr 3                               ; not, so set it to zero.
001CCBr 3  64 rr                        stz tmp2
001CCDr 3  64 rr                        stz tmp2+1
001CCFr 3               
001CCFr 3               s_quote_start:
001CCFr 3                               ; Make room on the data stack for the address.
001CCFr 3  CA                           dex
001CD0r 3  CA                           dex
001CD1r 3                               ; Make room on the data stack for the count.
001CD1r 3  CA                           dex
001CD2r 3  CA                           dex
001CD3r 3               
001CD3r 3                               ; Put a jmp over the string data with address to be filled
001CD3r 3                               ; in later.
001CD3r 3  A9 4C                        lda #$4C
001CD5r 3  20 rr rr                     jsr cmpl_a
001CD8r 3               
001CD8r 3                               ; Address to be filled in later, just use $4C for the moment
001CD8r 3  20 rr rr                     jsr cmpl_a
001CDBr 3  20 rr rr                     jsr cmpl_a
001CDEr 3               
001CDEr 3                               ; Save the current value of HERE on the data stack for the
001CDEr 3                               ; address of the string.
001CDEr 3  A5 rr                        lda cp
001CE0r 3  95 02                        sta 2,x
001CE2r 3  A5 rr                        lda cp+1
001CE4r 3  95 03                        sta 3,x
001CE6r 3               
001CE6r 3               @savechars_loop:
001CE6r 3                               ; Start saving the string into the dictionary up to the
001CE6r 3                               ; ending double quote. First, check to see if the input
001CE6r 3                               ; buffer is empty.
001CE6r 3  A5 rr                        lda toin+1              ; MSB
001CE8r 3  C5 rr                        cmp ciblen+1
001CEAr 3  90 2A                        bcc @input_fine         ; unsigned comparison
001CECr 3               
001CECr 3  A5 rr                        lda toin                ; LSB
001CEEr 3  C5 rr                        cmp ciblen
001CF0r 3  90 24                        bcc @input_fine
001CF2r 3               
001CF2r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
001CF2r 3                               ; which uses tmp2 and tmp3. Save and restore them.
001CF2r 3  A5 rr                        lda tmp2
001CF4r 3  48                           pha
001CF5r 3  A5 rr                        lda tmp2+1
001CF7r 3  48                           pha
001CF8r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
001CFAr 3  48                           pha
001CFBr 3               
001CFBr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
001CFEr 3               
001CFEr 3  68                           pla
001CFFr 3  85 rr                        sta tmp3
001D01r 3  68                           pla
001D02r 3  85 rr                        sta tmp2+1
001D04r 3  68                           pla
001D05r 3  85 rr                        sta tmp2
001D07r 3               
001D07r 3                               ; Check result of refill.
001D07r 3  B5 00                        lda 0,x
001D09r 3  15 01                        ora 1,x
001D0Br 3  D0 05                        bne @refill_ok
001D0Dr 3               
001D0Dr 3                               ; Something when wrong with refill.
001D0Dr 3  A9 06                        lda #err_refill
001D0Fr 3  4C rr rr                     jmp error
001D12r 3               
001D12r 3               @refill_ok:
001D12r 3                               ; Remove the refill flag from the data stack.
001D12r 3  E8                           inx
001D13r 3  E8                           inx
001D14r 3               
001D14r 3                               ; For refill success, jump back up to the empty check, just in
001D14r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
001D14r 3                               ; input)
001D14r 3  80 D0                        bra @savechars_loop
001D16r 3               
001D16r 3               @input_fine:
001D16r 3                               ; There should be at least one valid char to use.
001D16r 3                               ; Calculate it's address at CIB+TOIN into tmp1
001D16r 3  A5 rr                        lda cib
001D18r 3  18                           clc
001D19r 3  65 rr                        adc toin        ; LSB
001D1Br 3  85 rr                        sta tmp1
001D1Dr 3  A5 rr                        lda cib+1
001D1Fr 3  65 rr                        adc toin+1      ; MSB
001D21r 3  85 rr                        sta tmp1+1
001D23r 3               
001D23r 3                               ; Get the character
001D23r 3  B2 rr                        lda (tmp1)
001D25r 3               
001D25r 3                               ; Check to see if we are handling escaped characters.
001D25r 3  24 rr                        bit tmp2
001D27r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
001D29r 3  4C rr rr                     jmp @regular_char
001D2Cr 3               
001D2Cr 3               @handle_escapes:
001D2Cr 3                               ; We are handling escaped characters.  See if we have
001D2Cr 3                               ; already seen the backslash.
001D2Cr 3  24 rr                        bit tmp2+1
001D2Er 3  30 03                        bmi @escaped
001D30r 3  4C rr rr                     jmp @not_escaped
001D33r 3               
001D33r 3               @escaped:
001D33r 3               
001D33r 3                               ; We have seen a backslash (previous character). Check to see if
001D33r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
001D33r 3                               ; be clear in that case )
001D33r 3  70 22                        bvs @check_esc_chars
001D35r 3               
001D35r 3                               ; We are in the middle of a \x sequence. Check to see if we
001D35r 3                               ; are on the first or second digit.
001D35r 3  A9 01                        lda #1
001D37r 3  24 rr                        bit tmp2+1
001D39r 3  D0 10                        bne @esc_x_second_digit
001D3Br 3               
001D3Br 3                               ; First digit.
001D3Br 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
001D3Dr 3  B2 rr                        lda (tmp1)  ; Get the char again.
001D3Fr 3               
001D3Fr 3                               ; Convert to hex
001D3Fr 3  20 rr rr                     jsr convert_hex_value
001D42r 3               
001D42r 3                               ; This is the upper nybble, so move it up.
001D42r 3  0A                           asl
001D43r 3  0A                           asl
001D44r 3  0A                           asl
001D45r 3  0A                           asl
001D46r 3  85 rr                        sta tmp3    ; Save it for later.
001D48r 3  4C rr rr                     jmp @next_character
001D4Br 3               
001D4Br 3               @esc_x_second_digit:
001D4Br 3               
001D4Br 3                               ; We are on the second hex digit of a \x sequence. Clear the
001D4Br 3                               ; escaped character flag (because we are handling it right
001D4Br 3                               ; here)
001D4Br 3  64 rr                        stz tmp2+1
001D4Dr 3  B2 rr                        lda (tmp1)
001D4Fr 3               
001D4Fr 3                               ; Convert to hex, combine with value in tmp3
001D4Fr 3  20 rr rr                     jsr convert_hex_value
001D52r 3  05 rr                        ora tmp3
001D54r 3               
001D54r 3  4C rr rr                     jmp @save_character
001D57r 3               
001D57r 3               @check_esc_chars:
001D57r 3                               ; Clear the escaped character flag (because we are
001D57r 3                               ; handling it right here)
001D57r 3  64 rr                        stz tmp2+1
001D59r 3               
001D59r 3                               ; Process the escaped character
001D59r 3               @check_esc_a:
001D59r 3  C9 61                        cmp #'a'
001D5Br 3  D0 05                        bne @check_esc_b
001D5Dr 3               
001D5Dr 3                               ; BEL (ASCII value 7)
001D5Dr 3  A9 07                        lda #7
001D5Fr 3  4C rr rr                     jmp @save_character
001D62r 3               
001D62r 3               @check_esc_b:
001D62r 3  C9 62                        cmp #'b'
001D64r 3  D0 05                        bne @check_esc_e
001D66r 3               
001D66r 3                               ; Backspace (ASCII value 8)
001D66r 3  A9 08                        lda #8
001D68r 3  4C rr rr                     jmp @save_character
001D6Br 3               
001D6Br 3               @check_esc_e:
001D6Br 3  C9 65                        cmp #'e'
001D6Dr 3  D0 04                        bne @check_esc_f
001D6Fr 3               
001D6Fr 3                               ; ESC (ASCII value 27)
001D6Fr 3  A9 1B                        lda #27
001D71r 3  80 75                        bra @save_character
001D73r 3               
001D73r 3               @check_esc_f:
001D73r 3  C9 66                        cmp #'f'
001D75r 3  D0 04                        bne @check_esc_l
001D77r 3               
001D77r 3                               ; FF (ASCII value 12)
001D77r 3  A9 0C                        lda #12
001D79r 3  80 6D                        bra @save_character
001D7Br 3               
001D7Br 3               @check_esc_l:
001D7Br 3  C9 6C                        cmp #'l'
001D7Dr 3  D0 04                        bne @check_esc_m
001D7Fr 3               
001D7Fr 3                               ; LF (ASCII value 10)
001D7Fr 3  A9 0A                        lda #10
001D81r 3  80 65                        bra @save_character
001D83r 3               
001D83r 3               @check_esc_m:
001D83r 3                               ; This one is not like the others because we save two
001D83r 3                               ; characters
001D83r 3  C9 6D                        cmp #'m'
001D85r 3  D0 09                        bne @check_esc_n
001D87r 3               
001D87r 3                               ; CR/LF pair (ASCII values 13, 10)
001D87r 3  A9 0D                        lda #13
001D89r 3  20 rr rr                     jsr cmpl_a
001D8Cr 3  A9 0A                        lda #10
001D8Er 3  80 58                        bra @save_character
001D90r 3               
001D90r 3               @check_esc_n:
001D90r 3  C9 6E                        cmp #'n'
001D92r 3  D0 04                        bne @check_esc_q
001D94r 3               
001D94r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
001D94r 3  A9 0A                        lda #10
001D96r 3  80 50                        bra @save_character
001D98r 3               
001D98r 3               @check_esc_q:
001D98r 3  C9 71                        cmp #'q'
001D9Ar 3  D0 04                        bne @check_esc_r
001D9Cr 3               
001D9Cr 3                               ; Double quote (ASCII value 34)
001D9Cr 3  A9 22                        lda #34
001D9Er 3  80 48                        bra @save_character
001DA0r 3               
001DA0r 3               @check_esc_r:
001DA0r 3  C9 72                        cmp #'r'
001DA2r 3  D0 04                        bne @check_esc_t
001DA4r 3               
001DA4r 3                               ; CR (ASCII value 13)
001DA4r 3  A9 0D                        lda #13
001DA6r 3  80 40                        bra @save_character
001DA8r 3               
001DA8r 3               @check_esc_t:
001DA8r 3  C9 74                        cmp #'t'
001DAAr 3  D0 04                        bne @check_esc_v
001DACr 3               
001DACr 3                               ; Horizontal TAB (ASCII value 9)
001DACr 3  A9 09                        lda #9
001DAEr 3  80 38                        bra @save_character
001DB0r 3               
001DB0r 3               @check_esc_v:
001DB0r 3  C9 76                        cmp #'v'
001DB2r 3  D0 04                        bne @check_esc_z
001DB4r 3               
001DB4r 3                               ; Vertical TAB (ASCII value 11)
001DB4r 3  A9 0B                        lda #11
001DB6r 3  80 30                        bra @save_character
001DB8r 3               
001DB8r 3               @check_esc_z:
001DB8r 3  C9 7A                        cmp #'z'
001DBAr 3  D0 04                        bne @check_esc_quote
001DBCr 3               
001DBCr 3                               ; NULL (ASCII value 0)
001DBCr 3  A9 00                        lda #0
001DBEr 3  80 28                        bra @save_character
001DC0r 3               
001DC0r 3               @check_esc_quote:
001DC0r 3  C9 22                        cmp #$22
001DC2r 3  D0 04                        bne @check_esc_x
001DC4r 3               
001DC4r 3                               ; Double quote (ASCII value 34)
001DC4r 3  A9 22                        lda #34
001DC6r 3  80 20                        bra @save_character
001DC8r 3               
001DC8r 3               @check_esc_x:
001DC8r 3  C9 78                        cmp #'x'
001DCAr 3  D0 06                        bne @check_esc_backslash
001DCCr 3               
001DCCr 3                               ; This one is difficult. We need to get the next TWO
001DCCr 3                               ; characters (which might require a refill in the middle)
001DCCr 3                               ; and combine them as two hex digits. We do this by
001DCCr 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
001DCCr 3                               ; and using bit 0 to keep track of which digit we are on.
001DCCr 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
001DCEr 3  85 rr                        sta tmp2+1
001DD0r 3  80 19                        bra @next_character
001DD2r 3               
001DD2r 3               @check_esc_backslash:
001DD2r 3  C9 5C                        cmp #$5C
001DD4r 3  D0 04                        bne @not_escaped
001DD6r 3               
001DD6r 3                               ; Backslash (ASCII value 92)
001DD6r 3  A9 5C                        lda #92
001DD8r 3  80 0E                        bra @save_character
001DDAr 3               
001DDAr 3               @not_escaped:
001DDAr 3                               ; Check for the backslash to see if we should escape
001DDAr 3                               ; the next char.
001DDAr 3  C9 5C                        cmp #$5C        ; The backslash char
001DDCr 3  D0 06                        bne @regular_char
001DDEr 3               
001DDEr 3                               ; We found a backslash.  Don't save anyhing, but set
001DDEr 3                               ; a flag (in tmp2+1) to handle the next char. We don't
001DDEr 3                               ; try to get the next char here as it may require a
001DDEr 3                               ; refill of the input buffer.
001DDEr 3  A9 FF                        lda #$FF
001DE0r 3  85 rr                        sta tmp2+1
001DE2r 3  80 07                        bra @next_character
001DE4r 3               
001DE4r 3               @regular_char:
001DE4r 3                               ; Check if the current character is the end of the string.
001DE4r 3  C9 22                        cmp #$22        ; ASCII for "
001DE6r 3  F0 0C                        beq @found_string_end
001DE8r 3               
001DE8r 3               @save_character:
001DE8r 3                               ; If we didn't reach the end of the string, compile this
001DE8r 3                               ; character into the dictionary
001DE8r 3  20 rr rr                     jsr cmpl_a
001DEBr 3               
001DEBr 3               @next_character:
001DEBr 3                               ; Move on to the next character.
001DEBr 3  E6 rr                        inc toin
001DEDr 3  D0 02                        bne @savechars_loop_longjump
001DEFr 3  E6 rr                        inc toin+1
001DF1r 3               
001DF1r 3               @savechars_loop_longjump:
001DF1r 3  4C rr rr                     jmp @savechars_loop
001DF4r 3               
001DF4r 3               @found_string_end:
001DF4r 3                               ; Use up the delimiter.
001DF4r 3  E6 rr                        inc toin
001DF6r 3  D0 02                        bne @1
001DF8r 3  E6 rr                        inc toin+1
001DFAr 3               @1:
001DFAr 3                               ; Calculate the length of the string, which is the
001DFAr 3                               ; difference between cp and the address of the start
001DFAr 3                               ; of the string (currently saved on the stack).
001DFAr 3  A5 rr                        lda cp
001DFCr 3  38                           sec
001DFDr 3  F5 02                        sbc 2,x
001DFFr 3  95 00                        sta 0,x         ; LSB
001E01r 3  A5 rr                        lda cp+1
001E03r 3  F5 03                        sbc 3,x
001E05r 3  95 01                        sta 1,x         ; MSB
001E07r 3               
001E07r 3                               ; Update the address of the jump-over jmp instruction.
001E07r 3                               ; First determine location of jmp instructions address.
001E07r 3                               ; It should be 2 bytes before the start of the string.
001E07r 3                               ; Compute it into tmp1, which is no longer being used.
001E07r 3  B5 02                        lda 2,x
001E09r 3  38                           sec
001E0Ar 3  E9 02                        sbc #2
001E0Cr 3  85 rr                        sta tmp1
001E0Er 3  B5 03                        lda 3,x
001E10r 3  E9 00                        sbc #0          ; Propagate borrow
001E12r 3  85 rr                        sta tmp1+1
001E14r 3               
001E14r 3                               ; Update the address of the jump to HERE.
001E14r 3  A5 rr                        lda cp
001E16r 3  92 rr                        sta (tmp1)
001E18r 3  A0 01                        ldy #1
001E1Ar 3  A5 rr                        lda cp+1
001E1Cr 3  91 rr                        sta (tmp1),y
001E1Er 3               
001E1Er 3                               ; What happens next depends on the state (which is bad, but
001E1Er 3                               ; that's the way it works at the moment). If we are
001E1Er 3                               ; interpretating, we save the string to a transient buffer
001E1Er 3                               ; and return that address (used for file calls, see
001E1Er 3                               ; https://forth-standard.org/standard/file/Sq . If we're
001E1Er 3                               ; compiling, we just need SLITERAL
001E1Er 3  A5 rr                        lda state
001E20r 3  05 rr                        ora state+1             ; paranoid
001E22r 3  F0 03                        beq @done
001E24r 3               
001E24r 3                               ; Jump into the middle of the sliteral word, after the
001E24r 3                               ; string data has been compiled into the dictionary,
001E24r 3                               ; because we've already done that step.
001E24r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
001E27r 3               
001E27r 3               @done:
001E27r 3  60           z_s_quote:      rts
001E28r 3               
001E28r 3               
001E28r 3               
001E28r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
001E28r 3               ; ## "s>d"  auto  ANS core
001E28r 3                       ; """https://forth-standard.org/standard/core/StoD"""
001E28r 3               
001E28r 3               xt_s_to_d:
001E28r 3  20 rr rr                     jsr underflow_1
001E2Br 3               
001E2Br 3  CA                           dex
001E2Cr 3  CA                           dex
001E2Dr 3  74 00                        stz 0,x
001E2Fr 3  74 01                        stz 1,x
001E31r 3               
001E31r 3  B5 03                        lda 3,x
001E33r 3  10 04                        bpl @done
001E35r 3               
001E35r 3                               ; negative, extend sign
001E35r 3  D6 00                        dec 0,x
001E37r 3  D6 01                        dec 1,x
001E39r 3               @done:
001E39r 3  60           z_s_to_d:       rts
001E3Ar 3               
001E3Ar 3               
001E3Ar 3               
001E3Ar 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
001E3Ar 3               ; ## "save-buffers"  tested  ANS block
001E3Ar 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
001E3Ar 3               
001E3Ar 3               xt_save_buffers:
001E3Ar 3                               ; Check the buffer status
001E3Ar 3  A0 2C                        ldy #buffstatus_offset
001E3Cr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
001E3Er 3  C9 03                        cmp #3          ; LSB is needed.
001E40r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
001E42r 3               
001E42r 3                               ; We need to save the block.
001E42r 3  20 rr rr                     jsr xt_blkbuffer
001E45r 3  20 rr rr                     jsr xt_buffblocknum
001E48r 3  20 rr rr                     jsr xt_fetch
001E4Br 3  20 rr rr                     jsr xt_block_write
001E4Er 3               
001E4Er 3                               ; Mark the buffer as clean now.
001E4Er 3  A9 01                        lda #1
001E50r 3  A0 2C                        ldy #buffstatus_offset
001E52r 3  91 rr                        sta (up),y
001E54r 3               
001E54r 3               @done:
001E54r 3  60           z_save_buffers: rts
001E55r 3               
001E55r 3               
001E55r 3               
001E55r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
001E55r 3               ; ## "scr"  auto  ANS block ext
001E55r 3                       ; """https://forth-standard.org/standard/block/SCR"""
001E55r 3               xt_scr:
001E55r 3                               ; SCR is at UP + scr_offset
001E55r 3  CA                           dex
001E56r 3  CA                           dex
001E57r 3  18                           clc
001E58r 3  A5 rr                        lda up
001E5Ar 3  69 02                        adc #scr_offset ; Add offset
001E5Cr 3  95 00                        sta 0,x
001E5Er 3  A5 rr                        lda up+1
001E60r 3  69 00                        adc #0          ; Adding carry
001E62r 3  95 01                        sta 1,x
001E64r 3               
001E64r 3  60           z_scr:          rts
001E65r 3               
001E65r 3               
001E65r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
001E65r 3               ; ## "search"   auto  ANS string
001E65r 3                       ; """https://forth-standard.org/standard/string/SEARCH
001E65r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
001E65r 3                       ; addr1 u1). If a match is found the flag will be true and
001E65r 3                       ; addr3 will have the address of the start of the match and u3 will have
001E65r 3                       ; the number of characters remaining from the match point to the end
001E65r 3                       ; of the original string1. If a match is not found, the flag will be
001E65r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
001E65r 3                       ; """
001E65r 3               
001E65r 3               xt_search:
001E65r 3  20 rr rr                     jsr underflow_4
001E68r 3               
001E68r 3                               ; ANS says if the second string is a zero-length string it
001E68r 3                               ; automatically matches.
001E68r 3  B5 00                        lda 0,x
001E6Ar 3  15 01                        ora 1,x
001E6Cr 3  D0 0B                        bne @start_search
001E6Er 3               
001E6Er 3                               ; The second string is a zero length string.  Just remove
001E6Er 3                               ; the second string and put a true flag.
001E6Er 3  E8                           inx             ; Remove u2
001E6Fr 3  E8                           inx
001E70r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
001E72r 3  95 00                        sta 0,x
001E74r 3  95 01                        sta 1,x
001E76r 3  4C rr rr                     jmp z_search
001E79r 3               
001E79r 3               @start_search:
001E79r 3                               ; Put an offset (starting at zero) on the stack.
001E79r 3  20 rr rr                     jsr xt_zero
001E7Cr 3               
001E7Cr 3               @search_loop:
001E7Cr 3                               ; We stop (not found) when u2 + offset > u1
001E7Cr 3                               ; Calculate u2+offset into tmp1
001E7Cr 3  18                           clc
001E7Dr 3  B5 00                        lda 0,x
001E7Fr 3  75 02                        adc 2,x
001E81r 3  85 rr                        sta tmp1
001E83r 3  B5 01                        lda 1,x
001E85r 3  75 03                        adc 3,x
001E87r 3               
001E87r 3               
001E87r 3                               ; Compare to u1. Start with the high byte
001E87r 3  D5 07                        cmp 7,x
001E89r 3  90 12                        bcc @init_comparison ; Obviously less
001E8Br 3  D0 06                        bne @not_found
001E8Dr 3               
001E8Dr 3                               ; The upper address byte matched - check the lower byte
001E8Dr 3                               ; Load u1 first so we can use just a carry to check.
001E8Dr 3  B5 06                        lda 6,x
001E8Fr 3  C5 rr                        cmp tmp1
001E91r 3  B0 0A                        bcs @init_comparison
001E93r 3               
001E93r 3               @not_found:
001E93r 3                               ; The substring isn't in the main string.
001E93r 3                               ; Return just the main string and a false flag.
001E93r 3  E8                           inx             ; Remove offset
001E94r 3  E8                           inx
001E95r 3  E8                           inx             ; Remove u2
001E96r 3  E8                           inx
001E97r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
001E99r 3  74 01                        stz 1,x
001E9Br 3  80 66                        bra z_search
001E9Dr 3               
001E9Dr 3               @init_comparison:
001E9Dr 3                               ; Use tmp1 to hold address in string 1.
001E9Dr 3                               ; Use tmp2 to hold address in string 2.
001E9Dr 3                               ; Use tmp3 to hold the number of characters left to check.
001E9Dr 3               
001E9Dr 3                               ; Compute the starting address in string 1
001E9Dr 3                               ; as addr1 + offset
001E9Dr 3  18                           clc
001E9Er 3  B5 08                        lda 8,x
001EA0r 3  75 00                        adc 0,x
001EA2r 3  85 rr                        sta tmp1
001EA4r 3  B5 09                        lda 9,x
001EA6r 3  75 01                        adc 1,x
001EA8r 3  85 rr                        sta tmp1+1
001EAAr 3               
001EAAr 3                               ; The starting address in string 2 is just addr2.
001EAAr 3  B5 04                        lda 4,x
001EACr 3  85 rr                        sta tmp2
001EAEr 3  B5 05                        lda 5,x
001EB0r 3  85 rr                        sta tmp2+1
001EB2r 3               
001EB2r 3                               ; The number of characters to check is u2.
001EB2r 3  B5 02                        lda 2,x
001EB4r 3  85 rr                        sta tmp3
001EB6r 3  B5 03                        lda 3,x
001EB8r 3  85 rr                        sta tmp3+1
001EBAr 3               
001EBAr 3               @comparison_loop:
001EBAr 3                               ; Check to see if the current characters match.
001EBAr 3  B2 rr                        lda (tmp1)
001EBCr 3  D2 rr                        cmp (tmp2)
001EBEr 3  F0 05                        beq @letters_match
001EC0r 3               
001EC0r 3                               ; One of the letters didn't match.
001EC0r 3                               ; Increment the offset and try again.
001EC0r 3  20 rr rr                     jsr xt_one_plus
001EC3r 3  80 B7                        bra @search_loop
001EC5r 3               
001EC5r 3               @letters_match:
001EC5r 3                               ; The letters match.  Advance the pointers until the
001EC5r 3                               ; count reaches zero.
001EC5r 3  E6 rr                        inc tmp1
001EC7r 3  D0 02                        bne @1
001EC9r 3  E6 rr                        inc tmp1+1
001ECBr 3               @1:
001ECBr 3  E6 rr                        inc tmp2
001ECDr 3  D0 02                        bne @2
001ECFr 3  E6 rr                        inc tmp2+1
001ED1r 3               @2:
001ED1r 3                               ; Decrement the count of remaining letters to check.
001ED1r 3  A5 rr                        lda tmp3
001ED3r 3  D0 02                        bne @3
001ED5r 3  C6 rr                        dec tmp3+1
001ED7r 3               @3:
001ED7r 3  C6 rr                        dec tmp3
001ED9r 3               
001ED9r 3                               ; Check if we've reached zero.
001ED9r 3  A5 rr                        lda tmp3
001EDBr 3  05 rr                        ora tmp3+1
001EDDr 3  D0 DB                        bne @comparison_loop ; Check the next letter
001EDFr 3               
001EDFr 3                               ; We've run out of letters and they all match!
001EDFr 3                               ; Return (addr1+offset) (u1-offset) true
001EDFr 3                               ; Add offset to addr1.
001EDFr 3  18                           clc
001EE0r 3  B5 00                        lda 0,x
001EE2r 3  75 08                        adc 8,x
001EE4r 3  95 08                        sta 8,x
001EE6r 3  B5 01                        lda 1,x
001EE8r 3  75 09                        adc 9,x
001EEAr 3  95 09                        sta 9,x
001EECr 3               
001EECr 3                               ; Subtract offset from u1.
001EECr 3  38                           sec
001EEDr 3  B5 06                        lda 6,x
001EEFr 3  F5 00                        sbc 0,x
001EF1r 3  95 06                        sta 6,x
001EF3r 3  B5 07                        lda 7,x
001EF5r 3  F5 01                        sbc 1,x
001EF7r 3  95 07                        sta 7,x
001EF9r 3               
001EF9r 3                               ; Replace addr2, u2, and offset with a true flag.
001EF9r 3  E8                           inx             ; drop offset
001EFAr 3  E8                           inx
001EFBr 3  E8                           inx             ; drop u2
001EFCr 3  E8                           inx
001EFDr 3  A9 FF                        lda #$FF
001EFFr 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
001F01r 3  95 01                        sta 1,x
001F03r 3               
001F03r 3  60           z_search:       rts
001F04r 3               
001F04r 3               
001F04r 3               
001F04r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
001F04r 3               ; ## ";"  auto  ANS core
001F04r 3                       ; """https://forth-standard.org/standard/core/Semi
001F04r 3                       ; End the compilation of a new word into the Dictionary.
001F04r 3                       ;
001F04r 3                       ; When we
001F04r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
001F04r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
001F04r 3                       ; A Forth definition would be (see "Starting Forth"):
001F04r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
001F04r 3                       ; practice of Gforth, we warn here if a word has been redefined.
001F04r 3                       ; """
001F04r 3               
001F04r 3               xt_semicolon:
001F04r 3                               ; Check if this is a : word or a :NONAME word.
001F04r 3  24 rr                        bit status
001F06r 3  70 11                        bvs @colonword
001F08r 3               
001F08r 3                               ; This is a :NONAME word - just put an RTS on the end and
001F08r 3                               ; the address (held in workword) on the stack.
001F08r 3  A9 60                        lda #$60                ; opcode for RTS
001F0Ar 3  20 rr rr                     jsr cmpl_a
001F0Dr 3               
001F0Dr 3  CA                           dex
001F0Er 3  CA                           dex
001F0Fr 3  A5 rr                        lda workword
001F11r 3  95 00                        sta 0,x
001F13r 3  A5 rr                        lda workword+1
001F15r 3  95 01                        sta 1,x
001F17r 3  80 45                        bra @semicolon_done
001F19r 3               
001F19r 3               @colonword:
001F19r 3                               ; CP is the byte that will be the address we use in the
001F19r 3                               ; header as the end-of-compile address (z_word). This is
001F19r 3                               ; six bytes down from the header
001F19r 3  A0 06                        ldy #6
001F1Br 3  A5 rr                        lda cp
001F1Dr 3  91 rr                        sta (workword),y
001F1Fr 3  C8                           iny
001F20r 3  A5 rr                        lda cp+1
001F22r 3  91 rr                        sta (workword),y
001F24r 3               
001F24r 3                               ; Allocate one further byte and save the RTS instruction
001F24r 3                               ; there
001F24r 3  A9 60                        lda #$60                ; opcode for RTS
001F26r 3  20 rr rr                     jsr cmpl_a
001F29r 3               
001F29r 3                               ; Before we formally add the word to the Dictionary, we
001F29r 3                               ; check to see if it is already present, and if yes, we
001F29r 3                               ; warn the user.
001F29r 3               
001F29r 3                               ; See if word already in Dictionary.
001F29r 3                               ; (STATUS bit 7 will be high as CREATE already
001F29r 3                               ;  checked for us.)
001F29r 3  24 rr                        bit status
001F2Br 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
001F2Dr 3               
001F2Dr 3                               ; We start by putting the string of the
001F2Dr 3                               ; word we're defining on the stack
001F2Dr 3  CA                           dex
001F2Er 3  CA                           dex
001F2Fr 3  CA                           dex
001F30r 3  CA                           dex
001F31r 3               
001F31r 3                               ; WORKWORD points to the beginning of the head of our new
001F31r 3                               ; word, where the first byte is the length of the string
001F31r 3                               ; We can't use LATESTNT because we haven't added the new
001F31r 3                               ; word to the Dictionary yet
001F31r 3  B2 rr                        lda (workword)
001F33r 3  95 00                        sta 0,x
001F35r 3  74 01                        stz 1,x
001F37r 3               
001F37r 3                               ; Eight bytes below WORKWORD is the actual beginning of
001F37r 3                               ; the string
001F37r 3  A5 rr                        lda workword
001F39r 3  18                           clc
001F3Ar 3  69 08                        adc #8
001F3Cr 3  95 02                        sta 2,x
001F3Er 3  A5 rr                        lda workword+1
001F40r 3  69 00                        adc #0                  ; only want carry
001F42r 3  95 03                        sta 3,x
001F44r 3               
001F44r 3                               ; This word is already in the Dictionary, so we print a
001F44r 3                               ; warning to the user.
001F44r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
001F46r 3  20 rr rr                     jsr print_string_no_lf
001F49r 3               
001F49r 3                               ; Now we print the offending word.
001F49r 3  20 rr rr                     jsr xt_type
001F4Cr 3  20 rr rr                     jsr xt_space
001F4Fr 3               
001F4Fr 3                               ; Clear bit 7 of status (so future words will print message
001F4Fr 3                               ; by defaut)
001F4Fr 3  A9 80                        lda #%10000000
001F51r 3  14 rr                        trb status
001F53r 3               
001F53r 3               @new_word:
001F53r 3                               ; Let's get this over with. Save beginning of our word
001F53r 3                               ; as new last word in the Dictionary
001F53r 3  A5 rr                        lda workword
001F55r 3  85 rr                        sta dp
001F57r 3  A5 rr                        lda workword+1
001F59r 3  85 rr                        sta dp+1
001F5Br 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
001F5Er 3                                                       ; CURRENT wordlist.
001F5Er 3               @semicolon_done:
001F5Er 3                               ; Word definition complete. Return compile flag to zero
001F5Er 3                               ; to return to interpret mode
001F5Er 3  64 rr                        stz state
001F60r 3  64 rr                        stz state+1
001F62r 3               
001F62r 3  60           z_semicolon:    rts
001F63r 3               
001F63r 3               
001F63r 3               
001F63r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
001F63r 3               ; ## "sign"  auto  ANS core
001F63r 3                       ; """https://forth-standard.org/standard/core/SIGN
001F63r 3                       ;
001F63r 3                       ; Code based on
001F63r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
001F63r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
001F63r 3                       ; """
001F63r 3               
001F63r 3               xt_sign:
001F63r 3  20 rr rr                     jsr underflow_1
001F66r 3               
001F66r 3  B5 01                        lda 1,x         ; check MSB of TOS
001F68r 3  30 04                        bmi @minus
001F6Ar 3               
001F6Ar 3  E8                           inx
001F6Br 3  E8                           inx
001F6Cr 3  80 09                        bra @done
001F6Er 3               @minus:
001F6Er 3  A9 2D                        lda #$2D        ; ASCII for "-"
001F70r 3  95 00                        sta 0,x         ; overwrite TOS
001F72r 3  74 01                        stz 1,x         ; paranoid
001F74r 3               
001F74r 3  20 rr rr                     jsr xt_hold
001F77r 3               @done:
001F77r 3  60           z_sign:         rts
001F78r 3               
001F78r 3               
001F78r 3               
001F78r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
001F78r 3               ; ## "/"  auto  ANS core
001F78r 3                       ; """https://forth-standard.org/standard/core/Div
001F78r 3                       ;
001F78r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
001F78r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
001F78r 3                       ; This code is currently unoptimized. This code without the SLASH
001F78r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
001F78r 3                       ; """
001F78r 3               
001F78r 3               xt_slash:
001F78r 3                               ; With all the multiplication going on, it would be hard to
001F78r 3                               ; make sure that one of our temporary variables is not
001F78r 3                               ; overwritten. We make sure that doesn't happen by taking the
001F78r 3                               ; hit of pushing the flag to the 65c02's stack
001F78r 3  A9 00                        lda #0
001F7Ar 3  48                           pha
001F7Br 3  80 03                        bra _common
001F7Dr 3               
001F7Dr 3               xt_slash_mod:
001F7Dr 3                               ; Note that /MOD accesses this code
001F7Dr 3  A9 FF                        lda #$FF
001F7Fr 3  48                           pha             ; falls through to _common
001F80r 3               
001F80r 3               _common:
001F80r 3  20 rr rr                     jsr xt_to_r             ; >R
001F83r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
001F86r 3  20 rr rr                     jsr xt_r_from           ; R>
001F89r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
001F8Cr 3               
001F8Cr 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
001F8Cr 3                               ; $FF is SLASH MOD
001F8Cr 3  68                           pla
001F8Dr 3  D0 05                        bne @done
001F8Fr 3               
001F8Fr 3                               ; The following code is for SLASH only
001F8Fr 3  20 rr rr                     jsr xt_swap
001F92r 3  E8                           inx             ; DROP
001F93r 3  E8                           inx
001F94r 3               @done:
001F94r 3               z_slash_mod:
001F94r 3  60           z_slash:        rts
001F95r 3               
001F95r 3               
001F95r 3               
001F95r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
001F95r 3               ; ## "/mod"  auto  ANS core
001F95r 3                       ; """https://forth-standard.org/standard/core/DivMOD
001F95r 3                       ;
001F95r 3                       ; This is a dummy entry, the actual code is shared with SLASH
001F95r 3                       ; """
001F95r 3               
001F95r 3               
001F95r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
001F95r 3               ; ## "/string"  auto  ANS string
001F95r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
001F95r 3                       ;
001F95r 3                       ; Forth code is
001F95r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
001F95r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
001F95r 3                       ; TOS from NOS, and then drop TOS
001F95r 3                       ; """
001F95r 3               
001F95r 3               xt_slash_string:
001F95r 3  20 rr rr                     jsr underflow_3
001F98r 3               
001F98r 3  18                           clc             ; 3OS+TOS
001F99r 3  B5 00                        lda 0,x
001F9Br 3  75 04                        adc 4,x
001F9Dr 3  95 04                        sta 4,x
001F9Fr 3               
001F9Fr 3  B5 01                        lda 1,x
001FA1r 3  75 05                        adc 5,x
001FA3r 3  95 05                        sta 5,x
001FA5r 3               
001FA5r 3  38                           sec             ; NOS-TOS
001FA6r 3  B5 02                        lda 2,x
001FA8r 3  F5 00                        sbc 0,x
001FAAr 3  95 02                        sta 2,x
001FACr 3               
001FACr 3  B5 03                        lda 3,x
001FAEr 3  F5 01                        sbc 1,x
001FB0r 3  95 03                        sta 3,x
001FB2r 3               
001FB2r 3  E8                           inx
001FB3r 3  E8                           inx
001FB4r 3               
001FB4r 3  60           z_slash_string: rts
001FB5r 3               
001FB5r 3               
001FB5r 3               
001FB5r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
001FB5r 3               ; ## "sliteral" auto  ANS string
001FB5r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
001FB5r 3                       ; Add the runtime for an existing string.
001FB5r 3                       ; """
001FB5r 3               
001FB5r 3               xt_sliteral:
001FB5r 3  20 rr rr                     jsr underflow_2
001FB8r 3               
001FB8r 3                               ; We can't assume that ( addr u ) of the current string is in
001FB8r 3                               ; a stable area (eg. already in the dictionary.) Copy the
001FB8r 3                               ; string data into the dictionary using move.
001FB8r 3               
001FB8r 3                               ; Put a jmp over the string data with address to be filled
001FB8r 3                               ; in later.
001FB8r 3  A9 4C                        lda #$4C
001FBAr 3  20 rr rr                     jsr cmpl_a
001FBDr 3               
001FBDr 3                               ; Address to be filled in later.
001FBDr 3  20 rr rr                     jsr cmpl_a
001FC0r 3  20 rr rr                     jsr cmpl_a
001FC3r 3               
001FC3r 3                               ; Turn the data stack from ( addr u ) into
001FC3r 3                               ; ( here u addr here u ) so move can be called with
001FC3r 3                               ; the remaining items on the stack ready for processing.
001FC3r 3                               ; Reserve three extra words on the stack.
001FC3r 3  8A                           txa
001FC4r 3  38                           sec
001FC5r 3  E9 06                        sbc #6
001FC7r 3  AA                           tax
001FC8r 3               
001FC8r 3                               ; Move addr down from TOS-4 to TOS-2
001FC8r 3  B5 08                        lda 8,x
001FCAr 3  95 04                        sta 4,x
001FCCr 3  B5 09                        lda 9,x
001FCEr 3  95 05                        sta 5,x
001FD0r 3               
001FD0r 3                               ; Copy u from TOS-3 to TOS
001FD0r 3  B5 06                        lda 6,x
001FD2r 3  95 00                        sta 0,x
001FD4r 3  B5 07                        lda 7,x
001FD6r 3  95 01                        sta 1,x
001FD8r 3               
001FD8r 3                               ; Put HERE into TOS-1 and TOS-4
001FD8r 3  A5 rr                        lda cp
001FDAr 3  95 08                        sta 8,x
001FDCr 3  95 02                        sta 2,x
001FDEr 3  A5 rr                        lda cp+1
001FE0r 3  95 09                        sta 9,x
001FE2r 3  95 03                        sta 3,x
001FE4r 3               
001FE4r 3                               ; Copy the string into the dictionary.
001FE4r 3  20 rr rr                     jsr xt_move
001FE7r 3               
001FE7r 3                               ; Update cp.
001FE7r 3  18                           clc
001FE8r 3  A5 rr                        lda cp
001FEAr 3  75 00                        adc 0,x
001FECr 3  85 rr                        sta cp
001FEEr 3  A5 rr                        lda cp+1
001FF0r 3  75 01                        adc 1,x
001FF2r 3  85 rr                        sta cp+1
001FF4r 3               
001FF4r 3                               ; Update the address of the jump-over jmp instruction.
001FF4r 3                               ; First determine location of jmp instructions address.
001FF4r 3                               ; It should be 2 bytes before the start of the string.
001FF4r 3               
001FF4r 3                               ; Compute it into tmp1, which is no longer being used.
001FF4r 3  B5 02                        lda 2,x
001FF6r 3  38                           sec
001FF7r 3  E9 02                        sbc #2
001FF9r 3  85 rr                        sta tmp1
001FFBr 3  B5 03                        lda 3,x
001FFDr 3  E9 00                        sbc #0          ; Propagate borrow
001FFFr 3  85 rr                        sta tmp1+1
002001r 3               
002001r 3                               ; Update the address of the jump to HERE.
002001r 3  A5 rr                        lda cp
002003r 3  92 rr                        sta (tmp1)
002005r 3  A0 01                        ldy #1
002007r 3  A5 rr                        lda cp+1
002009r 3  91 rr                        sta (tmp1),y
00200Br 3               
00200Br 3                               ; Stack is now ( addr2 u ) where addr2 is the new
00200Br 3                               ; location in the dictionary.
00200Br 3               
00200Br 3               sliteral_const_str:
00200Br 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
00200Br 3                               ; pushes the new ( addr u ) pair to the Data Stack.
00200Br 3                               ; When we're done, the code will look like this:
00200Br 3               
00200Br 3                               ; xt -->    jmp a
00200Br 3                               ;           <string data bytes>
00200Br 3                               ;  a -->    jsr sliteral_runtime
00200Br 3                               ;           <string address>
00200Br 3                               ;           <string length>
00200Br 3                               ; rts -->
00200Br 3               
00200Br 3                               ; This means we'll have to adjust the return address for two
00200Br 3                               ; cells, not just one
00200Br 3  A0 rr                        ldy #>sliteral_runtime
00200Dr 3  A9 rr                        lda #<sliteral_runtime
00200Fr 3  20 rr rr                     jsr cmpl_subroutine
002012r 3               
002012r 3                               ; We want to have the address end up as NOS and the length
002012r 3                               ; as TOS, so we store the address first
002012r 3  B4 03                        ldy 3,x                ; address MSB
002014r 3  B5 02                        lda 2,x                ; address LSB
002016r 3  20 rr rr                     jsr cmpl_word
002019r 3               
002019r 3  B4 01                        ldy 1,x                ; length MSB
00201Br 3  B5 00                        lda 0,x                ; length LSB
00201Dr 3  20 rr rr                     jsr cmpl_word
002020r 3               
002020r 3                               ; clean up and leave
002020r 3  E8                           inx
002021r 3  E8                           inx
002022r 3  E8                           inx
002023r 3  E8                           inx
002024r 3               
002024r 3  60           z_sliteral:     rts
002025r 3               
002025r 3               
002025r 3               sliteral_runtime:
002025r 3               
002025r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
002025r 3                       ; the Data Stack. We arrive here with the return address as the
002025r 3                       ; top of Return Stack, which points to the address of the string
002025r 3                       ; """
002025r 3  CA                           dex
002026r 3  CA                           dex
002027r 3  CA                           dex
002028r 3  CA                           dex
002029r 3               
002029r 3                               ; Get the address of the string address off the stack and
002029r 3                               ; increase by one because of the RTS mechanics
002029r 3  68                           pla
00202Ar 3  85 rr                        sta tmp1        ; LSB of address
00202Cr 3  68                           pla
00202Dr 3  85 rr                        sta tmp1+1      ; MSB of address
00202Fr 3               
00202Fr 3                               ; Walk through both and save them
00202Fr 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
002031r 3  B1 rr                        lda (tmp1),y
002033r 3  95 02                        sta 2,x         ; LSB of address
002035r 3  C8                           iny
002036r 3               
002036r 3  B1 rr                        lda (tmp1),y
002038r 3  95 03                        sta 3,x         ; MSB of address
00203Ar 3  C8                           iny
00203Br 3               
00203Br 3  B1 rr                        lda (tmp1),y
00203Dr 3  95 00                        sta 0,x         ; LSB of length
00203Fr 3  C8                           iny
002040r 3               
002040r 3  B1 rr                        lda (tmp1),y
002042r 3  95 01                        sta 1,x         ; MSB of length
002044r 3               
002044r 3                               ; restore return address
002044r 3  18                           clc
002045r 3  A5 rr                        lda tmp1
002047r 3  69 04                        adc #4
002049r 3  A8                           tay             ; LSB
00204Ar 3  A5 rr                        lda tmp1+1
00204Cr 3  69 00                        adc #0          ; we only need carry
00204Er 3  48                           pha             ; MSB
00204Fr 3  5A                           phy
002050r 3               
002050r 3  60                           rts
002051r 3               
002051r 3               
002051r 3               
002051r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
002051r 3               ; ## "sm/rem"  auto  ANS core
002051r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
002051r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
002051r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
002051r 3                       ;
002051r 3                       ; Forth:
002051r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
002051r 3                       ; R> ?NEGATE SWAP
002051r 3                       ; """
002051r 3               
002051r 3               xt_sm_slash_rem:
002051r 3  20 rr rr                     jsr underflow_3 ; contains double number
002054r 3               
002054r 3                               ; push MSB of high cell of d to Data Stack so we can check
002054r 3                               ; its sign later
002054r 3  B5 03                        lda 3,x
002056r 3  48                           pha
002057r 3               
002057r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
002057r 3                               ; its sign later as well
002057r 3  B5 01                        lda 1,x
002059r 3  55 03                        eor 3,x
00205Br 3  48                           pha
00205Cr 3               
00205Cr 3                               ; Prepare division by getting absolute of n1 and d
00205Cr 3  20 rr rr                     jsr xt_abs
00205Fr 3  E8                           inx             ; pretend we pushed n1 to R
002060r 3  E8                           inx
002061r 3               
002061r 3  20 rr rr                     jsr xt_dabs
002064r 3  CA                           dex
002065r 3  CA                           dex
002066r 3               
002066r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002069r 3               
002069r 3                               ; if the XOR compiled above is negative, negate the
002069r 3                               ; quotient (n3)
002069r 3  68                           pla
00206Ar 3  10 03                        bpl @1
00206Cr 3  20 rr rr                     jsr xt_negate
00206Fr 3               @1:
00206Fr 3                               ; if d was negative, negate the remainder (n2)
00206Fr 3  68                           pla
002070r 3  10 07                        bpl @done
002072r 3               
002072r 3  E8                           inx             ; pretend we pushed quotient to R
002073r 3  E8                           inx
002074r 3  20 rr rr                     jsr xt_negate
002077r 3  CA                           dex
002078r 3  CA                           dex
002079r 3               
002079r 3               @done:
002079r 3  60           z_sm_slash_rem: rts
00207Ar 3               
00207Ar 3               
00207Ar 3               
00207Ar 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
00207Ar 3               ; ## "source"  auto  ANS core
00207Ar 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
00207Ar 3               xt_source:
00207Ar 3                               ; add address
00207Ar 3  CA                           dex
00207Br 3  CA                           dex
00207Cr 3  A5 rr                        lda cib
00207Er 3  95 00                        sta 0,x
002080r 3  A5 rr                        lda cib+1
002082r 3  95 01                        sta 1,x
002084r 3               
002084r 3                               ; add size
002084r 3  CA                           dex
002085r 3  CA                           dex
002086r 3  A5 rr                        lda ciblen
002088r 3  95 00                        sta 0,x
00208Ar 3  A5 rr                        lda ciblen+1
00208Cr 3  95 01                        sta 1,x
00208Er 3               
00208Er 3  60           z_source:       rts
00208Fr 3               
00208Fr 3               
00208Fr 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
00208Fr 3               ; ## "source-id"  tested  ANS core ext
00208Fr 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
00208Fr 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
00208Fr 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
00208Fr 3                       ; string, and a text file gives the fileid.
00208Fr 3                       ; """
00208Fr 3               xt_source_id:
00208Fr 3  CA                           dex
002090r 3  CA                           dex
002091r 3               
002091r 3  A5 rr                        lda insrc
002093r 3  95 00                        sta 0,x
002095r 3  A5 rr                        lda insrc+1
002097r 3  95 01                        sta 1,x
002099r 3               
002099r 3  60           z_source_id:    rts
00209Ar 3               
00209Ar 3               
00209Ar 3               ; ## SPACE ( -- ) "Print a single space"
00209Ar 3               ; ## "space"  auto  ANS core
00209Ar 3                       ; """https://forth-standard.org/standard/core/SPACE"""
00209Ar 3               xt_space:
00209Ar 3  A9 20                        lda #AscSP
00209Cr 3  20 rr rr                     jsr emit_a
00209Fr 3               
00209Fr 3  60           z_space:        rts
0020A0r 3               
0020A0r 3               
0020A0r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
0020A0r 3               ; ## "spaces"  auto  ANS core
0020A0r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
0020A0r 3               
0020A0r 3               xt_spaces:
0020A0r 3  20 rr rr                     jsr underflow_1
0020A3r 3               
0020A3r 3                               ; catch any zero in TOS fast
0020A3r 3  B5 00                        lda 0,x
0020A5r 3  15 01                        ora 1,x
0020A7r 3  F0 2A                        beq @done
0020A9r 3               
0020A9r 3                               ; Usually we're only going to print far less than 256 spaces,
0020A9r 3                               ; so we create a quick loop for that. Short loop could be realized
0020A9r 3                               ; as a separate subroutine, but unless we're really pressed for
0020A9r 3                               ; memory at some point, this is faster
0020A9r 3  B4 01                        ldy 1,x
0020ABr 3  D0 0C                        bne @lots_of_spaces
0020ADr 3               
0020ADr 3  B4 00                        ldy 0,x
0020AFr 3               @quick_loop:
0020AFr 3                               ; we reach here knowing that there must be a number that is not
0020AFr 3                               ; zero in the TOS
0020AFr 3  A9 20                        lda #AscSP
0020B1r 3  20 rr rr                     jsr emit_a
0020B4r 3  88                           dey
0020B5r 3  F0 1C                        beq @done
0020B7r 3  80 F6                        bra @quick_loop
0020B9r 3               
0020B9r 3               @lots_of_spaces:
0020B9r 3                               ; We go through the first loop once to get rid of the lower
0020B9r 3                               ; counter byte. This could be zero
0020B9r 3  B4 00                        ldy 0,x
0020BBr 3               
0020BBr 3               @first_slow_loop:
0020BBr 3  F0 08                        beq @slow_outer_loop
0020BDr 3  A9 20                        lda #AscSP
0020BFr 3  20 rr rr                     jsr emit_a
0020C2r 3  88                           dey
0020C3r 3  80 F6                        bra @first_slow_loop
0020C5r 3               
0020C5r 3               @slow_outer_loop:
0020C5r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
0020C5r 3  A0 00                        ldy #00
0020C7r 3               
0020C7r 3               @slow_inner_loop:
0020C7r 3  A9 20                        lda #AscSP
0020C9r 3  20 rr rr                     jsr emit_a
0020CCr 3  88                           dey
0020CDr 3  D0 F8                        bne @slow_inner_loop
0020CFr 3               
0020CFr 3  D6 01                        dec 1,x
0020D1r 3  D0 F2                        bne @slow_outer_loop
0020D3r 3               
0020D3r 3               @done:
0020D3r 3  E8                           inx             ; drop
0020D4r 3  E8                           inx
0020D5r 3               
0020D5r 3  60           z_spaces:       rts
0020D6r 3               
0020D6r 3               
0020D6r 3               
0020D6r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0020D6r 3               ; ## "*"  auto  ANS core
0020D6r 3                       ; """https://forth-standard.org/standard/core/Times
0020D6r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0020D6r 3                       ;
0020D6r 3                       ; This is nothing  more than UM* DROP
0020D6r 3                       ; """
0020D6r 3               
0020D6r 3               xt_star:
0020D6r 3  20 rr rr                     jsr underflow_2
0020D9r 3               
0020D9r 3  20 rr rr                     jsr xt_um_star
0020DCr 3  E8                           inx
0020DDr 3  E8                           inx
0020DEr 3               
0020DEr 3  60           z_star:         rts
0020DFr 3               
0020DFr 3               
0020DFr 3               
0020DFr 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0020DFr 3               ; ## "*/"  auto  ANS core
0020DFr 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0020DFr 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0020DFr 3                       ; without a remainder. This is */MOD without the mod.
0020DFr 3                       ;
0020DFr 3                       ; This word
0020DFr 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0020DFr 3                       ; pretty much what we do here
0020DFr 3                       ; """
0020DFr 3               xt_star_slash:
0020DFr 3                               ; We let */MOD check for underflow
0020DFr 3  20 rr rr                     jsr xt_star_slash_mod
0020E2r 3  20 rr rr                     jsr xt_swap
0020E5r 3  E8                           inx
0020E6r 3  E8                           inx
0020E7r 3               z_star_slash:
0020E7r 3  60                           rts
0020E8r 3               
0020E8r 3               
0020E8r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
0020E8r 3               ; ## "*/mod"  auto  ANS core
0020E8r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
0020E8r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
0020E8r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
0020E8r 3                       ; single-cell quotient n5.
0020E8r 3                       ;
0020E8r 3                       ; In Forth, this is
0020E8r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
0020E8r 3                       ; """
0020E8r 3               xt_star_slash_mod:
0020E8r 3  20 rr rr                     jsr underflow_3
0020EBr 3               
0020EBr 3  20 rr rr                     jsr xt_to_r
0020EEr 3  20 rr rr                     jsr xt_m_star
0020F1r 3  20 rr rr                     jsr xt_r_from
0020F4r 3  20 rr rr                     jsr xt_sm_slash_rem
0020F7r 3               
0020F7r 3               z_star_slash_mod:
0020F7r 3  60                           rts
0020F8r 3               
0020F8r 3               
0020F8r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
0020F8r 3               ; ## "state"  auto  ANS core
0020F8r 3                       ; """https://forth-standard.org/standard/core/STATE
0020F8r 3                       ; STATE is true when in compilation state, false otherwise. Note
0020F8r 3                       ; we do not return the state itself, but only the address where
0020F8r 3                       ; it lives. The state should not be changed directly by the user; see
0020F8r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
0020F8r 3                       ; """
0020F8r 3               xt_state:
0020F8r 3  CA                           dex
0020F9r 3  CA                           dex
0020FAr 3  A9 rr                        lda #<state
0020FCr 3  95 00                        sta 0,x
0020FEr 3  A9 rr                        lda #>state
002100r 3  95 01                        sta 1,x
002102r 3               
002102r 3  60           z_state:        rts
002103r 3               
002103r 3               
002103r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
002103r 3               ; ## "!"  auto  ANS core
002103r 3                       ; """https://forth-standard.org/standard/core/Store"""
002103r 3               xt_store:
002103r 3  20 rr rr                     jsr underflow_2
002106r 3               
002106r 3  B5 02                        lda 2,x         ; LSB
002108r 3  81 00                        sta (0,x)
00210Ar 3               
00210Ar 3  F6 00                        inc 0,x
00210Cr 3  D0 02                        bne @1
00210Er 3  F6 01                        inc 1,x
002110r 3               @1:
002110r 3  B5 03                        lda 3,x         ; MSB
002112r 3  81 00                        sta (0,x)
002114r 3               
002114r 3  E8                           inx             ; 2DROP
002115r 3  E8                           inx
002116r 3  E8                           inx
002117r 3  E8                           inx
002118r 3               
002118r 3  60           z_store:        rts
002119r 3               
002119r 3               
002119r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
002119r 3               ; ## "strip-underflow"  tested  Tali Forth
002119r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
002119r 3                       ; checking should be removed during the compilation of new words.
002119r 3                       ; Default is false.
002119r 3                       ; """
002119r 3               xt_strip_underflow:
002119r 3  CA                           dex
00211Ar 3  CA                           dex
00211Br 3               
00211Br 3  A9 rr                        lda #<uf_strip
00211Dr 3  95 00                        sta 0,x
00211Fr 3  A9 rr                        lda #>uf_strip
002121r 3  95 01                        sta 1,x
002123r 3               
002123r 3               z_strip_underflow:
002123r 3  60                           rts
002124r 3               
002124r 3               
002124r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
002124r 3               ; ## "swap"  auto  ANS core
002124r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
002124r 3               xt_swap:
002124r 3  20 rr rr                     jsr underflow_2
002127r 3               
002127r 3  B5 00                        lda 0,x         ; LSB
002129r 3  B4 02                        ldy 2,x
00212Br 3  95 02                        sta 2,x
00212Dr 3  94 00                        sty 0,x
00212Fr 3               
00212Fr 3  B5 01                        lda 1,x         ; MSB
002131r 3  B4 03                        ldy 3,x
002133r 3  95 03                        sta 3,x
002135r 3  94 01                        sty 1,x
002137r 3               
002137r 3  60           z_swap:         rts
002138r 3               
002138r 3               
002138r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002138r 3               ; ## "then"  auto  ANS core
002138r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002138r 3               xt_then:
002138r 3                               ; Get the address to jump to.
002138r 3  20 rr rr                     jsr xt_here
00213Br 3               
00213Br 3                               ; Stuff HERE in for the branch address back
00213Br 3                               ; at the IF or ELSE (origination address is on stack).
00213Br 3  20 rr rr                     jsr xt_swap
00213Er 3  20 rr rr                     jsr xt_store
002141r 3               
002141r 3  60           z_then:         rts
002142r 3               
002142r 3               
002142r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
002142r 3               ; ## "thru"  tested  ANS block ext
002142r 3                       ; """https://forth-standard.org/standard/block/THRU"""
002142r 3               
002142r 3               xt_thru:
002142r 3  20 rr rr                     jsr underflow_2
002145r 3               
002145r 3                               ; We need to loop here, and can't use the data stack
002145r 3                               ; because the LOADed screens might use it.  We'll
002145r 3                               ; need to use the same trick that DO loops use, holding
002145r 3                               ; the limit and current index on the return stack.
002145r 3               
002145r 3                               ; Put the ending screen number on the return stack
002145r 3  B5 01                        lda 1,x
002147r 3  48                           pha
002148r 3  B5 00                        lda 0,x
00214Ar 3  48                           pha
00214Br 3  E8                           inx
00214Cr 3  E8                           inx
00214Dr 3               @thru_loop:
00214Dr 3                               ; Put the starting screen number on the stack,
00214Dr 3                               ; but keep a copy
00214Dr 3  B5 01                        lda 1,x
00214Fr 3  48                           pha
002150r 3  B5 00                        lda 0,x
002152r 3  48                           pha
002153r 3               
002153r 3                               ; Load this screen.
002153r 3  20 rr rr                     jsr xt_load
002156r 3               
002156r 3                               ; Get the number and limit back off the stack.  Rather than
002156r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002156r 3               
002156r 3                               ; Get the screen we just loaded.
002156r 3  68                           pla
002157r 3  85 rr                        sta tmp1
002159r 3  68                           pla
00215Ar 3  85 rr                        sta tmp1+1
00215Cr 3               
00215Cr 3                               ; Get the ending screen.
00215Cr 3  68                           pla
00215Dr 3  85 rr                        sta tmp2
00215Fr 3  68                           pla
002160r 3  85 rr                        sta tmp2+1
002162r 3               
002162r 3                               ; See if we just loaded the last screen.
002162r 3                               ; A already has the MSB of the last screen in it.
002162r 3  C5 rr                        cmp tmp1+1
002164r 3  D0 08                        bne @next_screen
002166r 3  A5 rr                        lda tmp2        ; Compare the LSB
002168r 3  C5 rr                        cmp tmp1
00216Ar 3  D0 02                        bne @next_screen
00216Cr 3  80 18                        bra @done       ; We just did the last screen.
00216Er 3               
00216Er 3               @next_screen:
00216Er 3                               ; Put the ending screen back on the data stack.
00216Er 3  A5 rr                        lda tmp2+1
002170r 3  48                           pha
002171r 3  A5 rr                        lda tmp2
002173r 3  48                           pha
002174r 3               
002174r 3                               ; Increment the current screen.
002174r 3  E6 rr                        inc tmp1
002176r 3  D0 02                        bne @1
002178r 3  E6 rr                        inc tmp1+1
00217Ar 3               @1:
00217Ar 3                               ; Put the current screen on the stack to prepare for
00217Ar 3                               ; the next loop.
00217Ar 3  CA                           dex
00217Br 3  CA                           dex
00217Cr 3  A5 rr                        lda tmp1
00217Er 3  95 00                        sta 0,x
002180r 3  A5 rr                        lda tmp1+1
002182r 3  95 01                        sta 1,x
002184r 3  80 C7                        bra @thru_loop
002186r 3               @done:
002186r 3  60           z_thru:         rts
002187r 3               
002187r 3               
002187r 3               
002187r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
002187r 3               ; ## "'"  auto  ANS core
002187r 3                       ; """https://forth-standard.org/standard/core/Tick"""
002187r 3               
002187r 3               xt_tick:
002187r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
00218Ar 3               
00218Ar 3                               ; if we got a zero, there was a problem getting the
00218Ar 3                               ; name of the word
00218Ar 3  B5 00                        lda 0,x
00218Cr 3  15 01                        ora 1,x
00218Er 3  D0 05                        bne @1
002190r 3               
002190r 3  A9 05                        lda #err_noname
002192r 3  4C rr rr                     jmp error
002195r 3               @1:
002195r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
002198r 3               
002198r 3                               ; If we didn't find the word in the Dictionary, abort
002198r 3  B5 00                        lda 0,x
00219Ar 3  15 01                        ora 1,x
00219Cr 3  D0 05                        bne @2
00219Er 3               
00219Er 3  A9 08                        lda #err_syntax
0021A0r 3  4C rr rr                     jmp error
0021A3r 3               @2:
0021A3r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
0021A6r 3               
0021A6r 3  60           z_tick:         rts
0021A7r 3               
0021A7r 3               
0021A7r 3               
0021A7r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
0021A7r 3               ; ## "to"  auto  ANS core ext
0021A7r 3                       ; """https://forth-standard.org/standard/core/TO
0021A7r 3                       ; Gives a new value to a, uh, VALUE.
0021A7r 3                       ;
0021A7r 3                       ; One possible Forth
0021A7r 3                       ; implementation is  ' >BODY !  but given the problems we have
0021A7r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
0021A7r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
0021A7r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
0021A7r 3                       ;
0021A7r 3                       ; Note that the standard has different behaviors for TO depending
0021A7r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
0021A7r 3                       ; This makes TO state-dependent (which is bad) and also rather
0021A7r 3                       ; complex (see the Gforth implementation for comparison). This
0021A7r 3                       ; word may not be natively compiled and must be immediate. Frankly,
0021A7r 3                       ; it would have made more sense to have two words for this.
0021A7r 3                       ; """
0021A7r 3               
0021A7r 3               xt_to:
0021A7r 3                               ; One way or the other, we need the xt of the word after this
0021A7r 3                               ; one. At this point, we don't know if we are interpreted or
0021A7r 3                               ; compile, so we don't know if there is a value n on the stack,
0021A7r 3                               ; so we can't do an underflow check yet
0021A7r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
0021AAr 3               
0021AAr 3                               ; The PFA (DFA in this case) is three bytes down,
0021AAr 3                               ; after the jump to DOCONST
0021AAr 3  B5 00                        lda 0,x                 ; LSB
0021ACr 3  18                           clc
0021ADr 3  69 03                        adc #3
0021AFr 3  85 rr                        sta tmp1
0021B1r 3  B5 01                        lda 1,x                 ; MSB
0021B3r 3  69 00                        adc #0                  ; we just want the carry
0021B5r 3  85 rr                        sta tmp1+1
0021B7r 3               
0021B7r 3  E8                           inx
0021B8r 3  E8                           inx                     ; ( [n] )
0021B9r 3               
0021B9r 3                               ; Now it gets ugly. See which state we are in
0021B9r 3  A5 rr                        lda state
0021BBr 3  05 rr                        ora state+1
0021BDr 3  F0 34                        beq @interpret
0021BFr 3               
0021BFr 3                               ; Well, we're compiling. We want to end up with simple
0021BFr 3                               ; code that just takes the number that is TOS and saves
0021BFr 3                               ; it in the address of the xt we were just given. So we
0021BFr 3                               ; want to compile this routine:
0021BFr 3                               ;
0021BFr 3                               ;       lda 0,x                 - B5 00
0021BFr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0021BFr 3                               ;       lda 1,x                 - B5 01
0021BFr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0021BFr 3                               ;       inx                     - E8
0021BFr 3                               ;       inx                     - E8
0021BFr 3                               ;
0021BFr 3                               ; which at least is nice and short. Other than that, we pretty
0021BFr 3                               ; much have to do this the hard and long way, because with the
0021BFr 3                               ; LSBs and MSBs, we can't really put the numbers in a data
0021BFr 3                               ; range and store them with a loop. Sigh.
0021BFr 3               
0021BFr 3  A0 00                        ldy #$00                ; Code for LDA 0,X
0021C1r 3  A9 B5                        lda #$B5
0021C3r 3  20 rr rr                     jsr cmpl_word
0021C6r 3               
0021C6r 3  A9 8D                        lda #$8D                ; Code for STA abs
0021C8r 3  20 rr rr                     jsr cmpl_a
0021CBr 3               
0021CBr 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0021CDr 3  A5 rr                        lda tmp1
0021CFr 3  20 rr rr                     jsr cmpl_word
0021D2r 3               
0021D2r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0021D4r 3  A9 B5                        lda #$B5
0021D6r 3  20 rr rr                     jsr cmpl_word
0021D9r 3               
0021D9r 3  A9 8D                        lda #$8D                ; Code for STA abs
0021DBr 3  20 rr rr                     jsr cmpl_a
0021DEr 3               
0021DEr 3  E6 rr                        inc tmp1                ; Calculate MSB
0021E0r 3  D0 02                        bne @1
0021E2r 3  E6 rr                        inc tmp1+1
0021E4r 3               @1:
0021E4r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0021E6r 3  A5 rr                        lda tmp1
0021E8r 3  20 rr rr                     jsr cmpl_word
0021EBr 3               
0021EBr 3  A0 E8                        ldy #$E8                ; Code for INX
0021EDr 3  98                           tya
0021EEr 3  20 rr rr                     jsr cmpl_word
0021F1r 3               
0021F1r 3  80 0F                        bra @done
0021F3r 3               
0021F3r 3               @interpret:
0021F3r 3                               ; We're interpreting, so we arrive here with n
0021F3r 3                               ; on the stack. This is an annoying place to put
0021F3r 3                               ; the underflow check because we can't
0021F3r 3                               ; automatically strip it out
0021F3r 3  20 rr rr                     jsr underflow_1
0021F6r 3               
0021F6r 3                               ; We skip over the jump to DOCONST and store the number
0021F6r 3                               ; in the Program Field Area (PDF, in this case more a
0021F6r 3                               ; Data Field Area
0021F6r 3  B5 00                        lda 0,x
0021F8r 3  92 rr                        sta (tmp1)              ; LSB
0021FAr 3               
0021FAr 3  A0 01                        ldy #1
0021FCr 3  B5 01                        lda 1,x                 ; MSB
0021FEr 3  91 rr                        sta (tmp1),y            ; fall through to common
002200r 3               
002200r 3  E8                           inx                     ; DROP
002201r 3  E8                           inx
002202r 3               @done:
002202r 3  60           z_to:           rts
002203r 3               
002203r 3               
002203r 3               
002203r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
002203r 3               ; ## ">body"  auto  ANS core
002203r 3                       ; """https://forth-standard.org/standard/core/toBODY
002203r 3                       ; Given a word's execution token (xt), return the address of the
002203r 3                       ; start of that word's parameter field (PFA). This is defined as the
002203r 3                       ; address that HERE would return right after CREATE.
002203r 3                       ;
002203r 3                       ; This is a
002203r 3                       ; difficult word for STC Forths, because most words don't actually
002203r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
002203r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
002203r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
002203r 3                       ; """
002203r 3               
002203r 3               xt_to_body:
002203r 3  20 rr rr                     jsr underflow_1
002206r 3               
002206r 3                               ; Ideally, xt already points to the CFA. We just need to check
002206r 3                               ; the HC flag for special cases
002206r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
002209r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
00220Cr 3               
00220Cr 3                               ; The status byte is nt+1
00220Cr 3  F6 00                        inc 0,x
00220Er 3  D0 02                        bne @1
002210r 3  F6 01                        inc 1,x
002212r 3               @1:
002212r 3  A1 00                        lda (0,x)               ; get status byte
002214r 3  29 20                        and #HC
002216r 3  F0 0D                        beq @no_cfa
002218r 3               
002218r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
002218r 3                               ; so we add three to xt, which is NOS
002218r 3  18                           clc
002219r 3  B5 02                        lda 2,x         ; LSB
00221Br 3  69 03                        adc #3
00221Dr 3  95 02                        sta 2,x
00221Fr 3  B5 03                        lda 3,x         ; MSB
002221r 3  69 00                        adc #0          ; we conly care about the carry
002223r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
002225r 3               @no_cfa:
002225r 3  E8                           inx             ; get rid of the nt
002226r 3  E8                           inx
002227r 3               @done:
002227r 3  60           z_to_body:      rts
002228r 3               
002228r 3               
002228r 3               
002228r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
002228r 3               ; ## ">in"  auto  ANS core
002228r 3               xt_to_in:
002228r 3  CA                           dex
002229r 3  CA                           dex
00222Ar 3               
00222Ar 3  A9 rr                        lda #<toin
00222Cr 3  95 00                        sta 0,x
00222Er 3  A9 rr                        lda #>toin      ; paranoid, should be zero
002230r 3  95 01                        sta 1,x
002232r 3               
002232r 3  60           z_to_in:        rts
002233r 3               
002233r 3               
002233r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
002233r 3               ; ## ">number"  auto  ANS core
002233r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
002233r 3                       ; Convert a string to a double number. Logic here is based on the
002233r 3                       ; routine by Phil Burk of the same name in pForth, see
002233r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
002233r 3                       ; for the original Forth code. We arrive here from NUMBER which has
002233r 3                       ; made sure that we don't have to deal with a sign and we don't have
002233r 3                       ; to deal with a dot as a last character that signalizes double -
002233r 3                       ; this should be a pure number string.
002233r 3                       ;
002233r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
002233r 3                       ; cannot access any of those.
002233r 3                       ;
002233r 3                       ; For the math routine, we move the inputs to the scratchpad to
002233r 3                       ; avoid having to fool around with the Data Stack.
002233r 3                       ;
002233r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002233r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
002233r 3                       ;     |           |           |           |           |
002233r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
002233r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002233r 3                       ;
002233r 3                       ; The math routine works by converting one character to its
002233r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
002233r 3                       ; the moment. We then multiply the UD-HI value with the radix
002233r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
002233r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
002233r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
002233r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
002233r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
002233r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
002233r 3                       ; storing the result back in S and S+2, before we start another
002233r 3                       ; round with it as the new UD-LO and UD-HI.
002233r 3                       ; """
002233r 3               
002233r 3               
002233r 3               xt_to_number:
002233r 3  20 rr rr                     jsr underflow_4
002236r 3               
002236r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002236r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002236r 3                               ; the Data Stack, but will be ignored and later overwritten
002236r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002236r 3  B5 06                        lda 6,x         ; ud-lo LSB
002238r 3  85 rr                        sta scratch
00223Ar 3  B5 07                        lda 7,x         ; ud-lo MSB
00223Cr 3  85 rr                        sta scratch+1
00223Er 3               
00223Er 3  B5 04                        lda 4,x         ; ud-hi LSB
002240r 3  85 rr                        sta scratch+2
002242r 3  B5 05                        lda 5,x         ; ud-hi MSB
002244r 3  85 rr                        sta scratch+3
002246r 3               
002246r 3                               ; Push down one on the Data Stack to use TOS for character
002246r 3                               ; conversion ( ud-lo ud-hi addr u x )
002246r 3  CA                           dex
002247r 3  CA                           dex
002248r 3               
002248r 3               @loop:
002248r 3                               ; Get one character based on address
002248r 3  A1 04                        lda (4,x)
00224Ar 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
00224Cr 3  74 01                        stz 1,x                 ; paranoid
00224Er 3               
00224Er 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
002251r 3               
002251r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
002251r 3                               ; check the flag. If it is zero, we return what we have and
002251r 3                               ; let the caller (usually NUMBER) complain
002251r 3  B5 00                        lda 0,x
002253r 3  D0 04                        bne @digit_ok
002255r 3               
002255r 3  E8                           inx
002256r 3  E8                           inx
002257r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
002259r 3               
002259r 3               @digit_ok:
002259r 3                               ; Conversion was successful. We arrive here with
002259r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
002259r 3                               ; math routine
002259r 3               
002259r 3                               ; Save n so we don't have to fool around with the
002259r 3                               ; Data Stack
002259r 3  B5 02                        lda 2,x
00225Br 3  85 rr                        sta scratch+4
00225Dr 3  B5 03                        lda 3,x
00225Fr 3  85 rr                        sta scratch+5
002261r 3               
002261r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
002261r 3                               ; original one on the Data Stack) with the radix from BASE.
002261r 3                               ; We can clobber TOS and NOS because we saved n
002261r 3  A5 rr                        lda scratch+2
002263r 3  95 02                        sta 2,x         ; NOS
002265r 3  A5 rr                        lda scratch+3
002267r 3  95 03                        sta 3,x
002269r 3               
002269r 3  A5 rr                        lda base
00226Br 3  95 00                        sta 0,x         ; TOS
00226Dr 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
00226Fr 3               
00226Fr 3                               ; UM* returns a double-celled number
00226Fr 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
002272r 3               
002272r 3                               ; Move ud-hi-lo to safety
002272r 3  B5 02                        lda 2,x         ; ud-hi-lo
002274r 3  85 rr                        sta scratch+6
002276r 3  B5 03                        lda 3,x
002278r 3  85 rr                        sta scratch+7
00227Ar 3               
00227Ar 3                               ; Now we multiply ud-lo, overwriting the stack entries
00227Ar 3  A5 rr                        lda scratch
00227Cr 3  95 02                        sta 2,x
00227Er 3  A5 rr                        lda scratch+1
002280r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
002282r 3               
002282r 3  A5 rr                        lda base
002284r 3  95 00                        sta 0,x
002286r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
002288r 3               
002288r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
00228Br 3               
00228Br 3  B5 00                        lda 0,x
00228Dr 3  85 rr                        sta scratch+2
00228Fr 3  B5 01                        lda 1,x
002291r 3  85 rr                        sta scratch+3
002293r 3               
002293r 3  B5 02                        lda 2,x
002295r 3  85 rr                        sta scratch
002297r 3  B5 03                        lda 3,x
002299r 3  85 rr                        sta scratch+1
00229Br 3               
00229Br 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
00229Br 3                               ; both in the scratch pad
00229Br 3  18                           clc
00229Cr 3  A5 rr                        lda scratch     ; ud-lo LSB
00229Er 3  65 rr                        adc scratch+4   ; n LSB
0022A0r 3  85 rr                        sta scratch     ; this is the new ud-lo
0022A2r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
0022A4r 3  65 rr                        adc scratch+5   ; n MSB
0022A6r 3  85 rr                        sta scratch+1
0022A8r 3               
0022A8r 3  A5 rr                        lda scratch+2   ; LSB
0022AAr 3  65 rr                        adc scratch+6
0022ACr 3  85 rr                        sta scratch+2   ; this is the new ud-hi
0022AEr 3  A5 rr                        lda scratch+3   ; MSB
0022B0r 3  65 rr                        adc scratch+7
0022B2r 3  85 rr                        sta scratch+3
0022B4r 3               
0022B4r 3                               ; Clean up: Get rid of one of the two top elements on
0022B4r 3                               ; the Data Stack. We don't really care which one
0022B4r 3  E8                           inx
0022B5r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
0022B6r 3               
0022B6r 3                               ; One character down. Move address up
0022B6r 3  F6 04                        inc 4,x
0022B8r 3  D0 02                        bne @1
0022BAr 3  F6 05                        inc 5,x
0022BCr 3               @1:
0022BCr 3                               ; Decrease counter
0022BCr 3  D6 02                        dec 2,x
0022BEr 3  D0 88                        bne @loop
0022C0r 3               
0022C0r 3               @done:
0022C0r 3                               ; Counter has reached zero or we have an error. In both
0022C0r 3                               ; cases, we clean up the Data Stack and return. Error gives
0022C0r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
0022C0r 3                               ; ( ud-lo ud-hi addr u ud-lo )
0022C0r 3  E8                           inx
0022C1r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
0022C2r 3               
0022C2r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
0022C2r 3  A5 rr                        lda scratch     ; new ud-lo
0022C4r 3  95 06                        sta 6,x
0022C6r 3  A5 rr                        lda scratch+1
0022C8r 3  95 07                        sta 7,x
0022CAr 3               
0022CAr 3  A5 rr                        lda scratch+2
0022CCr 3  95 04                        sta 4,x
0022CEr 3  A5 rr                        lda scratch+3
0022D0r 3  95 05                        sta 5,x
0022D2r 3               
0022D2r 3  60           z_to_number:    rts
0022D3r 3               
0022D3r 3               
0022D3r 3               
0022D3r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0022D3r 3               ; ## ">order"  tested  Gforth search
0022D3r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0022D3r 3               
0022D3r 3               xt_to_order:
0022D3r 3                               ; Put the wid on the return stack for now.
0022D3r 3  20 rr rr                     jsr xt_to_r
0022D6r 3               
0022D6r 3                               ; Get the current search order.
0022D6r 3  20 rr rr                     jsr xt_get_order
0022D9r 3               
0022D9r 3                               ; Get back the wid and add it to the list.
0022D9r 3  20 rr rr                     jsr xt_r_from
0022DCr 3  20 rr rr                     jsr xt_swap
0022DFr 3  20 rr rr                     jsr xt_one_plus
0022E2r 3               
0022E2r 3                               ; Set the search order with the new list.
0022E2r 3  20 rr rr                     jsr xt_set_order
0022E5r 3               
0022E5r 3  60           z_to_order:     rts
0022E6r 3               
0022E6r 3               
0022E6r 3               
0022E6r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
0022E6r 3               ; ## ">r"  auto  ANS core
0022E6r 3                       ; """https://forth-standard.org/standard/core/toR
0022E6r 3                       ; This word is handled differently for native and for
0022E6r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
0022E6r 3                       ; word.
0022E6r 3                       ; """
0022E6r 3               xt_to_r:
0022E6r 3                               ; Save the return address. If this word is natively
0022E6r 3                               ; coded, this is a complete waste of cycles, but
0022E6r 3                               ; required for subroutine coding
0022E6r 3  68                           pla             ; LSB
0022E7r 3  85 rr                        sta tmptos
0022E9r 3  7A                           ply             ; MSB
0022EAr 3               
0022EAr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0022EAr 3               
0022EAr 3                               ; We check for underflow in the second step, so we can
0022EAr 3                               ; strip off the stack thrashing for native compiling first
0022EAr 3  20 rr rr                     jsr underflow_1
0022EDr 3               
0022EDr 3                               ; now we can do the actual work
0022EDr 3  B5 01                        lda 1,x         ; MSB
0022EFr 3  48                           pha
0022F0r 3  B5 00                        lda 0,x         ; LSB
0022F2r 3  48                           pha
0022F3r 3               
0022F3r 3  E8                           inx
0022F4r 3  E8                           inx
0022F5r 3               
0022F5r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0022F5r 3               
0022F5r 3                               ; restore return address
0022F5r 3  5A                           phy             ; MSB
0022F6r 3  A5 rr                        lda tmptos
0022F8r 3  48                           pha             ; LSB
0022F9r 3               
0022F9r 3  60           z_to_r:         rts
0022FAr 3               
0022FAr 3               
0022FAr 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
0022FAr 3               ; ## "true"  auto  ANS core ext
0022FAr 3                       ; """https://forth-standard.org/standard/core/TRUE"""
0022FAr 3               xt_true:
0022FAr 3  CA                           dex
0022FBr 3  CA                           dex
0022FCr 3  A9 FF                        lda #$FF
0022FEr 3  95 00                        sta 0,x
002300r 3  95 01                        sta 1,x
002302r 3               
002302r 3  60           z_true:         rts
002303r 3               
002303r 3               
002303r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
002303r 3               ; ## "tuck"  auto  ANS core ext
002303r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
002303r 3               xt_tuck:
002303r 3  20 rr rr                     jsr underflow_2
002306r 3               
002306r 3  CA                           dex
002307r 3  CA                           dex
002308r 3               
002308r 3  B4 04                        ldy 4,x         ; LSB
00230Ar 3  B5 02                        lda 2,x
00230Cr 3  95 04                        sta 4,x
00230Er 3  94 02                        sty 2,x
002310r 3  95 00                        sta 0,x
002312r 3               
002312r 3  B4 05                        ldy 5,x         ; MSB
002314r 3  B5 03                        lda 3,x
002316r 3  95 05                        sta 5,x
002318r 3  94 03                        sty 3,x         ; bba
00231Ar 3  95 01                        sta 1,x         ; baa
00231Cr 3               
00231Cr 3  60           z_tuck:         rts
00231Dr 3               
00231Dr 3               
00231Dr 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
00231Dr 3               ; ## "2"  auto  Tali Forth
00231Dr 3                       ;
00231Dr 3                       ; This code is shared with ASSEMBLER-WORDLIST
00231Dr 3               xt_assembler_wordlist:
00231Dr 3               xt_two:
00231Dr 3  CA                           dex
00231Er 3  CA                           dex
00231Fr 3  A9 02                        lda #2
002321r 3  95 00                        sta 0,x
002323r 3  74 01                        stz 1,x
002325r 3               
002325r 3               z_assembler_wordlist:
002325r 3  60           z_two:          rts
002326r 3               
002326r 3               
002326r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
002326r 3               ; ## "2drop"  auto  ANS core
002326r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
002326r 3               xt_two_drop:
002326r 3  20 rr rr                     jsr underflow_2
002329r 3               
002329r 3  E8                           inx
00232Ar 3  E8                           inx
00232Br 3  E8                           inx
00232Cr 3  E8                           inx
00232Dr 3               
00232Dr 3  60           z_two_drop:     rts
00232Er 3               
00232Er 3               
00232Er 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
00232Er 3               ; ## "2dup"  auto  ANS core
00232Er 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
00232Er 3               xt_two_dup:
00232Er 3  20 rr rr                     jsr underflow_2
002331r 3               
002331r 3  CA                           dex
002332r 3  CA                           dex
002333r 3  CA                           dex
002334r 3  CA                           dex
002335r 3               
002335r 3  B5 04                        lda 4,x         ; TOS
002337r 3  95 00                        sta 0,x
002339r 3  B5 05                        lda 5,x
00233Br 3  95 01                        sta 1,x
00233Dr 3               
00233Dr 3  B5 06                        lda 6,x         ; NOS
00233Fr 3  95 02                        sta 2,x
002341r 3  B5 07                        lda 7,x
002343r 3  95 03                        sta 3,x
002345r 3               
002345r 3  60           z_two_dup:      rts
002346r 3               
002346r 3               
002346r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
002346r 3               ; ## "2@"  auto  ANS core
002346r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
002346r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
002346r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
002346r 3                       ; """
002346r 3               xt_two_fetch:
002346r 3  20 rr rr                     jsr underflow_1
002349r 3               
002349r 3  B5 00                        lda 0,x
00234Br 3  85 rr                        sta tmp1
00234Dr 3  B4 01                        ldy 1,x
00234Fr 3  84 rr                        sty tmp1+1
002351r 3               
002351r 3  CA                           dex             ; reuse one stack element
002352r 3  CA                           dex
002353r 3               
002353r 3  B2 rr                        lda (tmp1)      ; copy LSB
002355r 3  95 00                        sta 0,x
002357r 3  A0 01                        ldy #1          ; copy next
002359r 3  B1 rr                        lda (tmp1),y
00235Br 3  95 01                        sta 1,x
00235Dr 3  C8                           iny             ; copy next
00235Er 3  B1 rr                        lda (tmp1),y
002360r 3  95 02                        sta 2,x
002362r 3  C8                           iny             ; copy next
002363r 3  B1 rr                        lda (tmp1),y
002365r 3  95 03                        sta 3,x
002367r 3               
002367r 3  60           z_two_fetch:    rts
002368r 3               
002368r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002368r 3               ; ## "2over"  auto  ANS core
002368r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002368r 3               xt_two_over:
002368r 3  20 rr rr                     jsr underflow_4
00236Br 3               
00236Br 3  CA                           dex
00236Cr 3  CA                           dex
00236Dr 3  CA                           dex
00236Er 3  CA                           dex
00236Fr 3               
00236Fr 3  B5 08                        lda 8,x
002371r 3  95 00                        sta 0,x
002373r 3               
002373r 3  B5 09                        lda 9,x
002375r 3  95 01                        sta 1,x
002377r 3               
002377r 3  B5 0A                        lda 10,x
002379r 3  95 02                        sta 2,x
00237Br 3               
00237Br 3  B5 0B                        lda 11,x
00237Dr 3  95 03                        sta 3,x
00237Fr 3               
00237Fr 3  60           z_two_over:     rts
002380r 3               
002380r 3               
002380r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
002380r 3               ; ## "2r@"  auto  ANS core ext
002380r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
002380r 3                       ;
002380r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
002380r 3                       ; assembler. We use trickery to access the elements on the Return
002380r 3                       ; Stack instead of pulling the return address first and storing
002380r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
002380r 3                       ; it as Never Native; at some point, we should compare versions to
002380r 3                       ; see if an Always Native version would be better
002380r 3                       ; """
002380r 3               xt_two_r_fetch:
002380r 3               		; make room on the Data Stack
002380r 3  CA                           dex
002381r 3  CA                           dex
002382r 3  CA                           dex
002383r 3  CA                           dex
002384r 3               
002384r 3                               ; Get four bytes off of Return Stack. This assumes that
002384r 3                               ; we took a subroutine jump here so the first two entries
002384r 3                               ; are the return address
002384r 3  8A                           txa
002385r 3  BA                           tsx
002386r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
002387r 3  7A                           ply
002388r 3  AA                           tax
002389r 3               
002389r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
002389r 3                               ; the return address for this word. This is a whole lot
002389r 3                               ; easier on the 65816
002389r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
00238Cr 3  95 00                        sta 0,x
00238Er 3  B9 04 01                     lda $0104,y     ; MSB of top entry
002391r 3  95 01                        sta 1,x
002393r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
002396r 3  95 02                        sta 2,x
002398r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
00239Br 3  95 03                        sta 3,x
00239Dr 3               
00239Dr 3  60           z_two_r_fetch:  rts
00239Er 3               
00239Er 3               
00239Er 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
00239Er 3               ; ## "2r>"  auto  ANS core ext
00239Er 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
00239Er 3                       ; Pull top two entries from Return Stack.
00239Er 3                       ;
00239Er 3                       ; Is the same as
00239Er 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
00239Er 3                       ; the top value on the ReturnStack for a STC Forth is the
00239Er 3                       ; return address, which we need to get out of the way first.
00239Er 3                       ; Native compile needs to be handled as a special case.
00239Er 3                       ; """
00239Er 3               xt_two_r_from:
00239Er 3                               ; save the return address
00239Er 3  68                           pla                     ; LSB
00239Fr 3  85 rr                        sta tmp1
0023A1r 3  68                           pla                     ; MSB
0023A2r 3  85 rr                        sta tmp1+1
0023A4r 3               
0023A4r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0023A4r 3               
0023A4r 3               		; make room on stack
0023A4r 3  CA                           dex
0023A5r 3  CA                           dex
0023A6r 3  CA                           dex
0023A7r 3  CA                           dex
0023A8r 3               
0023A8r 3                               ; In theory, we should test for underflow on the Return
0023A8r 3                               ; Stack. However, given the traffic there with an STC
0023A8r 3                               ; Forth, that's probably not really useful
0023A8r 3               
0023A8r 3                               ; now we can access the data
0023A8r 3  68                           pla                     ; LSB
0023A9r 3  95 00                        sta 0,x
0023ABr 3  68                           pla                     ; MSB
0023ACr 3  95 01                        sta 1,x
0023AEr 3               
0023AEr 3  68                           pla                     ; LSB
0023AFr 3  95 02                        sta 2,x
0023B1r 3  68                           pla                     ; MSB
0023B2r 3  95 03                        sta 3,x
0023B4r 3               
0023B4r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0023B4r 3               
0023B4r 3                               ; restore return address
0023B4r 3  A5 rr                        lda tmp1+1              ; MSB
0023B6r 3  48                           pha
0023B7r 3  A5 rr                        lda tmp1                ; LSB
0023B9r 3  48                           pha
0023BAr 3               
0023BAr 3  60           z_two_r_from:   rts
0023BBr 3               
0023BBr 3               
0023BBr 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
0023BBr 3               ; ## "2/"  auto  ANS core
0023BBr 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
0023BBr 3               xt_two_slash:
0023BBr 3  20 rr rr                     jsr underflow_1
0023BEr 3               
0023BEr 3                               ; We can't just LSR the LSB and ROR the MSB because that
0023BEr 3                               ; would do bad things to the sign
0023BEr 3  B5 01                        lda 1,x
0023C0r 3  0A                           asl                     ; save the sign
0023C1r 3  76 01                        ror 1,x
0023C3r 3  76 00                        ror 0,x
0023C5r 3               
0023C5r 3  60           z_two_slash:    rts
0023C6r 3               
0023C6r 3               
0023C6r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
0023C6r 3               ; ## "2*"  auto  ANS core
0023C6r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
0023C6r 3                       ;
0023C6r 3                       ; Also used for CELLS
0023C6r 3                       ; """
0023C6r 3               xt_two_star:
0023C6r 3               xt_cells:
0023C6r 3  20 rr rr                     jsr underflow_1
0023C9r 3               
0023C9r 3  16 00                        asl 0,x
0023CBr 3  36 01                        rol 1,x
0023CDr 3               z_cells:
0023CDr 3  60           z_two_star:     rts
0023CEr 3               
0023CEr 3               
0023CEr 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0023CEr 3               ; ## "2!"  auto  ANS core
0023CEr 3                       ; """https://forth-standard.org/standard/core/TwoStore
0023CEr 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0023CEr 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0023CEr 3                       ; """
0023CEr 3               xt_two_store:
0023CEr 3  20 rr rr                     jsr underflow_3
0023D1r 3               
0023D1r 3  B5 00                        lda 0,x
0023D3r 3  85 rr                        sta tmp1
0023D5r 3  B4 01                        ldy 1,x
0023D7r 3  84 rr                        sty tmp1+1
0023D9r 3               
0023D9r 3  E8                           inx
0023DAr 3  E8                           inx
0023DBr 3               
0023DBr 3  B5 00                        lda 0,x         ; copy MSB
0023DDr 3  92 rr                        sta (tmp1)
0023DFr 3  B5 01                        lda 1,x         ; copy next
0023E1r 3  A0 01                        ldy #1
0023E3r 3  91 rr                        sta (tmp1),y
0023E5r 3  B5 02                        lda 2,x         ; copy next
0023E7r 3  C8                           iny
0023E8r 3  91 rr                        sta (tmp1),y
0023EAr 3  B5 03                        lda 3,x         ; copy MSB
0023ECr 3  C8                           iny
0023EDr 3  91 rr                        sta (tmp1),y
0023EFr 3               
0023EFr 3  E8                           inx             ; 2DROP
0023F0r 3  E8                           inx
0023F1r 3  E8                           inx
0023F2r 3  E8                           inx
0023F3r 3               
0023F3r 3  60           z_two_store:    rts
0023F4r 3               
0023F4r 3               
0023F4r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
0023F4r 3               ; ## "2swap"  auto  ANS core
0023F4r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
0023F4r 3               xt_two_swap:
0023F4r 3  20 rr rr                     jsr underflow_4
0023F7r 3               
0023F7r 3                               ; 0 <-> 4
0023F7r 3  B5 00                        lda 0,x
0023F9r 3  B4 04                        ldy 4,x
0023FBr 3  95 04                        sta 4,x
0023FDr 3  94 00                        sty 0,x
0023FFr 3               
0023FFr 3                               ; 1 <-> 5
0023FFr 3  B5 01                        lda 1,x
002401r 3  B4 05                        ldy 5,x
002403r 3  95 05                        sta 5,x
002405r 3  94 01                        sty 1,x
002407r 3               
002407r 3                               ; 2 <-> 6
002407r 3  B5 02                        lda 2,x
002409r 3  B4 06                        ldy 6,x
00240Br 3  95 06                        sta 6,x
00240Dr 3  94 02                        sty 2,x
00240Fr 3               
00240Fr 3                               ; 3 <-> 7
00240Fr 3  B5 03                        lda 3,x
002411r 3  B4 07                        ldy 7,x
002413r 3  95 07                        sta 7,x
002415r 3  94 03                        sty 3,x
002417r 3               
002417r 3  60           z_two_swap:     rts
002418r 3               
002418r 3               
002418r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
002418r 3               ; ## "2>r"  auto  ANS core ext
002418r 3                       ; """https://forth-standard.org/standard/core/TwotoR
002418r 3                       ; Push top two entries to Return Stack.
002418r 3                       ;
002418r 3                       ; The same as SWAP >R >R
002418r 3                       ; except that if we jumped here, the return address will be in the
002418r 3                       ; way. May not be natively compiled unless we're clever and use
002418r 3                       ; special routines.
002418r 3                       ; """
002418r 3               xt_two_to_r:
002418r 3                               ; save the return address
002418r 3  68                           pla             ; LSB
002419r 3  85 rr                        sta tmp1
00241Br 3  68                           pla             ; MSB
00241Cr 3  85 rr                        sta tmp1+1
00241Er 3               
00241Er 3                               ; --- CUT HERE FOR NATIVE CODING ---
00241Er 3               
00241Er 3  20 rr rr                     jsr underflow_2
002421r 3               
002421r 3                               ; now we can move the data
002421r 3  B5 03                        lda 3,x         ; MSB
002423r 3  48                           pha
002424r 3  B5 02                        lda 2,x         ; LSB
002426r 3  48                           pha
002427r 3               
002427r 3                               ; now we can move the data
002427r 3  B5 01                        lda 1,x         ; MSB
002429r 3  48                           pha
00242Ar 3  B5 00                        lda 0,x         ; LSB
00242Cr 3  48                           pha
00242Dr 3               
00242Dr 3  E8                           inx
00242Er 3  E8                           inx
00242Fr 3  E8                           inx
002430r 3  E8                           inx
002431r 3               
002431r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002431r 3               
002431r 3                               ; restore return address
002431r 3  A5 rr                        lda tmp1+1      ; MSB
002433r 3  48                           pha
002434r 3  A5 rr                        lda tmp1        ; LSB
002436r 3  48                           pha
002437r 3               
002437r 3  60           z_two_to_r:     rts
002438r 3               
002438r 3               
002438r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002438r 3               ; ## "2constant"  auto  ANS double
002438r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002438r 3                       ;
002438r 3                       ; Based on the Forth code
002438r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002438r 3                       ; """
002438r 3               xt_two_constant:
002438r 3  20 rr rr                     jsr underflow_2
00243Br 3               
00243Br 3  20 rr rr                     jsr xt_create
00243Er 3  20 rr rr                     jsr xt_swap
002441r 3  20 rr rr                     jsr xt_comma
002444r 3  20 rr rr                     jsr xt_comma
002447r 3               
002447r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
00244Ar 3  20 rr rr                     jsr dodoes
00244Dr 3               
00244Dr 3  20 rr rr                     jsr xt_dup
002450r 3  20 rr rr                     jsr xt_fetch
002453r 3  20 rr rr                     jsr xt_swap
002456r 3  20 rr rr                     jsr xt_cell_plus
002459r 3  20 rr rr                     jsr xt_fetch
00245Cr 3               
00245Cr 3  60           z_two_constant: rts
00245Dr 3               
00245Dr 3               
00245Dr 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
00245Dr 3               ; ## "2literal"  auto  ANS double
00245Dr 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
00245Dr 3                       ; Based on the Forth code
00245Dr 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
00245Dr 3                       ; """
00245Dr 3               xt_two_literal:
00245Dr 3  20 rr rr                     jsr underflow_2 ; double number
002460r 3               
002460r 3  20 rr rr                     jsr xt_swap
002463r 3  20 rr rr                     jsr xt_literal
002466r 3  20 rr rr                     jsr xt_literal
002469r 3               
002469r 3  60           z_two_literal:  rts
00246Ar 3               
00246Ar 3               
00246Ar 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
00246Ar 3               ; ## "2variable"  auto  ANS double
00246Ar 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
00246Ar 3                       ; The variable is not initialized to zero.
00246Ar 3                       ;
00246Ar 3                       ; This can be realized in Forth as either
00246Ar 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
00246Ar 3                       ; """
00246Ar 3               xt_two_variable:
00246Ar 3                               ; We just let CRATE and ALLOT do the heavy lifting
00246Ar 3  20 rr rr                     jsr xt_create
00246Dr 3               
00246Dr 3  CA                           dex
00246Er 3  CA                           dex
00246Fr 3  A9 04                        lda #4
002471r 3  95 00                        sta 0,x
002473r 3  74 01                        stz 1,x
002475r 3               
002475r 3  20 rr rr                     jsr xt_allot
002478r 3               
002478r 3  60           z_two_variable: rts
002479r 3               
002479r 3               
002479r 3               ; ## TYPE ( addr u -- ) "Print string"
002479r 3               ; ## "type"  auto  ANS core
002479r 3                       ; """https://forth-standard.org/standard/core/TYPE
002479r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002479r 3                       ; """
002479r 3               
002479r 3               xt_type:
002479r 3  20 rr rr                     jsr underflow_2
00247Cr 3               
00247Cr 3                               ; Save the starting address into tmp1
00247Cr 3  B5 02                        lda 2,x
00247Er 3  85 rr                        sta tmp1
002480r 3  B5 03                        lda 3,x
002482r 3  85 rr                        sta tmp1+1
002484r 3               @loop:
002484r 3                               ; done if length is zero
002484r 3  B5 00                        lda 0,x
002486r 3  15 01                        ora 1,x
002488r 3  F0 15                        beq @done
00248Ar 3               
00248Ar 3                               ; Send the current character
00248Ar 3  B2 rr                        lda (tmp1)
00248Cr 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
00248Fr 3               
00248Fr 3                               ; Move the address along (in tmp1)
00248Fr 3  E6 rr                        inc tmp1
002491r 3  D0 02                        bne @1
002493r 3  E6 rr                        inc tmp1+1
002495r 3               @1:
002495r 3                               ; Reduce the count (on the data stack)
002495r 3  B5 00                        lda 0,x
002497r 3  D0 02                        bne @2
002499r 3  D6 01                        dec 1,x
00249Br 3               @2:
00249Br 3  D6 00                        dec 0,x
00249Dr 3               
00249Dr 3  80 E5                        bra @loop
00249Fr 3               @done:
00249Fr 3  E8                           inx
0024A0r 3  E8                           inx
0024A1r 3  E8                           inx
0024A2r 3  E8                           inx
0024A3r 3               
0024A3r 3  60           z_type:         rts
0024A4r 3               
0024A4r 3               
0024A4r 3               
0024A4r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
0024A4r 3               ; ## "u."  tested  ANS core
0024A4r 3                       ; """https://forth-standard.org/standard/core/Ud
0024A4r 3                       ;
0024A4r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
0024A4r 3                       ; We use the internal assembler function print_u followed
0024A4r 3                       ; by a single space
0024A4r 3                       ; """
0024A4r 3               xt_u_dot:
0024A4r 3  20 rr rr                     jsr underflow_1
0024A7r 3               
0024A7r 3  20 rr rr                     jsr print_u
0024AAr 3  A9 20                        lda #AscSP
0024ACr 3  20 rr rr                     jsr emit_a
0024AFr 3               
0024AFr 3  60           z_u_dot:        rts
0024B0r 3               
0024B0r 3               
0024B0r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
0024B0r 3               ; ## "u.r"  tested  ANS core ext
0024B0r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
0024B0r 3               xt_u_dot_r:
0024B0r 3  20 rr rr                     jsr underflow_2
0024B3r 3               
0024B3r 3  20 rr rr                     jsr xt_to_r
0024B6r 3  20 rr rr                     jsr xt_zero
0024B9r 3  20 rr rr                     jsr xt_less_number_sign
0024BCr 3  20 rr rr                     jsr xt_number_sign_s
0024BFr 3  20 rr rr                     jsr xt_number_sign_greater
0024C2r 3  20 rr rr                     jsr xt_r_from
0024C5r 3  20 rr rr                     jsr xt_over
0024C8r 3  20 rr rr                     jsr xt_minus
0024CBr 3  20 rr rr                     jsr xt_spaces
0024CEr 3  20 rr rr                     jsr xt_type
0024D1r 3               
0024D1r 3  60           z_u_dot_r:      rts
0024D2r 3               
0024D2r 3               
0024D2r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
0024D2r 3               ; ## "u>"  auto  ANS core ext
0024D2r 3                       ; """https://forth-standard.org/standard/core/Umore"""
0024D2r 3               xt_u_greater_than:
0024D2r 3  20 rr rr                     jsr underflow_2
0024D5r 3               
0024D5r 3  B5 00                        lda 0,x
0024D7r 3  D5 02                        cmp 2,x
0024D9r 3  B5 01                        lda 1,x
0024DBr 3  F5 03                        sbc 3,x
0024DDr 3  E8                           inx
0024DEr 3  E8                           inx
0024DFr 3               
0024DFr 3  A9 00                        lda #0
0024E1r 3  69 FF                        adc #$ff
0024E3r 3  95 00                        sta 0,x         ; store flag
0024E5r 3  95 01                        sta 1,x
0024E7r 3               
0024E7r 3  60           z_u_greater_than:    rts
0024E8r 3               
0024E8r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
0024E8r 3               ; ## "u<"  auto  ANS core
0024E8r 3                       ; """https://forth-standard.org/standard/core/Uless"""
0024E8r 3               xt_u_less_than:
0024E8r 3  20 rr rr                     jsr underflow_2
0024EBr 3               
0024EBr 3  B5 02                        lda 2,x
0024EDr 3  D5 00                        cmp 0,x
0024EFr 3  B5 03                        lda 3,x
0024F1r 3  F5 01                        sbc 1,x
0024F3r 3  E8                           inx
0024F4r 3  E8                           inx
0024F5r 3               
0024F5r 3  A9 00                        lda #0
0024F7r 3  69 FF                        adc #$ff
0024F9r 3  95 00                        sta 0,x         ; store flag
0024FBr 3  95 01                        sta 1,x
0024FDr 3               
0024FDr 3  60           z_u_less_than:    rts
0024FEr 3               
0024FEr 3               
0024FEr 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
0024FEr 3               ; ## "ud."  auto  Tali double
0024FEr 3                       ;
0024FEr 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
0024FEr 3                       ; """
0024FEr 3               xt_ud_dot:
0024FEr 3  20 rr rr                     jsr underflow_2 ; double number
002501r 3               
002501r 3  20 rr rr                     jsr xt_less_number_sign
002504r 3  20 rr rr                     jsr xt_number_sign_s
002507r 3  20 rr rr                     jsr xt_number_sign_greater
00250Ar 3  20 rr rr                     jsr xt_type
00250Dr 3  20 rr rr                     jsr xt_space
002510r 3               
002510r 3  60           z_ud_dot:        rts
002511r 3               
002511r 3               
002511r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002511r 3               ; ## "ud.r"  auto  Tali double
002511r 3                       ;
002511r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002511r 3                       ; """
002511r 3               xt_ud_dot_r:
002511r 3  20 rr rr                     jsr underflow_3
002514r 3               
002514r 3  20 rr rr                     jsr xt_to_r
002517r 3  20 rr rr                     jsr xt_less_number_sign
00251Ar 3  20 rr rr                     jsr xt_number_sign_s
00251Dr 3  20 rr rr                     jsr xt_number_sign_greater
002520r 3  20 rr rr                     jsr xt_r_from
002523r 3  20 rr rr                     jsr xt_over
002526r 3  20 rr rr                     jsr xt_minus
002529r 3  20 rr rr                     jsr xt_spaces
00252Cr 3  20 rr rr                     jsr xt_type
00252Fr 3               
00252Fr 3  60           z_ud_dot_r:      rts
002530r 3               
002530r 3               
002530r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002530r 3               ; ## "um/mod"  auto  ANS core
002530r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002530r 3                       ; Divide double cell number by single cell number, returning the
002530r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002530r 3                       ; This is the basic division operation all others use. Based on FIG
002530r 3                       ; Forth code, modified by Garth Wilson, see
002530r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002530r 3                       ;
002530r 3                       ; This uses tmp1, tmp1+1, and tmptos
002530r 3                       ; """
002530r 3               
002530r 3               xt_um_slash_mod:
002530r 3  20 rr rr                     jsr underflow_3
002533r 3               
002533r 3                               ; catch division by zero
002533r 3  B5 00                        lda 0,x
002535r 3  15 01                        ora 1,x
002537r 3  D0 05                        bne @not_zero
002539r 3               
002539r 3  A9 04                        lda #err_divzero
00253Br 3  4C rr rr                     jmp error
00253Er 3               
00253Er 3               @not_zero:
00253Er 3                               ; We loop 17 times
00253Er 3  A9 11                        lda #17
002540r 3  85 rr                        sta tmptos
002542r 3               
002542r 3               @loop:
002542r 3                               ; rotate low cell of dividend one bit left (LSB)
002542r 3  36 04                        rol 4,x
002544r 3  36 05                        rol 5,x
002546r 3               
002546r 3                               ; loop control
002546r 3  C6 rr                        dec tmptos
002548r 3  F0 22                        beq @done
00254Ar 3               
00254Ar 3                               ; rotate high cell of dividend one bit left (MSB)
00254Ar 3  36 02                        rol 2,x
00254Cr 3  36 03                        rol 3,x
00254Er 3               
00254Er 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002550r 3  26 rr                        rol tmp1
002552r 3               
002552r 3                               ; subtract dividend hi cell minus divisor
002552r 3  38                           sec
002553r 3  B5 02                        lda 2,x
002555r 3  F5 00                        sbc 0,x
002557r 3  85 rr                        sta tmp1+1
002559r 3  B5 03                        lda 3,x
00255Br 3  F5 01                        sbc 1,x
00255Dr 3               
00255Dr 3  A8                           tay
00255Er 3  A5 rr                        lda tmp1
002560r 3  E9 00                        sbc #0
002562r 3  90 DE                        bcc @loop
002564r 3               
002564r 3                               ; make result new dividend high cell
002564r 3  A5 rr                        lda tmp1+1
002566r 3  95 02                        sta 2,x
002568r 3  94 03                        sty 3,x         ; used as temp storage
00256Ar 3               
00256Ar 3  80 D6                        bra @loop
00256Cr 3               @done:
00256Cr 3  E8                           inx
00256Dr 3  E8                           inx
00256Er 3               
00256Er 3  20 rr rr                     jsr xt_swap
002571r 3               
002571r 3  60           z_um_slash_mod: rts
002572r 3               
002572r 3               
002572r 3               
002572r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002572r 3               ; ## "um*"  auto  ANS core
002572r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002572r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002572r 3                       ; Old Forth versions such as FIG Forth call this U*
002572r 3                       ;
002572r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002572r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002572r 3                       ; discussion.
002572r 3                       ;
002572r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002572r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002572r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002572r 3                       ;
002572r 3                       ; Consider switching to a table-supported version based on
002572r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002572r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002572r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002572r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002572r 3                       ; """
002572r 3               
002572r 3               xt_um_star:
002572r 3  20 rr rr                     jsr underflow_2
002575r 3               
002575r 3                               ; to eliminate clc inside the loop, the value at
002575r 3                               ; tmp1 is reduced by 1 in advance
002575r 3  18                           clc
002576r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002578r 3  E9 00                        sbc #0
00257Ar 3  85 rr                        sta tmp2
00257Cr 3               
00257Cr 3  B5 01                        lda 1,x
00257Er 3  E9 00                        sbc #0
002580r 3  90 31                        bcc @zero       ; is TOS zero?
002582r 3  85 rr                        sta tmp2+1
002584r 3               
002584r 3  A9 00                        lda #0
002586r 3  85 rr                        sta tmp1
002588r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
00258Ar 3  CA                           dex
00258Br 3  CA                           dex
00258Cr 3               
00258Cr 3               @outer_loop:
00258Cr 3  A0 08                        ldy #8          ; counter inner loop
00258Er 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002590r 3               
002590r 3               @inner_loop:
002590r 3  90 0C                        bcc @no_add
002592r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002594r 3  A5 rr                        lda tmp1
002596r 3  65 rr                        adc tmp2
002598r 3  85 rr                        sta tmp1
00259Ar 3  A5 rr                        lda tmp1+1
00259Cr 3  65 rr                        adc tmp2+1
00259Er 3               
00259Er 3               @no_add:
00259Er 3  6A                           ror
00259Fr 3  66 rr                        ror tmp1
0025A1r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
0025A3r 3               
0025A3r 3  88                           dey
0025A4r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
0025A6r 3               
0025A6r 3  E8                           inx
0025A7r 3  E4 rr                        cpx tmp3
0025A9r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
0025ABr 3               
0025ABr 3                               ; all done, store high word of result
0025ABr 3  95 01                        sta 1,x
0025ADr 3  A5 rr                        lda tmp1
0025AFr 3  95 00                        sta 0,x
0025B1r 3  80 04                        bra @done
0025B3r 3               
0025B3r 3               @zero:
0025B3r 3  74 02                        stz 2,x
0025B5r 3  74 03                        stz 3,x
0025B7r 3               @done:
0025B7r 3  60           z_um_star:      rts
0025B8r 3               
0025B8r 3               
0025B8r 3               
0025B8r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
0025B8r 3               ; ## "unloop"  auto  ANS core
0025B8r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
0025B8r 3                       ;
0025B8r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
0025B8r 3                       ; """
0025B8r 3               xt_unloop:
0025B8r 3                               ; Drop fudge number (limit/start from DO/?DO off the
0025B8r 3                               ; return stack
0025B8r 3  68                           pla
0025B9r 3  68                           pla
0025BAr 3  68                           pla
0025BBr 3  68                           pla
0025BCr 3               
0025BCr 3                               ; Now drop the LEAVE address that was below them off
0025BCr 3                               ; the Return Stack as well
0025BCr 3  68                           pla
0025BDr 3  68                           pla
0025BEr 3               
0025BEr 3  60           z_unloop:       rts
0025BFr 3               
0025BFr 3               
0025BFr 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
0025BFr 3               ; ## "until"  auto  ANS core
0025BFr 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
0025BFr 3               xt_until:
0025BFr 3                               ; Compile a 0BRANCH
0025BFr 3  A0 rr                        ldy #>zero_branch_runtime
0025C1r 3  A9 rr                        lda #<zero_branch_runtime
0025C3r 3  20 rr rr                     jsr cmpl_subroutine
0025C6r 3               
0025C6r 3                               ; The address to loop back to is on the stack.
0025C6r 3                               ; Just compile it as the destination for the
0025C6r 3                               ; 0branch.
0025C6r 3  20 rr rr                     jsr xt_comma
0025C9r 3               
0025C9r 3  60           z_until:        rts
0025CAr 3               
0025CAr 3               
0025CAr 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
0025CAr 3               ; ## "unused"  auto  ANS core ext
0025CAr 3                       ; """https://forth-standard.org/standard/core/UNUSED
0025CAr 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
0025CAr 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
0025CAr 3                       ; defaults to $400
0025CAr 3                       ; """
0025CAr 3               xt_unused:
0025CAr 3  CA                           dex
0025CBr 3  CA                           dex
0025CCr 3               
0025CCr 3  A9 FF                        lda #<cp_end
0025CEr 3  38                           sec
0025CFr 3  E5 rr                        sbc cp
0025D1r 3  95 00                        sta 0,x
0025D3r 3               
0025D3r 3  A9 7F                        lda #>cp_end
0025D5r 3  E5 rr                        sbc cp+1
0025D7r 3  95 01                        sta 1,x
0025D9r 3               
0025D9r 3  60           z_unused:       rts
0025DAr 3               
0025DAr 3               
0025DAr 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
0025DAr 3               ; ## "update"  auto  ANS block
0025DAr 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
0025DAr 3               xt_update:
0025DAr 3                               ; Turn on the dirty bit. We can't use TSB here because it only
0025DAr 3                               ; has Absolute and Direct Pages addressing modes
0025DAr 3  A0 2C                        ldy #buffstatus_offset
0025DCr 3  B1 rr                        lda (up),y
0025DEr 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
0025E0r 3  91 rr                        sta (up),y
0025E2r 3               
0025E2r 3  60           z_update:       rts
0025E3r 3               
0025E3r 3               
0025E3r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
0025E3r 3               ; ## "useraddr"  tested  Tali Forth
0025E3r 3               xt_useraddr:
0025E3r 3  CA                           dex
0025E4r 3  CA                           dex
0025E5r 3  A9 rr                        lda #<up
0025E7r 3  95 00                        sta 0,x
0025E9r 3  A9 rr                        lda #>up
0025EBr 3  95 01                        sta 1,x
0025EDr 3               
0025EDr 3  60           z_useraddr:     rts
0025EEr 3               
0025EEr 3               
0025EEr 3               ; ## VALUE ( n "name" -- ) "Define a value"
0025EEr 3               ; ## "value"  auto  ANS core
0025EEr 3                       ; """https://forth-standard.org/standard/core/VALUE
0025EEr 3                       ;
0025EEr 3                       ; This is a dummy header for the WORDLIST. The actual code is
0025EEr 3                       ; identical to that of CONSTANT
0025EEr 3                       ; """
0025EEr 3               
0025EEr 3               
0025EEr 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
0025EEr 3               ; ## "variable"  auto  ANS core
0025EEr 3                       ; """https://forth-standard.org/standard/core/VARIABLE
0025EEr 3                       ; There are various Forth definitions for this word, such as
0025EEr 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
0025EEr 3                       ; second one so the variable is initialized to zero
0025EEr 3                       ; """
0025EEr 3               xt_variable:
0025EEr 3                               ; we let CREATE do the heavy lifting
0025EEr 3  20 rr rr                     jsr xt_create
0025F1r 3               
0025F1r 3                               ; there is no "STZ (CP)" so we have to do this the hard
0025F1r 3                               ; way
0025F1r 3  A9 00                        lda #0
0025F3r 3               
0025F3r 3  92 rr                        sta (cp)
0025F5r 3  E6 rr                        inc cp
0025F7r 3  D0 02                        bne @1
0025F9r 3  E6 rr                        inc cp+1
0025FBr 3               @1:
0025FBr 3  92 rr                        sta (cp)
0025FDr 3  E6 rr                        inc cp
0025FFr 3  D0 02                        bne @2
002601r 3  E6 rr                        inc cp+1
002603r 3               @2:
002603r 3                               ; Now we need to adjust the length of the complete word by two
002603r 3  20 rr rr                     jsr adjust_z
002606r 3               
002606r 3  60           z_variable:     rts
002607r 3               
002607r 3               
002607r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002607r 3               ; ## "while"  auto  ANS core
002607r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002607r 3               xt_while:
002607r 3                               ; Compile a 0branch
002607r 3  A0 rr                        ldy #>zero_branch_runtime
002609r 3  A9 rr                        lda #<zero_branch_runtime
00260Br 3  20 rr rr                     jsr cmpl_subroutine
00260Er 3               
00260Er 3                               ; Put the address (here) where the destination
00260Er 3                               ; address needs to go so it can be put there later.
00260Er 3  20 rr rr                     jsr xt_here
002611r 3               
002611r 3                               ; Fill in the destination address with 0 for now.
002611r 3  20 rr rr                     jsr xt_zero
002614r 3  20 rr rr                     jsr xt_comma
002617r 3               
002617r 3                               ; Swap the two addresses on the stack.
002617r 3  20 rr rr                     jsr xt_swap
00261Ar 3               
00261Ar 3  60           z_while:        rts
00261Br 3               
00261Br 3               
00261Br 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
00261Br 3               ; ## "within"  auto  ANS core ext
00261Br 3                       ; """https://forth-standard.org/standard/core/WITHIN
00261Br 3                       ;
00261Br 3                       ; This an assembler version of the ANS Forth implementation
00261Br 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
00261Br 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
00261Br 3                       ; ROT TUCK > -ROT > INVERT AND
00261Br 3                       ; """"
00261Br 3               xt_within:
00261Br 3  20 rr rr                     jsr underflow_3
00261Er 3               
00261Er 3  20 rr rr                     jsr xt_over
002621r 3  20 rr rr                     jsr xt_minus
002624r 3  20 rr rr                     jsr xt_to_r
002627r 3  20 rr rr                     jsr xt_minus
00262Ar 3  20 rr rr                     jsr xt_r_from
00262Dr 3  20 rr rr                     jsr xt_u_less_than
002630r 3               
002630r 3  60           z_within:       rts
002631r 3               
002631r 3               
002631r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002631r 3               ; ## "word"  auto  ANS core
002631r 3                       ; """https://forth-standard.org/standard/core/WORD
002631r 3                       ; Obsolete parsing word included for backwards compatibility only.
002631r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002631r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002631r 3                       ; Returns the result as a counted string (requires COUNT to convert
002631r 3                       ; to modern format), and inserts a space after the string. See "Forth
002631r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002631r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002631r 3                       ; for discussions of why you shouldn't be using WORD anymore.
002631r 3                       ;
002631r 3                       ; Forth
002631r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002631r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002631r 3                       ; """
002631r 3               
002631r 3               xt_word:
002631r 3  20 rr rr                     jsr underflow_1
002634r 3               
002634r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002634r 3                               ; but unlike PARSE
002634r 3  A4 rr                        ldy toin                ; >IN
002636r 3               @loop:
002636r 3  C4 rr                        cpy ciblen              ; quit if end of input
002638r 3  F0 09                        beq @found_char
00263Ar 3  B1 rr                        lda (cib),y
00263Cr 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
00263Er 3  D0 03                        bne @found_char
002640r 3               
002640r 3  C8                           iny
002641r 3  80 F3                        bra @loop
002643r 3               @found_char:
002643r 3                               ; Save index of where word starts
002643r 3  84 rr                        sty toin
002645r 3               
002645r 3                               ; The real work is done by parse
002645r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002648r 3               
002648r 3                               ; Convert the modern ( addr u ) string format to obsolete
002648r 3                               ; ( caddr ) format. We just do this in the Dictionary
002648r 3  B5 00                        lda 0,x
00264Ar 3  92 rr                        sta (cp)                ; Save length of string
00264Cr 3  48                           pha                     ; Keep copy of length for later
00264Dr 3               
00264Dr 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002650r 3  A5 rr                        lda cp
002652r 3  18                           clc
002653r 3  69 01                        adc #1
002655r 3  95 02                        sta 2,x                 ; LSB of CP
002657r 3  A5 rr                        lda cp+1
002659r 3  69 00                        adc #0
00265Br 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
00265Dr 3               
00265Dr 3  20 rr rr                     jsr xt_move
002660r 3               
002660r 3                               ; Return caddr
002660r 3  CA                           dex
002661r 3  CA                           dex
002662r 3  A5 rr                        lda cp
002664r 3  95 00                        sta 0,x
002666r 3  A5 rr                        lda cp+1
002668r 3  95 01                        sta 1,x
00266Ar 3               
00266Ar 3                               ; Adjust CP
00266Ar 3  68                           pla                     ; length of string
00266Br 3  18                           clc
00266Cr 3  65 rr                        adc cp
00266Er 3  85 rr                        sta cp
002670r 3  A5 rr                        lda cp+1
002672r 3  69 00                        adc #0                  ; we only need the carry
002674r 3  85 rr                        sta cp+1
002676r 3  60           z_word:         rts
002677r 3               
002677r 3               
002677r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002677r 3               ; ## "wordlist" auto ANS search
002677r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002677r 3                       ; See the tutorial on Wordlists and the Search Order for
002677r 3                       ; more information.
002677r 3                       ; """
002677r 3               
002677r 3               xt_wordlist:
002677r 3                               ; Get the current number of wordlists
002677r 3  A0 05                        ldy #num_wordlists_offset
002679r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
00267Br 3                                               ; the LSB needs to be checked.
00267Br 3               
00267Br 3                               ; See if we are already at the max.
00267Br 3  C9 0C                        cmp #max_wordlists
00267Dr 3  D0 05                        bne @ok
00267Fr 3               
00267Fr 3                               ; Print an error message if all wordlists used.
00267Fr 3  A9 0B                        lda #err_wordlist
002681r 3  4C rr rr                     jmp error
002684r 3               
002684r 3               @ok:
002684r 3  1A                           inc             ; Increment the wordlist#
002685r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002687r 3  CA                           dex             ; and put it on the stack.
002688r 3  CA                           dex
002689r 3  95 00                        sta 0,x
00268Br 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
00268Dr 3               
00268Dr 3  60           z_wordlist:     rts
00268Er 3               
00268Er 3               
00268Er 3               
00268Er 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
00268Er 3               ; ## "words"  tested  ANS tools
00268Er 3                       ; """https://forth-standard.org/standard/tools/WORDS
00268Er 3                       ; This is pretty much only used at the command line so we can
00268Er 3                       ; be slow and try to save space.
00268Er 3                       ; """
00268Er 3               
00268Er 3               xt_words:
00268Er 3                               ; we follow Gforth by starting on the next
00268Er 3                               ; line
00268Er 3  20 rr rr                     jsr xt_cr
002691r 3               
002691r 3                               ; We pretty-format the output by inserting a line break
002691r 3                               ; before the end of the line. We can get away with pushing
002691r 3                               ; the counter to the stack because this is usually an
002691r 3                               ; interactive word and speed is not that important
002691r 3  A9 00                        lda #0
002693r 3  48                           pha
002694r 3               
002694r 3                               ; Set up for traversing the wordlist search order.
002694r 3  CA                           dex                     ; Make room on the stack for
002695r 3  CA                           dex                     ; a dictionary pointer.
002696r 3  64 rr                        stz tmp3                ; Start at the beginning of
002698r 3                                                       ; the search order.
002698r 3               @wordlist_loop:
002698r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
00269Ar 3  A5 rr                        lda tmp3
00269Cr 3  D1 rr                        cmp (up),y              ; See if we are done.
00269Er 3  D0 02                        bne @have_wordlist
0026A0r 3               
0026A0r 3                               ; We ran out of wordlists to search.
0026A0r 3  80 44                        bra @words_done
0026A2r 3               
0026A2r 3               @have_wordlist:
0026A2r 3                               ; start with last word in Dictionary
0026A2r 3                               ; Get the current wordlist id
0026A2r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
0026A3r 3  69 1F                        adc #search_order_offset
0026A5r 3  A8                           tay
0026A6r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
0026A8r 3               
0026A8r 3                               ; Get the DP for that wordlist.
0026A8r 3  0A                           asl                     ; Turn offset into cells offset.
0026A9r 3  18                           clc
0026AAr 3  69 06                        adc #wordlists_offset
0026ACr 3  A8                           tay
0026ADr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
0026AFr 3  95 00                        sta 0,x                 ; on the stack. ( nt )
0026B1r 3  C8                           iny
0026B2r 3  B1 rr                        lda (up),y
0026B4r 3  95 01                        sta 1,x
0026B6r 3               
0026B6r 3               @loop:
0026B6r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0026B9r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
0026BCr 3               
0026BCr 3                               ; Insert line break if we're about to go past the end of the
0026BCr 3                               ; line
0026BCr 3  68                           pla
0026BDr 3  18                           clc
0026BEr 3  75 00                        adc 0,x
0026C0r 3  1A                           inc                     ; don't forget the space between words
0026C1r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
0026C3r 3  90 05                        bcc @1
0026C5r 3               
0026C5r 3  20 rr rr                     jsr xt_cr
0026C8r 3  A9 00                        lda #0
0026CAr 3               @1:
0026CAr 3  48                           pha
0026CBr 3  20 rr rr                     jsr xt_type             ; ( nt )
0026CEr 3               
0026CEr 3  A9 20                        lda #AscSP
0026D0r 3  20 rr rr                     jsr emit_a
0026D3r 3               
0026D3r 3                               ; get next word, which begins two down
0026D3r 3  20 rr rr                     jsr xt_one_plus         ; 1+
0026D6r 3  20 rr rr                     jsr xt_one_plus         ; 1+
0026D9r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
0026DCr 3               
0026DCr 3                               ; if next address is zero, we're done
0026DCr 3  B5 00                        lda 0,x
0026DEr 3  15 01                        ora 1,x
0026E0r 3  D0 D4                        bne @loop
0026E2r 3               
0026E2r 3                               ; Move on to the next wordlist in the search order.
0026E2r 3  E6 rr                        inc tmp3
0026E4r 3  80 B2                        bra @wordlist_loop
0026E6r 3               
0026E6r 3               @words_done:
0026E6r 3  68                           pla                     ; dump counter
0026E7r 3               
0026E7r 3  E8                           inx
0026E8r 3  E8                           inx
0026E9r 3               
0026E9r 3  60           z_words:        rts
0026EAr 3               
0026EAr 3               
0026EAr 3               
0026EAr 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
0026EAr 3               ; ## "wordsize"  auto  Tali Forth
0026EAr 3                       ; """Given an word's name token (nt), return the size of the
0026EAr 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
0026EAr 3                       ; count the final RTS.
0026EAr 3                       ; """
0026EAr 3               xt_wordsize:
0026EAr 3  20 rr rr                     jsr underflow_1
0026EDr 3               
0026EDr 3                               ; We get the start address of the word from its header entry
0026EDr 3                               ; for the start of the actual code (execution token, xt)
0026EDr 3                               ; which is four bytes down, and the pointer to the end of the
0026EDr 3                               ; code (z_word, six bytes down)
0026EDr 3  B5 00                        lda 0,x
0026EFr 3  85 rr                        sta tmp1
0026F1r 3  B5 01                        lda 1,x
0026F3r 3  85 rr                        sta tmp1+1
0026F5r 3               
0026F5r 3  A0 06                        ldy #6
0026F7r 3  B1 rr                        lda (tmp1),y    ; LSB of z
0026F9r 3  88                           dey
0026FAr 3  88                           dey
0026FBr 3               
0026FBr 3  38                           sec
0026FCr 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
0026FEr 3  95 00                        sta 0,x
002700r 3               
002700r 3  A0 07                        ldy #7
002702r 3  B1 rr                        lda (tmp1),y    ; MSB of z
002704r 3  88                           dey
002705r 3  88                           dey
002706r 3               
002706r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002708r 3  95 01                        sta 1,x
00270Ar 3               
00270Ar 3  60           z_wordsize:     rts
00270Br 3               
00270Br 3               
00270Br 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
00270Br 3               ; ## "xor"  auto  ANS core
00270Br 3                       ; """https://forth-standard.org/standard/core/XOR"""
00270Br 3               xt_xor:
00270Br 3  20 rr rr                     jsr underflow_2
00270Er 3               
00270Er 3  B5 00                        lda 0,x
002710r 3  55 02                        eor 2,x
002712r 3  95 02                        sta 2,x
002714r 3               
002714r 3  B5 01                        lda 1,x
002716r 3  55 03                        eor 3,x
002718r 3  95 03                        sta 3,x
00271Ar 3               
00271Ar 3  E8                           inx
00271Br 3  E8                           inx
00271Cr 3               
00271Cr 3  60           z_xor:          rts
00271Dr 3               
00271Dr 3               
00271Dr 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
00271Dr 3               ; ## "0"  auto  Tali Forth
00271Dr 3                       ; """The disassembler assumes that this routine does not use Y. Note
00271Dr 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
00271Dr 3                       ; is 0."""
00271Dr 3               xt_case:
00271Dr 3               xt_forth_wordlist:
00271Dr 3               xt_zero:
00271Dr 3  CA                           dex             ; push
00271Er 3  CA                           dex
00271Fr 3  74 00                        stz 0,x
002721r 3  74 01                        stz 1,x
002723r 3               z_case:
002723r 3               z_forth_wordlist:
002723r 3               z_zero:
002723r 3  60                           rts
002724r 3               
002724r 3               
002724r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002724r 3               ; ## "0="  auto  ANS core
002724r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002724r 3               
002724r 3               xt_zero_equal:
002724r 3  20 rr rr                     jsr underflow_1
002727r 3               
002727r 3  B5 00                        lda 0,x
002729r 3  15 01                        ora 1,x
00272Br 3  F0 04                        beq @zero
00272Dr 3               
00272Dr 3                               ; not a zero, so we need a FALSE flag (0)
00272Dr 3  A9 00                        lda #0
00272Fr 3  80 02                        bra @store
002731r 3               @zero:
002731r 3                               ; We have a zero, so we need a TRUE flag (-1)
002731r 3  A9 FF                        lda #$ff
002733r 3               @store:
002733r 3  95 00                        sta 0,x
002735r 3  95 01                        sta 1,x
002737r 3               
002737r 3  60           z_zero_equal:   rts
002738r 3               
002738r 3               
002738r 3               
002738r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002738r 3               ; ## "0>"  auto  ANS core ext
002738r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002738r 3               
002738r 3               xt_zero_greater:
002738r 3  20 rr rr                     jsr underflow_1
00273Br 3               
00273Br 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
00273Dr 3               
00273Dr 3  B5 01                        lda 1,x         ; MSB
00273Fr 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002741r 3  15 00                        ora 0,x
002743r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002745r 3               
002745r 3  88                           dey             ; TOS is postive, make true
002746r 3               @done:
002746r 3  98                           tya
002747r 3  95 00                        sta 0,x
002749r 3  95 01                        sta 1,x
00274Br 3               
00274Br 3  60           z_zero_greater: rts
00274Cr 3               
00274Cr 3               
00274Cr 3               
00274Cr 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
00274Cr 3               ; ## "0<"  auto  ANS core
00274Cr 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
00274Cr 3               
00274Cr 3               xt_zero_less:
00274Cr 3  20 rr rr                     jsr underflow_1
00274Fr 3               
00274Fr 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002751r 3               
002751r 3  B5 01                        lda 1,x         ; MSB
002753r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002755r 3               
002755r 3  88                           dey             ; TOS is negative, make TRUE
002756r 3               @done:
002756r 3  98                           tya
002757r 3  95 00                        sta 0,x
002759r 3  95 01                        sta 1,x
00275Br 3               
00275Br 3  60           z_zero_less:    rts
00275Cr 3               
00275Cr 3               
00275Cr 3               
00275Cr 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
00275Cr 3               ; ## "0<>"  auto  ANS core ext
00275Cr 3                       ; """https://forth-standard.org/standard/core/Zerone"""
00275Cr 3               
00275Cr 3               xt_zero_unequal:
00275Cr 3  20 rr rr                     jsr underflow_1
00275Fr 3               
00275Fr 3  A0 00                        ldy #0          ; default false
002761r 3               
002761r 3  B5 00                        lda 0,x
002763r 3  15 01                        ora 1,x
002765r 3  F0 01                        beq @got_zero
002767r 3               
002767r 3  88                           dey
002768r 3               @got_zero:
002768r 3  98                           tya
002769r 3  95 00                        sta 0,x
00276Br 3  95 01                        sta 1,x
00276Dr 3               
00276Dr 3  60           z_zero_unequal: rts
00276Er 3               
00276Er 3               
00276Er 3               
00276Er 3               ; ==========================================================
00276Er 3               ; EDITOR words
00276Er 3               
00276Er 3               ; This routine is used by both enter-screen and erase-screen
00276Er 3               ; to get a buffer for the given screen number and set SCR to
00276Er 3               ; the given screen number.  This word is not in the dictionary.
00276Er 3               xt_editor_screen_helper:
00276Er 3  20 rr rr                     jsr xt_dup
002771r 3  20 rr rr                     jsr xt_scr
002774r 3  20 rr rr                     jsr xt_store
002777r 3  20 rr rr                     jsr xt_buffer
00277Ar 3               z_editor_screen_helper:
00277Ar 3  60                           rts
00277Br 3               
00277Br 3               
00277Br 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
00277Br 3               ; ## "enter-screen"  auto  Tali Editor
00277Br 3               
00277Br 3               xt_editor_enter_screen:
00277Br 3                               ; Set the variable SCR and get a buffer for the
00277Br 3                               ; given screen number.
00277Br 3  20 rr rr                     jsr xt_editor_screen_helper
00277Er 3               
00277Er 3                               ; Drop the buffer address.
00277Er 3  20 rr rr                     jsr xt_drop
002781r 3               
002781r 3                               ; Overwrite the lines one at a time.
002781r 3  64 rr                        stz editor1
002783r 3               @prompt_loop:
002783r 3                               ; Put the current line number on the stack.
002783r 3  CA                           dex
002784r 3  CA                           dex
002785r 3  A5 rr                        lda editor1
002787r 3  95 00                        sta 0,x
002789r 3  74 01                        stz 1,x
00278Br 3               
00278Br 3                               ; Use the O word to prompt for overwrite.
00278Br 3  20 rr rr                     jsr xt_editor_o
00278Er 3               
00278Er 3                               ; Move on to the next line.
00278Er 3  E6 rr                        inc editor1
002790r 3  A9 10                        lda #16
002792r 3  C5 rr                        cmp editor1
002794r 3  D0 ED                        bne @prompt_loop
002796r 3               
002796r 3               z_editor_enter_screen:
002796r 3  60                           rts
002797r 3               
002797r 3               
002797r 3               
002797r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002797r 3               ; ## "erase-screen"  tested  Tali Editor
002797r 3               xt_editor_erase_screen:
002797r 3                               ; Set the variable SCR and get a buffer for the
002797r 3                               ; given screen number.
002797r 3  20 rr rr                     jsr xt_editor_screen_helper
00279Ar 3               
00279Ar 3                               ; Put 1024 (chars/screen) on stack.
00279Ar 3  CA                           dex
00279Br 3  CA                           dex
00279Cr 3  74 00                        stz 0,x
00279Er 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
0027A0r 3  95 01                        sta 1,x
0027A2r 3               
0027A2r 3                               ; Erase the entire block (fill with spaces).
0027A2r 3  20 rr rr                     jsr xt_blank
0027A5r 3               
0027A5r 3                               ; Mark buffer as updated.
0027A5r 3  20 rr rr                     jsr xt_update
0027A8r 3               
0027A8r 3               z_editor_erase_screen:
0027A8r 3  60                           rts
0027A9r 3               
0027A9r 3               
0027A9r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
0027A9r 3               ; ## "el"  tested  Tali Editor
0027A9r 3               xt_editor_el:
0027A9r 3                               ; Turn the line number into buffer offset.
0027A9r 3                               ; This also loads the block into the buffer if it's
0027A9r 3                               ; not there for some reason.
0027A9r 3  20 rr rr                     jsr xt_editor_line
0027ACr 3               
0027ACr 3                               ; Put 64 (# of chars/line) on the stack.
0027ACr 3  CA                           dex
0027ADr 3  CA                           dex
0027AEr 3  A9 40                        lda #64
0027B0r 3  95 00                        sta 0,x
0027B2r 3  74 01                        stz 1,x
0027B4r 3               
0027B4r 3                               ; Fill with spaces.
0027B4r 3  20 rr rr                     jsr xt_blank
0027B7r 3               
0027B7r 3                               ; Mark buffer as updated.
0027B7r 3  20 rr rr                     jsr xt_update
0027BAr 3               
0027BAr 3  60           z_editor_el:    rts
0027BBr 3               
0027BBr 3               
0027BBr 3               ; ## EDITOR_L ( -- ) "List the current screen"
0027BBr 3               ; ## "l"  tested  Tali Editor
0027BBr 3               
0027BBr 3               xt_editor_l:
0027BBr 3                               ; Load the current screen
0027BBr 3  CA                           dex             ; Put SCR on the stack.
0027BCr 3  CA                           dex
0027BDr 3  A0 02                        ldy #scr_offset
0027BFr 3  B1 rr                        lda (up),y
0027C1r 3  95 00                        sta 0,x
0027C3r 3  C8                           iny
0027C4r 3  B1 rr                        lda (up),y
0027C6r 3  95 01                        sta 1,x
0027C8r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
0027CBr 3               
0027CBr 3  20 rr rr                     jsr xt_cr
0027CEr 3               
0027CEr 3                               ; Print the screen number.
0027CEr 3                               ; We're using sliteral, so we need to set up the
0027CEr 3                               ; appropriate data structure (see sliteral)
0027CEr 3  80 08                        bra @after_screen_msg
0027D0r 3               
0027D0r 3               @screen_msg:
0027D0r 3  53 63 72 65                  .byte "Screen #"
0027D4r 3  65 6E 20 23  
0027D8r 3               
0027D8r 3               @after_screen_msg:
0027D8r 3  20 rr rr                     jsr sliteral_runtime
0027DBr 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
0027DFr 3               
0027DFr 3  20 rr rr                     jsr xt_type
0027E2r 3               
0027E2r 3                               ; Put the screen number and printed size for u.r on the stack.
0027E2r 3  20 rr rr                     jsr xt_scr
0027E5r 3  20 rr rr                     jsr xt_fetch
0027E8r 3  CA                           dex
0027E9r 3  CA                           dex
0027EAr 3  A9 04                        lda #4          ; four spaces
0027ECr 3  95 00                        sta 0,x
0027EEr 3  74 01                        stz 1,x
0027F0r 3  20 rr rr                     jsr xt_u_dot_r
0027F3r 3               
0027F3r 3                               ; The address of the buffer is currently on the stack.
0027F3r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
0027F3r 3                               ; keep track of the line number in tmp3.
0027F3r 3  64 rr                        stz tmp3
0027F5r 3               
0027F5r 3               @line_loop:
0027F5r 3  20 rr rr                     jsr xt_cr
0027F8r 3               
0027F8r 3                               ; Print the line number (2-space fixed width)
0027F8r 3  CA                           dex
0027F9r 3  CA                           dex
0027FAr 3  CA                           dex
0027FBr 3  CA                           dex
0027FCr 3  74 03                        stz 3,x
0027FEr 3  A5 rr                        lda tmp3
002800r 3  95 02                        sta 2,x
002802r 3  74 01                        stz 1,x
002804r 3  A9 02                        lda #2
002806r 3  95 00                        sta 0,x
002808r 3  20 rr rr                     jsr xt_u_dot_r
00280Br 3  20 rr rr                     jsr xt_space
00280Er 3               
00280Er 3                               ; Print one line using the address on the stack.
00280Er 3  20 rr rr                     jsr xt_dup
002811r 3  CA                           dex
002812r 3  CA                           dex
002813r 3  A9 40                        lda #64
002815r 3  95 00                        sta 0,x
002817r 3  74 01                        stz 1,x
002819r 3  20 rr rr                     jsr xt_type
00281Cr 3               
00281Cr 3                               ; Add 64 to the address on the stack to move to the next line.
00281Cr 3  18                           clc
00281Dr 3  A9 40                        lda #64
00281Fr 3  75 00                        adc 0,x
002821r 3  95 00                        sta 0,x
002823r 3  B5 01                        lda 1,x
002825r 3  69 00                        adc #0      ; Add carry
002827r 3  95 01                        sta 1,x
002829r 3               
002829r 3                               ; Increment the line number (held in tmp3)
002829r 3  E6 rr                        inc tmp3
00282Br 3               
00282Br 3                               ; See if we are done.
00282Br 3  A5 rr                        lda tmp3
00282Dr 3  C9 10                        cmp #16
00282Fr 3  D0 C4                        bne @line_loop
002831r 3               
002831r 3  20 rr rr                     jsr xt_cr
002834r 3                               ; Drop the address on the stack.
002834r 3  E8                           inx
002835r 3  E8                           inx
002836r 3               
002836r 3  60           z_editor_l:            rts
002837r 3               
002837r 3               
002837r 3               
002837r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002837r 3               ; ## "line"  tested  Tali Editor
002837r 3               
002837r 3               xt_editor_line:
002837r 3  20 rr rr                     jsr underflow_1
00283Ar 3               
00283Ar 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
00283Ar 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
00283Cr 3               @shift_tos_left:
00283Cr 3  16 00                        asl 0,x         ; Shift TOS to the left
00283Er 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002840r 3  88                           dey
002841r 3  D0 F9                        bne @shift_tos_left
002843r 3                               ; Load the current screen into a buffer
002843r 3                               ; and get the buffer address
002843r 3  20 rr rr                     jsr xt_scr
002846r 3  20 rr rr                     jsr xt_fetch
002849r 3  20 rr rr                     jsr xt_block
00284Cr 3               
00284Cr 3                               ; Add the offset to the buffer base address.
00284Cr 3  20 rr rr                     jsr xt_plus
00284Fr 3               
00284Fr 3  60           z_editor_line:  rts
002850r 3               
002850r 3               
002850r 3               
002850r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002850r 3               ; ## "o"  tested  Tali Editor
002850r 3               xt_editor_o:
002850r 3                               ; Print prompt
002850r 3  20 rr rr                     jsr xt_cr
002853r 3  20 rr rr                     jsr xt_dup
002856r 3  20 rr rr                     jsr xt_two
002859r 3  20 rr rr                     jsr xt_u_dot_r
00285Cr 3  20 rr rr                     jsr xt_space
00285Fr 3  A9 2A                        lda #42         ; ASCII for *
002861r 3  20 rr rr                     jsr emit_a
002864r 3  20 rr rr                     jsr xt_space
002867r 3               
002867r 3                               ; Accept new input (directly into the buffer)
002867r 3  20 rr rr                     jsr xt_editor_line
00286Ar 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
00286Dr 3  CA                           dex
00286Er 3  CA                           dex
00286Fr 3  A9 40                        lda #64         ; chars/line
002871r 3  95 00                        sta 0,x
002873r 3  74 01                        stz 1,x
002875r 3  20 rr rr                     jsr xt_accept
002878r 3               
002878r 3                               ; Fill the rest with spaces.
002878r 3                               ; Stack is currently ( line_address numchars_from_accept )
002878r 3  20 rr rr                     jsr xt_dup
00287Br 3  20 rr rr                     jsr xt_not_rote ; -rot
00287Er 3  20 rr rr                     jsr xt_plus
002881r 3  CA                           dex
002882r 3  CA                           dex
002883r 3  A9 40                        lda #64         ; chars/line
002885r 3  95 00                        sta 0,x
002887r 3  74 01                        stz 1,x
002889r 3  20 rr rr                     jsr xt_rot
00288Cr 3  20 rr rr                     jsr xt_minus
00288Fr 3  20 rr rr                     jsr xt_blank
002892r 3               
002892r 3                               ; Mark buffer as updated.
002892r 3  20 rr rr                     jsr xt_update
002895r 3               
002895r 3  60           z_editor_o:     rts
002896r 3               
002896r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002896r 3               ; ## "lcdput" coded Custom
002896r 3               xt_lcdput:
002896r 3  20 rr rr                     jsr underflow_1
002899r 3               
002899r 3  B5 00                        lda 0,x
00289Br 3                       .ifdef lcd_print
00289Br 3                               jsr lcd_print
00289Br 3                       .endif
00289Br 3  E8                           inx
00289Cr 3  E8                           inx
00289Dr 3  60           z_lcdput: rts
00289Er 3               
00289Er 3               
00289Er 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
00289Er 3               ; ## "lcdprint"  coded Custom
00289Er 3               
00289Er 3               xt_lcdprint:
00289Er 3  20 rr rr                     jsr underflow_2
0028A1r 3               
0028A1r 3                               ; Save the starting address into tmp1
0028A1r 3  B5 02                        lda 2,x
0028A3r 3  85 rr                        sta tmp1
0028A5r 3  B5 03                        lda 3,x
0028A7r 3  85 rr                        sta tmp1+1
0028A9r 3               @loop:
0028A9r 3                               ; done if length is zero
0028A9r 3  B5 00                        lda 0,x
0028ABr 3  15 01                        ora 1,x
0028ADr 3  F0 12                        beq @done
0028AFr 3               
0028AFr 3                               ; Send the current character
0028AFr 3  B2 rr                        lda (tmp1)
0028B1r 3                       .ifdef lcd_print
0028B1r 3                               jsr lcd_print      ; avoids stack foolery
0028B1r 3                       .endif
0028B1r 3                               ; Move the address along (in tmp1)
0028B1r 3  E6 rr                        inc tmp1
0028B3r 3  D0 02                        bne @1
0028B5r 3  E6 rr                        inc tmp1+1
0028B7r 3               @1:
0028B7r 3                               ; Reduce the count (on the data stack)
0028B7r 3  B5 00                        lda 0,x
0028B9r 3  D0 02                        bne @2
0028BBr 3  D6 01                        dec 1,x
0028BDr 3               @2:
0028BDr 3  D6 00                        dec 0,x
0028BFr 3               
0028BFr 3  80 E8                        bra @loop
0028C1r 3               @done:
0028C1r 3  E8                           inx
0028C2r 3  E8                           inx
0028C3r 3  E8                           inx
0028C4r 3  E8                           inx
0028C5r 3               
0028C5r 3  60           z_lcdprint:         rts
0028C6r 3               
0028C6r 3               
0028C6r 3               
0028C6r 3               ; ## CLS ( -- ) "clea VGA screen"
0028C6r 3               ; ## "cls" coded Custom
0028C6r 3               xt_cls:
0028C6r 3                       .ifdef vga_clear
0028C6r 3                               jsr vga_clear
0028C6r 3                       .endif
0028C6r 3               
0028C6r 3  60           z_cls: rts
0028C7r 3               
0028C7r 3               
0028C7r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
0028C7r 3               ; ## "spi_init" coded Custom
0028C7r 3               xt_spi_init:
0028C7r 3               .ifdef VIA1_BASE
0028C7r 3                               jsr spi_init
0028C7r 3               .endif
0028C7r 3  60           z_spi_init: rts
0028C8r 3               
0028C8r 3               
0028C8r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
0028C8r 3               ; ## "spi_clk_toggle" coded Custom
0028C8r 3               xt_spi_clk_toggle:
0028C8r 3               .ifdef VIA1_BASE
0028C8r 3                               jsr spi_clk_toggle
0028C8r 3               .endif
0028C8r 3  60           z_spi_clk_toggle: rts
0028C9r 3               
0028C9r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
0028C9r 3               ; ## "spi_select" coded Custom
0028C9r 3               xt_spi_select:
0028C9r 3               .ifdef VIA1_BASE
0028C9r 3                               jsr underflow_1
0028C9r 3               
0028C9r 3                               lda 0,x
0028C9r 3               
0028C9r 3                               jsr spi_select
0028C9r 3               
0028C9r 3                               inx
0028C9r 3                               inx
0028C9r 3               .endif
0028C9r 3  60           z_spi_select: rts
0028CAr 3               
0028CAr 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
0028CAr 3               ; ## "spi_transceive" coded Custom
0028CAr 3               xt_spi_transceive:
0028CAr 3               .ifdef VIA1_BASE
0028CAr 3                               jsr underflow_1
0028CAr 3               
0028CAr 3                               lda 0,x
0028CAr 3               
0028CAr 3                               jsr spi_transceive
0028CAr 3               
0028CAr 3                               sta 0,x         ; put return value in TOS
0028CAr 3                               stz 1,X         ;reset value there
0028CAr 3               .endif
0028CAr 3  60           z_spi_transceive: rts
0028CBr 3               
0028CBr 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
0028CBr 3               ; ## "sd_init" coded Custom
0028CBr 3               xt_sd_init:
0028CBr 3               .ifdef SD
0028CBr 3                               jsr underflow_1
0028CBr 3               
0028CBr 3                               lda 0,x
0028CBr 3                               jsr sd_init
0028CBr 3                               beq @ok
0028CBr 3                               pha
0028CBr 3                               printascii sd_init_error_message
0028CBr 3                               pla
0028CBr 3               @ok:
0028CBr 3                               sta 0,x         ; put return value in TOS
0028CBr 3                               stz 1,X         ;reset value there
0028CBr 3               .endif
0028CBr 3  60           z_sd_init: rts
0028CCr 3               
0028CCr 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
0028CCr 3               ; ## "sd_readsector" coded Custom
0028CCr 3               xt_sd_readsector:
0028CCr 3               
0028CCr 3               .ifdef SD
0028CCr 3                               jsr underflow_2
0028CCr 3                               ; get and save sector number (32 bit number, double)
0028CCr 3                               ; most significant part is TOS
0028CCr 3                               lda 0, x
0028CCr 3                               sta FAT_LBA + 2
0028CCr 3                               lda 1, x
0028CCr 3                               sta FAT_LBA + 3
0028CCr 3                               ; least significant part is NOS
0028CCr 3                               lda 2, x
0028CCr 3                               sta FAT_LBA + 0
0028CCr 3                               lda 3, x
0028CCr 3                               sta FAT_LBA + 1
0028CCr 3                               lda #1
0028CCr 3                               sta SD_CRC
0028CCr 3               
0028CCr 3                               jsr sd_readsector
0028CCr 3                               sta 0,x         ; put return value in TOS
0028CCr 3                               stz 1,X         ;reset value there
0028CCr 3               
0028CCr 3                               inx
0028CCr 3                               inx
0028CCr 3               .endif
0028CCr 3  60           z_sd_readsector: rts
0028CDr 3               
0028CDr 3               
0028CDr 3               ; ## time ( -- addr ) "get time storage address"
0028CDr 3               ; ## "time" coded Custom
0028CDr 3               xt_time:
0028CDr 3                       .ifdef time
0028CDr 3                       lda #time
0028CDr 3                       .else
0028CDr 3  A9 00                lda #0
0028CFr 3                       .endif
0028CFr 3  CA                   dex
0028D0r 3  CA                   dex
0028D1r 3  95 00                sta 0,x
0028D3r 3  74 01                stz 1,x
0028D5r 3               
0028D5r 3               
0028D5r 3  60           z_time: rts
0028D6r 3               
0028D6r 3               xt_cf_init:
0028D6r 3               .ifdef CF_ADDRESS
0028D6r 3                       ; jsr underflow_1
0028D6r 3                       ; save CF card address
0028D6r 3                       ; lda 0, x
0028D6r 3                       ; sta CF_ADDRESS
0028D6r 3                       ; lda 1, x
0028D6r 3                       ; sta CF_ADDRESS + 1
0028D6r 3                       jsr cf_init
0028D6r 3                       ; inx
0028D6r 3                       ; inx
0028D6r 3               .endif
0028D6r 3               z_cf_init:
0028D6r 3  60                   rts
0028D7r 3               
0028D7r 3               ; ## fat_init ( addr -- ) "Initialize FAT16 on CF or SD card at specified address"
0028D7r 3               ; ## "fat_init" coded Custom
0028D7r 3               xt_fat_init:
0028D7r 3               .ifdef CF_ADDRESS
0028D7r 3                       ; initialize CF card
0028D7r 3                       jsr cf_init
0028D7r 3               .endif
0028D7r 3               .ifdef SD
0028D7r 3                       lda #7
0028D7r 3                       jsr sd_init
0028D7r 3               .endif
0028D7r 3               .ifdef DISK_BUFFER
0028D7r 3                       jsr fat_init
0028D7r 3               
0028D7r 3                       printstr DISK_BUFFER + 43, 11
0028D7r 3                       ; printascii cf_fat_mounted_message
0028D7r 3                       ; jsr xt_cr
0028D7r 3               fat_init_exit:
0028D7r 3                       dex
0028D7r 3                       dex
0028D7r 3                       lda #<DISK_BUFFER
0028D7r 3                       sta 0, x
0028D7r 3                       lda #>DISK_BUFFER
0028D7r 3                       sta 1, x
0028D7r 3               .endif
0028D7r 3               z_fat_init:
0028D7r 3  60                   rts
0028D8r 3               
0028D8r 3               
0028D8r 3               ls_header:
0028D8r 3  4E 41 4D 45          .asciiz "NAME     EXT  TYPE  SIZE"
0028DCr 3  20 20 20 20  
0028E0r 3  20 45 58 54  
0028F1r 3               xt_cf_ls:
0028F1r 3               .ifdef fat_convert_filename
0028F1r 3                       ; read the current directory entry
0028F1r 3                       ; and save the contents to be displayed later
0028F1r 3               
0028F1r 3                       ; check if fat is inited
0028F1r 3                       lda FAT_SEC_PER_CLUS
0028F1r 3                       bne @fatok
0028F1r 3                       jsr xt_fat_init
0028F1r 3                       inx     ; drop fat_init return value
0028F1r 3                       inx
0028F1r 3                       jsr xt_cr
0028F1r 3               
0028F1r 3               @fatok:
0028F1r 3                       cp16 FAT_CURRENT_DIR_SEC, FAT_LBA
0028F1r 3                       cp16 FAT_CURRENT_DIR_SEC + 2, FAT_LBA + 2
0028F1r 3               
0028F1r 3                       jsr io_read_sector
0028F1r 3               
0028F1r 3                       ; current directory first sector is now in buffer
0028F1r 3                       ; display file names
0028F1r 3                       jsr xt_cr
0028F1r 3                       printascii ls_header
0028F1r 3                       jsr xt_cr
0028F1r 3               
0028F1r 3                       lda #<DISK_BUFFER
0028F1r 3                       sta FAT_PTR2
0028F1r 3                       lda #>DISK_BUFFER
0028F1r 3                       sta FAT_PTR2 + 1
0028F1r 3               
0028F1r 3                       phy
0028F1r 3               @outerloop:
0028F1r 3                       ldy #11
0028F1r 3                       lda (FAT_PTR2), y
0028F1r 3                       cmp #$0F                ; ignore long filenames
0028F1r 3                       beq @next_entry
0028F1r 3                       ldy #0
0028F1r 3                       lda (FAT_PTR2), Y
0028F1r 3                       beq @exit               ; if zero, it means we reached the end of the list
0028F1r 3                       cmp #$E5                ; if $E5, it means the entry is deleted, so go to next entry
0028F1r 3                       beq @next_entry
0028F1r 3               @loop:
0028F1r 3                       lda (FAT_PTR2), y
0028F1r 3                       jsr emit_a
0028F1r 3                       iny
0028F1r 3                       cpy #8
0028F1r 3                       bne @check_end          ; print space after name and before extension
0028F1r 3                       lda #' '
0028F1r 3                       jsr emit_a
0028F1r 3               @check_end:
0028F1r 3                       cpy #11
0028F1r 3                       bcc @loop
0028F1r 3                       ; read entry type
0028F1r 3                       lda (FAT_PTR2), y
0028F1r 3                       jsr print_entry_type
0028F1r 3               
0028F1r 3                       jsr print_entry_size
0028F1r 3                       lda #$0D
0028F1r 3                       jsr emit_a
0028F1r 3               @next_entry:
0028F1r 3                       add16 FAT_PTR2, fat_entry_size, FAT_PTR2
0028F1r 3                       bra @outerloop
0028F1r 3               @exit:
0028F1r 3                       ply
0028F1r 3               .endif
0028F1r 3               
0028F1r 3                       ; dex
0028F1r 3                       ; dex
0028F1r 3                       ; lda #<DISK_BUFFER
0028F1r 3                       ; sta 0, x
0028F1r 3                       ; lda #>DISK_BUFFER
0028F1r 3                       ; sta 1, x
0028F1r 3               
0028F1r 3               z_cf_ls:
0028F1r 3  60                   rts
0028F2r 3               .ifdef fat_convert_filename
0028F2r 3               print_entry_size:
0028F2r 3                       phy
0028F2r 3               
0028F2r 3                       dex
0028F2r 3                       dex
0028F2r 3                       dex
0028F2r 3                       dex
0028F2r 3               
0028F2r 3                       ldy #28
0028F2r 3                       lda (FAT_PTR2), y
0028F2r 3                       sta 2,x
0028F2r 3                       ldy #29
0028F2r 3                       lda (FAT_PTR2), y
0028F2r 3                       sta 3,x
0028F2r 3               
0028F2r 3                       ldy #30
0028F2r 3                       lda (FAT_PTR2), y
0028F2r 3                       sta 0,x
0028F2r 3               
0028F2r 3                       ldy #31
0028F2r 3                       lda (FAT_PTR2), y
0028F2r 3                       sta 1,x
0028F2r 3                       jsr xt_ud_dot
0028F2r 3                       ply
0028F2r 3                       rts
0028F2r 3               
0028F2r 3               print_entry_type:
0028F2r 3                       and #$10
0028F2r 3                       bne @is_dir
0028F2r 3                       bra @is_file
0028F2r 3               @is_dir:
0028F2r 3                       printascii entry_type_dir
0028F2r 3                       bra @exit
0028F2r 3               @is_file:
0028F2r 3                       printascii entry_type_file
0028F2r 3               @exit:
0028F2r 3                       rts
0028F2r 3               
0028F2r 3               entry_type_dir: .asciiz "   D    "
0028F2r 3               entry_type_file: .asciiz "   F    "
0028F2r 3               .endif
0028F2r 3               xt_cf_info:
0028F2r 3               .ifdef CF_ADDRESS
0028F2r 3                       jsr cf_init
0028F2r 3                       jsr cf_wait
0028F2r 3                       lda #$EC
0028F2r 3                       sta CF_ADDRESS + 7
0028F2r 3                       dex
0028F2r 3                       dex
0028F2r 3                       lda #<DISK_BUFFER
0028F2r 3                       sta 0, x
0028F2r 3                       lda #>DISK_BUFFER
0028F2r 3                       sta 1, x
0028F2r 3                       jsr cf_read
0028F2r 3               
0028F2r 3               .endif
0028F2r 3               z_cf_info:
0028F2r 3  60                   rts
0028F3r 3               
0028F3r 3               xt_cf_cd:
0028F3r 3               .ifdef fat_convert_filename
0028F3r 3                       phy
0028F3r 3                       ; check if fat is inited
0028F3r 3               	lda FAT_SEC_PER_CLUS
0028F3r 3               	bne @fatok
0028F3r 3               	jsr xt_fat_init
0028F3r 3               	inx     ; drop fat_init return value
0028F3r 3               	inx
0028F3r 3               @fatok:
0028F3r 3                       lda 0, x
0028F3r 3                       sta FAT_PTR1
0028F3r 3                       lda 1, x
0028F3r 3                       sta FAT_PTR1 + 1
0028F3r 3                       lda 2, x
0028F3r 3                       sta FAT_PTR2
0028F3r 3                       lda 3, x
0028F3r 3                       sta FAT_PTR2+1
0028F3r 3               
0028F3r 3                       jsr fat_convert_filename
0028F3r 3               
0028F3r 3                       jsr fat_find_file               ; after this, the pointer to the entry in DISK_BUFFER is in FAT_PTR1
0028F3r 3                       bcs @found
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       jsr xt_cr
0028F3r 3                       printstr FAT_FILE_NAME_TMP, 11
0028F3r 3                       printascii not_found_error        ; directory not found, abort
0028F3r 3                       jsr xt_cr
0028F3r 3                       ply
0028F3r 3                       jsr xt_abort
0028F3r 3               @found:
0028F3r 3                       ; check if entry is a directory
0028F3r 3                       ldy #11
0028F3r 3                       lda (FAT_PTR1), y
0028F3r 3                       and #$10
0028F3r 3                       bne @is_dir
0028F3r 3                       jsr xt_cr
0028F3r 3                       printascii not_dir_error        ; Not a directory, abort
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       ply
0028F3r 3                       jsr xt_cr
0028F3r 3                       jsr xt_abort
0028F3r 3               @is_dir:
0028F3r 3                       ; load cluster number from dir entry
0028F3r 3                       ldy #26
0028F3r 3                       lda (FAT_PTR1), y
0028F3r 3                       sta FAT_CURRENT_CLUSTER
0028F3r 3                       iny
0028F3r 3                       lda (FAT_PTR1), y
0028F3r 3                       sta FAT_CURRENT_CLUSTER + 1
0028F3r 3                       ; convert cluster number to sector
0028F3r 3                       jsr fat_get_sector_for_cluster
0028F3r 3                       ; save sector number to CF_CURRENT_DIR_SEC
0028F3r 3               
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       inx
0028F3r 3                       ply
0028F3r 3               .endif
0028F3r 3               z_cf_cd:
0028F3r 3               
0028F3r 3  60                   rts
0028F4r 3               .ifdef fat_convert_filename
0028F4r 3               not_dir_error: .asciiz "Not a directory"
0028F4r 3               not_found_error: .asciiz " not found"
0028F4r 3               .endif
0028F4r 3               
0028F4r 3               
0028F4r 3               xt_cf_cat:
0028F4r 3               .ifdef fat_convert_filename
0028F4r 3                       phy
0028F4r 3                       ; check if fat is inited
0028F4r 3               	lda FAT_SEC_PER_CLUS
0028F4r 3               	bne @fatok
0028F4r 3               	jsr xt_fat_init
0028F4r 3               	inx     ; drop fat_init return value
0028F4r 3               	inx
0028F4r 3               @fatok:
0028F4r 3                       lda 0, x
0028F4r 3                       sta FAT_PTR1
0028F4r 3                       lda 1, x
0028F4r 3                       sta FAT_PTR1 + 1
0028F4r 3                       lda 2, x
0028F4r 3                       sta FAT_PTR2
0028F4r 3                       lda 3, x
0028F4r 3                       sta FAT_PTR2+1
0028F4r 3               
0028F4r 3                       jsr fat_convert_filename
0028F4r 3               
0028F4r 3                       jsr fat_find_file               ; after this, the pointer to the entry in DISK_BUFFER is in FAT_PTR1
0028F4r 3                       bcs @found
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       jsr xt_cr
0028F4r 3                       printstr FAT_FILE_NAME_TMP, 11
0028F4r 3                       printascii not_found_error        ; Not a directory, abort
0028F4r 3                       jsr xt_cr
0028F4r 3                       jsr xt_abort
0028F4r 3               @found:
0028F4r 3                       ; check if entry is a directory
0028F4r 3                       ldy #11
0028F4r 3                       lda (FAT_PTR1), y
0028F4r 3                       and #$10
0028F4r 3                       beq @is_file
0028F4r 3                       jsr xt_cr
0028F4r 3                       printascii not_file_error        ; Not a directory, abort
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       jsr xt_cr
0028F4r 3                       jsr xt_abort
0028F4r 3               @is_file:
0028F4r 3                       ; load cluster number from dir entry
0028F4r 3                       ldy #26
0028F4r 3                       lda (FAT_PTR1), y
0028F4r 3                       sta FAT_CURRENT_CLUSTER
0028F4r 3                       iny
0028F4r 3                       lda (FAT_PTR1), y
0028F4r 3                       sta FAT_CURRENT_CLUSTER + 1
0028F4r 3                       iny
0028F4r 3                       lda (FAT_PTR1), y
0028F4r 3                       sta FAT_CURRENT_FILE_SIZE
0028F4r 3                       iny
0028F4r 3                       lda (FAT_PTR1), y
0028F4r 3                       sta FAT_CURRENT_FILE_SIZE + 1
0028F4r 3                       iny
0028F4r 3                       lda (FAT_PTR1), y
0028F4r 3                       sta FAT_CURRENT_FILE_SIZE + 2
0028F4r 3                       iny
0028F4r 3                       lda (FAT_PTR1), y
0028F4r 3                       sta FAT_CURRENT_FILE_SIZE + 3
0028F4r 3                       ; convert cluster number to sector
0028F4r 3                       cp16 FAT_CURRENT_DIR_SEC, FAT_TMP
0028F4r 3                       cp16 FAT_CURRENT_DIR_SEC + 2, FAT_TMP + 2
0028F4r 3                       jsr fat_get_sector_for_cluster
0028F4r 3                       ; save sector number to CF_LBA
0028F4r 3                       cp16 FAT_CURRENT_DIR_SEC, FAT_LBA
0028F4r 3                       cp16 FAT_CURRENT_DIR_SEC + 2, FAT_LBA + 2
0028F4r 3                       cp16 FAT_TMP, FAT_CURRENT_DIR_SEC
0028F4r 3                       cp16 FAT_TMP + 2, FAT_CURRENT_DIR_SEC + 2
0028F4r 3               
0028F4r 3                       ; file sector number is in CF_CURRENT_FILE_SEC
0028F4r 3               @read_next_file_sector:
0028F4r 3                       jsr io_read_sector
0028F4r 3                       jsr xt_cr
0028F4r 3                       jsr output_sector
0028F4r 3               
0028F4r 3                       ; jsr reduce_filesize_by_one_sector
0028F4r 3               
0028F4r 3                       ; ; check if filesize is zero
0028F4r 3                       ; lda CF_CURRENT_FILE_SIZE + 3
0028F4r 3                       ; bne @read_next_file_sector
0028F4r 3                       ; lda CF_CURRENT_FILE_SIZE + 2
0028F4r 3                       ; bne @read_next_file_sector
0028F4r 3                       ; lda CF_CURRENT_FILE_SIZE + 1
0028F4r 3                       ; bne @read_next_file_sector
0028F4r 3               
0028F4r 3                       ; lda CF_CURRENT_FILE_SIZE
0028F4r 3                       ; bne @read_next_file_sector
0028F4r 3               
0028F4r 3               
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       inx
0028F4r 3                       ; lda #<CF_CURRENT_FILE_SIZE
0028F4r 3                       ; sta 0, x
0028F4r 3                       ; lda #>CF_CURRENT_FILE_SIZE
0028F4r 3                       ; sta 1, x
0028F4r 3               
0028F4r 3                       ply
0028F4r 3               .endif
0028F4r 3               z_cf_cat:
0028F4r 3  60                   rts
0028F5r 3               
0028F5r 3               .ifdef fat_convert_filename
0028F5r 3               not_file_error: .asciiz "Not a file"
0028F5r 3               .endif
0028F5r 3               
0028F5r 3               ; ## cf_readsector ( double -- addr ) "Set LBA block and read to buffer"
0028F5r 3               ; ## "cf_readsector" coded Custom
0028F5r 3               xt_cf_readsector:
0028F5r 3               .ifdef CF_ADDRESS
0028F5r 3                       jsr underflow_2
0028F5r 3                       ; most significant part is TOS
0028F5r 3                       lda 0, x
0028F5r 3                       sta FAT_LBA + 2
0028F5r 3                       lda 1, x
0028F5r 3                       sta FAT_LBA + 3
0028F5r 3                       ; least significant part is NOS
0028F5r 3                       lda 2, x
0028F5r 3                       sta FAT_LBA + 0
0028F5r 3                       lda 3, x
0028F5r 3                       sta FAT_LBA + 1
0028F5r 3                       ; LBA is set, now read sector
0028F5r 3                       jsr cf_init
0028F5r 3               
0028F5r 3                       jsr cf_read_sector
0028F5r 3               
0028F5r 3                       ; return buffer address
0028F5r 3                       inx
0028F5r 3                       inx
0028F5r 3                       lda #<DISK_BUFFER
0028F5r 3                       sta 0, x
0028F5r 3               
0028F5r 3                       lda #>DISK_BUFFER
0028F5r 3               
0028F5r 3                       sta 1, x
0028F5r 3               .endif
0028F5r 3               z_cf_readsector:
0028F5r 3  60                   rts
0028F6r 3               
0028F6r 3               xt_cf_rsptr:
0028F6r 3               .ifdef CF_ADDRESS
0028F6r 3                       dex
0028F6r 3                       dex
0028F6r 3                       lda #<cf_read_sector
0028F6r 3                       sta 0, x
0028F6r 3                       lda #>cf_read_sector
0028F6r 3                       sta 1, x
0028F6r 3                       .endif
0028F6r 3               z_cf_rsptr:
0028F6r 3  60                   rts
0028F7r 3               
0028F7r 3               xt_sd_rsptr:
0028F7r 3               .ifdef SD
0028F7r 3                       dex
0028F7r 3                       dex
0028F7r 3                       lda #<sd_readsector
0028F7r 3                       sta 0, x
0028F7r 3                       lda #>sd_readsector
0028F7r 3                       sta 1, x
0028F7r 3               .endif
0028F7r 3               z_sd_rsptr:
0028F7r 3  60                   rts
0028F8r 3               
0028F8r 3               xt_io_readsector:
0028F8r 3               .ifdef DISK_BUFFER
0028F8r 3                       dex
0028F8r 3                       dex
0028F8r 3                       lda #<io_read_sector_ptr
0028F8r 3                       sta 0, x
0028F8r 3                       lda #>io_read_sector_ptr
0028F8r 3                       sta 1, x
0028F8r 3               .endif
0028F8r 3               z_io_readsector:
0028F8r 3  60                   rts
0028F9r 3               
0028F9r 3               ; END
0028F9r 3               
0028F9r 3               
0028F9r 2                   .include "headers.s"          ; Headers of native words
0028F9r 3               ; Dictionary Headers for Tali Forth 2
0028F9r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0028F9r 3               ; First version: 05. Dec 2016 (Liara Forth)
0028F9r 3               ; This version: 29. Dec 2018
0028F9r 3               
0028F9r 3               ; Dictionary headers are kept separately from the code, which allows various
0028F9r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
0028F9r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
0028F9r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
0028F9r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
0028F9r 3               ; is always one cell down from the current word's own nt. In the code itself,
0028F9r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
0028F9r 3               
0028F9r 3               ; This gives us the following header structure:
0028F9r 3               
0028F9r 3               ;              8 bit     8 bit
0028F9r 3               ;               LSB       MSB
0028F9r 3               ; nt_word ->  +--------+--------+
0028F9r 3               ;          +0 | Length | Status |
0028F9r 3               ;             +--------+--------+
0028F9r 3               ;          +2 | Next Header     | -> nt_next_word
0028F9r 3               ;             +-----------------+
0028F9r 3               ;          +4 | Start of Code   | -> xt_word
0028F9r 3               ;             +-----------------+
0028F9r 3               ;          +6 | End of Code     | -> z_word
0028F9r 3               ;             +--------+--------+
0028F9r 3               ;          +8 | Name   |        |
0028F9r 3               ;             +--------+--------+
0028F9r 3               ;             |        |        |
0028F9r 3               ;             +--------+--------+
0028F9r 3               ;             |        |  ...   | (name string does not end with a zero)
0028F9r 3               ;          +n +--------+--------+
0028F9r 3               
0028F9r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
0028F9r 3               ; which are:
0028F9r 3               
0028F9r 3               ;       CO - Compile Only
0028F9r 3               ;       IM - Immediate Word
0028F9r 3               ;       NN - Never Native Compile (must always be called by JSR)
0028F9r 3               ;       AN - Always Native Compile (may not be called by JSR)
0028F9r 3               ;       UF - Contains underflow check
0028F9r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
0028F9r 3               
0028F9r 3               ; Note there are currently two bits unused.
0028F9r 3               
0028F9r 3               ; By default, all existing words can be natively compiled (compiled inline) or
0028F9r 3               ; as a subroutine jump target; the system decides which variant to use based on
0028F9r 3               ; a threshold the user can set. By default, all user-created words are flagged
0028F9r 3               ; never-native. The user can override this by using the always-native word
0028F9r 3               ; just after defining their new word.  The NN flag forbids native compiling,
0028F9r 3               ; the AN flag forces it.
0028F9r 3               
0028F9r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
0028F9r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
0028F9r 3               ; more common ones first (further down in code) so they are found earlier.
0028F9r 3               ; Anything to do with output comes later (further up) because things will
0028F9r 3               ; always be slow if there is a human involved.
0028F9r 3               
0028F9r 3               ; The initial skeleton of this list was automatically generated by a script
0028F9r 3               ; in the tools folder and then sorted by hand.
0028F9r 3               
0028F9r 3               nt_bye:
0028F9r 3  03                   .byte 3         ; length of word strings
0028FAr 3  00                   .byte 0         ; status byte
0028FBr 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
0028FDr 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
0028FFr 3  rr rr                .word z_bye     ; end of code (RTS)
002901r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002904r 3               
002904r 3               
002904r 3               nt_cold:
002904r 3  04 00                .byte 4, 0
002906r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
00290Ar 3  rr rr        
00290Cr 3  63 6F 6C 64          .byte "cold"
002910r 3               
002910r 3               nt_lcdput:
002910r 3  06 10                .byte 6, UF
002912r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002916r 3  rr rr        
002918r 3  6C 63 64 70          .byte "lcdput"
00291Cr 3  75 74        
00291Er 3               
00291Er 3               nt_lcdprint:
00291Er 3  08 10                .byte 8, UF
002920r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
002924r 3  rr rr        
002926r 3  6C 63 64 70          .byte "lcdprint"
00292Ar 3  72 69 6E 74  
00292Er 3               
00292Er 3               nt_cls:
00292Er 3  03 00                .byte 3, 0
002930r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002934r 3  rr rr        
002936r 3  63 6C 73             .byte "cls"
002939r 3               
002939r 3               .ifdef VIA1_BASE
002939r 3               nt_spi_init:
002939r 3                       .byte 8, 0
002939r 3                       .word nt_cls, xt_spi_init, z_spi_init
002939r 3                       .byte "spi_init"
002939r 3               
002939r 3               
002939r 3               nt_spi_clk_toggle:
002939r 3                       .byte 14, 0
002939r 3                       .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002939r 3                       .byte "spi_clk_toggle"
002939r 3               
002939r 3               nt_spi_select:
002939r 3                       .byte 10, 0
002939r 3                       .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002939r 3                       .byte "spi_select"
002939r 3               
002939r 3               nt_spi_transceive:
002939r 3                       .byte 14, 0
002939r 3                       .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002939r 3                       .byte "spi_transceive"
002939r 3               .endif
002939r 3               .ifdef SD
002939r 3               nt_sd_init:
002939r 3                       .byte 7, 0
002939r 3                       .ifdef VIA1_BASE
002939r 3                       .word nt_spi_transceive, xt_sd_init, z_sd_init
002939r 3                       .else
002939r 3                       .word nt_cls, xt_sd_init, z_sd_init
002939r 3                       .endif
002939r 3                       .byte "sd_init"
002939r 3               nt_sd_rsptr:
002939r 3                       .byte 7, 0
002939r 3                       .word nt_sd_init, xt_sd_rsptr, z_sd_rsptr
002939r 3                       .byte "sdrsptr"
002939r 3               nt_sd_readsector:
002939r 3                       .byte 13, 0
002939r 3                       .word nt_sd_rsptr, xt_sd_readsector, z_sd_readsector
002939r 3                       .byte "sd_readsector"
002939r 3               
002939r 3               .endif
002939r 3               
002939r 3               .ifdef CF_ADDRESS
002939r 3               nt_cf_rs:
002939r 3                       .byte 2, 0
002939r 3                       .ifdef SD
002939r 3                       .word nt_sd_readsector, xt_cf_readsector, z_cf_readsector
002939r 3                       .elseif .def(VIA1_BASE)
002939r 3                       .word nt_spi_transceive, xt_cf_readsector, z_cf_readsector
002939r 3                       .else
002939r 3                       .word nt_cls, xt_cf_readsector, z_cf_readsector
002939r 3                       .endif
002939r 3                       .byte "rs"
002939r 3               
002939r 3               
002939r 3               nt_cf_info:
002939r 3                       .byte 4, 0
002939r 3                       .word nt_cf_rs, xt_cf_info, z_cf_info
002939r 3                       .byte "info"
002939r 3               nt_cf_ls:
002939r 3                       .byte 2, 0
002939r 3                       .word nt_cf_info, xt_cf_ls, z_cf_ls
002939r 3                       .byte "ls"
002939r 3               
002939r 3               nt_cf_cd:
002939r 3                       .byte 2, 0
002939r 3                       .word nt_cf_ls, xt_cf_cd, z_cf_cd
002939r 3                       .byte "cd"
002939r 3               
002939r 3               nt_cf_rsptr:
002939r 3                       .byte 7, 0
002939r 3                       .word nt_cf_cd, xt_cf_rsptr, z_cf_rsptr
002939r 3                       .byte "cfrsptr"
002939r 3               
002939r 3               nt_cf_cat:
002939r 3                       .byte 3, 0
002939r 3                       .word nt_cf_rsptr, xt_cf_cat, z_cf_cat
002939r 3                       .byte "cat"
002939r 3               .endif
002939r 3               .ifdef DISK_BUFFER
002939r 3               nt_fat_init:
002939r 3                       .byte 3, 0
002939r 3                       .ifdef CF_ADDRESS
002939r 3                       .word nt_cf_cat, xt_fat_init, z_fat_init
002939r 3                       .elseif .def(SD)
002939r 3                       .word nt_sd_readsector, xt_fat_init, z_fat_init
002939r 3                       .elseif .def(VIA1_BASE)
002939r 3                       .word nt_spi_transceive, xt_fat_init, z_fat_init
002939r 3                       .else
002939r 3                       .word nt_cls, xt_fat_init, z_fat_init
002939r 3                       .endif
002939r 3                       .byte "fat"
002939r 3               
002939r 3               nt_rsptr:
002939r 3                       .byte 5, 0
002939r 3                       .word nt_fat_init, xt_io_readsector, z_io_readsector
002939r 3                       .byte "rsptr"
002939r 3               .endif
002939r 3               nt_time:
002939r 3  04 00                .byte 4, 0
00293Br 3               .ifdef DISK_BUFFER
00293Br 3                       .word nt_rsptr, xt_time, z_time
00293Br 3               .elseif .def(CF_ADDRESS)
00293Br 3                       .word nt_cf_cat, xt_time, z_time
00293Br 3               .elseif .def(SD)
00293Br 3                       .word nt_sd_readsector, xt_time, z_time
00293Br 3               .elseif .def(VIA1_BASE)
00293Br 3                       .word nt_spi_transceive, xt_time, z_time
00293Br 3               .else
00293Br 3  rr rr rr rr          .word nt_cls, xt_time, z_time
00293Fr 3  rr rr        
002941r 3               .endif
002941r 3  74 69 6D 65          .byte "time"
002945r 3               
002945r 3               nt_ed:                  ; ed6502
002945r 3  02 08                .byte 2, NN
002947r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
00294Br 3  rr rr        
00294Dr 3  65 64                .byte "ed"
00294Fr 3               
00294Fr 3  03 08        nt_see: .byte 3, NN
002951r 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002955r 3  rr rr        
002957r 3  73 65 65             .byte "see"
00295Ar 3               
00295Ar 3               nt_forth:
00295Ar 3  05 00                .byte 5, 0
00295Cr 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002960r 3  rr rr        
002962r 3  66 6F 72 74          .byte "forth"
002966r 3  68           
002967r 3               
002967r 3               nt_order:
002967r 3  05 00                .byte 5, 0
002969r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
00296Dr 3  rr rr        
00296Fr 3  6F 72 64 65          .byte "order"
002973r 3  72           
002974r 3               
002974r 3               nt_to_order:
002974r 3  06 00                .byte 6, 0
002976r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
00297Ar 3  rr rr        
00297Cr 3  3E 6F 72 64          .byte ">order"
002980r 3  65 72        
002982r 3               
002982r 3               nt_previous:
002982r 3  08 00                .byte 8, 0
002984r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
002988r 3  rr rr        
00298Ar 3  70 72 65 76          .byte "previous"
00298Er 3  69 6F 75 73  
002992r 3               
002992r 3               nt_also:
002992r 3  04 00                .byte 4, 0
002994r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
002998r 3  rr rr        
00299Ar 3  61 6C 73 6F          .byte "also"
00299Er 3               
00299Er 3               nt_only:
00299Er 3  04 00                .byte 4, 0
0029A0r 3  rr rr rr rr          .word nt_also, xt_only, z_only
0029A4r 3  rr rr        
0029A6r 3  6F 6E 6C 79          .byte "only"
0029AAr 3               
0029AAr 3               nt_forth_wordlist:      ; shares code with ZERO
0029AAr 3  0E 00                .byte 14, 0
0029ACr 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
0029B0r 3  rr rr        
0029B2r 3  66 6F 72 74          .byte "forth-wordlist"
0029B6r 3  68 2D 77 6F  
0029BAr 3  72 64 6C 69  
0029C0r 3               
0029C0r 3               nt_editor_wordlist:     ; shares code with ONE
0029C0r 3  0F 00                .byte 15, 0
0029C2r 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
0029C6r 3  rr rr        
0029C8r 3  65 64 69 74          .byte "editor-wordlist"
0029CCr 3  6F 72 2D 77  
0029D0r 3  6F 72 64 6C  
0029D7r 3               
0029D7r 3               nt_assembler_wordlist:  ; shares code with TWO
0029D7r 3  12 00                .byte 18, 0
0029D9r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
0029DDr 3  rr rr        
0029DFr 3  61 73 73 65          .byte "assembler-wordlist"
0029E3r 3  6D 62 6C 65  
0029E7r 3  72 2D 77 6F  
0029F1r 3               
0029F1r 3               nt_root_wordlist:
0029F1r 3  0D 00                .byte 13, 0
0029F3r 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
0029F7r 3  rr rr        
0029F9r 3  72 6F 6F 74          .byte "root-wordlist"
0029FDr 3  2D 77 6F 72  
002A01r 3  64 6C 69 73  
002A06r 3               
002A06r 3               nt_get_order:
002A06r 3  09 00                .byte 9, 0
002A08r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
002A0Cr 3  rr rr        
002A0Er 3  67 65 74 2D          .byte "get-order"
002A12r 3  6F 72 64 65  
002A16r 3  72           
002A17r 3               
002A17r 3               nt_set_order:
002A17r 3  09 00                .byte 9, 0
002A19r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
002A1Dr 3  rr rr        
002A1Fr 3  73 65 74 2D          .byte "set-order"
002A23r 3  6F 72 64 65  
002A27r 3  72           
002A28r 3               
002A28r 3               nt_get_current:
002A28r 3  0B 00                .byte 11, 0
002A2Ar 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
002A2Er 3  rr rr        
002A30r 3  67 65 74 2D          .byte "get-current"
002A34r 3  63 75 72 72  
002A38r 3  65 6E 74     
002A3Br 3               
002A3Br 3               nt_set_current:
002A3Br 3  0B 10                .byte 11, UF
002A3Dr 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
002A41r 3  rr rr        
002A43r 3  73 65 74 2D          .byte "set-current"
002A47r 3  63 75 72 72  
002A4Br 3  65 6E 74     
002A4Er 3               
002A4Er 3               nt_search_wordlist:
002A4Er 3  0F 10                .byte 15, UF
002A50r 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
002A54r 3  rr rr        
002A56r 3  73 65 61 72          .byte "search-wordlist"
002A5Ar 3  63 68 2D 77  
002A5Er 3  6F 72 64 6C  
002A65r 3               
002A65r 3               nt_wordlist:
002A65r 3  08 00                .byte 8, 0
002A67r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
002A6Br 3  rr rr        
002A6Dr 3  77 6F 72 64          .byte "wordlist"
002A71r 3  6C 69 73 74  
002A75r 3               
002A75r 3               nt_definitions:
002A75r 3  0B 00                .byte 11, 0
002A77r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
002A7Br 3  rr rr        
002A7Dr 3  64 65 66 69          .byte "definitions"
002A81r 3  6E 69 74 69  
002A85r 3  6F 6E 73     
002A88r 3               
002A88r 3               nt_block_ramdrive_init:
002A88r 3  13 10                .byte 19, UF
002A8Ar 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
002A8Er 3  rr rr        
002A90r 3  62 6C 6F 63          .byte "block-ramdrive-init"
002A94r 3  6B 2D 72 61  
002A98r 3  6D 64 72 69  
002AA3r 3               
002AA3r 3               nt_list:
002AA3r 3  04 10                .byte 4, UF
002AA5r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
002AA9r 3  rr rr        
002AABr 3  6C 69 73 74          .byte "list"
002AAFr 3               
002AAFr 3               nt_thru:
002AAFr 3  04 10                .byte 4, UF
002AB1r 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
002AB5r 3  rr rr        
002AB7r 3  74 68 72 75          .byte "thru"
002ABBr 3               
002ABBr 3               nt_load:
002ABBr 3  04 10                .byte 4, UF
002ABDr 3  rr rr rr rr          .word nt_thru, xt_load, z_load
002AC1r 3  rr rr        
002AC3r 3  6C 6F 61 64          .byte "load"
002AC7r 3               
002AC7r 3               nt_flush:
002AC7r 3  05 00                .byte 5, 0
002AC9r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
002ACDr 3  rr rr        
002ACFr 3  66 6C 75 73          .byte "flush"
002AD3r 3  68           
002AD4r 3               
002AD4r 3               nt_empty_buffers:
002AD4r 3  0D 00                .byte 13, 0
002AD6r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
002ADAr 3  rr rr        
002ADCr 3  65 6D 70 74          .byte "empty-buffers"
002AE0r 3  79 2D 62 75  
002AE4r 3  66 66 65 72  
002AE9r 3               
002AE9r 3               nt_buffer:
002AE9r 3  06 00                .byte 6, 0
002AEBr 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
002AEFr 3  rr rr        
002AF1r 3  62 75 66 66          .byte "buffer"
002AF5r 3  65 72        
002AF7r 3               
002AF7r 3               nt_update:
002AF7r 3  06 00                .byte 6, 0
002AF9r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
002AFDr 3  rr rr        
002AFFr 3  75 70 64 61          .byte "update"
002B03r 3  74 65        
002B05r 3               
002B05r 3               nt_block:
002B05r 3  05 00                .byte 5, 0
002B07r 3  rr rr rr rr          .word nt_update, xt_block, z_block
002B0Br 3  rr rr        
002B0Dr 3  62 6C 6F 63          .byte "block"
002B11r 3  6B           
002B12r 3               
002B12r 3               nt_save_buffers:
002B12r 3  0C 00                .byte 12, 0
002B14r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
002B18r 3  rr rr        
002B1Ar 3  73 61 76 65          .byte "save-buffers"
002B1Er 3  2D 62 75 66  
002B22r 3  66 65 72 73  
002B26r 3               
002B26r 3               nt_block_read_vector:
002B26r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
002B28r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
002B2Cr 3  rr rr        
002B2Er 3  62 6C 6F 63          .byte "block-read-vector"
002B32r 3  6B 2D 72 65  
002B36r 3  61 64 2D 76  
002B3Fr 3               
002B3Fr 3               nt_block_read:
002B3Fr 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
002B41r 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
002B45r 3  rr rr        
002B47r 3  62 6C 6F 63          .byte "block-read"
002B4Br 3  6B 2D 72 65  
002B4Fr 3  61 64        
002B51r 3               
002B51r 3               nt_block_write_vector:
002B51r 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
002B53r 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
002B57r 3  rr rr        
002B59r 3  62 6C 6F 63          .byte "block-write-vector"
002B5Dr 3  6B 2D 77 72  
002B61r 3  69 74 65 2D  
002B6Br 3               
002B6Br 3               nt_block_write:
002B6Br 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
002B6Dr 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
002B71r 3  rr rr        
002B73r 3  62 6C 6F 63          .byte "block-write"
002B77r 3  6B 2D 77 72  
002B7Br 3  69 74 65     
002B7Er 3               
002B7Er 3               nt_blk:
002B7Er 3  03 00                .byte 3, 0
002B80r 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
002B84r 3  rr rr        
002B86r 3  62 6C 6B             .byte "blk"
002B89r 3               
002B89r 3               nt_scr:
002B89r 3  03 00                .byte 3, 0
002B8Br 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
002B8Fr 3  rr rr        
002B91r 3  73 63 72             .byte "scr"
002B94r 3               
002B94r 3               nt_blkbuffer:
002B94r 3  09 00                .byte 9, 0
002B96r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
002B9Ar 3  rr rr        
002B9Cr 3  62 6C 6B 62          .byte "blkbuffer"
002BA0r 3  75 66 66 65  
002BA4r 3  72           
002BA5r 3               
002BA5r 3               nt_buffblocknum:
002BA5r 3  0C 00                .byte 12, 0
002BA7r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
002BABr 3  rr rr        
002BADr 3  62 75 66 66          .byte "buffblocknum"
002BB1r 3  62 6C 6F 63  
002BB5r 3  6B 6E 75 6D  
002BB9r 3               
002BB9r 3               nt_buffstatus:
002BB9r 3  0A 00                .byte 10, 0
002BBBr 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
002BBFr 3  rr rr        
002BC1r 3  62 75 66 66          .byte "buffstatus"
002BC5r 3  73 74 61 74  
002BC9r 3  75 73        
002BCBr 3               
002BCBr 3               nt_buffer_colon:
002BCBr 3  07 00                .byte 7, 0
002BCDr 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
002BD1r 3  rr rr        
002BD3r 3  62 75 66 66          .byte "buffer:"
002BD7r 3  65 72 3A     
002BDAr 3               
002BDAr 3               nt_useraddr:
002BDAr 3  08 00                .byte 8, 0
002BDCr 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
002BE0r 3  rr rr        
002BE2r 3  75 73 65 72          .byte "useraddr"
002BE6r 3  61 64 64 72  
002BEAr 3               
002BEAr 3               nt_action_of:
002BEAr 3  09 04                .byte 9, IM
002BECr 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
002BF0r 3  rr rr        
002BF2r 3  61 63 74 69          .byte "action-of"
002BF6r 3  6F 6E 2D 6F  
002BFAr 3  66           
002BFBr 3               
002BFBr 3               nt_is:
002BFBr 3  02 04                .byte 2, IM
002BFDr 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
002C01r 3  rr rr        
002C03r 3  69 73                .byte "is"
002C05r 3               
002C05r 3               nt_defer_store:
002C05r 3  06 00                .byte 6, 0
002C07r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
002C0Br 3  rr rr        
002C0Dr 3  64 65 66 65          .byte "defer!"
002C11r 3  72 21        
002C13r 3               
002C13r 3               nt_defer_fetch:
002C13r 3  06 00                .byte 6, 0
002C15r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
002C19r 3  rr rr        
002C1Br 3  64 65 66 65          .byte "defer@"
002C1Fr 3  72 40        
002C21r 3               
002C21r 3               nt_endcase:
002C21r 3  07 0D                .byte 7, IM+CO+NN
002C23r 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
002C27r 3  rr rr        
002C29r 3  65 6E 64 63          .byte "endcase"
002C2Dr 3  61 73 65     
002C30r 3               
002C30r 3               nt_endof:
002C30r 3  05 0D                .byte 5, IM+CO+NN
002C32r 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
002C36r 3  rr rr        
002C38r 3  65 6E 64 6F          .byte "endof"
002C3Cr 3  66           
002C3Dr 3               
002C3Dr 3               nt_of:
002C3Dr 3  02 0D                .byte 2, IM+CO+NN
002C3Fr 3  rr rr rr rr          .word nt_endof, xt_of, z_of
002C43r 3  rr rr        
002C45r 3  6F 66                .byte "of"
002C47r 3               
002C47r 3               nt_case:
002C47r 3  04 0D                .byte 4, IM+CO+NN
002C49r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
002C4Dr 3  rr rr        
002C4Fr 3  63 61 73 65          .byte "case"
002C53r 3               
002C53r 3               nt_while:
002C53r 3  05 0D                .byte 5, IM+CO+NN
002C55r 3  rr rr rr rr          .word nt_case, xt_while, z_while
002C59r 3  rr rr        
002C5Br 3  77 68 69 6C          .byte "while"
002C5Fr 3  65           
002C60r 3               
002C60r 3               nt_until:
002C60r 3  05 0D                .byte 5, IM+CO+NN
002C62r 3  rr rr rr rr          .word nt_while, xt_until, z_until
002C66r 3  rr rr        
002C68r 3  75 6E 74 69          .byte "until"
002C6Cr 3  6C           
002C6Dr 3               
002C6Dr 3               nt_repeat:
002C6Dr 3  06 0D                .byte 6, IM+CO+NN
002C6Fr 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
002C73r 3  rr rr        
002C75r 3  72 65 70 65          .byte "repeat"
002C79r 3  61 74        
002C7Br 3               
002C7Br 3               nt_else:
002C7Br 3  04 0D                .byte 4, IM+CO+NN
002C7Dr 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
002C81r 3  rr rr        
002C83r 3  65 6C 73 65          .byte "else"
002C87r 3               
002C87r 3               nt_then:
002C87r 3  04 0D                .byte 4, IM+CO+NN
002C89r 3  rr rr rr rr          .word nt_else, xt_then, z_then
002C8Dr 3  rr rr        
002C8Fr 3  74 68 65 6E          .byte "then"
002C93r 3               
002C93r 3               nt_if:
002C93r 3  02 0D                .byte 2, IM+CO+NN
002C95r 3  rr rr rr rr          .word nt_then, xt_if, z_if
002C99r 3  rr rr        
002C9Br 3  69 66                .byte "if"
002C9Dr 3               
002C9Dr 3               nt_dot_paren:
002C9Dr 3  02 04                .byte 2, IM
002C9Fr 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
002CA3r 3  rr rr        
002CA5r 3  2E 28                .byte ".("
002CA7r 3               
002CA7r 3               nt_paren:
002CA7r 3  01 04                .byte 1, IM
002CA9r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
002CADr 3  rr rr        
002CAFr 3  28                   .byte "("
002CB0r 3               
002CB0r 3               nt_word:
002CB0r 3  04 10                .byte 4, UF
002CB2r 3  rr rr rr rr          .word nt_paren, xt_word, z_word
002CB6r 3  rr rr        
002CB8r 3  77 6F 72 64          .byte "word"
002CBCr 3               
002CBCr 3               nt_find:
002CBCr 3  04 10                .byte 4, UF
002CBEr 3  rr rr rr rr          .word nt_word, xt_find, z_find
002CC2r 3  rr rr        
002CC4r 3  66 69 6E 64          .byte "find"
002CC8r 3               
002CC8r 3               nt_environment_q:
002CC8r 3  0C 10                .byte 12, UF
002CCAr 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
002CCEr 3  rr rr        
002CD0r 3  65 6E 76 69          .byte "environment?"
002CD4r 3  72 6F 6E 6D  
002CD8r 3  65 6E 74 3F  
002CDCr 3               
002CDCr 3               nt_search:
002CDCr 3  06 18                .byte 6, UF+NN
002CDEr 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
002CE2r 3  rr rr        
002CE4r 3  73 65 61 72          .byte "search"
002CE8r 3  63 68        
002CEAr 3               
002CEAr 3               nt_compare:
002CEAr 3  07 10                .byte 7, UF
002CECr 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
002CF0r 3  rr rr        
002CF2r 3  63 6F 6D 70          .byte "compare"
002CF6r 3  61 72 65     
002CF9r 3               
002CF9r 3               nt_disasm:
002CF9r 3  06 10                .byte 6, UF
002CFBr 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
002CFFr 3  rr rr        
002D01r 3  64 69 73 61          .byte "disasm"
002D05r 3  73 6D        
002D07r 3               
002D07r 3               nt_dot_s:
002D07r 3  02 00                .byte 2, 0
002D09r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
002D0Dr 3  rr rr        
002D0Fr 3  2E 73                .byte ".s"
002D11r 3               
002D11r 3               nt_dump:
002D11r 3  04 10                .byte 4, UF
002D13r 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
002D17r 3  rr rr        
002D19r 3  64 75 6D 70          .byte "dump"
002D1Dr 3               
002D1Dr 3               nt_bell:
002D1Dr 3  04 00                .byte 4, 0
002D1Fr 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
002D23r 3  rr rr        
002D25r 3  62 65 6C 6C          .byte "bell"
002D29r 3               
002D29r 3               nt_align:
002D29r 3  05 00                .byte 5, 0
002D2Br 3  rr rr rr rr          .word nt_bell, xt_align, z_align
002D2Fr 3  rr rr        
002D31r 3  61 6C 69 67          .byte "align"
002D35r 3  6E           
002D36r 3               
002D36r 3               nt_aligned:             ; same code as ALIGN
002D36r 3  07 00                .byte 7, 0
002D38r 3  rr rr rr rr          .word nt_align, xt_align, z_align
002D3Cr 3  rr rr        
002D3Er 3  61 6C 69 67          .byte "aligned"
002D42r 3  6E 65 64     
002D45r 3               
002D45r 3               nt_wordsize:
002D45r 3  08 10                .byte 8, UF
002D47r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
002D4Br 3  rr rr        
002D4Dr 3  77 6F 72 64          .byte "wordsize"
002D51r 3  73 69 7A 65  
002D55r 3               
002D55r 3               nt_words:
002D55r 3  05 00                .byte 5, 0
002D57r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
002D5Br 3  rr rr        
002D5Dr 3  77 6F 72 64          .byte "words"
002D61r 3  73           
002D62r 3               
002D62r 3               nt_marker:
002D62r 3  06 04                .byte 6, IM
002D64r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
002D68r 3  rr rr        
002D6Ar 3  6D 61 72 6B          .byte "marker"
002D6Er 3  65 72        
002D70r 3               
002D70r 3               nt_at_xy:
002D70r 3  05 10                .byte 5, UF
002D72r 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
002D76r 3  rr rr        
002D78r 3  61 74 2D 78          .byte "at-xy"
002D7Cr 3  79           
002D7Dr 3               
002D7Dr 3               nt_page:
002D7Dr 3  04 00                .byte 4, 0
002D7Fr 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
002D83r 3  rr rr        
002D85r 3  70 61 67 65          .byte "page"
002D89r 3               
002D89r 3               nt_cr:
002D89r 3  02 00                .byte 2, 0
002D8Br 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
002D8Fr 3  rr rr        
002D91r 3  63 72                .byte "cr"
002D93r 3               
002D93r 3               nt_input:
002D93r 3  05 00                .byte 5, 0
002D95r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
002D99r 3  rr rr        
002D9Br 3  69 6E 70 75          .byte "input"
002D9Fr 3  74           
002DA0r 3               
002DA0r 3               nt_output:
002DA0r 3  06 00                .byte 6, 0
002DA2r 3  rr rr rr rr          .word nt_input, xt_output, z_output
002DA6r 3  rr rr        
002DA8r 3  6F 75 74 70          .byte "output"
002DACr 3  75 74        
002DAEr 3               
002DAEr 3               nt_sign:
002DAEr 3  04 10                .byte 4, UF
002DB0r 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
002DB4r 3  rr rr        
002DB6r 3  73 69 67 6E          .byte "sign"
002DBAr 3               
002DBAr 3               nt_hold:
002DBAr 3  04 10                .byte 4, UF
002DBCr 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
002DC0r 3  rr rr        
002DC2r 3  68 6F 6C 64          .byte "hold"
002DC6r 3               
002DC6r 3               nt_number_sign_greater:
002DC6r 3  02 10                .byte 2, UF
002DC8r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
002DCCr 3  rr rr        
002DCEr 3  23 3E                .byte "#>"
002DD0r 3               
002DD0r 3               nt_number_sign_s:
002DD0r 3  02 10                .byte 2, UF
002DD2r 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
002DD6r 3  rr rr        
002DD8r 3  23 73                .byte "#s"
002DDAr 3               
002DDAr 3               nt_number_sign:
002DDAr 3  01 10                .byte 1, UF
002DDCr 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
002DE0r 3  rr rr        
002DE2r 3  23                   .byte "#"
002DE3r 3               
002DE3r 3               nt_less_number_sign:
002DE3r 3  02 00                .byte 2, 0
002DE5r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
002DE9r 3  rr rr        
002DEBr 3  3C 23                .byte "<#"
002DEDr 3               
002DEDr 3               nt_to_in:
002DEDr 3  03 00                .byte 3, 0
002DEFr 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
002DF3r 3  rr rr        
002DF5r 3  3E 69 6E             .byte ">in"
002DF8r 3               
002DF8r 3               nt_within:
002DF8r 3  06 10                .byte 6, UF
002DFAr 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
002DFEr 3  rr rr        
002E00r 3  77 69 74 68          .byte "within"
002E04r 3  69 6E        
002E06r 3               
002E06r 3               nt_hexstore:
002E06r 3  08 10                .byte 8, UF
002E08r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
002E0Cr 3  rr rr        
002E0Er 3  68 65 78 73          .byte "hexstore"
002E12r 3  74 6F 72 65  
002E16r 3               
002E16r 3               nt_cleave:
002E16r 3  06 10                .byte 6, UF
002E18r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
002E1Cr 3  rr rr        
002E1Er 3  63 6C 65 61          .byte "cleave"
002E22r 3  76 65        
002E24r 3               
002E24r 3               nt_pad:
002E24r 3  03 00                .byte 3, 0
002E26r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
002E2Ar 3  rr rr        
002E2Cr 3  70 61 64             .byte "pad"
002E2Fr 3               
002E2Fr 3               nt_cmove:
002E2Fr 3  05 10                .byte 5, UF
002E31r 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
002E35r 3  rr rr        
002E37r 3  63 6D 6F 76          .byte "cmove"
002E3Br 3  65           
002E3Cr 3               
002E3Cr 3               nt_cmove_up:
002E3Cr 3  06 10                .byte 6, UF
002E3Er 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
002E42r 3  rr rr        
002E44r 3  63 6D 6F 76          .byte "cmove>"
002E48r 3  65 3E        
002E4Ar 3               
002E4Ar 3               nt_move:
002E4Ar 3  04 18                .byte 4, NN+UF
002E4Cr 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
002E50r 3  rr rr        
002E52r 3  6D 6F 76 65          .byte "move"
002E56r 3               
002E56r 3               nt_backslash:
002E56r 3  01 04                .byte 1, IM
002E58r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
002E5Cr 3  rr rr        
002E5Er 3  5C                   .byte $5c
002E5Fr 3               
002E5Fr 3               nt_star_slash:
002E5Fr 3  02 10                .byte 2, UF
002E61r 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
002E65r 3  rr rr        
002E67r 3  2A 2F                .byte "*/"
002E69r 3               
002E69r 3               nt_star_slash_mod:
002E69r 3  05 10                .byte 5, UF
002E6Br 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
002E6Fr 3  rr rr        
002E71r 3  2A 2F 6D 6F          .byte "*/mod"
002E75r 3  64           
002E76r 3               
002E76r 3               nt_mod:
002E76r 3  03 10                .byte 3, UF
002E78r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
002E7Cr 3  rr rr        
002E7Er 3  6D 6F 64             .byte "mod"
002E81r 3               
002E81r 3               nt_slash_mod:
002E81r 3  04 10                .byte 4, UF
002E83r 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
002E87r 3  rr rr        
002E89r 3  2F 6D 6F 64          .byte "/mod"
002E8Dr 3               
002E8Dr 3               nt_slash:
002E8Dr 3  01 10                .byte 1, UF
002E8Fr 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
002E93r 3  rr rr        
002E95r 3  2F                   .byte "/"
002E96r 3               
002E96r 3               nt_fm_slash_mod:
002E96r 3  06 10                .byte 6, UF
002E98r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
002E9Cr 3  rr rr        
002E9Er 3  66 6D 2F 6D          .byte "fm/mod"
002EA2r 3  6F 64        
002EA4r 3               
002EA4r 3               nt_sm_slash_rem:
002EA4r 3  06 10                .byte 6, UF
002EA6r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
002EAAr 3  rr rr        
002EACr 3  73 6D 2F 72          .byte "sm/rem"
002EB0r 3  65 6D        
002EB2r 3               
002EB2r 3               nt_um_slash_mod:
002EB2r 3  06 10                .byte 6, UF
002EB4r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
002EB8r 3  rr rr        
002EBAr 3  75 6D 2F 6D          .byte "um/mod"
002EBEr 3  6F 64        
002EC0r 3               
002EC0r 3               nt_star:
002EC0r 3  01 10                .byte 1, UF
002EC2r 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
002EC6r 3  rr rr        
002EC8r 3  2A                   .byte "*"
002EC9r 3               
002EC9r 3               nt_um_star:
002EC9r 3  03 10                .byte 3, UF
002ECBr 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
002ECFr 3  rr rr        
002ED1r 3  75 6D 2A             .byte "um*"
002ED4r 3               
002ED4r 3               nt_m_star:
002ED4r 3  02 10                .byte 2, UF
002ED6r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
002EDAr 3  rr rr        
002EDCr 3  6D 2A                .byte "m*"
002EDEr 3               
002EDEr 3               nt_count:
002EDEr 3  05 10                .byte 5, UF
002EE0r 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
002EE4r 3  rr rr        
002EE6r 3  63 6F 75 6E          .byte "count"
002EEAr 3  74           
002EEBr 3               
002EEBr 3               nt_decimal:
002EEBr 3  07 00                .byte 7, 0
002EEDr 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
002EF1r 3  rr rr        
002EF3r 3  64 65 63 69          .byte "decimal"
002EF7r 3  6D 61 6C     
002EFAr 3               
002EFAr 3               nt_hex:
002EFAr 3  03 00                .byte 3, 0
002EFCr 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
002F00r 3  rr rr        
002F02r 3  68 65 78             .byte "hex"
002F05r 3               
002F05r 3               nt_to_number:
002F05r 3  07 10                .byte 7, UF
002F07r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
002F0Br 3  rr rr        
002F0Dr 3  3E 6E 75 6D          .byte ">number"
002F11r 3  62 65 72     
002F14r 3               
002F14r 3               nt_number:
002F14r 3  06 10                .byte 6, UF
002F16r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
002F1Ar 3  rr rr        
002F1Cr 3  6E 75 6D 62          .byte "number"
002F20r 3  65 72        
002F22r 3               
002F22r 3               nt_digit_question:
002F22r 3  06 10                .byte 6, UF
002F24r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
002F28r 3  rr rr        
002F2Ar 3  64 69 67 69          .byte "digit?"
002F2Er 3  74 3F        
002F30r 3               
002F30r 3               nt_base:
002F30r 3  04 00                .byte 4, 0
002F32r 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
002F36r 3  rr rr        
002F38r 3  62 61 73 65          .byte "base"
002F3Cr 3               
002F3Cr 3               nt_evaluate:
002F3Cr 3  08 10                .byte 8, UF
002F3Er 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
002F42r 3  rr rr        
002F44r 3  65 76 61 6C          .byte "evaluate"
002F48r 3  75 61 74 65  
002F4Cr 3               
002F4Cr 3               nt_state:
002F4Cr 3  05 00                .byte 5, 0
002F4Er 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
002F52r 3  rr rr        
002F54r 3  73 74 61 74          .byte "state"
002F58r 3  65           
002F59r 3               
002F59r 3               nt_again:
002F59r 3  05 17                .byte 5, AN+CO+IM+UF
002F5Br 3  rr rr rr rr          .word nt_state, xt_again, z_again
002F5Fr 3  rr rr        
002F61r 3  61 67 61 69          .byte "again"
002F65r 3  6E           
002F66r 3               
002F66r 3               nt_begin:
002F66r 3  05 07                .byte 5, AN+CO+IM
002F68r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
002F6Cr 3  rr rr        
002F6Er 3  62 65 67 69          .byte "begin"
002F72r 3  6E           
002F73r 3               
002F73r 3               nt_quit:
002F73r 3  04 00                .byte 4, 0
002F75r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
002F79r 3  rr rr        
002F7Br 3  71 75 69 74          .byte "quit"
002F7Fr 3               
002F7Fr 3               nt_recurse:
002F7Fr 3  07 0D                .byte 7, CO+IM+NN
002F81r 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
002F85r 3  rr rr        
002F87r 3  72 65 63 75          .byte "recurse"
002F8Br 3  72 73 65     
002F8Er 3               
002F8Er 3               nt_leave:
002F8Er 3  05 03                .byte 5, AN+CO
002F90r 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
002F94r 3  rr rr        
002F96r 3  6C 65 61 76          .byte "leave"
002F9Ar 3  65           
002F9Br 3               
002F9Br 3               nt_unloop:
002F9Br 3  06 03                .byte 6, AN+CO
002F9Dr 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
002FA1r 3  rr rr        
002FA3r 3  75 6E 6C 6F          .byte "unloop"
002FA7r 3  6F 70        
002FA9r 3               
002FA9r 3               nt_exit:
002FA9r 3  04 03                .byte 4, AN+CO
002FABr 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
002FAFr 3  rr rr        
002FB1r 3  65 78 69 74          .byte "exit"
002FB5r 3               
002FB5r 3               nt_plus_loop:
002FB5r 3  05 05                .byte 5, CO+IM
002FB7r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
002FBBr 3  rr rr        
002FBDr 3  2B 6C 6F 6F          .byte "+loop"
002FC1r 3  70           
002FC2r 3               
002FC2r 3               nt_loop:
002FC2r 3  04 05                .byte 4, CO+IM
002FC4r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
002FC8r 3  rr rr        
002FCAr 3  6C 6F 6F 70          .byte "loop"
002FCEr 3               
002FCEr 3               nt_j:
002FCEr 3  01 03                .byte 1, AN+CO
002FD0r 3  rr rr rr rr          .word nt_loop, xt_j, z_j
002FD4r 3  rr rr        
002FD6r 3  6A                   .byte "j"
002FD7r 3               
002FD7r 3               nt_i:
002FD7r 3  01 03                .byte 1, AN+CO
002FD9r 3  rr rr rr rr          .word nt_j, xt_i, z_i
002FDDr 3  rr rr        
002FDFr 3  69                   .byte "i"
002FE0r 3               
002FE0r 3               nt_question_do:
002FE0r 3  03 0D                .byte 3, CO+IM+NN
002FE2r 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
002FE6r 3  rr rr        
002FE8r 3  3F 64 6F             .byte "?do"
002FEBr 3               
002FEBr 3               nt_do:
002FEBr 3  02 0D                .byte 2, CO+IM+NN
002FEDr 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
002FF1r 3  rr rr        
002FF3r 3  64 6F                .byte "do"
002FF5r 3               
002FF5r 3               nt_abort_quote:
002FF5r 3  06 0D                .byte 6, CO+IM+NN
002FF7r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
002FFBr 3  rr rr        
002FFDr 3  61 62 6F 72          .byte "abort", $22
003001r 3  74 22        
003003r 3               
003003r 3               nt_abort:
003003r 3  05 00                .byte 5, 0
003005r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003009r 3  rr rr        
00300Br 3  61 62 6F 72          .byte "abort"
00300Fr 3  74           
003010r 3               
003010r 3               nt_strip_underflow:
003010r 3  0F 00                .byte 15, 0
003012r 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
003016r 3  rr rr        
003018r 3  73 74 72 69          .byte "strip-underflow"
00301Cr 3  70 2D 75 6E  
003020r 3  64 65 72 66  
003027r 3               
003027r 3               nt_nc_limit:
003027r 3  08 00                .byte 8, 0
003029r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
00302Dr 3  rr rr        
00302Fr 3  6E 63 2D 6C          .byte "nc-limit"
003033r 3  69 6D 69 74  
003037r 3               
003037r 3               nt_allow_native:
003037r 3  0C 00                .byte 12, 0
003039r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
00303Dr 3  rr rr        
00303Fr 3  61 6C 6C 6F          .byte "allow-native"
003043r 3  77 2D 6E 61  
003047r 3  74 69 76 65  
00304Br 3               
00304Br 3               nt_always_native:
00304Br 3  0D 00                .byte 13, 0
00304Dr 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
003051r 3  rr rr        
003053r 3  61 6C 77 61          .byte "always-native"
003057r 3  79 73 2D 6E  
00305Br 3  61 74 69 76  
003060r 3               
003060r 3               nt_never_native:
003060r 3  0C 00                .byte 12, 0
003062r 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
003066r 3  rr rr        
003068r 3  6E 65 76 65          .byte "never-native"
00306Cr 3  72 2D 6E 61  
003070r 3  74 69 76 65  
003074r 3               
003074r 3               nt_compile_only:
003074r 3  0C 00                .byte 12, 0
003076r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
00307Ar 3  rr rr        
00307Cr 3  63 6F 6D 70          .byte "compile-only"
003080r 3  69 6C 65 2D  
003084r 3  6F 6E 6C 79  
003088r 3               
003088r 3               nt_immediate:
003088r 3  09 00                .byte 9, 0
00308Ar 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
00308Er 3  rr rr        
003090r 3  69 6D 6D 65          .byte "immediate"
003094r 3  64 69 61 74  
003098r 3  65           
003099r 3               
003099r 3               nt_postpone:
003099r 3  08 05                .byte 8, IM+CO
00309Br 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00309Fr 3  rr rr        
0030A1r 3  70 6F 73 74          .byte "postpone"
0030A5r 3  70 6F 6E 65  
0030A9r 3               
0030A9r 3               nt_s_backslash_quote:
0030A9r 3  03 04                .byte 3, IM
0030ABr 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
0030AFr 3  rr rr        
0030B1r 3  73 5C 22             .byte "s", $5C, $22
0030B4r 3               
0030B4r 3               nt_s_quote:
0030B4r 3  02 0C                .byte 2, IM+NN
0030B6r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
0030BAr 3  rr rr        
0030BCr 3  73 22                .byte "s", $22
0030BEr 3               
0030BEr 3               nt_dot_quote:
0030BEr 3  02 05                .byte 2, CO+IM
0030C0r 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
0030C4r 3  rr rr        
0030C6r 3  2E 22                .byte ".", $22
0030C8r 3               
0030C8r 3               nt_sliteral:
0030C8r 3  08 15                .byte 8, CO+IM+UF
0030CAr 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
0030CEr 3  rr rr        
0030D0r 3  73 6C 69 74          .byte "sliteral"
0030D4r 3  65 72 61 6C  
0030D8r 3               
0030D8r 3               nt_literal:
0030D8r 3  07 15                .byte 7, IM+CO+UF
0030DAr 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
0030DEr 3  rr rr        
0030E0r 3  6C 69 74 65          .byte "literal"
0030E4r 3  72 61 6C     
0030E7r 3               
0030E7r 3               nt_right_bracket:
0030E7r 3  01 04                .byte 1, IM
0030E9r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
0030EDr 3  rr rr        
0030EFr 3  5D                   .byte "]"
0030F0r 3               
0030F0r 3               nt_left_bracket:
0030F0r 3  01 05                .byte 1, IM+CO
0030F2r 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
0030F6r 3  rr rr        
0030F8r 3  5B                   .byte "["
0030F9r 3               
0030F9r 3               nt_compile_comma:
0030F9r 3  08 18                .byte 8, UF+NN
0030FBr 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
0030FFr 3  rr rr        
003101r 3  63 6F 6D 70          .byte "compile,"
003105r 3  69 6C 65 2C  
003109r 3               
003109r 3               nt_colon_noname:
003109r 3  07 00                .byte 7, 0
00310Br 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
00310Fr 3  rr rr        
003111r 3  3A 6E 6F 6E          .byte ":noname"
003115r 3  61 6D 65     
003118r 3               
003118r 3               nt_semicolon:
003118r 3  01 05                .byte 1, CO+IM
00311Ar 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
00311Er 3  rr rr        
003120r 3  3B                   .byte ";"
003121r 3               
003121r 3               nt_colon:
003121r 3  01 00                .byte 1, 0
003123r 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
003127r 3  rr rr        
003129r 3  3A                   .byte ":"
00312Ar 3               
00312Ar 3               nt_source_id:
00312Ar 3  09 00                .byte 9, 0
00312Cr 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
003130r 3  rr rr        
003132r 3  73 6F 75 72          .byte "source-id"
003136r 3  63 65 2D 69  
00313Ar 3  64           
00313Br 3               
00313Br 3               nt_source:
00313Br 3  06 00                .byte 6, 0
00313Dr 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
003141r 3  rr rr        
003143r 3  73 6F 75 72          .byte "source"
003147r 3  63 65        
003149r 3               
003149r 3               nt_execute_parsing:
003149r 3  0F 10                .byte 15, UF
00314Br 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
00314Fr 3  rr rr        
003151r 3  65 78 65 63          .byte "execute-parsing"
003155r 3  75 74 65 2D  
003159r 3  70 61 72 73  
003160r 3               
003160r 3               nt_parse:
003160r 3  05 10                .byte 5, UF
003162r 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
003166r 3  rr rr        
003168r 3  70 61 72 73          .byte "parse"
00316Cr 3  65           
00316Dr 3               
00316Dr 3               nt_parse_name:
00316Dr 3  0A 08                .byte 10, NN
00316Fr 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
003173r 3  rr rr        
003175r 3  70 61 72 73          .byte "parse-name"
003179r 3  65 2D 6E 61  
00317Dr 3  6D 65        
00317Fr 3               
00317Fr 3               nt_latestnt:
00317Fr 3  08 00                .byte 8, 0
003181r 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003185r 3  rr rr        
003187r 3  6C 61 74 65          .byte "latestnt"
00318Br 3  73 74 6E 74  
00318Fr 3               
00318Fr 3               nt_latestxt:
00318Fr 3  08 00                .byte 8, 0
003191r 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003195r 3  rr rr        
003197r 3  6C 61 74 65          .byte "latestxt"
00319Br 3  73 74 78 74  
00319Fr 3               
00319Fr 3               nt_defer:
00319Fr 3  05 00                .byte 5, 0
0031A1r 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
0031A5r 3  rr rr        
0031A7r 3  64 65 66 65          .byte "defer"
0031ABr 3  72           
0031ACr 3               
0031ACr 3               nt_to_body:
0031ACr 3  05 10                .byte 5, UF
0031AEr 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
0031B2r 3  rr rr        
0031B4r 3  3E 62 6F 64          .byte ">body"
0031B8r 3  79           
0031B9r 3               
0031B9r 3               nt_name_to_string:
0031B9r 3  0B 10                .byte 11, UF
0031BBr 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
0031BFr 3  rr rr        
0031C1r 3  6E 61 6D 65          .byte "name>string"
0031C5r 3  3E 73 74 72  
0031C9r 3  69 6E 67     
0031CCr 3               
0031CCr 3               nt_int_to_name:
0031CCr 3  08 10                .byte 8, UF
0031CEr 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
0031D2r 3  rr rr        
0031D4r 3  69 6E 74 3E          .byte "int>name"
0031D8r 3  6E 61 6D 65  
0031DCr 3               
0031DCr 3               nt_name_to_int:
0031DCr 3  08 10                .byte 8, UF
0031DEr 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
0031E2r 3  rr rr        
0031E4r 3  6E 61 6D 65          .byte "name>int"
0031E8r 3  3E 69 6E 74  
0031ECr 3               
0031ECr 3               nt_bracket_tick:
0031ECr 3  03 05                .byte 3, CO+IM
0031EEr 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
0031F2r 3  rr rr        
0031F4r 3  5B 27 5D             .byte "[']"
0031F7r 3               
0031F7r 3               nt_tick:
0031F7r 3  01 00                .byte 1, 0
0031F9r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
0031FDr 3  rr rr        
0031FFr 3  27                   .byte "'"
003200r 3               
003200r 3               nt_find_name:
003200r 3  09 10                .byte 9, UF
003202r 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003206r 3  rr rr        
003208r 3  66 69 6E 64          .byte "find-name"
00320Cr 3  2D 6E 61 6D  
003210r 3  65           
003211r 3               
003211r 3               nt_fill:
003211r 3  04 10                .byte 4, UF
003213r 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
003217r 3  rr rr        
003219r 3  66 69 6C 6C          .byte "fill"
00321Dr 3               
00321Dr 3               nt_blank:
00321Dr 3  05 00                .byte 5, 0     ; underflow checked by FILL
00321Fr 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
003223r 3  rr rr        
003225r 3  62 6C 61 6E          .byte "blank"
003229r 3  6B           
00322Ar 3               
00322Ar 3               nt_erase:
00322Ar 3  05 00                .byte 5, 0      ; underflow checked by FILL
00322Cr 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
003230r 3  rr rr        
003232r 3  65 72 61 73          .byte "erase"
003236r 3  65           
003237r 3               
003237r 3               nt_d_plus:
003237r 3  02 10                .byte 2, UF
003239r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
00323Dr 3  rr rr        
00323Fr 3  64 2B                .byte "d+"
003241r 3               
003241r 3               nt_d_minus:
003241r 3  02 10                .byte 2, UF
003243r 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
003247r 3  rr rr        
003249r 3  64 2D                .byte "d-"
00324Br 3               
00324Br 3               nt_d_to_s:
00324Br 3  03 10                .byte 3, UF
00324Dr 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
003251r 3  rr rr        
003253r 3  64 3E 73             .byte "d>s"
003256r 3               
003256r 3               nt_s_to_d:
003256r 3  03 10                .byte 3, UF
003258r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
00325Cr 3  rr rr        
00325Er 3  73 3E 64             .byte "s>d"
003261r 3               
003261r 3               nt_to:
003261r 3  02 0C                .byte 2, NN+IM
003263r 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
003267r 3  rr rr        
003269r 3  74 6F                .byte "to"
00326Br 3               
00326Br 3               nt_value:               ; same code as CONSTANT
00326Br 3  05 10                .byte 5, UF
00326Dr 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003271r 3  rr rr        
003273r 3  76 61 6C 75          .byte "value"
003277r 3  65           
003278r 3               
003278r 3               nt_constant:
003278r 3  08 10                .byte 8, UF
00327Ar 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
00327Er 3  rr rr        
003280r 3  63 6F 6E 73          .byte "constant"
003284r 3  74 61 6E 74  
003288r 3               
003288r 3               nt_variable:
003288r 3  08 00                .byte 8, 0
00328Ar 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
00328Er 3  rr rr        
003290r 3  76 61 72 69          .byte "variable"
003294r 3  61 62 6C 65  
003298r 3               
003298r 3               nt_does:
003298r 3  05 05                .byte 5, CO+IM
00329Ar 3  rr rr rr rr          .word nt_variable, xt_does, z_does
00329Er 3  rr rr        
0032A0r 3  64 6F 65 73          .byte "does>"
0032A4r 3  3E           
0032A5r 3               
0032A5r 3               nt_create:
0032A5r 3  06 00                .byte 6, 0
0032A7r 3  rr rr rr rr          .word nt_does, xt_create, z_create
0032ABr 3  rr rr        
0032ADr 3  63 72 65 61          .byte "create"
0032B1r 3  74 65        
0032B3r 3               
0032B3r 3               nt_allot:
0032B3r 3  05 10                .byte 5, UF
0032B5r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
0032B9r 3  rr rr        
0032BBr 3  61 6C 6C 6F          .byte "allot"
0032BFr 3  74           
0032C0r 3               
0032C0r 3               nt_key:
0032C0r 3  03 00                .byte 3, 0
0032C2r 3  rr rr rr rr          .word nt_allot, xt_key, z_key
0032C6r 3  rr rr        
0032C8r 3  6B 65 79             .byte "key"
0032CBr 3               
0032CBr 3               nt_depth:
0032CBr 3  05 00                .byte 5, 0
0032CDr 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
0032D1r 3  rr rr        
0032D3r 3  64 65 70 74          .byte "depth"
0032D7r 3  68           
0032D8r 3               
0032D8r 3               nt_unused:
0032D8r 3  06 00                .byte 6, 0
0032DAr 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
0032DEr 3  rr rr        
0032E0r 3  75 6E 75 73          .byte "unused"
0032E4r 3  65 64        
0032E6r 3               
0032E6r 3               nt_r_to_input:
0032E6r 3  07 08                .byte 7, NN
0032E8r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
0032ECr 3  rr rr        
0032EEr 3  72 3E 69 6E          .byte "r>input"
0032F2r 3  70 75 74     
0032F5r 3               
0032F5r 3               nt_input_to_r:
0032F5r 3  07 08                .byte 7, NN
0032F7r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
0032FBr 3  rr rr        
0032FDr 3  69 6E 70 75          .byte "input>r"
003301r 3  74 3E 72     
003304r 3               
003304r 3               nt_accept:
003304r 3  06 18                .byte 6, UF+NN
003306r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
00330Ar 3  rr rr        
00330Cr 3  61 63 63 65          .byte "accept"
003310r 3  70 74        
003312r 3               
003312r 3               nt_refill:
003312r 3  06 00                .byte 6, 0
003314r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
003318r 3  rr rr        
00331Ar 3  72 65 66 69          .byte "refill"
00331Er 3  6C 6C        
003320r 3               
003320r 3               nt_slash_string:
003320r 3  07 10                .byte 7, UF
003322r 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
003326r 3  rr rr        
003328r 3  2F 73 74 72          .byte "/string"
00332Cr 3  69 6E 67     
00332Fr 3               
00332Fr 3               nt_minus_leading:
00332Fr 3  08 10                .byte 8, UF
003331r 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
003335r 3  rr rr        
003337r 3  2D 6C 65 61          .byte "-leading"
00333Br 3  64 69 6E 67  
00333Fr 3               
00333Fr 3               nt_minus_trailing:
00333Fr 3  09 10                .byte 9, UF
003341r 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
003345r 3  rr rr        
003347r 3  2D 74 72 61          .byte "-trailing"
00334Br 3  69 6C 69 6E  
00334Fr 3  67           
003350r 3               
003350r 3               nt_bl:
003350r 3  02 00                .byte 2, 0
003352r 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
003356r 3  rr rr        
003358r 3  62 6C                .byte "bl"
00335Ar 3               
00335Ar 3               nt_spaces:
00335Ar 3  06 10                .byte 6, UF
00335Cr 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
003360r 3  rr rr        
003362r 3  73 70 61 63          .byte "spaces"
003366r 3  65 73        
003368r 3               
003368r 3               nt_bounds:
003368r 3  06 10                .byte 6, UF
00336Ar 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
00336Er 3  rr rr        
003370r 3  62 6F 75 6E          .byte "bounds"
003374r 3  64 73        
003376r 3               
003376r 3               nt_c_comma:
003376r 3  02 10                .byte 2, UF
003378r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
00337Cr 3  rr rr        
00337Er 3  63 2C                .byte "c,"
003380r 3               
003380r 3               nt_dnegate:
003380r 3  07 10                .byte 7, UF
003382r 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003386r 3  rr rr        
003388r 3  64 6E 65 67          .byte "dnegate"
00338Cr 3  61 74 65     
00338Fr 3               
00338Fr 3               nt_negate:
00338Fr 3  06 10                .byte 6, UF
003391r 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003395r 3  rr rr        
003397r 3  6E 65 67 61          .byte "negate"
00339Br 3  74 65        
00339Dr 3               
00339Dr 3               nt_invert:
00339Dr 3  06 10                .byte 6, UF
00339Fr 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
0033A3r 3  rr rr        
0033A5r 3  69 6E 76 65          .byte "invert"
0033A9r 3  72 74        
0033ABr 3               
0033ABr 3               nt_two_to_r:
0033ABr 3  03 11                .byte 3, CO+UF          ; native is special case
0033ADr 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
0033B1r 3  rr rr        
0033B3r 3  32 3E 72             .byte "2>r"
0033B6r 3               
0033B6r 3               nt_two_r_from:
0033B6r 3  03 01                .byte 3, CO             ; native is special case
0033B8r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
0033BCr 3  rr rr        
0033BEr 3  32 72 3E             .byte "2r>"
0033C1r 3               
0033C1r 3               nt_two_r_fetch:
0033C1r 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
0033C3r 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
0033C7r 3  rr rr        
0033C9r 3  32 72 40             .byte "2r@"
0033CCr 3               
0033CCr 3               nt_two_literal:
0033CCr 3  08 14                .byte 8, UF+IM
0033CEr 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
0033D2r 3  rr rr        
0033D4r 3  32 6C 69 74          .byte "2literal"
0033D8r 3  65 72 61 6C  
0033DCr 3               
0033DCr 3               nt_two_constant:
0033DCr 3  09 10                .byte 9, UF
0033DEr 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
0033E2r 3  rr rr        
0033E4r 3  32 63 6F 6E          .byte "2constant"
0033E8r 3  73 74 61 6E  
0033ECr 3  74           
0033EDr 3               
0033EDr 3               nt_two_variable:
0033EDr 3  09 00                .byte 9, 0
0033EFr 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
0033F3r 3  rr rr        
0033F5r 3  32 76 61 72          .byte "2variable"
0033F9r 3  69 61 62 6C  
0033FDr 3  65           
0033FEr 3               
0033FEr 3               nt_two_fetch:
0033FEr 3  02 10                .byte 2, UF
003400r 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003404r 3  rr rr        
003406r 3  32 40                .byte "2@"
003408r 3               
003408r 3               nt_two_store:
003408r 3  02 10                .byte 2, UF
00340Ar 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
00340Er 3  rr rr        
003410r 3  32 21                .byte "2!"
003412r 3               
003412r 3               nt_two_over:
003412r 3  05 10                .byte 5, UF
003414r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003418r 3  rr rr        
00341Ar 3  32 6F 76 65          .byte "2over"
00341Er 3  72           
00341Fr 3               
00341Fr 3               nt_two_swap:
00341Fr 3  05 10                .byte 5, UF
003421r 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003425r 3  rr rr        
003427r 3  32 73 77 61          .byte "2swap"
00342Br 3  70           
00342Cr 3               
00342Cr 3               nt_two_drop:
00342Cr 3  05 10                .byte 5, UF
00342Er 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003432r 3  rr rr        
003434r 3  32 64 72 6F          .byte "2drop"
003438r 3  70           
003439r 3               
003439r 3               nt_max:
003439r 3  03 10                .byte 3, UF
00343Br 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
00343Fr 3  rr rr        
003441r 3  6D 61 78             .byte "max"
003444r 3               
003444r 3               nt_min:
003444r 3  03 10                .byte 3, UF
003446r 3  rr rr rr rr          .word nt_max, xt_min, z_min
00344Ar 3  rr rr        
00344Cr 3  6D 69 6E             .byte "min"
00344Fr 3               
00344Fr 3               nt_zero_less:
00344Fr 3  02 10                .byte 2, UF
003451r 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003455r 3  rr rr        
003457r 3  30 3C                .byte "0<"
003459r 3               
003459r 3               nt_zero_greater:
003459r 3  02 10                .byte 2, UF
00345Br 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
00345Fr 3  rr rr        
003461r 3  30 3E                .byte "0>"
003463r 3               
003463r 3               nt_zero_unequal:
003463r 3  03 10                .byte 3, UF
003465r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003469r 3  rr rr        
00346Br 3  30 3C 3E             .byte "0<>"
00346Er 3               
00346Er 3               nt_zero_equal:
00346Er 3  02 10                .byte 2, UF
003470r 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003474r 3  rr rr        
003476r 3  30 3D                .byte "0="
003478r 3               
003478r 3               nt_greater_than:
003478r 3  01 10                .byte 1, UF
00347Ar 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
00347Er 3  rr rr        
003480r 3  3E                   .byte ">"
003481r 3               
003481r 3               nt_u_greater_than:
003481r 3  02 10                .byte 2, UF
003483r 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003487r 3  rr rr        
003489r 3  75 3E                .byte "u>"
00348Br 3               
00348Br 3               nt_u_less_than:
00348Br 3  02 10                .byte 2, UF
00348Dr 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003491r 3  rr rr        
003493r 3  75 3C                .byte "u<"
003495r 3               
003495r 3               nt_less_than:
003495r 3  01 10                .byte 1, UF
003497r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
00349Br 3  rr rr        
00349Dr 3  3C                   .byte "<"
00349Er 3               
00349Er 3               nt_not_equals:
00349Er 3  02 10                .byte 2, UF
0034A0r 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
0034A4r 3  rr rr        
0034A6r 3  3C 3E                .byte "<>"
0034A8r 3               
0034A8r 3               nt_equal:
0034A8r 3  01 10                .byte 1, UF
0034AAr 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
0034AEr 3  rr rr        
0034B0r 3  3D                   .byte "="
0034B1r 3               
0034B1r 3               nt_two_slash:
0034B1r 3  02 10                .byte 2, UF
0034B3r 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
0034B7r 3  rr rr        
0034B9r 3  32 2F                .byte "2/"
0034BBr 3               
0034BBr 3               nt_two_star:
0034BBr 3  02 10                .byte 2, UF
0034BDr 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
0034C1r 3  rr rr        
0034C3r 3  32 2A                .byte "2*"
0034C5r 3               
0034C5r 3               nt_one_plus:
0034C5r 3  02 10                .byte 2, UF
0034C7r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
0034CBr 3  rr rr        
0034CDr 3  31 2B                .byte "1+"
0034CFr 3               
0034CFr 3               nt_one_minus:
0034CFr 3  02 10                .byte 2, UF
0034D1r 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
0034D5r 3  rr rr        
0034D7r 3  31 2D                .byte "1-"
0034D9r 3               
0034D9r 3               nt_here:
0034D9r 3  04 00                .byte 4, 0
0034DBr 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
0034DFr 3  rr rr        
0034E1r 3  68 65 72 65          .byte "here"
0034E5r 3               
0034E5r 3               nt_cell_plus:
0034E5r 3  05 10                .byte 5, UF
0034E7r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
0034EBr 3  rr rr        
0034EDr 3  63 65 6C 6C          .byte "cell+"
0034F1r 3  2B           
0034F2r 3               
0034F2r 3               nt_cells:
0034F2r 3  05 00                .byte 5, 0
0034F4r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
0034F8r 3  rr rr        
0034FAr 3  63 65 6C 6C          .byte "cells"
0034FEr 3  73           
0034FFr 3               
0034FFr 3               nt_chars:
0034FFr 3  05 12                .byte 5, AN+UF   ; deleted during compile
003501r 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003505r 3  rr rr        
003507r 3  63 68 61 72          .byte "chars"
00350Br 3  73           
00350Cr 3               
00350Cr 3               nt_char_plus:
00350Cr 3  05 00                .byte 5, 0
00350Er 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003512r 3  rr rr        
003514r 3  63 68 61 72          .byte "char+"
003518r 3  2B           
003519r 3               
003519r 3               nt_bracket_char:
003519r 3  06 05                .byte 6, CO+IM
00351Br 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
00351Fr 3  rr rr        
003521r 3  5B 63 68 61          .byte "[char]"
003525r 3  72 5D        
003527r 3               
003527r 3               nt_char:
003527r 3  04 00                .byte 4, 0
003529r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
00352Dr 3  rr rr        
00352Fr 3  63 68 61 72          .byte "char"
003533r 3               
003533r 3               nt_pick:
003533r 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003535r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003539r 3  rr rr        
00353Br 3  70 69 63 6B          .byte "pick"
00353Fr 3               
00353Fr 3               nt_lshift:
00353Fr 3  06 10                .byte 6, UF
003541r 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003545r 3  rr rr        
003547r 3  6C 73 68 69          .byte "lshift"
00354Br 3  66 74        
00354Dr 3               
00354Dr 3               nt_rshift:
00354Dr 3  06 10                .byte 6, UF
00354Fr 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003553r 3  rr rr        
003555r 3  72 73 68 69          .byte "rshift"
003559r 3  66 74        
00355Br 3               
00355Br 3               nt_xor:
00355Br 3  03 10                .byte 3, UF
00355Dr 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003561r 3  rr rr        
003563r 3  78 6F 72             .byte "xor"
003566r 3               
003566r 3               nt_or:
003566r 3  02 10                .byte 2, UF
003568r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
00356Cr 3  rr rr        
00356Er 3  6F 72                .byte "or"
003570r 3               
003570r 3               nt_and:
003570r 3  03 10                .byte 3, UF
003572r 3  rr rr rr rr          .word nt_or, xt_and, z_and
003576r 3  rr rr        
003578r 3  61 6E 64             .byte "and"
00357Br 3               
00357Br 3               nt_dabs:
00357Br 3  04 10                .byte 4, UF
00357Dr 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003581r 3  rr rr        
003583r 3  64 61 62 73          .byte "dabs"
003587r 3               
003587r 3               nt_abs:
003587r 3  03 10                .byte 3, UF
003589r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
00358Dr 3  rr rr        
00358Fr 3  61 62 73             .byte "abs"
003592r 3               
003592r 3               nt_minus:
003592r 3  01 10                .byte 1, UF
003594r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003598r 3  rr rr        
00359Ar 3  2D                   .byte "-"
00359Br 3               
00359Br 3               nt_plus:
00359Br 3  01 10                .byte 1, UF
00359Dr 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
0035A1r 3  rr rr        
0035A3r 3  2B                   .byte "+"
0035A4r 3               
0035A4r 3               nt_question_dup:
0035A4r 3  04 10                .byte 4, UF
0035A6r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
0035AAr 3  rr rr        
0035ACr 3  3F 64 75 70          .byte "?dup"
0035B0r 3               
0035B0r 3               nt_two_dup:
0035B0r 3  04 10                .byte 4, UF
0035B2r 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
0035B6r 3  rr rr        
0035B8r 3  32 64 75 70          .byte "2dup"
0035BCr 3               
0035BCr 3               nt_two:
0035BCr 3  01 00                .byte 1, 0
0035BEr 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
0035C2r 3  rr rr        
0035C4r 3  32                   .byte "2"
0035C5r 3               
0035C5r 3               nt_one:
0035C5r 3  01 00                .byte 1, 0
0035C7r 3  rr rr rr rr          .word nt_two, xt_one, z_one
0035CBr 3  rr rr        
0035CDr 3  31                   .byte "1"
0035CEr 3               
0035CEr 3               nt_zero:
0035CEr 3  01 00                .byte 1, 0
0035D0r 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
0035D4r 3  rr rr        
0035D6r 3  30                   .byte "0"
0035D7r 3               
0035D7r 3               nt_space:
0035D7r 3  05 00                .byte 5, 0
0035D9r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
0035DDr 3  rr rr        
0035DFr 3  73 70 61 63          .byte "space"
0035E3r 3  65           
0035E4r 3               
0035E4r 3               nt_true:
0035E4r 3  04 00                .byte 4, 0
0035E6r 3  rr rr rr rr          .word nt_space, xt_true, z_true
0035EAr 3  rr rr        
0035ECr 3  74 72 75 65          .byte "true"
0035F0r 3               
0035F0r 3               nt_false:
0035F0r 3  05 00                .byte 5, 0
0035F2r 3  rr rr rr rr          .word nt_true, xt_false, z_false
0035F6r 3  rr rr        
0035F8r 3  66 61 6C 73          .byte "false"
0035FCr 3  65           
0035FDr 3               
0035FDr 3               nt_question:
0035FDr 3  01 00                .byte 1, 0
0035FFr 3  rr rr rr rr          .word nt_false, xt_question, z_question
003603r 3  rr rr        
003605r 3  3F                   .byte "?"
003606r 3               
003606r 3               nt_ud_dot_r:
003606r 3  04 10                .byte 4, UF
003608r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
00360Cr 3  rr rr        
00360Er 3  75 64 2E 72          .byte "ud.r"
003612r 3               
003612r 3               nt_ud_dot:
003612r 3  03 10                .byte 3, UF
003614r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003618r 3  rr rr        
00361Ar 3  75 64 2E             .byte "ud."
00361Dr 3               
00361Dr 3               nt_d_dot_r:
00361Dr 3  03 10                .byte 3, UF
00361Fr 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003623r 3  rr rr        
003625r 3  64 2E 72             .byte "d.r"
003628r 3               
003628r 3               nt_d_dot:
003628r 3  02 10                .byte 2, UF
00362Ar 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
00362Er 3  rr rr        
003630r 3  64 2E                .byte "d."
003632r 3               
003632r 3               nt_dot_r:
003632r 3  02 10                .byte 2, UF
003634r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003638r 3  rr rr        
00363Ar 3  2E 72                .byte ".r"
00363Cr 3               
00363Cr 3               nt_u_dot_r:
00363Cr 3  03 10                .byte 3, UF
00363Er 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003642r 3  rr rr        
003644r 3  75 2E 72             .byte "u.r"
003647r 3               
003647r 3               nt_u_dot:
003647r 3  02 10                .byte 2, UF
003649r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
00364Dr 3  rr rr        
00364Fr 3  75 2E                .byte "u."
003651r 3               
003651r 3               nt_dot:
003651r 3  01 10                .byte 1, UF
003653r 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003657r 3  rr rr        
003659r 3  2E                   .byte "."
00365Ar 3               
00365Ar 3               nt_type:
00365Ar 3  04 10                .byte 4, UF
00365Cr 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003660r 3  rr rr        
003662r 3  74 79 70 65          .byte "type"
003666r 3               
003666r 3               nt_emit:
003666r 3  04 18                .byte 4, NN+UF
003668r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
00366Cr 3  rr rr        
00366Er 3  65 6D 69 74          .byte "emit"
003672r 3               
003672r 3               nt_execute:
003672r 3  07 10                .byte 7, UF
003674r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003678r 3  rr rr        
00367Ar 3  65 78 65 63          .byte "execute"
00367Er 3  75 74 65     
003681r 3               
003681r 3               nt_plus_store:
003681r 3  02 10                .byte 2, UF
003683r 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003687r 3  rr rr        
003689r 3  2B 21                .byte "+!"
00368Br 3               
00368Br 3               nt_c_store:
00368Br 3  02 10                .byte 2, UF
00368Dr 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003691r 3  rr rr        
003693r 3  63 21                .byte "c!"
003695r 3               
003695r 3               nt_c_fetch:
003695r 3  02 10                .byte 2, UF
003697r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
00369Br 3  rr rr        
00369Dr 3  63 40                .byte "c@"
00369Fr 3               
00369Fr 3               nt_comma:
00369Fr 3  01 10                .byte 1, UF
0036A1r 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
0036A5r 3  rr rr        
0036A7r 3  2C                   .byte ","
0036A8r 3               
0036A8r 3               nt_tuck:
0036A8r 3  04 10                .byte 4, UF
0036AAr 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
0036AEr 3  rr rr        
0036B0r 3  74 75 63 6B          .byte "tuck"
0036B4r 3               
0036B4r 3               nt_not_rote:
0036B4r 3  04 10                .byte 4, UF
0036B6r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
0036BAr 3  rr rr        
0036BCr 3  2D 72 6F 74          .byte "-rot"
0036C0r 3               
0036C0r 3               nt_rot:
0036C0r 3  03 10                .byte 3, UF
0036C2r 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
0036C6r 3  rr rr        
0036C8r 3  72 6F 74             .byte "rot"
0036CBr 3               
0036CBr 3               nt_nip:
0036CBr 3  03 10                .byte 3, UF
0036CDr 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
0036D1r 3  rr rr        
0036D3r 3  6E 69 70             .byte "nip"
0036D6r 3               
0036D6r 3               nt_r_fetch:
0036D6r 3  02 01                .byte 2, CO    ; native is special case
0036D8r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
0036DCr 3  rr rr        
0036DEr 3  72 40                .byte "r@"
0036E0r 3               
0036E0r 3               nt_r_from:
0036E0r 3  02 01                .byte 2, CO    ; native is special case
0036E2r 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
0036E6r 3  rr rr        
0036E8r 3  72 3E                .byte "r>"
0036EAr 3               
0036EAr 3               nt_to_r:
0036EAr 3  02 11                .byte 2, CO+UF ; native is special case
0036ECr 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
0036F0r 3  rr rr        
0036F2r 3  3E 72                .byte ">r"
0036F4r 3               
0036F4r 3               nt_over:
0036F4r 3  04 10                .byte 4, UF
0036F6r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
0036FAr 3  rr rr        
0036FCr 3  6F 76 65 72          .byte "over"
003700r 3               
003700r 3               nt_fetch:
003700r 3  01 10                .byte 1, UF
003702r 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003706r 3  rr rr        
003708r 3  40                   .byte "@"
003709r 3               
003709r 3               nt_store:
003709r 3  01 10                .byte 1, UF
00370Br 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
00370Fr 3  rr rr        
003711r 3  21                   .byte "!"
003712r 3               
003712r 3               nt_swap:
003712r 3  04 10                .byte 4, UF
003714r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003718r 3  rr rr        
00371Ar 3  73 77 61 70          .byte "swap"
00371Er 3               
00371Er 3               nt_dup:
00371Er 3  03 10                .byte 3, UF
003720r 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003724r 3  rr rr        
003726r 3  64 75 70             .byte "dup"
003729r 3               
003729r 3               ; DROP is always the first native word in the Dictionary
003729r 3               dictionary_start:
003729r 3               nt_drop:
003729r 3  04 10                .byte 4, UF
00372Br 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
00372Fr 3  rr rr        
003731r 3  64 72 6F 70          .byte "drop"
003735r 3               
003735r 3               ; END of FORTH-WORDLIST
003735r 3               
003735r 3               
003735r 3               ; ROOT-WORDLIST
003735r 3                       ; This is a short wordlist that has just the words needed to
003735r 3                       ; set the wordlists. These words are also included in the
003735r 3                       ; FORTH-WORDLIST as well.
003735r 3               
003735r 3               nt_root_words:
003735r 3  05 00                .byte 5, 0
003737r 3  00 00 rr rr          .word 0000, xt_words, z_words
00373Br 3  rr rr        
00373Dr 3  77 6F 72 64          .byte "words"
003741r 3  73           
003742r 3               
003742r 3               nt_root_forth_wordlist: ; shares code with ZERO
003742r 3  0E 00                .byte 14, 0
003744r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003748r 3  rr rr        
00374Ar 3  66 6F 72 74          .byte "forth-wordlist"
00374Er 3  68 2D 77 6F  
003752r 3  72 64 6C 69  
003758r 3               
003758r 3               nt_root_forth:
003758r 3  05 00                .byte 5, 0
00375Ar 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
00375Er 3  rr rr        
003760r 3  66 6F 72 74          .byte "forth"
003764r 3  68           
003765r 3               
003765r 3               root_dictionary_start:
003765r 3               nt_root_set_order:
003765r 3  09 00                .byte 9, 0
003767r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
00376Br 3  rr rr        
00376Dr 3  73 65 74 2D          .byte "set-order"
003771r 3  6F 72 64 65  
003775r 3  72           
003776r 3               
003776r 3               ; END of ROOT-WORDLIST
003776r 3               
003776r 3               
003776r 3               ; ; EDITOR-WORDLIST
003776r 3               
003776r 3               ; nt_editor_enter_screen:
003776r 3               ;         .byte 12, 0
003776r 3               ;         .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003776r 3               ;         .byte "enter-screen"
003776r 3               
003776r 3               ; nt_editor_erase_screen:
003776r 3               ;         .byte 12, 0
003776r 3               ;         .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003776r 3               ;         .byte "erase-screen"
003776r 3               
003776r 3               ; nt_editor_el:
003776r 3               ;         .byte 2, 0
003776r 3               ;         .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003776r 3               ;         .byte "el"
003776r 3               
003776r 3               ; nt_editor_l:
003776r 3               ;         .byte 1, 0
003776r 3               ;         .word nt_editor_el, xt_editor_l, z_editor_l
003776r 3               ;         .byte "l"
003776r 3               
003776r 3               ; nt_editor_line:
003776r 3               ;         .byte 4, UF
003776r 3               ;         .word nt_editor_l, xt_editor_line, z_editor_line
003776r 3               ;         .byte "line"
003776r 3               
003776r 3               editor_dictionary_start:
003776r 3               ; nt_editor_o:
003776r 3               ;         .byte 1, 0
003776r 3               ;         .word nt_editor_line, xt_editor_o, z_editor_o
003776r 3               ;         .byte "o"
003776r 3               
003776r 3               ; ; END of EDITOR-WORDLIST
003776r 3               
003776r 3               
003776r 3               ; ; ASSEMBLER-WORDLIST
003776r 3               
003776r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003776r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003776r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003776r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003776r 3               assembler_dictionary_start:
003776r 3               ; nt_asm_adc_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_adc_x
003776r 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003776r 3               ; 		.byte "adc.#"
003776r 3               
003776r 3               ; nt_asm_adc_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_adc_y
003776r 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003776r 3               ; 		.byte "adc.x"
003776r 3               
003776r 3               ; nt_asm_adc_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_adc_z
003776r 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003776r 3               ; 		.byte "adc.y"
003776r 3               
003776r 3               ; nt_asm_adc_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_adc_zi
003776r 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003776r 3               ; 		.byte "adc.z"
003776r 3               
003776r 3               ; nt_asm_adc_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_adc_ziy
003776r 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003776r 3               ; 		.byte "adc.zi"
003776r 3               
003776r 3               ; nt_asm_adc_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_adc_zx
003776r 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003776r 3               ; 		.byte "adc.ziy"
003776r 3               
003776r 3               ; nt_asm_adc_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_adc_zxi
003776r 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003776r 3               ; 		.byte "adc.zx"
003776r 3               
003776r 3               ; nt_asm_adc_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_and
003776r 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003776r 3               ; 		.byte "adc.zxi"
003776r 3               
003776r 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003776r 3               ; 		.byte 4, IM
003776r 3               ;                 .word nt_asm_and_h
003776r 3               ; 		.word xt_asm_and, z_asm_and
003776r 3               ; 		.byte "and."
003776r 3               
003776r 3               ; nt_asm_and_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_and_x
003776r 3               ; 		.word xt_asm_and_h, z_asm_and_h
003776r 3               ; 		.byte "and.#"
003776r 3               
003776r 3               ; nt_asm_and_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_and_y
003776r 3               ; 		.word xt_asm_and_x, z_asm_and_x
003776r 3               ; 		.byte "and.x"
003776r 3               
003776r 3               ; nt_asm_and_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_and_z
003776r 3               ; 		.word xt_asm_and_y, z_asm_and_y
003776r 3               ; 		.byte "and.y"
003776r 3               
003776r 3               ; nt_asm_and_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_and_zi
003776r 3               ; 		.word xt_asm_and_z, z_asm_and_z
003776r 3               ; 		.byte "and.z"
003776r 3               
003776r 3               ; nt_asm_and_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_and_ziy
003776r 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003776r 3               ; 		.byte "and.zi"
003776r 3               
003776r 3               ; nt_asm_and_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_and_zx
003776r 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003776r 3               ; 		.byte "and.ziy"
003776r 3               
003776r 3               ; nt_asm_and_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_and_zxi
003776r 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003776r 3               ; 		.byte "and.zx"
003776r 3               
003776r 3               ; nt_asm_and_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_asl
003776r 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003776r 3               ; 		.byte "and.zxi"
003776r 3               
003776r 3               ; nt_asm_asl:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_asl_a
003776r 3               ; 		.word xt_asm_asl, z_asm_asl
003776r 3               ; 		.byte "asl"
003776r 3               
003776r 3               ; nt_asm_asl_a:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_asl_x
003776r 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003776r 3               ; 		.byte "asl.a"
003776r 3               
003776r 3               ; nt_asm_asl_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_asl_z
003776r 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003776r 3               ; 		.byte "asl.x"
003776r 3               
003776r 3               ; nt_asm_asl_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_asl_zx
003776r 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003776r 3               ; 		.byte "asl.z"
003776r 3               
003776r 3               ; nt_asm_asl_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_bcc
003776r 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003776r 3               ; 		.byte "asl.zx"
003776r 3               
003776r 3               ; nt_asm_bcc:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bcs
003776r 3               ; 		.word xt_asm_bcc, z_asm_bcc
003776r 3               ; 		.byte "bcc"
003776r 3               
003776r 3               ; nt_asm_bcs:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_beq
003776r 3               ; 		.word xt_asm_bcs, z_asm_bcs
003776r 3               ; 		.byte "bcs"
003776r 3               
003776r 3               ; nt_asm_beq:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bit
003776r 3               ; 		.word xt_asm_beq, z_asm_beq
003776r 3               ; 		.byte "beq"
003776r 3               
003776r 3               ; nt_asm_bit:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bit_h
003776r 3               ; 		.word xt_asm_bit, z_asm_bit
003776r 3               ; 		.byte "bit"
003776r 3               
003776r 3               ; nt_asm_bit_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_bit_x
003776r 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003776r 3               ; 		.byte "bit.#"
003776r 3               
003776r 3               ; nt_asm_bit_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_bit_z
003776r 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003776r 3               ; 		.byte "bit.x"
003776r 3               
003776r 3               ; nt_asm_bit_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_bit_zx
003776r 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003776r 3               ; 		.byte "bit.z"
003776r 3               
003776r 3               ; nt_asm_bit_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_bmi
003776r 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003776r 3               ; 		.byte "bit.zx"
003776r 3               
003776r 3               ; nt_asm_bmi:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bne
003776r 3               ; 		.word xt_asm_bmi, z_asm_bmi
003776r 3               ; 		.byte "bmi"
003776r 3               
003776r 3               ; nt_asm_bne:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bpl
003776r 3               ; 		.word xt_asm_bne, z_asm_bne
003776r 3               ; 		.byte "bne"
003776r 3               
003776r 3               ; nt_asm_bpl:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bra
003776r 3               ; 		.word xt_asm_bpl, z_asm_bpl
003776r 3               ; 		.byte "bpl"
003776r 3               
003776r 3               ; nt_asm_bra:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_brk
003776r 3               ; 		.word xt_asm_bra, z_asm_bra
003776r 3               ; 		.byte "bra"
003776r 3               
003776r 3               ; nt_asm_brk:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bvc
003776r 3               ; 		.word xt_asm_brk, z_asm_brk
003776r 3               ; 		.byte "brk"
003776r 3               
003776r 3               ; nt_asm_bvc:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_bvs
003776r 3               ; 		.word xt_asm_bvc, z_asm_bvc
003776r 3               ; 		.byte "bvc"
003776r 3               
003776r 3               ; nt_asm_bvs:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_clc
003776r 3               ; 		.word xt_asm_bvs, z_asm_bvs
003776r 3               ; 		.byte "bvs"
003776r 3               
003776r 3               ; nt_asm_clc:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_cld
003776r 3               ; 		.word xt_asm_clc, z_asm_clc
003776r 3               ; 		.byte "clc"
003776r 3               
003776r 3               ; nt_asm_cld:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_cli
003776r 3               ; 		.word xt_asm_cld, z_asm_cld
003776r 3               ; 		.byte "cld"
003776r 3               
003776r 3               ; nt_asm_cli:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_clv
003776r 3               ; 		.word xt_asm_cli, z_asm_cli
003776r 3               ; 		.byte "cli"
003776r 3               
003776r 3               ; nt_asm_clv:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_cmp
003776r 3               ; 		.word xt_asm_clv, z_asm_clv
003776r 3               ; 		.byte "clv"
003776r 3               
003776r 3               ; nt_asm_cmp:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_cmp_h
003776r 3               ; 		.word xt_asm_cmp, z_asm_cmp
003776r 3               ; 		.byte "cmp"
003776r 3               
003776r 3               ; nt_asm_cmp_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_cmp_x
003776r 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003776r 3               ; 		.byte "cmp.#"
003776r 3               
003776r 3               ; nt_asm_cmp_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_cmp_y
003776r 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003776r 3               ; 		.byte "cmp.x"
003776r 3               
003776r 3               ; nt_asm_cmp_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_cmp_z
003776r 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003776r 3               ; 		.byte "cmp.y"
003776r 3               
003776r 3               ; nt_asm_cmp_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_cmp_zi
003776r 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003776r 3               ; 		.byte "cmp.z"
003776r 3               
003776r 3               ; nt_asm_cmp_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_cmp_ziy
003776r 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003776r 3               ; 		.byte "cmp.zi"
003776r 3               
003776r 3               ; nt_asm_cmp_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_cmp_zx
003776r 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003776r 3               ; 		.byte "cmp.ziy"
003776r 3               
003776r 3               ; nt_asm_cmp_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_cmp_zxi
003776r 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003776r 3               ; 		.byte "cmp.zx"
003776r 3               
003776r 3               ; nt_asm_cmp_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_cpx
003776r 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003776r 3               ; 		.byte "cmp.zxi"
003776r 3               
003776r 3               ; nt_asm_cpx:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_cpx_h
003776r 3               ; 		.word xt_asm_cpx, z_asm_cpx
003776r 3               ; 		.byte "cpx"
003776r 3               
003776r 3               ; nt_asm_cpx_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_cpx_z
003776r 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003776r 3               ; 		.byte "cpx.#"
003776r 3               
003776r 3               ; nt_asm_cpx_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_cpy
003776r 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003776r 3               ; 		.byte "cpx.z"
003776r 3               
003776r 3               ; nt_asm_cpy:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_cpy_h
003776r 3               ; 		.word xt_asm_cpy, z_asm_cpy
003776r 3               ; 		.byte "cpy"
003776r 3               
003776r 3               ; nt_asm_cpy_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_cpy_z
003776r 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003776r 3               ; 		.byte "cpy.#"
003776r 3               
003776r 3               ; nt_asm_cpy_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_dec
003776r 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003776r 3               ; 		.byte "cpy.z"
003776r 3               
003776r 3               ; nt_asm_dec:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_dec_a
003776r 3               ; 		.word xt_asm_dec, z_asm_dec
003776r 3               ; 		.byte "dec"
003776r 3               
003776r 3               ; nt_asm_dec_a:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_dec_x
003776r 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003776r 3               ; 		.byte "dec.a"
003776r 3               
003776r 3               ; nt_asm_dec_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_dec_z
003776r 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003776r 3               ; 		.byte "dec.x"
003776r 3               
003776r 3               ; nt_asm_dec_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_dec_zx
003776r 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003776r 3               ; 		.byte "dec.z"
003776r 3               
003776r 3               ; nt_asm_dec_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_dex
003776r 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003776r 3               ; 		.byte "dec.zx"
003776r 3               
003776r 3               ; nt_asm_dex:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_dey
003776r 3               ; 		.word xt_asm_dex, z_asm_dex
003776r 3               ; 		.byte "dex"
003776r 3               
003776r 3               ; nt_asm_dey:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_eor
003776r 3               ; 		.word xt_asm_dey, z_asm_dey
003776r 3               ; 		.byte "dey"
003776r 3               
003776r 3               ; nt_asm_eor:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_eor_h
003776r 3               ; 		.word xt_asm_eor, z_asm_eor
003776r 3               ; 		.byte "eor"
003776r 3               
003776r 3               ; nt_asm_eor_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_eor_x
003776r 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003776r 3               ; 		.byte "eor.#"
003776r 3               
003776r 3               ; nt_asm_eor_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_eor_y
003776r 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003776r 3               ; 		.byte "eor.x"
003776r 3               
003776r 3               ; nt_asm_eor_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_eor_z
003776r 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003776r 3               ; 		.byte "eor.y"
003776r 3               
003776r 3               ; nt_asm_eor_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_eor_zi
003776r 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003776r 3               ; 		.byte "eor.z"
003776r 3               
003776r 3               ; nt_asm_eor_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_eor_ziy
003776r 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003776r 3               ; 		.byte "eor.zi"
003776r 3               
003776r 3               ; nt_asm_eor_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_eor_zx
003776r 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003776r 3               ; 		.byte "eor.ziy"
003776r 3               
003776r 3               ; nt_asm_eor_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_eor_zxi
003776r 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003776r 3               ; 		.byte "eor.zx"
003776r 3               
003776r 3               ; nt_asm_eor_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_inc
003776r 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003776r 3               ; 		.byte "eor.zxi"
003776r 3               
003776r 3               ; nt_asm_inc:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_inc_a
003776r 3               ; 		.word xt_asm_inc, z_asm_inc
003776r 3               ; 		.byte "inc"
003776r 3               
003776r 3               ; nt_asm_inc_a:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_inc_x
003776r 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003776r 3               ; 		.byte "inc.a"
003776r 3               
003776r 3               ; nt_asm_inc_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_inc_z
003776r 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003776r 3               ; 		.byte "inc.x"
003776r 3               
003776r 3               ; nt_asm_inc_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_inc_zx
003776r 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003776r 3               ; 		.byte "inc.z"
003776r 3               
003776r 3               ; nt_asm_inc_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_inx
003776r 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003776r 3               ; 		.byte "inc.zx"
003776r 3               
003776r 3               ; nt_asm_inx:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_iny
003776r 3               ; 		.word xt_asm_inx, z_asm_inx
003776r 3               ; 		.byte "inx"
003776r 3               
003776r 3               ; nt_asm_iny:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_jmp
003776r 3               ; 		.word xt_asm_iny, z_asm_iny
003776r 3               ; 		.byte "iny"
003776r 3               
003776r 3               ; nt_asm_jmp:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_jmp_i
003776r 3               ; 		.word xt_asm_jmp, z_asm_jmp
003776r 3               ; 		.byte "jmp"
003776r 3               
003776r 3               ; nt_asm_jmp_i:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_jmp_xi
003776r 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003776r 3               ; 		.byte "jmp.i"
003776r 3               
003776r 3               ; nt_asm_jmp_xi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_jsr
003776r 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003776r 3               ; 		.byte "jmp.xi"
003776r 3               
003776r 3               ; nt_asm_jsr:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_lda
003776r 3               ; 		.word xt_asm_jsr, z_asm_jsr
003776r 3               ; 		.byte "jsr"
003776r 3               
003776r 3               ; nt_asm_lda:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_lda_h
003776r 3               ; 		.word xt_asm_lda, z_asm_lda
003776r 3               ; 		.byte "lda"
003776r 3               
003776r 3               ; nt_asm_lda_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_lda_x
003776r 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003776r 3               ; 		.byte "lda.#"
003776r 3               
003776r 3               ; nt_asm_lda_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_lda_y
003776r 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003776r 3               ; 		.byte "lda.x"
003776r 3               
003776r 3               ; nt_asm_lda_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_lda_z
003776r 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003776r 3               ; 		.byte "lda.y"
003776r 3               
003776r 3               ; nt_asm_lda_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_lda_zi
003776r 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003776r 3               ; 		.byte "lda.z"
003776r 3               
003776r 3               ; nt_asm_lda_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_lda_ziy
003776r 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003776r 3               ; 		.byte "lda.zi"
003776r 3               
003776r 3               ; nt_asm_lda_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_lda_zx
003776r 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003776r 3               ; 		.byte "lda.ziy"
003776r 3               
003776r 3               ; nt_asm_lda_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_lda_zxi
003776r 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003776r 3               ; 		.byte "lda.zx"
003776r 3               
003776r 3               ; nt_asm_lda_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_ldx
003776r 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003776r 3               ; 		.byte "lda.zxi"
003776r 3               
003776r 3               ; nt_asm_ldx:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_ldx_h
003776r 3               ; 		.word xt_asm_ldx, z_asm_ldx
003776r 3               ; 		.byte "ldx"
003776r 3               
003776r 3               ; nt_asm_ldx_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ldx_y
003776r 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003776r 3               ; 		.byte "ldx.#"
003776r 3               
003776r 3               ; nt_asm_ldx_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ldx_z
003776r 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003776r 3               ; 		.byte "ldx.y"
003776r 3               
003776r 3               ; nt_asm_ldx_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ldx_zy
003776r 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003776r 3               ; 		.byte "ldx.z"
003776r 3               
003776r 3               ; nt_asm_ldx_zy:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_ldy
003776r 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003776r 3               ; 		.byte "ldx.zy"
003776r 3               
003776r 3               ; nt_asm_ldy:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_ldy_h
003776r 3               ; 		.word xt_asm_ldy, z_asm_ldy
003776r 3               ; 		.byte "ldy"
003776r 3               
003776r 3               ; nt_asm_ldy_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ldy_x
003776r 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003776r 3               ; 		.byte "ldy.#"
003776r 3               
003776r 3               ; nt_asm_ldy_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ldy_z
003776r 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003776r 3               ; 		.byte "ldy.x"
003776r 3               
003776r 3               ; nt_asm_ldy_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ldy_zx
003776r 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003776r 3               ; 		.byte "ldy.z"
003776r 3               
003776r 3               ; nt_asm_ldy_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_lsr
003776r 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003776r 3               ; 		.byte "ldy.zx"
003776r 3               
003776r 3               ; nt_asm_lsr:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_lsr_a
003776r 3               ; 		.word xt_asm_lsr, z_asm_lsr
003776r 3               ; 		.byte "lsr"
003776r 3               
003776r 3               ; nt_asm_lsr_a:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_lsr_x
003776r 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003776r 3               ; 		.byte "lsr.a"
003776r 3               
003776r 3               ; nt_asm_lsr_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_lsr_z
003776r 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003776r 3               ; 		.byte "lsr.x"
003776r 3               
003776r 3               ; nt_asm_lsr_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_lsr_zx
003776r 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003776r 3               ; 		.byte "lsr.z"
003776r 3               
003776r 3               ; nt_asm_lsr_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_nop
003776r 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003776r 3               ; 		.byte "lsr.zx"
003776r 3               
003776r 3               ; nt_asm_nop:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_ora
003776r 3               ; 		.word xt_asm_nop, z_asm_nop
003776r 3               ; 		.byte "nop"
003776r 3               
003776r 3               ; nt_asm_ora:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_ora_h
003776r 3               ; 		.word xt_asm_ora, z_asm_ora
003776r 3               ; 		.byte "ora"
003776r 3               
003776r 3               ; nt_asm_ora_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ora_x
003776r 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003776r 3               ; 		.byte "ora.#"
003776r 3               
003776r 3               ; nt_asm_ora_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ora_y
003776r 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003776r 3               ; 		.byte "ora.x"
003776r 3               
003776r 3               ; nt_asm_ora_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ora_z
003776r 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003776r 3               ; 		.byte "ora.y"
003776r 3               
003776r 3               ; nt_asm_ora_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ora_zi
003776r 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003776r 3               ; 		.byte "ora.z"
003776r 3               
003776r 3               ; nt_asm_ora_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_ora_ziy
003776r 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003776r 3               ; 		.byte "ora.zi"
003776r 3               
003776r 3               ; nt_asm_ora_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_ora_zx
003776r 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003776r 3               ; 		.byte "ora.ziy"
003776r 3               
003776r 3               ; nt_asm_ora_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_ora_zxi
003776r 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003776r 3               ; 		.byte "ora.zx"
003776r 3               
003776r 3               ; nt_asm_ora_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_pha
003776r 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003776r 3               ; 		.byte "ora.zxi"
003776r 3               
003776r 3               ; nt_asm_pha:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_php
003776r 3               ; 		.word xt_asm_pha, z_asm_pha
003776r 3               ; 		.byte "pha"
003776r 3               
003776r 3               ; nt_asm_php:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_phx
003776r 3               ; 		.word xt_asm_php, z_asm_php
003776r 3               ; 		.byte "php"
003776r 3               
003776r 3               ; nt_asm_phx:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_phy
003776r 3               ; 		.word xt_asm_phx, z_asm_phx
003776r 3               ; 		.byte "phx"
003776r 3               
003776r 3               ; nt_asm_phy:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_pla
003776r 3               ; 		.word xt_asm_phy, z_asm_phy
003776r 3               ; 		.byte "phy"
003776r 3               
003776r 3               ; nt_asm_pla:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_plp
003776r 3               ; 		.word xt_asm_pla, z_asm_pla
003776r 3               ; 		.byte "pla"
003776r 3               
003776r 3               ; nt_asm_plp:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_plx
003776r 3               ; 		.word xt_asm_plp, z_asm_plp
003776r 3               ; 		.byte "plp"
003776r 3               
003776r 3               ; nt_asm_plx:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_ply
003776r 3               ; 		.word xt_asm_plx, z_asm_plx
003776r 3               ; 		.byte "plx"
003776r 3               
003776r 3               ; nt_asm_ply:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_rol
003776r 3               ; 		.word xt_asm_ply, z_asm_ply
003776r 3               ; 		.byte "ply"
003776r 3               
003776r 3               ; nt_asm_rol:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_rol_a
003776r 3               ; 		.word xt_asm_rol, z_asm_rol
003776r 3               ; 		.byte "rol"
003776r 3               
003776r 3               ; nt_asm_rol_a:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_rol_x
003776r 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003776r 3               ; 		.byte "rol.a"
003776r 3               
003776r 3               ; nt_asm_rol_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_rol_z
003776r 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003776r 3               ; 		.byte "rol.x"
003776r 3               
003776r 3               ; nt_asm_rol_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_rol_zx
003776r 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003776r 3               ; 		.byte "rol.z"
003776r 3               
003776r 3               ; nt_asm_rol_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_ror
003776r 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003776r 3               ; 		.byte "rol.zx"
003776r 3               
003776r 3               ; nt_asm_ror:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_ror_a
003776r 3               ; 		.word xt_asm_ror, z_asm_ror
003776r 3               ; 		.byte "ror"
003776r 3               
003776r 3               ; nt_asm_ror_a:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ror_x
003776r 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003776r 3               ; 		.byte "ror.a"
003776r 3               
003776r 3               ; nt_asm_ror_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ror_z
003776r 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003776r 3               ; 		.byte "ror.x"
003776r 3               
003776r 3               ; nt_asm_ror_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_ror_zx
003776r 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003776r 3               ; 		.byte "ror.z"
003776r 3               
003776r 3               ; nt_asm_ror_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_rti
003776r 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003776r 3               ; 		.byte "ror.zx"
003776r 3               
003776r 3               ; nt_asm_rti:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_rts
003776r 3               ; 		.word xt_asm_rti, z_asm_rti
003776r 3               ; 		.byte "rti"
003776r 3               
003776r 3               ; nt_asm_rts:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_sbc
003776r 3               ; 		.word xt_asm_rts, z_asm_rts
003776r 3               ; 		.byte "rts"
003776r 3               
003776r 3               ; nt_asm_sbc:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_sbc_h
003776r 3               ; 		.word xt_asm_sbc, z_asm_sbc
003776r 3               ; 		.byte "sbc"
003776r 3               
003776r 3               ; nt_asm_sbc_h:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sbc_x
003776r 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003776r 3               ; 		.byte "sbc.#"
003776r 3               
003776r 3               ; nt_asm_sbc_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sbc_y
003776r 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003776r 3               ; 		.byte "sbc.x"
003776r 3               
003776r 3               ; nt_asm_sbc_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sbc_z
003776r 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003776r 3               ; 		.byte "sbc.y"
003776r 3               
003776r 3               ; nt_asm_sbc_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sbc_zi
003776r 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003776r 3               ; 		.byte "sbc.z"
003776r 3               
003776r 3               ; nt_asm_sbc_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_sbc_ziy
003776r 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003776r 3               ; 		.byte "sbc.zi"
003776r 3               
003776r 3               ; nt_asm_sbc_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_sbc_zx
003776r 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003776r 3               ; 		.byte "sbc.ziy"
003776r 3               
003776r 3               ; nt_asm_sbc_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_sbc_zxi
003776r 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003776r 3               ; 		.byte "sbc.zx"
003776r 3               
003776r 3               ; nt_asm_sbc_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_sec
003776r 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003776r 3               ; 		.byte "sbc.zxi"
003776r 3               
003776r 3               ; nt_asm_sec:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_sed
003776r 3               ; 		.word xt_asm_sec, z_asm_sec
003776r 3               ; 		.byte "sec"
003776r 3               
003776r 3               ; nt_asm_sed:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_sei
003776r 3               ; 		.word xt_asm_sed, z_asm_sed
003776r 3               ; 		.byte "sed"
003776r 3               
003776r 3               ; nt_asm_sei:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_sta
003776r 3               ; 		.word xt_asm_sei, z_asm_sei
003776r 3               ; 		.byte "sei"
003776r 3               
003776r 3               ; nt_asm_sta:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_sta_x
003776r 3               ; 		.word xt_asm_sta, z_asm_sta
003776r 3               ; 		.byte "sta"
003776r 3               
003776r 3               ; nt_asm_sta_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sta_y
003776r 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003776r 3               ; 		.byte "sta.x"
003776r 3               
003776r 3               ; nt_asm_sta_y:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sta_z
003776r 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003776r 3               ; 		.byte "sta.y"
003776r 3               
003776r 3               ; nt_asm_sta_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sta_zi
003776r 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003776r 3               ; 		.byte "sta.z"
003776r 3               
003776r 3               ; nt_asm_sta_zi:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_sta_ziy
003776r 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003776r 3               ; 		.byte "sta.zi"
003776r 3               
003776r 3               ; nt_asm_sta_ziy:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_sta_zx
003776r 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003776r 3               ; 		.byte "sta.ziy"
003776r 3               
003776r 3               ; nt_asm_sta_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_sta_zxi
003776r 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003776r 3               ; 		.byte "sta.zx"
003776r 3               
003776r 3               ; nt_asm_sta_zxi:
003776r 3               ; 		.byte 7, IM
003776r 3               ;                 .word nt_asm_stx
003776r 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003776r 3               ; 		.byte "sta.zxi"
003776r 3               
003776r 3               ; nt_asm_stx:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_stx_z
003776r 3               ; 		.word xt_asm_stx, z_asm_stx
003776r 3               ; 		.byte "stx"
003776r 3               
003776r 3               ; nt_asm_stx_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_stx_zy
003776r 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003776r 3               ; 		.byte "stx.z"
003776r 3               
003776r 3               ; nt_asm_stx_zy:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_sty
003776r 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003776r 3               ; 		.byte "stx.zy"
003776r 3               
003776r 3               ; nt_asm_sty:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_sty_z
003776r 3               ; 		.word xt_asm_sty, z_asm_sty
003776r 3               ; 		.byte "sty"
003776r 3               
003776r 3               ; nt_asm_sty_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_sty_zx
003776r 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003776r 3               ; 		.byte "sty.z"
003776r 3               
003776r 3               ; nt_asm_sty_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_stz
003776r 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003776r 3               ; 		.byte "sty.zx"
003776r 3               
003776r 3               ; nt_asm_stz:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_stz_x
003776r 3               ; 		.word xt_asm_stz, z_asm_stz
003776r 3               ; 		.byte "stz"
003776r 3               
003776r 3               ; nt_asm_stz_x:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_stz_z
003776r 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003776r 3               ; 		.byte "stz.x"
003776r 3               
003776r 3               ; nt_asm_stz_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_stz_zx
003776r 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003776r 3               ; 		.byte "stz.z"
003776r 3               
003776r 3               ; nt_asm_stz_zx:
003776r 3               ; 		.byte 6, IM
003776r 3               ;                 .word nt_asm_tax
003776r 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003776r 3               ; 		.byte "stz.zx"
003776r 3               
003776r 3               ; nt_asm_tax:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_tay
003776r 3               ; 		.word xt_asm_tax, z_asm_tax
003776r 3               ; 		.byte "tax"
003776r 3               
003776r 3               ; nt_asm_tay:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_trb
003776r 3               ; 		.word xt_asm_tay, z_asm_tay
003776r 3               ; 		.byte "tay"
003776r 3               
003776r 3               ; nt_asm_trb:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_trb_z
003776r 3               ; 		.word xt_asm_trb, z_asm_trb
003776r 3               ; 		.byte "trb"
003776r 3               
003776r 3               ; nt_asm_trb_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_tsb
003776r 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003776r 3               ; 		.byte "trb.z"
003776r 3               
003776r 3               ; nt_asm_tsb:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_tsb_z
003776r 3               ; 		.word xt_asm_tsb, z_asm_tsb
003776r 3               ; 		.byte "tsb"
003776r 3               
003776r 3               ; nt_asm_tsb_z:
003776r 3               ; 		.byte 5, IM
003776r 3               ;                 .word nt_asm_tsx
003776r 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003776r 3               ; 		.byte "tsb.z"
003776r 3               
003776r 3               ; nt_asm_tsx:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_txa
003776r 3               ; 		.word xt_asm_tsx, z_asm_tsx
003776r 3               ; 		.byte "tsx"
003776r 3               
003776r 3               ; nt_asm_txa:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_txs
003776r 3               ; 		.word xt_asm_txa, z_asm_txa
003776r 3               ; 		.byte "txa"
003776r 3               
003776r 3               ; nt_asm_txs:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_tya
003776r 3               ; 		.word xt_asm_txs, z_asm_txs
003776r 3               ; 		.byte "txs"
003776r 3               
003776r 3               ; nt_asm_tya:
003776r 3               ; 		.byte 3, IM
003776r 3               ;                 .word nt_asm_arrow
003776r 3               ; 		.word xt_asm_tya, z_asm_tya
003776r 3               ; 		.byte "tya"
003776r 3               
003776r 3               ; ; Assembler pseudo-instructions, directives and macros
003776r 3               
003776r 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003776r 3               ;                 .byte 3, IM
003776r 3               ;                 .word nt_asm_back_jump
003776r 3               ;                 .word xt_asm_arrow, z_asm_arrow
003776r 3               ;                 .byte "-->"
003776r 3               
003776r 3               
003776r 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003776r 3               ;                 .byte 2, IM
003776r 3               ;                 .word nt_asm_back_branch
003776r 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003776r 3               ;                 .byte "<j"
003776r 3               
003776r 3               ; nt_asm_back_branch:
003776r 3               ;                 .byte 2, IM
003776r 3               ;                 .word nt_asm_push_a
003776r 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003776r 3               ;                 .byte "<b"
003776r 3               
003776r 3               ; nt_asm_push_a:
003776r 3               ;                 .byte 6, IM
003776r 3               ;                 .word 0000
003776r 3               ;                 .word xt_asm_push_a, z_asm_push_a
003776r 3               ;                 .byte "push-a"
003776r 3               
003776r 3               
003776r 3               
003776r 3               ; END of ASSEMBLER-WORDLIST
003776r 3               
003776r 3               ; END
003776r 3               
003776r 2                   .include "strings.s"          ; Headers of native words
003776r 3               ; List of Strings for Tali Forth 2
003776r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003776r 3               ; First version: 01. Apr 2016 (for Liara Forth)
003776r 3               ; This version: 28. Dec 2018
003776r 3               
003776r 3               ; This file is included by taliforth.asm
003776r 3               
003776r 3               ; ## GENERAL STRINGS
003776r 3               
003776r 3               ; All general strings must be zero-terminated, names start with "s_",
003776r 3               ; aliases with "str_"
003776r 3               
003776r 3               str_ok =              0
003776r 3               str_compile =         1
003776r 3               str_redefined =       2
003776r 3               str_wid_forth =       3
003776r 3               str_abc_lower =       4
003776r 3               str_abc_upper =       5
003776r 3               str_wid_editor =      6
003776r 3               str_wid_assembler =   7
003776r 3               str_wid_root =        8
003776r 3               str_see_flags =       9
003776r 3               str_see_nt =         10
003776r 3               str_see_xt =         11
003776r 3               str_see_size =       12
003776r 3               
003776r 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003776r 3               ; to tables as error and string numbers.
003776r 3               string_table:
003776r 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
00377Ar 3  rr rr rr rr  
00377Er 3  rr rr        
003780r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003784r 3  rr rr rr rr  
003788r 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
00378Cr 3  rr rr rr rr  
003790r 3               
003790r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
003794r 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
003798r 3  70 69 6C 65  
00379Cr 3  64 00        
00379Er 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
0037A2r 3  66 69 6E 65  
0037A6r 3  64 20 00     
0037A9r 3               
0037A9r 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
0037ADr 3  34 35 36 37  
0037B1r 3  38 39 61 62  
0037CDr 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
0037D1r 3  34 35 36 37  
0037D5r 3  38 39 41 42  
0037F1r 3               
0037F1r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
0037F5r 3  6D 62 6C 65  
0037F9r 3  72 20 00     
0037FCr 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
003800r 3  6F 72 20 00  
003804r 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
003808r 3  68 20 00     
00380Br 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
00380Fr 3  20 00        
003811r 3               
003811r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
003815r 3  73 20 28 43  
003819r 3  4F 20 41 4E  
00382Dr 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
003831r 3  00           
003832r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
003836r 3  00           
003837r 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
00383Br 3  20 28 64 65  
00383Fr 3  63 69 6D 61  
003848r 3               
003848r 3               
003848r 3               ; ## ERROR STRINGS
003848r 3               
003848r 3               ; All error strings must be zero-terminated, all names start with "es_",
003848r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
003848r 3               ; as well
003848r 3               
003848r 3               err_allot =        0
003848r 3               err_badsource =    1
003848r 3               err_compileonly =  2
003848r 3               err_defer =        3
003848r 3               err_divzero =      4
003848r 3               err_noname =       5
003848r 3               err_refill =       6
003848r 3               err_state =        7
003848r 3               err_syntax =       8
003848r 3               err_underflow =    9
003848r 3               err_negallot =     10
003848r 3               err_wordlist =     11
003848r 3               err_blockwords =   12
003848r 3               
003848r 3               error_table:
003848r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
00384Cr 3  rr rr rr rr  
003850r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
003854r 3  rr rr rr rr  
003858r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
00385Cr 3  rr rr rr rr  
003860r 3  rr rr                .word es_blockwords                                    ; 12
003862r 3               
003862r 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
003866r 3  54 20 75 73  
00386Ar 3  69 6E 67 20  
003883r 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
003887r 3  67 61 6C 20  
00388Br 3  53 4F 55 52  
0038A3r 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
0038A7r 3  72 70 72 65  
0038ABr 3  74 69 6E 67  
0038C4r 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
0038C8r 3  52 65 64 20  
0038CCr 3  77 6F 72 64  
0038E1r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
0038E5r 3  73 69 6F 6E  
0038E9r 3  20 62 79 20  
0038F2r 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
0038F6r 3  69 6E 67 20  
0038FAr 3  66 61 69 6C  
003902r 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
003906r 3  20 63 6F 75  
00390Ar 3  6C 64 20 6E  
003930r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
003934r 3  61 64 79 20  
003938r 3  69 6E 20 63  
003948r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
00394Cr 3  66 69 6E 65  
003950r 3  64 20 77 6F  
003957r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
00395Br 3  6B 20 75 6E  
00395Fr 3  64 65 72 66  
003967r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
00396Br 3  6D 65 6D 6F  
00396Fr 3  72 79 20 66  
003983r 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
003987r 3  6F 72 64 6C  
00398Br 3  69 73 74 73  
00399Ar 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
00399Er 3  73 65 20 61  
0039A2r 3  73 73 69 67  
0039D9r 3               
0039D9r 3               ; ## ENVIRONMENT STRINGS
0039D9r 3               
0039D9r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
0039D9r 3               ; Length byte first, then the string itself that is not rpt. not
0039D9r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
0039D9r 3               ; "envs_".
0039D9r 3               
0039D9r 3               ; These return a single-cell number
0039D9r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
0039DDr 3  55 4E 54 45  
0039E1r 3  44 2D 53 54  
0039E9r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
0039EDr 3  4C 44        
0039EFr 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
0039F3r 3  44           
0039F4r 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
0039F8r 3  52 45 53 53  
0039FCr 3  2D 55 4E 49  
003A06r 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
003A0Ar 3  4F 52 45 44  
003A0Er 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
003A12r 3  2D 43 48 41  
003A16r 3  52           
003A17r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
003A1Br 3  2D 4E        
003A1Dr 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
003A21r 3  2D 55        
003A23r 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
003A27r 3  55 52 4E 2D  
003A2Br 3  53 54 41 43  
003A36r 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
003A3Ar 3  43 4B 2D 43  
003A3Er 3  45 4C 4C 53  
003A42r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
003A46r 3  44 4C 49 53  
003A4Ar 3  54 53        
003A4Cr 3               
003A4Cr 3               ; These return a double-cell number
003A4Cr 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
003A50r 3  2D 44        
003A52r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
003A56r 3  2D 55 44     
003A59r 3               
003A59r 3               ; END
003A59r 3               
003A59r 2               
003A59r 2               ; High-level Forth words, see forth_code/README.md
003A59r 2               forth_words_start:
003A59r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
003A5Dr 2  2E 28 20 52  
003A61r 2  65 61 64 79  
003A6Br 2               forth_words_end:
003A6Br 2               
003A6Br 2               ; User-defined Forth words, see forth_code/README.md
003A6Br 2               user_words_start:
003A6Br 2  20 32 30 20  .incbin "forth_code/user_words.asc"
003A6Fr 2  63 6F 6E 73  
003A73r 2  74 61 6E 74  
004136r 2               user_words_end:
004136r 2               
004136r 2               
004136r 2               ; =====================================================================
004136r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
004136r 2               
004136r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
004136r 2               ; at compile time so they are available at run time. Words that use this
004136r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
004136r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
004136r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
004136r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
004136r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
004136r 2               ; Bowie.
004136r 2               
004136r 2               ;               ldy #>addr      ; MSB   ; "Young"
004136r 2               ;               lda #<addr      ; LSB   ; "Americans"
004136r 2               ;               jsr cmpl_subroutine
004136r 2               
004136r 2               ; Also, we keep a routine here to compile a single byte passed through A.
004136r 2               
004136r 2               cmpl_subroutine:
004136r 2                   ; This is the entry point to compile JSR <ADDR>
004136r 2  48               pha             ; save LSB of address
004137r 2  A9 20            lda #$20        ; load opcode for JSR
004139r 2  80 03            bra cmpl_common
00413Br 2               cmpl_jump:
00413Br 2                   ; This is the entry point to compile JMP <ADDR>
00413Br 2  48               pha             ; save LSB of address
00413Cr 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
00413Er 2               cmpl_common:
00413Er 2                   ; At this point, A contains the opcode to be compiled,
00413Er 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
00413Er 2                   ; the address is in Y
00413Er 2  20 rr rr         jsr cmpl_a      ; compile opcode
004141r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
004142r 2               cmpl_word:
004142r 2                   ; This is the entry point to compile a word (little-endian)
004142r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
004145r 2  98               tya             ; fall thru for MSB
004146r 2               cmpl_a:
004146r 2                   ; This is the entry point to compile a single byte which
004146r 2                   ; is passed in A. The built-in assembler assumes that this
004146r 2                   ; routine does not modify Y.
004146r 2  92 rr            sta (cp)
004148r 2  E6 rr            inc cp
00414Ar 2  D0 02            bne _done
00414Cr 2  E6 rr            inc cp+1
00414Er 2               _done:
00414Er 2  60               rts
00414Fr 2               
00414Fr 2               
00414Fr 2               
00414Fr 2               ; =====================================================================
00414Fr 2               ; CODE FIELD ROUTINES
00414Fr 2               
00414Fr 2               doconst:
00414Fr 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
00414Fr 2               ; the Data Field onto the Data Stack
00414Fr 2               ; """
00414Fr 2  CA               dex             ; make room for constant
004150r 2  CA               dex
004151r 2               
004151r 2                   ; The value we need is stored in the two bytes after the
004151r 2                   ; JSR return address, which in turn is what is on top of
004151r 2                   ; the Return Stack
004151r 2  68               pla             ; LSB of return address
004152r 2  85 rr            sta tmp1
004154r 2  68               pla             ; MSB of return address
004155r 2  85 rr            sta tmp1+1
004157r 2               
004157r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
004157r 2                   ; the return address on the 65c02
004157r 2  A0 01            ldy #1
004159r 2  B1 rr            lda (tmp1),y
00415Br 2  95 00            sta 0,x
00415Dr 2  C8               iny
00415Er 2  B1 rr            lda (tmp1),y
004160r 2  95 01            sta 1,x
004162r 2               
004162r 2                   ; This takes us back to the original caller, not the
004162r 2                   ; DOCONST caller
004162r 2  60               rts
004163r 2               
004163r 2               
004163r 2               dodefer:
004163r 2               ; """Execute a DEFER statement at runtime: Execute the address we
004163r 2               ; find after the caller in the Data Field
004163r 2               ; """
004163r 2                   ; The xt we need is stored in the two bytes after the JSR
004163r 2                   ; return address, which is what is on top of the Return
004163r 2                   ; Stack. So all we have to do is replace our return jump
004163r 2                   ; with what we find there
004163r 2  68               pla             ; LSB
004164r 2  85 rr            sta tmp1
004166r 2  68               pla             ; MSB
004167r 2  85 rr            sta tmp1+1
004169r 2               
004169r 2  A0 01            ldy #1
00416Br 2  B1 rr            lda (tmp1),y
00416Dr 2  85 rr            sta tmp2
00416Fr 2  C8               iny
004170r 2  B1 rr            lda (tmp1),y
004172r 2  85 rr            sta tmp2+1
004174r 2               
004174r 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
004177r 2               
004177r 2               defer_error:
004177r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
004177r 2  A9 03            lda #err_defer
004179r 2  4C rr rr         jmp error
00417Cr 2               
00417Cr 2               dodoes:
00417Cr 2               ; """Execute the runtime portion of DOES>. See DOES> and
00417Cr 2               ; docs/create-does.txt for details and
00417Cr 2               ; http://www.bradrodriguez.com/papers/moving3.htm
00417Cr 2               ; """
00417Cr 2                   ; Assumes the address of the CFA of the original defining word
00417Cr 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
00417Cr 2                   ; for a later jump, adding one byte because of the way the
00417Cr 2                   ; 6502 works
00417Cr 2  7A               ply             ; LSB
00417Dr 2  68               pla             ; MSB
00417Er 2  C8               iny
00417Fr 2  D0 01            bne @1
004181r 2  1A               inc
004182r 2               @1:
004182r 2  84 rr            sty tmp2
004184r 2  85 rr            sta tmp2+1
004186r 2               
004186r 2                   ; Next on the Return Stack should be the address of the PFA of
004186r 2                   ; the calling defined word (say, the name of whatever constant we
004186r 2                   ; just defined). Move this to the Data Stack, again adding one.
004186r 2  CA               dex
004187r 2  CA               dex
004188r 2               
004188r 2  7A               ply
004189r 2  68               pla
00418Ar 2  C8               iny
00418Br 2  D0 01            bne @2
00418Dr 2  1A               inc
00418Er 2               @2:
00418Er 2  94 00            sty 0,x         ; LSB
004190r 2  95 01            sta 1,x         ; MSB
004192r 2               
004192r 2                   ; This leaves the return address from the original main routine
004192r 2                   ; on top of the Return Stack. We leave that untouched and jump
004192r 2                   ; to the special code of the defining word. It's RTS instruction
004192r 2                   ; will take us back to the main routine
004192r 2  6C rr rr         jmp (tmp2)
004195r 2               
004195r 2               
004195r 2               dovar:
004195r 2               ; """Execute a variable: Push the address of the first bytes of
004195r 2               ; the Data Field onto the stack. This is called with JSR so we
004195r 2               ; can pick up the address of the calling variable off the 65c02's
004195r 2               ; stack. The final RTS takes us to the original caller of the
004195r 2               ; routine that itself called DOVAR. This is the default
004195r 2               ; routine installed with CREATE.
004195r 2               ; """
004195r 2                   ; Pull the return address off the machine's stack, adding
004195r 2                   ; one because of the way the 65c02 handles subroutines
004195r 2  7A               ply             ; LSB
004196r 2  68               pla             ; MSB
004197r 2  C8               iny
004198r 2  D0 01            bne @1
00419Ar 2  1A               inc
00419Br 2               @1:
00419Br 2  CA               dex
00419Cr 2  CA               dex
00419Dr 2               
00419Dr 2  95 01            sta 1,x
00419Fr 2  98               tya
0041A0r 2  95 00            sta 0,x
0041A2r 2               
0041A2r 2  60               rts
0041A3r 2               
0041A3r 2               ; =====================================================================
0041A3r 2               ; LOW LEVEL HELPER FUNCTIONS
0041A3r 2               
0041A3r 2               byte_to_ascii:
0041A3r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
0041A3r 2               .scope
0041A3r 2  48               pha
0041A4r 2  4A               lsr             ; convert high nibble first
0041A5r 2  4A               lsr
0041A6r 2  4A               lsr
0041A7r 2  4A               lsr
0041A8r 2  20 rr rr         jsr _nibble_to_ascii
0041ABr 2  68               pla
0041ACr 2               
0041ACr 2                   ; fall through to _nibble_to_ascii
0041ACr 2               
0041ACr 2               _nibble_to_ascii:
0041ACr 2               ; """Private helper function for byte_to_ascii: Print lower nibble
0041ACr 2               ; of A and and EMIT it. This does the actual work.
0041ACr 2               ; """
0041ACr 2  29 0F            and #$0F
0041AEr 2  09 30            ora #'0'
0041B0r 2  C9 3A            cmp #$3A        ; '9+1
0041B2r 2  90 02            bcc @1
0041B4r 2  69 06            adc #$06
0041B6r 2               
0041B6r 2  4C rr rr     @1:               jmp emit_a
0041B9r 2               
0041B9r 2  60               rts
0041BAr 2               .endscope
0041BAr 2               
0041BAr 2               compare_16bit:
0041BAr 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
0041BAr 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
0041BAr 2               ; also http://www.6502.org/tutorials/compare_beyond.html
0041BAr 2               ; For signed numbers, Z signals equality and N which number is larger:
0041BAr 2               ;       if TOS = NOS: Z=1 and N=0
0041BAr 2               ;       if TOS > NOS: Z=0 and N=0
0041BAr 2               ;       if TOS < NOS: Z=0 and N=1
0041BAr 2               ; For unsigned numbers, Z signals equality and C which number is larger:
0041BAr 2               ;       if TOS = NOS: Z=1 and N=0
0041BAr 2               ;       if TOS > NOS: Z=0 and C=1
0041BAr 2               ;       if TOS < NOS: Z=0 and C=0
0041BAr 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
0041BAr 2               ;                               WORD2 (SUBTRAHEND) is NOS
0041BAr 2               ; """
0041BAr 2               .scope
0041BAr 2                   ; Compare LSB first to set the carry flag
0041BAr 2  B5 00            lda 0,x                 ; LSB of TOS
0041BCr 2  D5 02            cmp 2,x                 ; LSB of NOS
0041BEr 2  F0 0A            beq _equal
0041C0r 2               
0041C0r 2                   ; LSBs are not equal, compare MSB
0041C0r 2  B5 01            lda 1,x                 ; MSB of TOS
0041C2r 2  F5 03            sbc 3,x                 ; MSB of NOS
0041C4r 2  09 01            ora #1                  ; Make zero flag 0 because not equal
0041C6r 2  70 08            bvs _overflow
0041C8r 2  80 08            bra _not_equal
0041CAr 2               _equal:
0041CAr 2                   ; Low bytes are equal, so we compare high bytes
0041CAr 2  B5 01            lda 1,x                 ; MSB of TOS
0041CCr 2  F5 03            sbc 3,x                 ; MSB of NOS
0041CEr 2  50 04            bvc _done
0041D0r 2               _overflow:
0041D0r 2                   ; Handle overflow because we use signed numbers
0041D0r 2  49 80            eor #$80                ; complement negative flag
0041D2r 2               _not_equal:
0041D2r 2  09 01            ora #1                  ; if overflow, we can't be eqal
0041D4r 2               _done:
0041D4r 2  60               rts
0041D5r 2               .endscope
0041D5r 2               
0041D5r 2               current_to_dp:
0041D5r 2               ; """Look up the current (compilation) dictionary pointer
0041D5r 2               ; in the wordlist set and put it into the dp zero-page
0041D5r 2               ; variable. Uses A and Y.
0041D5r 2               ; """
0041D5r 2                   ; Determine which wordlist is current
0041D5r 2  A0 04            ldy #current_offset
0041D7r 2  B1 rr            lda (up),y      ; current is a byte variable
0041D9r 2  0A               asl             ; turn it into an offset (in cells)
0041DAr 2               
0041DAr 2                   ; Get the dictionary pointer for that wordlist.
0041DAr 2  18               clc
0041DBr 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0041DDr 2  A8               tay
0041DEr 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
0041E0r 2  85 rr            sta dp
0041E2r 2  C8               iny
0041E3r 2  B1 rr            lda (up),y
0041E5r 2  85 rr            sta dp+1
0041E7r 2               
0041E7r 2  60               rts
0041E8r 2               
0041E8r 2               
0041E8r 2               dp_to_current:
0041E8r 2               ; """Look up which wordlist is current and update its pointer
0041E8r 2               ; with the value in dp. Uses A and Y.
0041E8r 2               ; """
0041E8r 2                   ; Determine which wordlist is current
0041E8r 2  A0 04            ldy #current_offset
0041EAr 2  B1 rr            lda (up),y      ; current is a byte variable
0041ECr 2  0A               asl             ; turn it into an offset (in cells)
0041EDr 2               
0041EDr 2                   ; Get the dictionary pointer for that wordlist.
0041EDr 2  18               clc
0041EEr 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0041F0r 2  A8               tay
0041F1r 2  A5 rr            lda dp
0041F3r 2  91 rr            sta (up),y              ; get the dp for that wordlist.
0041F5r 2  C8               iny
0041F6r 2  A5 rr            lda dp+1
0041F8r 2  91 rr            sta (up),y
0041FAr 2               
0041FAr 2  60               rts
0041FBr 2               
0041FBr 2               interpret:
0041FBr 2               .scope
0041FBr 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
0041FBr 2               ; Process one line only. Assumes that the address of name is in
0041FBr 2               ; cib and the length of the whole input line string is in ciblen
0041FBr 2               ; """
0041FBr 2                   ; Normally we would use PARSE here with the SPACE character as
0041FBr 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
0041FBr 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
0041FBr 2                   ; delimiters per default and skips any leading spaces, which
0041FBr 2                   ; PARSE doesn't
0041FBr 2               _loop:
0041FBr 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
0041FEr 2               
0041FEr 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
0041FEr 2                   ; in the line and we need to go get a new line
0041FEr 2  B5 00            lda 0,x
004200r 2  15 01            ora 1,x
004202r 2  F0 70            beq _line_done
004204r 2               
004204r 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
004204r 2                   ; make a copy of the address in case it isn't a word we know and
004204r 2                   ; we have to go see if it is a number
004204r 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
004207r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
00420Ar 2               
00420Ar 2                   ; A zero signals that we didn't find a word in the Dictionary
00420Ar 2  B5 00            lda 0,x
00420Cr 2  15 01            ora 1,x
00420Er 2  D0 28            bne _got_name_token
004210r 2               
004210r 2                   ; We didn't get any nt we know of, so let's see if this is
004210r 2                   ; a number.
004210r 2  E8               inx                     ; ( addr u 0 -- addr u )
004211r 2  E8               inx
004212r 2               
004212r 2                   ; If the number conversion doesn't work, NUMBER will do the
004212r 2                   ; complaining for us
004212r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
004215r 2               
004215r 2                   ; Otherweise, if we're interpreting, we're done
004215r 2  A5 rr            lda state
004217r 2  F0 E2            beq _loop
004219r 2               
004219r 2                   ; We're compiling, so there is a bit more work.  Check
004219r 2                   ; status bit 5 to see if it's a single or double-cell
004219r 2                   ; number.
004219r 2  A9 20            lda #$20
00421Br 2  24 rr            bit status
00421Dr 2  F0 0D            beq _single_number
00421Fr 2               
00421Fr 2                   ; It's a double cell number.  If we swap the
00421Fr 2                   ; upper and lower half, we can use the literal_runtime twice
00421Fr 2                   ; to compile it into the dictionary.
00421Fr 2  20 rr rr         jsr xt_swap
004222r 2  A0 rr            ldy #>literal_runtime
004224r 2  A9 rr            lda #<literal_runtime
004226r 2  20 rr rr         jsr cmpl_subroutine
004229r 2               
004229r 2                   ; compile our number
004229r 2  20 rr rr         jsr xt_comma
00422Cr 2               
00422Cr 2                   ; Fall into _single_number to process the other half.
00422Cr 2               _single_number:
00422Cr 2  A0 rr            ldy #>literal_runtime
00422Er 2  A9 rr            lda #<literal_runtime
004230r 2  20 rr rr         jsr cmpl_subroutine
004233r 2               
004233r 2                   ; compile our number
004233r 2  20 rr rr         jsr xt_comma
004236r 2               
004236r 2                   ; That was so much fun, let's do it again!
004236r 2  80 C3            bra _loop
004238r 2               
004238r 2               _got_name_token:
004238r 2                   ; We have a known word's nt TOS. We're going to need its xt
004238r 2                   ; though, which is four bytes father down.
004238r 2               
004238r 2                   ; We arrive here with ( addr u nt ), so we NIP twice
004238r 2  B5 00            lda 0,x
00423Ar 2  95 04            sta 4,x
00423Cr 2  B5 01            lda 1,x
00423Er 2  95 05            sta 5,x
004240r 2               
004240r 2  E8               inx
004241r 2  E8               inx
004242r 2  E8               inx
004243r 2  E8               inx                     ; ( nt )
004244r 2               
004244r 2                   ; Save a version of nt for error handling and compilation stuff
004244r 2  B5 00            lda 0,x
004246r 2  85 rr            sta tmpbranch
004248r 2  B5 01            lda 1,x
00424Ar 2  85 rr            sta tmpbranch+1
00424Cr 2               
00424Cr 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
00424Fr 2               
00424Fr 2                   ; See if we are in interpret or compile mode, 0 is interpret
00424Fr 2  A5 rr            lda state
004251r 2  D0 13            bne _compile
004253r 2               
004253r 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
004253r 2                   ; though, see if this isn't a compile-only word, which would be
004253r 2                   ; illegal. The status byte is the second one of the header.
004253r 2  A0 01            ldy #1
004255r 2  B1 rr            lda (tmpbranch),y
004257r 2  29 01            and #CO                 ; mask everything but Compile Only bit
004259r 2  F0 05            beq _interpret
00425Br 2               
00425Br 2  A9 02            lda #err_compileonly
00425Dr 2  4C rr rr         jmp error
004260r 2               
004260r 2               _interpret:
004260r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
004260r 2                   ; the RTS of the word we're executing will bring us back here,
004260r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
004260r 2                   ; xt directly, we have to fool around with the Return Stack
004260r 2                   ; instead, which is actually slightly slower
004260r 2  20 rr rr         jsr xt_execute
004263r 2               
004263r 2                   ; That's quite enough for this word, let's get the next one
004263r 2  4C rr rr         jmp _loop
004266r 2               
004266r 2               _compile:
004266r 2                   ; We're compiling! However, we need to see if this is an
004266r 2                   ; IMMEDIATE word, which would mean we execute it right now even
004266r 2                   ; during compilation mode. Fortunately, we saved the nt so life
004266r 2                   ; is easier. The flags are in the second byte of the header
004266r 2  A0 01            ldy #1
004268r 2  B1 rr            lda (tmpbranch),y
00426Ar 2  29 04            and #IM                 ; Mask all but IM bit
00426Cr 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
00426Er 2               
00426Er 2                   ; Compile the xt into the Dictionary with COMPILE,
00426Er 2  20 rr rr         jsr xt_compile_comma
004271r 2  4C rr rr         jmp _loop
004274r 2               
004274r 2               _line_done:
004274r 2                   ; drop stuff from PARSE_NAME
004274r 2  E8               inx
004275r 2  E8               inx
004276r 2  E8               inx
004277r 2  E8               inx
004278r 2               
004278r 2  60               rts
004279r 2               .endscope
004279r 2               
004279r 2               
004279r 2               is_printable:
004279r 2               .scope
004279r 2               ; """Given a character in A, check if it is a printable ASCII
004279r 2               ; character in the range from $20 to $7E inclusive. Returns the
004279r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
004279r 2               ; is printable. Keeps A. See
004279r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
004279r 2               ; discussion of various ways to do this
004279r 2  C9 20            cmp #AscSP              ; $20
00427Br 2  90 08            bcc _done
00427Dr 2  C9 7F            cmp #'~' + 1             ; $7E
00427Fr 2  B0 03            bcs _failed
004281r 2               
004281r 2  38               sec
004282r 2  80 01            bra _done
004284r 2               _failed:
004284r 2  18               clc
004285r 2               _done:
004285r 2  60               rts
004286r 2               .endscope
004286r 2               
004286r 2               
004286r 2               is_whitespace:
004286r 2               .scope
004286r 2               ; """Given a character in A, check if it is a whitespace
004286r 2               ; character, that is, an ASCII value from 0 to 32 (where
004286r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
004286r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
004286r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
004286r 2               ; a discussion of the uses. Does not change A or Y.
004286r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
004288r 2  90 08            bcc _done
00428Ar 2               
00428Ar 2  C9 21            cmp #AscSP+1
00428Cr 2  B0 03            bcs _failed
00428Er 2               
00428Er 2  38               sec
00428Fr 2  80 01            bra _done
004291r 2               _failed:
004291r 2  18               clc
004292r 2               _done:
004292r 2  60               rts
004293r 2               .endscope
004293r 2               
004293r 2               
004293r 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
004293r 2               ; required for the word. This routine flows into the generic error handling
004293r 2               ; code
004293r 2               underflow_1:
004293r 2               ; """Make sure we have at least one cell on the Data Stack"""
004293r 2  E0 rr            cpx #dsp0-1
004295r 2  10 10            bpl underflow_error
004297r 2  60               rts
004298r 2               underflow_2:
004298r 2               ; """Make sure we have at least two cells on the Data Stack"""
004298r 2  E0 rr            cpx #dsp0-3
00429Ar 2  10 0B            bpl underflow_error
00429Cr 2  60               rts
00429Dr 2               underflow_3:
00429Dr 2               ; """Make sure we have at least three cells on the Data Stack"""
00429Dr 2  E0 rr            cpx #dsp0-5
00429Fr 2  10 06            bpl underflow_error
0042A1r 2  60               rts
0042A2r 2               underflow_4:
0042A2r 2               ; """Make sure we have at least four cells on the Data Stack"""
0042A2r 2  E0 rr            cpx #dsp0-7
0042A4r 2  10 01            bpl underflow_error
0042A6r 2  60               rts
0042A7r 2               
0042A7r 2               underflow_error:
0042A7r 2                   ; Entry for COLD/ABORT/QUIT
0042A7r 2  A9 09            lda #err_underflow      ; fall through to error
0042A9r 2               
0042A9r 2               error:
0042A9r 2               ; """Given the error number in a, print the associated error string and
0042A9r 2               ; call abort. Uses tmp3.
0042A9r 2               ; """
0042A9r 2  0A               asl
0042AAr 2  A8               tay
0042ABr 2  B9 rr rr         lda error_table,y
0042AEr 2  85 rr            sta tmp3                ; LSB
0042B0r 2  C8               iny
0042B1r 2  B9 rr rr         lda error_table,y
0042B4r 2  85 rr            sta tmp3+1              ; MSB
0042B6r 2               
0042B6r 2  20 rr rr         jsr print_common
0042B9r 2  20 rr rr         jsr xt_cr
0042BCr 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
0042BFr 2               
0042BFr 2               
0042BFr 2               ; =====================================================================
0042BFr 2               ; PRINTING ROUTINES
0042BFr 2               
0042BFr 2               ; We distinguish two types of print calls, both of which take the string number
0042BFr 2               ; (see strings.asm) in A:
0042BFr 2               
0042BFr 2               ;       print_string       - with a line feed
0042BFr 2               ;       print_string_no_lf - without a line feed
0042BFr 2               
0042BFr 2               ; In addition, print_common provides a lower-level alternative for error
0042BFr 2               ; handling and anything else that provides the address of the
0042BFr 2               ; zero-terminated string directly in tmp3. All of those routines assume that
0042BFr 2               ; printing should be more concerned with size than speed, because anything to
0042BFr 2               ; do with humans reading text is going to be slow.
0042BFr 2               
0042BFr 2               print_string_no_lf:
0042BFr 2               ; """Given the number of a zero-terminated string in A, print it to the
0042BFr 2               ; current output without adding a LF. Uses Y and tmp3 by falling
0042BFr 2               ; through to print_common
0042BFr 2               ; """
0042BFr 2                   ; Get the entry from the string table
0042BFr 2  0A               asl
0042C0r 2  A8               tay
0042C1r 2  B9 rr rr         lda string_table,y
0042C4r 2  85 rr            sta tmp3                ; LSB
0042C6r 2  C8               iny
0042C7r 2  B9 rr rr         lda string_table,y
0042CAr 2  85 rr            sta tmp3+1              ; MSB
0042CCr 2               
0042CCr 2                   ; fall through to print_common
0042CCr 2               print_common:
0042CCr 2               ; """Common print routine used by both the print functions and
0042CCr 2               ; the error printing routine. Assumes string address is in tmp3. Uses
0042CCr 2               ; Y.
0042CCr 2               ; """
0042CCr 2               .scope
0042CCr 2  A0 00            ldy #0
0042CEr 2               _loop:
0042CEr 2  B1 rr            lda (tmp3),y
0042D0r 2  F0 06            beq _done               ; strings are zero-terminated
0042D2r 2               
0042D2r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
0042D5r 2  C8               iny
0042D6r 2  80 F6            bra _loop
0042D8r 2               _done:
0042D8r 2  60               rts
0042D9r 2               .endscope
0042D9r 2               
0042D9r 2               print_string:
0042D9r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
0042D9r 2               ; We do not check to see if the index is out of range. Uses tmp3.
0042D9r 2               ; """
0042D9r 2  20 rr rr         jsr print_string_no_lf
0042DCr 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
0042DFr 2               
0042DFr 2               
0042DFr 2               print_u:
0042DFr 2               ; """basic printing routine used by higher-level constructs,
0042DFr 2               ; the equivalent of the forth word  0 <# #s #> type  which is
0042DFr 2               ; basically u. without the space at the end. used for various
0042DFr 2               ; outputs
0042DFr 2               ; """
0042DFr 2  20 rr rr         jsr xt_zero                     ; 0
0042E2r 2  20 rr rr         jsr xt_less_number_sign         ; <#
0042E5r 2  20 rr rr         jsr xt_number_sign_s            ; #S
0042E8r 2  20 rr rr         jsr xt_number_sign_greater      ; #>
0042EBr 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
0042EEr 2               
0042EEr 2               ; END
0042EEr 2               
0042EEr 1               
0042EEr 1               .segment "DATA"
0042EEr 1               .include "../../utils.s"
0042EEr 2               ;  print a 16-bit integer
0042EEr 2               ; lsb in x, msb in a
0042EEr 2               
0042EEr 2               .segment "ZEROPAGE": zeropage
00004Cr 2  xx xx        util_tmp: .res 2
00004Er 2               
00004Er 2               .segment "BSS"
000902r 2  xx xx        tmp_var: .res 2
000904r 2               
000904r 2               .segment "DATA"
0042EEr 2               
0042EEr 2               print16:
0042EEr 2  8D rr rr         sta acc+1
0042F1r 2  8E rr rr         stx acc
0042F4r 2               
0042F4r 2  A2 04            ldx #4
0042F6r 2               nextdig:
0042F6r 2  20 rr rr         jsr div
0042F9r 2  AD rr rr         lda ext
0042FCr 2  9D rr rr         sta num,x
0042FFr 2  CA               dex
004300r 2  10 F4            bpl nextdig
004302r 2               
004302r 2               firstdig:
004302r 2  E8               inx
004303r 2  E0 05            cpx #5
004305r 2  F0 17            beq print0
004307r 2  BD rr rr         lda num,x
00430Ar 2  F0 F6            beq firstdig
00430Cr 2               
00430Cr 2               ptnxtdig:
00430Cr 2  18               clc
00430Dr 2  69 30            adc #'0'
00430Fr 2  20 rr rr         jsr kernel_putc
004312r 2  E8               inx
004313r 2  E0 05            cpx #5
004315r 2  F0 06            beq pt16done
004317r 2  BD rr rr         lda num,x
00431Ar 2  4C rr rr         jmp ptnxtdig
00431Dr 2               
00431Dr 2               pt16done:
00431Dr 2  60               rts
00431Er 2               
00431Er 2               print0:
00431Er 2  A9 30            lda #'0'
004320r 2  20 rr rr         jsr kernel_putc
004323r 2  60               rts
004324r 2               
004324r 2  00 00 00 00  num: .byte 0,0,0,0,0
004328r 2  00           
004329r 2               
004329r 2               ; 16/16-bit division, from the fridge
004329r 2               ; acc/aux -> acc, remainder in ext
004329r 2               div:
004329r 2  A9 00            lda #0
00432Br 2  8D rr rr         sta ext+1
00432Er 2  A0 10            ldy #$10
004330r 2               dloop:
004330r 2  0E rr rr         asl acc
004333r 2  2E rr rr         rol acc+1
004336r 2  2A               rol
004337r 2  2E rr rr         rol ext+1
00433Ar 2  48               pha
00433Br 2  CD rr rr         cmp aux
00433Er 2  AD rr rr         lda ext+1
004341r 2  ED rr rr         sbc aux+1
004344r 2  90 0B            bcc div2
004346r 2  8D rr rr         sta ext+1
004349r 2  68               pla
00434Ar 2  ED rr rr         sbc aux
00434Dr 2  48               pha
00434Er 2  EE rr rr         inc acc
004351r 2               div2:
004351r 2  68               pla
004352r 2  88               dey
004353r 2  D0 DB            bne dloop
004355r 2  8D rr rr         sta ext
004358r 2  60               rts
004359r 2               
004359r 2  00 00        acc: .word 0
00435Br 2  0A 00        aux: .word 10 ; constant
00435Dr 2  00 00        ext: .word 0
00435Fr 2               
00435Fr 2               
00435Fr 2               
00435Fr 2               calculate_free_mem:
00435Fr 2                   ; load dictionary address
00435Fr 2                   ; fill with $55 until ram_end
00435Fr 2                   ; read and check same
00435Fr 2                   ; fill again with zeroes
00435Fr 2               
00435Fr 2  A5 rr            lda up
004361r 2  85 rr            sta util_tmp
004363r 2  A5 rr            lda up + 1
004365r 2  85 rr            sta util_tmp + 1
004367r 2               
004367r 2  9C rr rr         stz tmp_var
00436Ar 2  9C rr rr         stz tmp_var + 1
00436Dr 2               
00436Dr 2  A0 00            ldy #0
00436Fr 2               @loop:
00436Fr 2  A9 55            lda #$55
004371r 2  91 rr            sta (util_tmp), y        ; store to mem address
004373r 2  D1 rr            cmp (util_tmp), y        ; compare to what is now there
004375r 2  D0 19            bne @exit               ; no equal, stop couting and exit
004377r 2  A9 00            lda #0                  ; zero the memory again
004379r 2  91 rr            sta (util_tmp), y
00437Br 2  EE rr rr         inc tmp_var
00437Er 2  D0 03            bne @incok
004380r 2  EE rr rr         inc tmp_var + 1
004383r 2               @incok:
004383r 2  C8               iny
004384r 2  D0 E9            bne @loop
004386r 2  A5 rr            lda util_tmp + 1
004388r 2  C9 80            cmp #>ram_end
00438Ar 2  B0 04            bcs @exit
00438Cr 2  E6 rr            inc util_tmp + 1
00438Er 2  80 DF            bra @loop
004390r 2               @exit:
004390r 2  60               rts
004391r 2               
004391r 2               
004391r 2               
004391r 2               print_message:
004391r 2  68           	pla					; get return address from stack
004392r 2  85 rr        	sta util_tmp
004394r 2  68           	pla
004395r 2  85 rr        	sta util_tmp + 1
004397r 2               
004397r 2  80 03        	bra @inc
004399r 2               @print:
004399r 2  20 rr rr     	jsr kernel_putc
00439Cr 2               
00439Cr 2               @inc:
00439Cr 2  E6 rr        	inc util_tmp
00439Er 2  D0 02        	bne @inced
0043A0r 2  E6 rr        	inc util_tmp + 1
0043A2r 2               @inced:
0043A2r 2  B2 rr        	lda (util_tmp)
0043A4r 2  D0 F3        	bne @print
0043A6r 2  A5 rr        	lda util_tmp + 1
0043A8r 2  48           	pha
0043A9r 2  A5 rr        	lda util_tmp
0043ABr 2  48           	pha
0043ACr 2               print_message_end:
0043ACr 2  60           	rts
0043ADr 2               
0043ADr 2               
0043ADr 2               print_zp_index_string:
0043ADr 2               @loop:
0043ADr 2  B1 rr            lda (util_tmp), y
0043AFr 2  F0 06            beq @exit
0043B1r 2  20 rr rr         jsr kernel_putc
0043B4r 2  C8               iny
0043B5r 2  D0 F6            bne @loop
0043B7r 2               @exit:
0043B7r 2  60               rts
0043B8r 2               
0043B8r 2               
0043B8r 2               output_ascii:
0043B8r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
0043B8r 2  48               pha
0043B9r 2  4A               lsr             ; convert high nibble first
0043BAr 2  4A               lsr
0043BBr 2  4A               lsr
0043BCr 2  4A               lsr
0043BDr 2  20 rr rr         jsr output_ascii_nibble_to_ascii
0043C0r 2  68               pla
0043C1r 2               
0043C1r 2                   ; fall through to _nibble_to_ascii
0043C1r 2               
0043C1r 2               output_ascii_nibble_to_ascii:
0043C1r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
0043C1r 2               ; of A and and EMIT it. This does the actual work.
0043C1r 2               ; """
0043C1r 2  29 0F            and #$0F
0043C3r 2  09 30            ora #'0'
0043C5r 2  C9 3A            cmp #$3A        ; '9+1
0043C7r 2  90 02            bcc @1
0043C9r 2  69 06            adc #$06
0043CBr 2               
0043CBr 2               @1:
0043CBr 2  20 rr rr         jsr kernel_putc
0043CEr 2  60               rts
0043CFr 2               
0043CFr 1               
0043CFr 1               .include "../../minix.s"
0043CFr 2               
0043CFr 2               
0043CFr 2               ; This is a library to use a minix file system on the 65C02 CMOS processor.
0043CFr 2               ; it requires 2 bytes in zeropage, 100 bytes for variables in RAM
0043CFr 2               ; and a buffer of 1024 bytes provided by the user of this library.
0043CFr 2               ; It also requires the caller to provide two subroutines:
0043CFr 2               ; - an io_read_sector subroutine
0043CFr 2               ; - an io_write_sector subroutine
0043CFr 2               ; both with the same two parameters :
0043CFr 2               ; io_current_sector: a 4 byte variable in RAM to indicate which sector to read/write like LBA addressing
0043CFr 2               ; io_buffer_ptr: a zeropage pointer to a buffer in RAM where the sector data will be stored
0043CFr 2               ; or where it will be found to be written to disk
0043CFr 2               ; The buffer will be overwriten by many routines.
0043CFr 2               ; The only time it is safe to write to it is just before calling file_write_data
0043CFr 2               ; This library is designed to be assembled with ca65 but it should be
0043CFr 2               ; fairly easy to adapt to another assembler.
0043CFr 2               ; Compatible only with MINIX 1 filesystem with 30 character filenames
0043CFr 2               
0043CFr 2               ; References :
0043CFr 2               ; http://minix1.woodhull.com/faq/filesize.html
0043CFr 2               ; https://github.com/osxfuse/filesystems/blob/aee39765ffe32b426a1089f617d21bff387f5c91/filesystems-c/unixfs/minixfs/minixfs.c
0043CFr 2               ; http://ohm.hgesser.de/sp-ss2012/Intro-MinixFS.pdf
0043CFr 2               ; https://lass.cs.umass.edu/~shenoy/courses/spring20/lectures/Lec18.pdf
0043CFr 2               ; https://github.com/gdevic/minix1
0043CFr 2               ; Operating systems - Design and implementation by Andrew S. Tanenbaum
0043CFr 2               
0043CFr 2               ; PUBLIC DOMAIN
0043CFr 2               ; This library for the 65c02 is provided on an "as is" basis without any warranty
0043CFr 2               ; of any kind, including, without limitation, the implied warranties of
0043CFr 2               ; merchantability and fitness for a particular purpose and their equivalents
0043CFr 2               ; under the laws of any jurisdiction. Put briefly, use this at your own risk.
0043CFr 2               
0043CFr 2               ; Constants
0043CFr 2               MINIX_MAGIC_NUMBER = $138F		; minix fs, 30 char names
0043CFr 2               
0043CFr 2               ; These are the only two mode flags we care about
0043CFr 2               MINIX_REGULAR_FILE = $8000
0043CFr 2               MINIX_DIRECTORY = $4000
0043CFr 2               
0043CFr 2               MINIX_ROOT_INODE = 1            ; inodes are 1 indexed, so inode 1 is the first one
0043CFr 2               
0043CFr 2               ; zeropage variables, 2 bytes required
0043CFr 2               .segment "ZEROPAGE": zeropage
00004Er 2  xx xx        MINIX_PTR: .res 2
000050r 2               
000050r 2               .segment "BSS"
000904r 2               ; RAM storage, 100 bytes required
000904r 2               
000904r 2  xx xx        MINIX_CURRENT_BLOCK: .res 2 ; block to read
000906r 2  xx xx xx xx  MINIX_SECTOR: .res 4
00090Ar 2  xx xx        MINIX_CURRENT_INODE: .res 2
00090Cr 2  xx xx        MINIX_CURRENT_DIR_INODE: .res 2
00090Er 2  xx xx        MINIX_CURRENT_FILE_INODE: .res 2
000910r 2               
000910r 2  xx xx        MINIX_TMP: .res 2
000912r 2  xx xx        MINIX_FILESIZE_COMPARE: .res 2
000914r 2  xx           MINIX_ZONE_TO_READ: .res 1
000915r 2  xx           MINIX_ZONE_TO_WRITE: .res 1
000916r 2  xx xx        MINIX_SEARCH_INODE: .res 2
000918r 2  xx xx xx xx  MINIX_SEARCH_FILENAME: .res 30
00091Cr 2  xx xx xx xx  
000920r 2  xx xx xx xx  
000936r 2               
000936r 2               MINIX_SUPERBLOCK:
000936r 2  xx xx        MINIX_N_INODES: .res 2
000938r 2  xx xx        MINIX_N_ZONES: .res 2
00093Ar 2  xx xx        MINIX_N_INODE_MAP_BLOCKS: .res 2
00093Cr 2  xx xx        MINIX_N_ZONE_MAP_BLOCKS: .res 2
00093Er 2  xx xx        MINIX_FIRST_DATA_ZONE: .res 2       ;
000940r 2  xx xx        MINIX_LOG_ZONE_SIZE: .res 2         ; size of a data zone = 1024 << MINIX_LOG_ZONE_SIZE
000942r 2  xx xx xx xx  MINIX_MAX_FILE_SIZE: .res 4
000946r 2  xx xx        MINIX_MAGIC: .res 2
000948r 2  xx xx        MINIX_STATE: .res 2
00094Ar 2               
00094Ar 2               MINIX_DIRENT:
00094Ar 2  xx xx        MINIX_INODE_NUMBER: .res 2
00094Cr 2  xx xx xx xx  MINIX_FILENAME: .res 30
000950r 2  xx xx xx xx  
000954r 2  xx xx xx xx  
00096Ar 2               
00096Ar 2               MINIX_INODE:
00096Ar 2  xx xx        MINIX_INODE_MODE: .res 2
00096Cr 2  xx xx        MINIX_INODE_UID: .res 2
00096Er 2  xx xx xx xx  MINIX_INODE_FILESIZE: .res 4
000972r 2  xx xx xx xx  MINIX_INODE_TIME: .res 4
000976r 2  xx           MINIX_INODE_GID: .res 1
000977r 2  xx           MINIX_INODE_LINKS: .res 1
000978r 2  xx xx        MINIX_INODE_ZONE0: .res 2
00097Ar 2  xx xx        MINIX_INODE_ZONE1: .res 2
00097Cr 2  xx xx        MINIX_INODE_ZONE2: .res 2
00097Er 2  xx xx        MINIX_INODE_ZONE3: .res 2
000980r 2  xx xx        MINIX_INODE_ZONE4: .res 2
000982r 2  xx xx        MINIX_INODE_ZONE5: .res 2
000984r 2  xx xx        MINIX_INODE_ZONE6: .res 2
000986r 2  xx xx        MINIX_INODE_INDIRECT: .res 2
000988r 2  xx xx        MINIX_INODE_DOUBLE_INDIRECT: .res 2
00098Ar 2               
00098Ar 2               .segment "DATA"
0043CFr 2               
0043CFr 2  20 00        MINIX_DIRENT_JUMP: .byte $20, $0        ; size of a directory entry
0043D1r 2               
0043D1r 2               ; setup MINIX_CURRENT_BLOCK to indicate which block to read
0043D1r 2               ; the resulting block data will be in the buffer pointed to by io_buffer_ptr
0043D1r 2               ; he caller is reponsible for setting up io_buffer_ptr
0043D1r 2               ; returns with carry set on error
0043D1r 2               minix_read_block:
0043D1r 2  64 rr            stz io_current_sector                   ; zero current sector to read
0043D3r 2  64 rr            stz io_current_sector + 1
0043D5r 2  64 rr            stz io_current_sector + 2
0043D7r 2  64 rr            stz io_current_sector + 3
0043D9r 2  9C rr rr         stz MINIX_SECTOR + 2                    ; zero top bytes of sector to read
0043DCr 2  9C rr rr         stz MINIX_SECTOR + 3
0043DFr 2  AD rr rr 8D      cp16 MINIX_CURRENT_BLOCK, MINIX_SECTOR  ; copy current block number
0043E3r 2  rr rr AD rr  
0043E7r 2  rr 8D rr rr  
0043EBr 2  0E rr rr 2E      asl16 MINIX_SECTOR                      ; multiply by two to get first block sector number
0043EFr 2  rr rr        
0043F1r 2  90 02            bcc minix_read_block_noinc
0043F3r 2  E6 rr            inc io_current_sector + 2               ; increase higher byte if previous asl set the carry
0043F5r 2               minix_read_block_noinc:
0043F5r 2  AD rr rr 85      cp16  MINIX_SECTOR, io_current_sector  ; copy result to the sector to read
0043F9r 2  rr AD rr rr  
0043FDr 2  85 rr        
0043FFr 2               
0043FFr 2  20 rr rr         jsr io_read_sector          ; read first sector
004402r 2               
004402r 2  E6 rr            inc io_buffer_ptr + 1       ; write to next buffer 512 block to get full 1024 block
004404r 2  E6 rr            inc io_current_sector       ; setup to read next sector
004406r 2  20 rr rr         jsr io_read_sector          ; Read next sector
004409r 2  C6 rr            dec io_buffer_ptr + 1       ; put buffer pointer back
00440Br 2                   ; one full block is now in the buffer pointed to by io_buffer_ptr
00440Br 2  60               rts
00440Cr 2               
00440Cr 2               minix_write_block:
00440Cr 2  64 rr            stz io_current_sector                   ; zero current sector to read
00440Er 2  64 rr            stz io_current_sector + 1
004410r 2  64 rr            stz io_current_sector + 2
004412r 2  64 rr            stz io_current_sector + 3
004414r 2  9C rr rr         stz MINIX_SECTOR + 2                    ; zero top bytes of sector to read
004417r 2  9C rr rr         stz MINIX_SECTOR + 3
00441Ar 2  AD rr rr 8D      cp16 MINIX_CURRENT_BLOCK, MINIX_SECTOR  ; copy current block number
00441Er 2  rr rr AD rr  
004422r 2  rr 8D rr rr  
004426r 2  0E rr rr 2E      asl16 MINIX_SECTOR                      ; multiply by two to get first block sector number
00442Ar 2  rr rr        
00442Cr 2  90 02            bcc minix_write_block_noinc
00442Er 2  E6 rr            inc io_current_sector + 2               ; increase higher byte if previous asl set the carry
004430r 2               minix_write_block_noinc:
004430r 2  AD rr rr 85      cp16  MINIX_SECTOR, io_current_sector  ; copy result to the sector to read
004434r 2  rr AD rr rr  
004438r 2  85 rr        
00443Ar 2  20 rr rr         jsr io_write_sector          ; read first sector
00443Dr 2               
00443Dr 2  E6 rr            inc io_buffer_ptr + 1       ; read from next buffer 512 block to get full 1024 block
00443Fr 2  E6 rr            inc io_current_sector       ; setup to write to next sector
004441r 2  20 rr rr         jsr io_write_sector          ; Write next sector
004444r 2  C6 rr            dec io_buffer_ptr + 1       ; put buffer pointer back
004446r 2                   ; one full block has now been written to disk
004446r 2  60               rts
004447r 2               
004447r 2               ; read the root inode
004447r 2               minix_read_root_inode:
004447r 2  A9 01            lda #MINIX_ROOT_INODE               ; set inode to root inode
004449r 2  8D rr rr         sta MINIX_CURRENT_INODE
00444Cr 2  9C rr rr         stz MINIX_CURRENT_INODE + 1
00444Fr 2               
00444Fr 2  20 rr rr         jsr minix_read_inode                ; read the inode
004452r 2               
004452r 2                   ; check that it is a directory
004452r 2  AD rr rr         lda MINIX_INODE_MODE+1
004455r 2  29 40            and #>MINIX_DIRECTORY
004457r 2  F0 0A            beq minix_read_root_inode_fail
004459r 2                   ; we have read root inode successfully
004459r 2  A9 01            lda #MINIX_ROOT_INODE               ; save the root inode number to MINIX_CURRENT_DIR_INODE
00445Br 2  8D rr rr         sta MINIX_CURRENT_DIR_INODE         ; because this is the current directory
00445Er 2  9C rr rr         stz MINIX_CURRENT_DIR_INODE + 1
004461r 2  18               clc
004462r 2  60               rts
004463r 2               minix_read_root_inode_fail:
004463r 2  38               sec
004464r 2  60               rts
004465r 2               
004465r 2               ; We read the root directory data into the memory buffer
004465r 2               minix_read_root:
004465r 2  20 rr rr         jsr minix_read_root_inode
004468r 2  B0 05            bcs @exit_fail
00446Ar 2  20 rr rr         jsr minix_read_inode_data
00446Dr 2  18               clc
00446Er 2  60               rts
00446Fr 2               @exit_fail:
00446Fr 2  38               sec
004470r 2  60               rts
004471r 2               
004471r 2               minix_read_file:
004471r 2  AD rr rr 8D      cp16 MINIX_CURRENT_FILE_INODE, MINIX_CURRENT_INODE
004475r 2  rr rr AD rr  
004479r 2  rr 8D rr rr  
00447Dr 2  20 rr rr         jsr minix_read_inode                ; read the inode
004480r 2               
004480r 2                   ; check that it is a file
004480r 2  AD rr rr         lda MINIX_INODE_MODE+1
004483r 2  29 80            and #>MINIX_REGULAR_FILE
004485r 2  F0 05            beq @exit_fail
004487r 2               
004487r 2  20 rr rr         jsr minix_read_inode_data           ; the first block of data for the file is now in the buffer
00448Ar 2  18               clc
00448Br 2  60               rts
00448Cr 2               @exit_fail:
00448Cr 2  38               sec
00448Dr 2  60               rts
00448Er 2               
00448Er 2               ; Find the inode corresponding to the given filename
00448Er 2               minix_find_inode_for_filename:
00448Er 2                   ; get the data for the current dir inode
00448Er 2                   ; to do that, we first set MINIX_CURRENT_INODE to MINIX_CURRENT_DIR_INODE,
00448Er 2                   ; which contains the inode for the current directory
00448Er 2                   ; then we read the inode data
00448Er 2                   ; and loop through it until we find the right filename
00448Er 2                   ; and then we set MINIX_CURRENT_INODE to the found inode
00448Er 2                   ; and set the carry to indicate success
00448Er 2                   ; otherwise, clear the carry to indicate failure
00448Er 2                   ; the filename to look for is in MINIX_SEARCH_FILENAME
00448Er 2                   ; the caller has to zero these 30 bytes before setting the filename to search
00448Er 2                   ; at the beginning of this buffer
00448Er 2               
00448Er 2  AD rr rr 8D      cp16 MINIX_CURRENT_DIR_INODE, MINIX_CURRENT_INODE
004492r 2  rr rr AD rr  
004496r 2  rr 8D rr rr  
00449Ar 2  20 rr rr         jsr minix_read_inode                ; read the inode for the directory
00449Dr 2  20 rr rr         jsr minix_read_inode_data           ; the data for the directory is now in the buffer
0044A0r 2                   ; loop through the buffer to check the filename
0044A0r 2  5A               phy
0044A1r 2  A5 rr 85 rr      cp16 io_buffer_ptr, MINIX_PTR       ; copy the current io buffer pointer to our ZP pointer
0044A5r 2  A5 rr 85 rr  
0044A9r 2                   ; load first entry
0044A9r 2  A0 00            ldy #0
0044ABr 2               @loop:
0044ABr 2  B1 rr            lda (MINIX_PTR), y                    ; check low byte of inode number
0044ADr 2  D0 07            bne @inode_not_zero                   ; if it's not 0 it means we have a file here
0044AFr 2  C8               iny                                   ; check high byte of inode number
0044B0r 2  B1 rr            lda (MINIX_PTR), y                    ; if it's not 0 it means we have a file here
0044B2r 2  D0 03            bne @inode_not_zero2
0044B4r 2               
0044B4r 2  80 35            bra @exit_fail                        ; otherwise, there is nothing here nor beyond, exit now
0044B6r 2               
0044B6r 2               @inode_not_zero:
0044B6r 2  C8               iny             ; we get here without having incremented y, so do it twice
0044B7r 2               @inode_not_zero2:   ; if we get here directly, y has already been incremented once
0044B7r 2  C8               iny             ; increment y again to point to start of file
0044B8r 2               
0044B8r 2                   ; and then check if the name corresponds
0044B8r 2               @inner:
0044B8r 2  B1 rr            lda (MINIX_PTR), y
0044BAr 2  F0 1F            beq @exit_success                   ; we reached the end of the filename, success
0044BCr 2  D9 rr rr         cmp MINIX_SEARCH_FILENAME-2, y
0044BFr 2  D0 07            bne @next
0044C1r 2  C8               iny                                 ; increase y by one to check next character
0044C2r 2  C0 20            cpy #32                             ; check if we reached the end of the filename
0044C4r 2  90 F2            bcc @inner                          ; if not, keep checking
0044C6r 2  80 13            bra @exit_success                   ; file found
0044C8r 2               @next:
0044C8r 2                   ; increase MINIX_PTR by $20 to point to start of next entry
0044C8r 2  18 A5 rr 6D      add16 MINIX_PTR, MINIX_DIRENT_JUMP, MINIX_PTR
0044CCr 2  rr rr 85 rr  
0044D0r 2  A5 rr 6D rr  
0044D7r 2  A0 00            ldy #0
0044D9r 2  80 D0            bra @loop
0044DBr 2               @exit_success:
0044DBr 2  A0 00            ldy #0
0044DDr 2  B1 rr            lda (MINIX_PTR), y
0044DFr 2  8D rr rr         sta MINIX_CURRENT_FILE_INODE          ; save low byte of inode number to MINIX_CURRENT_FILE_INODE
0044E2r 2  C8               iny
0044E3r 2  B1 rr            lda (MINIX_PTR), y
0044E5r 2  8D rr rr         sta MINIX_CURRENT_FILE_INODE + 1          ; save high byte of inode number to MINIX_CURRENT_FILE_INODE
0044E8r 2  7A               ply
0044E9r 2  18               clc
0044EAr 2  60               rts
0044EBr 2               @exit_fail:
0044EBr 2  7A               ply
0044ECr 2  38               sec
0044EDr 2  60               rts
0044EEr 2               
0044EEr 2               
0044EEr 2               
0044EEr 2               ; once an inode is loaded, read the file data
0044EEr 2               ; if the carry is set on exit, it means there is data left to read, so we should call this routine again
0044EEr 2               ; if the carry is unset, we reached the end of the data and should stop reading
0044EEr 2               minix_read_inode_data:
0044EEr 2  5A               phy
0044EFr 2                   ; check if zone to read is zero.
0044EFr 2  AD rr rr         lda MINIX_ZONE_TO_READ
0044F2r 2  D0 0C            bne @getzone
0044F4r 2                   ; if it is, copy the two high bytes of file size to a temporary space
0044F4r 2  AD rr rr 8D      cp16 MINIX_INODE_FILESIZE, MINIX_FILESIZE_COMPARE
0044F8r 2  rr rr AD rr  
0044FCr 2  rr 8D rr rr  
004500r 2                   ; to be decremented each time we come here
004500r 2               @getzone:
004500r 2  AD rr rr         lda MINIX_ZONE_TO_READ
004503r 2  C9 07            cmp #7                                      ; we only handle the direct zones for now
004505r 2  B0 4F            bcs @exit_end                                   ; so we exit if we are trying to read zone 7 or higher
004507r 2  8D rr rr         sta MINIX_TMP                               ; copy current zone to temporary
00450Ar 2  9C rr rr         stz MINIX_TMP + 1
00450Dr 2  0E rr rr         asl MINIX_TMP                               ; multiply by two because we want the byte offset
004510r 2  18               clc                                         ; add the zone offset to the address where zone 0 is stored
004511r 2  A9 rr            lda #<MINIX_INODE_ZONE0
004513r 2  6D rr rr         adc MINIX_TMP
004516r 2  85 rr            sta MINIX_PTR
004518r 2  A9 rr            lda #>MINIX_INODE_ZONE0
00451Ar 2  6D rr rr         adc MINIX_TMP + 1
00451Dr 2  85 rr            sta MINIX_PTR + 1
00451Fr 2                   ; we now have the address where we will find the zone to read in MINIX_PTR
00451Fr 2  A0 00            ldy #0
004521r 2  B1 rr            lda (MINIX_PTR),y                 ; we copy that data to the block to read
004523r 2  8D rr rr         sta MINIX_CURRENT_BLOCK
004526r 2  C8               iny
004527r 2  B1 rr            lda (MINIX_PTR), y
004529r 2  8D rr rr         sta MINIX_CURRENT_BLOCK+1
00452Cr 2               
00452Cr 2  20 rr rr         jsr minix_read_block                    ; and we read it
00452Fr 2                   ; add a check for file length
00452Fr 2                   ; we should reduce it by 1024 each time this function is called
00452Fr 2  A0 04            ldy #4
004531r 2               @dec_loop:
004531r 2  AD rr rr D0      dec16zero MINIX_FILESIZE_COMPARE    ; decrement the two high bytes of the filesize 4 times: this reduces the file size left by 1024
004535r 2  05 CE rr rr  
004539r 2  F0 08 CE rr  
004543r 2  F0 03            beq @end_loop                       ; if we reach zero on the high bytes, we have only one block left to read for the remainder of the file so exit now
004545r 2  88               dey
004546r 2  D0 E9            bne @dec_loop
004548r 2               
004548r 2               @end_loop:
004548r 2                   ; TODO check Y here to see if we whould read another block or not
004548r 2                   ; if y is > 0 then we should read another block
004548r 2                   ; otherwise, the end of the data is in the block we just read
004548r 2  C0 01            cpy #1
00454Ar 2  B0 0A            bcs @exit_end
00454Cr 2  EE rr rr D0      inc16 MINIX_ZONE_TO_READ            ; we increment MINIX_ZONE_TO_READ for the next time we get called
004550r 2  03 EE rr rr  
004554r 2  80 03            bra @exit_continue
004556r 2               @exit_end:
004556r 2  7A               ply
004557r 2  18               clc
004558r 2  60               rts
004559r 2               @exit_continue:
004559r 2  7A               ply
00455Ar 2  38               sec
00455Br 2  60               rts
00455Cr 2               
00455Cr 2               ; Node name to create is in MINIX_FILENAME
00455Cr 2               ; the directory in which to create it is in MINIX_CURRENT_DIR_INODE
00455Cr 2               ; some data can already be set in MINIX_INODE
00455Cr 2               ; Node mode should be set in MINIX_INODE_MODE
00455Cr 2               ; this will indicate if the node is a file or directory
00455Cr 2               minix_mknod:
00455Cr 2  5A               phy
00455Dr 2  DA               phx
00455Er 2                   ; find a free inode by looking at the bitmap
00455Er 2  9C rr rr         stz MINIX_CURRENT_BLOCK + 1
004561r 2  A9 02            lda #2                          ; the first block of the inode map is block 2
004563r 2  8D rr rr         sta MINIX_CURRENT_BLOCK         ; so read that block now
004566r 2  AD rr rr 8D      cp16 MINIX_N_INODE_MAP_BLOCKS, MINIX_TMP    ;save the number of inode map blocks temporarily
00456Ar 2  rr rr AD rr  
00456Er 2  rr 8D rr rr  
004572r 2               @new_block:
004572r 2  A5 rr 85 rr      cp16 io_buffer_ptr, MINIX_PTR               ; copy the io buffer pointer to our own
004576r 2  A5 rr 85 rr  
00457Ar 2  20 rr rr         jsr minix_read_block
00457Dr 2  A2 04            ldx #4                          ; set X to 4 (number of pages to read)
00457Fr 2               @outer:
00457Fr 2  DA               phx                             ; and save to stack
004580r 2                   ; find the first free inode slot
004580r 2  A0 00            ldy #0
004582r 2               @loop:
004582r 2  A2 00            ldx #0
004584r 2  B1 rr            lda (MINIX_PTR), y              ; load current byte
004586r 2  F0 2F            beq @found                      ; if it is zero, at least the first bit is free
004588r 2                   ; otherwise, rotate A until the carry get unset
004588r 2               @inner:
004588r 2  6A               ror                             ; rotate right
004589r 2  90 2C            bcc @found                      ; if the carry is clear, it means X is now the number of the free bit
00458Br 2  E8               inx                             ; increase X to keep track of which bit we are looking at
00458Cr 2  E0 08            cpx #8                          ; if X reaches 8, we went around the byte and found no free slot
00458Er 2  90 F8            bcc @inner                      ; try again with next bit
004590r 2  C8               iny                             ; increase Y to get next byte
004591r 2  D0 EF            bne @loop                       ; if Y did not wrap around, do next byte
004593r 2  E6 rr            inc MINIX_PTR + 1               ; if it did wraparound, do next page
004595r 2  FA               plx                             ; get X from stack
004596r 2  CA               dex                             ; decrement X to check number of pages read
004597r 2  D0 E6            bne @outer                      ; X is not zero yet, read another page
004599r 2               
004599r 2                   ; we are at the end of the block, read another one if necessary
004599r 2  AD rr rr D0      dec16zero MINIX_TMP             ; decrement the number of blocks in inode map by one
00459Dr 2  05 CE rr rr  
0045A1r 2  F0 08 CE rr  
0045ABr 2  F0 3D            beq @not_found                  ; if we reached zero, we have not found a free inode
0045ADr 2  EE rr rr D0      inc16 MINIX_CURRENT_BLOCK       ; otherwise, increment block to read
0045B1r 2  03 EE rr rr  
0045B5r 2  80 BB            bra @new_block                  ; and do the whole circus again
0045B7r 2               
0045B7r 2               @found:                             ; we found a free inode
0045B7r 2                   ; now we need to multiply Y by 8 and add X to find the free inode number
0045B7r 2                   ; we don't need MINIX_TMP anymore, so use it to pultiply Y by 8
0045B7r 2  9C rr rr         stz MINIX_TMP + 1           ; set high byte to zero
0045BAr 2  8C rr rr         sty MINIX_TMP               ; set low byte to Y
0045BDr 2  DA               phx                         ; save X on stack
0045BEr 2  A2 03            ldx #3
0045C0r 2               @mult_loop:
0045C0r 2  0E rr rr 2E      asl16 MINIX_TMP             ; shift left 3 times
0045C4r 2  rr rr        
0045C6r 2  CA               dex
0045C7r 2  D0 F7            bne @mult_loop
0045C9r 2  68               pla                         ; pull X in A
0045CAr 2  6D rr rr         adc MINIX_TMP               ; add low byte of inode number
0045CDr 2  8D rr rr         sta MINIX_TMP               ; store to low byte
0045D0r 2  90 08            bcc @carry_unset            ; skip next addition if carry was unset
0045D2r 2  AD rr rr         lda MINIX_TMP + 1           ; load high byte
0045D5r 2  69 00            adc #0                      ; add carry if there is one
0045D7r 2  8D rr rr         sta MINIX_TMP + 1           ; store result in high byte
0045DAr 2               @carry_unset:
0045DAr 2                   ; we now have the inode number in MINIX_TMP
0045DAr 2  AD rr rr 8D      cp16 MINIX_TMP, MINIX_CURRENT_INODE         ; copy it to MINIX_CURRENT_INODE to prepare for write
0045DEr 2  rr rr AD rr  
0045E2r 2  rr 8D rr rr  
0045E6r 2                   ; we have to generate the inode data
0045E6r 2               
0045E6r 2                   ; find a free data zone by looking at the zone bitmap
0045E6r 2               
0045E6r 2                   ; create the inode data structure for the new file
0045E6r 2                   ; with a size of zero
0045E6r 2                   ; write the inode to disk
0045E6r 2                   ; get the data for the directory
0045E6r 2                   ; add a line with the inode number for the new file
0045E6r 2                   ; and it's filename
0045E6r 2  18               clc
0045E7r 2               @exit:
0045E7r 2  FA               plx
0045E8r 2  7A               ply
0045E9r 2  60               rts
0045EAr 2               @not_found:
0045EAr 2  38               sec
0045EBr 2  80 FA            bra @exit
0045EDr 2               
0045EDr 2               
0045EDr 2               ; Once an inode has been written, we can write the file data
0045EDr 2               ; This routine only writes one block of data at a time, from the buffer pointed to by io_buffer_ptr
0045EDr 2               ; and in the data zone number MINIX_ZONE_TO_WRITE
0045EDr 2               ; this is a reference to the number of the zone in the inode data structure, which itself contains
0045EDr 2               ; the number of the block to write to.
0045EDr 2               ; there is no check for file length, it is up to  the user to manage that.
0045EDr 2               ; This is to allow read / modify / write per block
0045EDr 2               ; the zone to write is incremented at the end of this routine, though
0045EDr 2               ; so if the file data does not exceed one block it will cause a problem
0045EDr 2               ; if the file data ecxeeds one block, this routine expects
0045EDr 2               ; the zones to be set in the inode data in RAM before being called
0045EDr 2               minix_write_data:
0045EDr 2  5A               phy
0045EEr 2                   ; check if zone to read is zero.
0045EEr 2  AD rr rr         lda MINIX_ZONE_TO_WRITE
0045F1r 2  C9 07            cmp #7                                      ; we only handle the direct zones for now
0045F3r 2  B0 30            bcs @exit_end                               ; so we exit if we are trying to write to zone 7 or higher
0045F5r 2  8D rr rr         sta MINIX_TMP                               ; copy current zone to temporary
0045F8r 2  9C rr rr         stz MINIX_TMP + 1
0045FBr 2  0E rr rr         asl MINIX_TMP                               ; multiply by two because we want the byte offset into the inode
0045FEr 2  18               clc                                         ; add the zone byte offset to the address where zone 0 is stored
0045FFr 2  A9 rr            lda #<MINIX_INODE_ZONE0
004601r 2  6D rr rr         adc MINIX_TMP
004604r 2  85 rr            sta MINIX_PTR
004606r 2  A9 rr            lda #>MINIX_INODE_ZONE0
004608r 2  6D rr rr         adc MINIX_TMP + 1
00460Br 2  85 rr            sta MINIX_PTR + 1
00460Dr 2                   ; we now have the address where we will find the zone to read in MINIX_TMP
00460Dr 2  A0 00            ldy #0
00460Fr 2  B1 rr            lda (MINIX_PTR),y                 ; we copy that data to the block to read
004611r 2  8D rr rr         sta MINIX_CURRENT_BLOCK
004614r 2  C8               iny
004615r 2  B1 rr            lda (MINIX_PTR), y
004617r 2  8D rr rr         sta MINIX_CURRENT_BLOCK+1
00461Ar 2               
00461Ar 2  20 rr rr         jsr minix_write_block                    ; and we write it
00461Dr 2               
00461Dr 2  EE rr rr D0      inc16 MINIX_ZONE_TO_WRITE            ; we increment MINIX_ZONE_TO_WRITE for the next time we get called
004621r 2  03 EE rr rr  
004625r 2               @exit_end:
004625r 2  7A               ply
004626r 2  60               rts
004627r 2               
004627r 2               
004627r 2               
004627r 2               ; read one inode entry into RAM data structure
004627r 2               ; the number of the inode to read is in MINIX_CURRENT_INODE
004627r 2               minix_read_inode:
004627r 2  5A               phy
004628r 2                   ; MINIX_CURRENT_INODE contains the number of the inode we have to read to find the data zone
004628r 2                   ; the blocks with inodes start at block 1 + MINIX_N_INODE_MAP_BLOCKS + MINIX_N_ZONE_MAP_BLOCKS
004628r 2  AD rr rr 8D      cp16 MINIX_N_INODE_MAP_BLOCKS, MINIX_CURRENT_BLOCK    ; copy number of inode map blocks to temporary
00462Cr 2  rr rr AD rr  
004630r 2  rr 8D rr rr  
004634r 2  EE rr rr D0      inc16 MINIX_CURRENT_BLOCK                             ; add 1 to account for superblock
004638r 2  03 EE rr rr  
00463Cr 2  EE rr rr D0      inc16 MINIX_CURRENT_BLOCK                             ; add 1 to account for blank root block
004640r 2  03 EE rr rr  
004644r 2  18 AD rr rr      add16 MINIX_CURRENT_BLOCK, MINIX_N_ZONE_MAP_BLOCKS, MINIX_CURRENT_BLOCK ; add the number of zone map blocks
004648r 2  6D rr rr 8D  
00464Cr 2  rr rr AD rr  
004657r 2               
004657r 2  AD rr rr D0      dec16 MINIX_CURRENT_INODE       ; since inodes are 1 indexed, we need to decrement it by one
00465Br 2  03 CE rr rr  
00465Fr 2  CE rr rr     
004662r 2               
004662r 2                   ; we have the first block with inodes in MINIX_CURRENT_BLOCK
004662r 2                   ; now we have to add the number of blocks necessary to reach the MINIX_CURRENT_INODEth block
004662r 2                   ; each inode is 32 bytes, which means there are 32 in each block
004662r 2                   ; so let's divide MINIX_CURRENT_INODE by 32 and add it to the current block to get the real block where that inode is located
004662r 2               
004662r 2  AD rr rr 8D      cp16 MINIX_CURRENT_INODE, MINIX_TMP
004666r 2  rr rr AD rr  
00466Ar 2  rr 8D rr rr  
00466Er 2  A0 05            ldy #5
004670r 2               minix_read_inode_loop1:
004670r 2  4E rr rr 6E      lsr16 MINIX_TMP
004674r 2  rr rr        
004676r 2  88               dey
004677r 2  D0 F7            bne minix_read_inode_loop1
004679r 2               
004679r 2  18 AD rr rr      add16 MINIX_CURRENT_BLOCK, MINIX_TMP, MINIX_CURRENT_BLOCK
00467Dr 2  6D rr rr 8D  
004681r 2  rr rr AD rr  
00468Cr 2               
00468Cr 2                   ; MINIX_CURRENT_BLOCK is set up, read data
00468Cr 2  20 rr rr         jsr minix_read_block            ; read block to buffer
00468Fr 2               
00468Fr 2                   ; the offset into the block is calculated by taking MINIX_CURRENT_INODE,
00468Fr 2                   ; dividing by 32 and taking the remainder
00468Fr 2                   ; (which is done by doing and $1F) and then
00468Fr 2                   ; multiplying by 32 again to get the byte ofset into the block
00468Fr 2  9C rr rr         stz MINIX_TMP + 1
004692r 2  AD rr rr         lda MINIX_CURRENT_INODE
004695r 2  29 1F            and #$1F
004697r 2  8D rr rr         sta MINIX_TMP
00469Ar 2  A0 05            ldy #5
00469Cr 2               minix_read_inode_loop2:
00469Cr 2  0E rr rr 2E      asl16 MINIX_TMP         ; multiply inode remainder by 32 bytes to get byte offset
0046A0r 2  rr rr        
0046A2r 2  88               dey
0046A3r 2  D0 F7            bne minix_read_inode_loop2
0046A5r 2               
0046A5r 2                   ; the byte ofset into the block is now in MINIX_TMP
0046A5r 2                   ; add it to the buffer pointer
0046A5r 2                   ; and save it to our own pointer
0046A5r 2  18 AD rr rr      add16 MINIX_TMP, io_buffer_ptr, MINIX_PTR
0046A9r 2  65 rr 85 rr  
0046ADr 2  AD rr rr 65  
0046B4r 2               
0046B4r 2               minix_read_inode_loop3:
0046B4r 2                   ; copy from buffer to data structure
0046B4r 2  B1 rr            lda (MINIX_PTR), y
0046B6r 2  99 rr rr         sta MINIX_INODE, y
0046B9r 2  88               dey
0046BAr 2  D0 F8            bne minix_read_inode_loop3
0046BCr 2                   ; the inode is now stored in MINIX_INODE for future reference
0046BCr 2                   ; we set the zone to read to zero
0046BCr 2                   ; so that when we read the data we start with zone 0
0046BCr 2  9C rr rr         stz MINIX_ZONE_TO_READ
0046BFr 2  9C rr rr         stz MINIX_ZONE_TO_READ + 1
0046C2r 2  EE rr rr D0      inc16 MINIX_CURRENT_INODE       ; put current inode number back to what it was, in case we need ot again
0046C6r 2  03 EE rr rr  
0046CAr 2  7A               ply
0046CBr 2  60               rts
0046CCr 2               
0046CCr 2               ; write an inode
0046CCr 2               ; inode data is in MINIX_INODE
0046CCr 2               ; inode number is in MINIX_CURRENT_INODE, 1 indexed
0046CCr 2               
0046CCr 2               minix_write_inode:
0046CCr 2  5A               phy
0046CDr 2                   ; MINIX_CURRENT_INODE contains the number of the inode we want to write to
0046CDr 2                   ; the blocks with inodes start at block 1 + MINIX_N_INODE_MAP_BLOCKS + MINIX_N_ZONE_MAP_BLOCKS
0046CDr 2  AD rr rr 8D      cp16 MINIX_N_INODE_MAP_BLOCKS, MINIX_CURRENT_BLOCK    ; copy number of inode map blocks to temporary
0046D1r 2  rr rr AD rr  
0046D5r 2  rr 8D rr rr  
0046D9r 2  EE rr rr D0      inc16 MINIX_CURRENT_BLOCK                             ; add 1 to account for superblock
0046DDr 2  03 EE rr rr  
0046E1r 2  EE rr rr D0      inc16 MINIX_CURRENT_BLOCK                             ; add 1 to account for blank root block
0046E5r 2  03 EE rr rr  
0046E9r 2  18 AD rr rr      add16 MINIX_CURRENT_BLOCK, MINIX_N_ZONE_MAP_BLOCKS, MINIX_CURRENT_BLOCK ; add the number of zone map blocks
0046EDr 2  6D rr rr 8D  
0046F1r 2  rr rr AD rr  
0046FCr 2               
0046FCr 2  AD rr rr D0      dec16 MINIX_CURRENT_INODE       ; since inodes are 1 indexed, we need to decrement it by one
004700r 2  03 CE rr rr  
004704r 2  CE rr rr     
004707r 2               
004707r 2                   ; we have the first block with inodes in MINIX_CURRENT_BLOCK
004707r 2                   ; now we have to add the number of blocks necessary to reach the MINIX_CURRENT_INODEth block
004707r 2                   ; each inode is 32 bytes, which means there are 32 in each block
004707r 2                   ; so let's divide MINIX_CURRENT_INODE by 32 and add it to the current block to get the real block where that inode is located
004707r 2               
004707r 2  AD rr rr 8D      cp16 MINIX_CURRENT_INODE, MINIX_TMP
00470Br 2  rr rr AD rr  
00470Fr 2  rr 8D rr rr  
004713r 2  A0 05            ldy #5
004715r 2               minix_write_inode_loop1:            ; divide inode number by 32
004715r 2  4E rr rr 6E      lsr16 MINIX_TMP
004719r 2  rr rr        
00471Br 2  88               dey
00471Cr 2  D0 F7            bne minix_write_inode_loop1
00471Er 2               
00471Er 2  18 AD rr rr      add16 MINIX_CURRENT_BLOCK, MINIX_TMP, MINIX_CURRENT_BLOCK   ; MINIX_CURRENT_BLOCK contains the number of the block where our inode is located
004722r 2  6D rr rr 8D  
004726r 2  rr rr AD rr  
004731r 2               
004731r 2                   ; copy data from inode in memory data structure to our buffer
004731r 2               
004731r 2                   ; the offset into the block is calculated by taking MINIX_CURRENT_INODE,
004731r 2                   ; dividing by 32 and taking the remainder
004731r 2                   ; (which is done by doing and $1F) and then
004731r 2                   ; multiplying by 32 again to get the byte ofset into the block
004731r 2  9C rr rr         stz MINIX_TMP + 1
004734r 2  AD rr rr         lda MINIX_CURRENT_INODE
004737r 2  29 1F            and #$1F
004739r 2  8D rr rr         sta MINIX_TMP
00473Cr 2  A0 05            ldy #5
00473Er 2               minix_write_inode_loop2:
00473Er 2  0E rr rr 2E      asl16 MINIX_TMP         ; multiply inode remainder by 32 bytes to get byte offset
004742r 2  rr rr        
004744r 2  88               dey
004745r 2  D0 F7            bne minix_write_inode_loop2
004747r 2               
004747r 2                   ; the byte ofset into the block is now in MINIX_TMP
004747r 2                   ; add it to the buffer pointer
004747r 2                   ; and save it to our own pointer
004747r 2  18 AD rr rr      add16 MINIX_TMP, io_buffer_ptr, MINIX_PTR
00474Br 2  65 rr 85 rr  
00474Fr 2  AD rr rr 65  
004756r 2  20 rr rr         jsr minix_read_block            ; read block to make sure we have latest inode from disk in the buffer, ready to be modified
004759r 2               minix_write_inode_loop3:
004759r 2                   ; copy from data structure to buffer
004759r 2  B9 rr rr         lda MINIX_INODE, y
00475Cr 2  91 rr            sta (MINIX_PTR), y
00475Er 2               
00475Er 2  88               dey
00475Fr 2  D0 F8            bne minix_write_inode_loop3
004761r 2                   ; MINIX_CURRENT_BLOCK was set up above,
004761r 2                   ; so we can now write data to disk
004761r 2  20 rr rr         jsr minix_write_block            ; write block from buffer
004764r 2                   ; we set the zone to write to zero
004764r 2                   ; so that when we want to write some data we start with zone 0
004764r 2  9C rr rr         stz MINIX_ZONE_TO_WRITE
004767r 2  9C rr rr         stz MINIX_ZONE_TO_WRITE + 1
00476Ar 2  EE rr rr D0      inc16 MINIX_CURRENT_INODE       ; put current inode number back to what it was, in case we need it again
00476Er 2  03 EE rr rr  
004772r 2  7A               ply
004773r 2  60               rts
004774r 2               
004774r 2               
004774r 2               ; read the superblock
004774r 2               ; carry clear on success
004774r 2               ; carry set on error
004774r 2               minix_read_superblock:
004774r 2  5A               phy                             ; save y register just in case
004775r 2  A9 01            lda #1                          ; setup to read block 1
004777r 2  8D rr rr         sta MINIX_CURRENT_BLOCK         ; this is the second block on the disk
00477Ar 2  9C rr rr         stz MINIX_CURRENT_BLOCK + 1
00477Dr 2  20 rr rr         jsr minix_read_block            ; read block to buffer
004780r 2  A0 14            ldy #20                         ; copy data to RAM
004782r 2               
004782r 2               minix_read_superblock_loop:
004782r 2  B1 rr            lda (io_buffer_ptr), y
004784r 2  99 rr rr         sta MINIX_SUPERBLOCK, y
004787r 2  88               dey
004788r 2  D0 F8            bne minix_read_superblock_loop
00478Ar 2               
00478Ar 2                   ; set current inode to root inode
00478Ar 2  9C rr rr         stz MINIX_CURRENT_INODE + 1
00478Dr 2  A9 01            lda #MINIX_ROOT_INODE
00478Fr 2  8D rr rr         sta MINIX_CURRENT_INODE
004792r 2               
004792r 2                   ; check for magic number
004792r 2  AD rr rr         lda MINIX_MAGIC
004795r 2  C9 8F            cmp #<MINIX_MAGIC_NUMBER
004797r 2  D0 14            bne minix_read_superblock_fail
004799r 2  AD rr rr         lda MINIX_MAGIC + 1
00479Cr 2  C9 13            cmp #>MINIX_MAGIC_NUMBER
00479Er 2  D0 0D            bne minix_read_superblock_fail
0047A0r 2                   ; we only support zones of 1024 bytes, so exit with error if different
0047A0r 2  AD rr rr         lda MINIX_LOG_ZONE_SIZE
0047A3r 2  D0 08            bne minix_read_superblock_fail
0047A5r 2  AD rr rr         lda MINIX_LOG_ZONE_SIZE + 1
0047A8r 2  D0 03            bne minix_read_superblock_fail
0047AAr 2               
0047AAr 2  7A               ply
0047ABr 2  18               clc
0047ACr 2  60               rts
0047ADr 2               minix_read_superblock_fail:
0047ADr 2  7A               ply
0047AEr 2  38               sec
0047AFr 2  60               rts
0047B0r 2               
0047B0r 2               
0047B0r 2               
0047B0r 2               .segment "RODATA"
000000r 2               minix_data:
000000r 2               .align $100
000000r 2  00 00 00 00  .incbin "minix.img"
000004r 2  00 00 00 00  
000008r 2  00 00 00 00  
002800r 2               
002800r 1               
002800r 1               
002800r 1               .segment "DATA"
0047B0r 1  30 30 30 30  number_string: .asciiz "000000177777"
0047B4r 1  30 30 31 37  
0047B8r 1  37 37 37 37  
0047BDr 1  44 61 74 61  file_test_string:.asciiz "Data has been written. Did we overwrite the file?"
0047C1r 1  20 68 61 73  
0047C5r 1  20 62 65 65  
0047EFr 1  74 65 73 74  test_filename: .asciiz "test.txt"
0047F3r 1  2E 74 78 74  
0047F7r 1  00           
0047F8r 1  64 69 72 00  test_filename2: .asciiz "dir"
0047FCr 1               
0047FCr 1               kernel_init:
0047FCr 1               v_nmi:
0047FCr 1               v_irq:                          ; IRQ handler
0047FCr 1               
0047FCr 1               
0047FCr 1  DA A2 00 BD      printascii welcome_message
004800r 1  rr rr F0 06  
004804r 1  20 rr rr E8  
00480Br 1               
00480Br 1  A9 rr            lda #<dictionary
00480Dr 1  85 rr            sta up
00480Fr 1  A9 rr            lda #>dictionary
004811r 1  85 rr            sta up + 1
004813r 1               
004813r 1  20 rr rr         jsr calculate_free_mem
004816r 1  AD rr rr         lda tmp_var + 1
004819r 1  AE rr rr         ldx tmp_var
00481Cr 1  20 rr rr         jsr print16
00481Fr 1               
00481Fr 1  DA A2 00 BD      printascii free_message
004823r 1  rr rr F0 06  
004827r 1  20 rr rr E8  
00482Er 1               
00482Er 1               
00482Er 1  20 rr rr         jsr print_message
004831r 1  0D 0A 00         .byte AscCR,AscLF, 0
004834r 1               
004834r 1                   ; set up buffer pointer
004834r 1  A9 rr            lda #<IO_BUFFER
004836r 1  85 rr            sta io_buffer_ptr
004838r 1  A9 rr            lda #>IO_BUFFER
00483Ar 1  85 rr            sta io_buffer_ptr + 1
00483Cr 1               
00483Cr 1  A9 rr            lda #>IO_BUFFER
00483Er 1  A2 rr            ldx #<IO_BUFFER
004840r 1  20 rr rr         jsr print16
004843r 1  20 rr rr         jsr print_message
004846r 1  0D 0A 00         .byte AscCR,AscLF, 0
004849r 1               
004849r 1  20 rr rr         jsr minix_read_superblock
00484Cr 1  90 17            bcc @ok
00484Er 1  20 rr rr         jsr print_message
004851r 1  42 61 64 20      .byte "Bad superblock", AscCR,AscLF, 0
004855r 1  73 75 70 65  
004859r 1  72 62 6C 6F  
004862r 1               
004862r 1               
004862r 1  4C rr rr         jmp @forth
004865r 1               @ok:
004865r 1                   ; this read the root inode to
004865r 1  20 rr rr         jsr minix_read_root
004868r 1  90 15            bcc @root_ok
00486Ar 1  20 rr rr         jsr print_message
00486Dr 1  42 61 64 20      .byte "Bad root dir", AscCR,AscLF, 0
004871r 1  72 6F 6F 74  
004875r 1  20 64 69 72  
00487Cr 1  4C rr rr         jmp forth
00487Fr 1               @root_ok:
00487Fr 1                   ; jsr minix_ls
00487Fr 1               
00487Fr 1  20 rr rr         jsr print_message
004882r 1  0D 0A 00         .byte AscCR,AscLF, 0
004885r 1               
004885r 1               
004885r 1                   ; fill search filename with zeroes
004885r 1  A2 1E            ldx #30
004887r 1               @l1:
004887r 1  9E rr rr         stz MINIX_SEARCH_FILENAME, x
00488Ar 1  CA               dex
00488Br 1  D0 FA            bne @l1
00488Dr 1  A2 1E            ldx #30                 ; length of data to copy
00488Fr 1                   ; copy search filename
00488Fr 1  BD rr rr 9D      memcp test_filename, MINIX_SEARCH_FILENAME
004893r 1  rr rr CA D0  
004897r 1  F7 AD rr rr  
00489Er 1  20 rr rr         jsr minix_find_inode_for_filename       ; search filename
0048A1r 1  90 03            bcc @find_ok
0048A3r 1  4C rr rr         jmp forth
0048A6r 1               @find_ok:
0048A6r 1  20 rr rr         jsr minix_read_file
0048A9r 1  90 1B            bcc @file_ok
0048ABr 1  20 rr rr         jsr print_message
0048AEr 1  4E 6F 74 20      .byte "Not a regular file", AscCR,AscLF, 0
0048B2r 1  61 20 72 65  
0048B6r 1  67 75 6C 61  
0048C3r 1  4C rr rr         jmp forth
0048C6r 1               @file_ok:
0048C6r 1  20 rr rr         jsr print_message
0048C9r 1  66 69 6C 65      .byte "file read", AscCR,AscLF, 0
0048CDr 1  20 72 65 61  
0048D1r 1  64 0D 0A 00  
0048D5r 1               
0048D5r 1                   ; change inode userid
0048D5r 1  A9 55            lda #$55
0048D7r 1  8D rr rr         sta MINIX_INODE_UID
0048DAr 1  A9 AA            lda #$AA
0048DCr 1  8D rr rr         sta MINIX_INODE_UID + 1
0048DFr 1  A2 00 BD rr      strlen file_test_string
0048E3r 1  rr F0 03 E8  
0048E7r 1  80 F8        
0048E9r 1  8E rr rr         stx MINIX_INODE_FILESIZE    ; save new future file size
0048ECr 1  20 rr rr         jsr minix_write_inode
0048EFr 1               
0048EFr 1  20 rr rr         jsr minix_read_file
0048F2r 1               
0048F2r 1  A2 00            ldx #0
0048F4r 1               @wloop:
0048F4r 1  BD rr rr         lda file_test_string, x
0048F7r 1  F0 06            beq @wexit
0048F9r 1  9D rr rr         sta IO_BUFFER, x
0048FCr 1  E8               inx
0048FDr 1  80 F5            bra @wloop
0048FFr 1               @wexit:
0048FFr 1  20 rr rr         jsr minix_write_data
004902r 1               
004902r 1  20 rr rr         jsr print_message
004905r 1  0D 0A 00         .byte AscCR,AscLF, 0
004908r 1  A2 1E            ldx #30
00490Ar 1               @l2:
00490Ar 1  9E rr rr         stz MINIX_SEARCH_FILENAME, x
00490Dr 1  CA               dex
00490Er 1  D0 FA            bne @l2
004910r 1  A2 1E            ldx #30                 ; length of data to copy
004912r 1                   ; copy search filename
004912r 1               
004912r 1  BD rr rr 9D      memcp test_filename, MINIX_SEARCH_FILENAME
004916r 1  rr rr CA D0  
00491Ar 1  F7 AD rr rr  
004921r 1               
004921r 1  20 rr rr         jsr print_message
004924r 1  0D 0A 00         .byte AscCR,AscLF, 0
004927r 1  20 rr rr         jsr minix_find_inode_for_filename       ; search filename
00492Ar 1  90 17            bcc @file_ok1
00492Cr 1  20 rr rr         jsr print_message
00492Fr 1  66 69 6C 65      .byte "file find fail", AscCR,AscLF, 0
004933r 1  20 66 69 6E  
004937r 1  64 20 66 61  
004940r 1  4C rr rr         jmp forth
004943r 1               @file_ok1:
004943r 1  20 rr rr         jsr print_message
004946r 1  66 69 6C 65      .byte "file find 2", AscCR,AscLF, 0
00494Ar 1  20 66 69 6E  
00494Er 1  64 20 32 0D  
004954r 1  20 rr rr         jsr minix_read_file
004957r 1  90 17            bcc @file_ok2
004959r 1  20 rr rr         jsr print_message
00495Cr 1  66 69 6C 65      .byte "file read fail", AscCR,AscLF, 0
004960r 1  20 72 65 61  
004964r 1  64 20 66 61  
00496Dr 1  4C rr rr         jmp forth
004970r 1               @file_ok2:
004970r 1  20 rr rr         jsr print_message
004973r 1  66 69 6C 65      .byte "file read 2", AscCR,AscLF, 0
004977r 1  20 72 65 61  
00497Br 1  64 20 32 0D  
004981r 1               
004981r 1  80 27            bra @forth
004983r 1               
004983r 1               @find_fail:
004983r 1  20 rr rr         jsr print_message
004986r 1  0D 0A 00         .byte AscCR,AscLF, 0
004989r 1  20 rr rr         jsr print_message
00498Cr 1  44 61 74 61      .byte "Data: ", 0
004990r 1  3A 20 00     
004993r 1               
004993r 1               
004993r 1  A5 rr            lda io_buffer_ptr + 1
004995r 1  A6 rr            ldx io_buffer_ptr
004997r 1  20 rr rr         jsr print16
00499Ar 1               
00499Ar 1  20 rr rr         jsr print_message
00499Dr 1  0D 0A 4E 46      .byte AscCR,AscLF,"NF", AscCR,AscLF, 0
0049A1r 1  0D 0A 00     
0049A4r 1  20 rr rr         jsr print_message
0049A7r 1  0D 0A 00         .byte AscCR,AscLF, 0
0049AAr 1               
0049AAr 1               @forth:
0049AAr 1  4C rr rr         jmp forth
0049ADr 1               
0049ADr 1               
0049ADr 1               minix_ls:
0049ADr 1  5A               phy
0049AEr 1               
0049AEr 1                   ; load first entry
0049AEr 1  A0 00            ldy #0
0049B0r 1               @loop:
0049B0r 1  A9 0D            lda #$0D
0049B2r 1  20 rr rr         jsr kernel_putc
0049B5r 1  A9 0A            lda #$0A
0049B7r 1  20 rr rr         jsr kernel_putc
0049BAr 1  B1 rr            lda (io_buffer_ptr), y
0049BCr 1  F0 26            beq @exit                   ; if this points to the 0 inode, exit now, because this file does not exist
0049BEr 1                   ; otherwise, the file does exist, print its name
0049BEr 1  A5 rr 85 rr      cp16 io_buffer_ptr, util_tmp
0049C2r 1  A5 rr 85 rr  
0049C6r 1  E6 rr D0 02      inc16 util_tmp
0049CAr 1  E6 rr        
0049CCr 1  E6 rr D0 02      inc16 util_tmp
0049D0r 1  E6 rr        
0049D2r 1  5A               phy
0049D3r 1  20 rr rr         jsr print_zp_index_string
0049D6r 1  7A               ply
0049D7r 1                   ; increase y by 20 to load next entry
0049D7r 1  98               tya
0049D8r 1  69 20            adc #$20
0049DAr 1  B0 03            bcs @inchigh
0049DCr 1  A8               tay
0049DDr 1  80 D1            bra @loop
0049DFr 1               @inchigh:
0049DFr 1  E6 rr            inc io_buffer_ptr + 1
0049E1r 1  A8               tay
0049E2r 1  80 CC            bra @loop
0049E4r 1               @exit:
0049E4r 1  7A               ply
0049E5r 1  60               rts
0049E6r 1               
0049E6r 1               
0049E6r 1               
0049E6r 1               platform_bye:
0049E6r 1  4C rr rr         jmp platform_bye
0049E9r 1               kernel_putc:
0049E9r 1                   ; """Print a single character to the console. """
0049E9r 1                   ;; Send_Char - send character in A out serial port.
0049E9r 1                   ;; Uses: A (original value restored)
0049E9r 1  8D 01 F0             sta $f001
0049ECr 1  60                   rts
0049EDr 1               
0049EDr 1               kernel_getc:
0049EDr 1                   ; """Get a single character from the keyboard. By default, py65mon
0049EDr 1                   ; is set to $f004, which we just keep. Note that py65mon's getc routine
0049EDr 1                   ; is non-blocking, so it will return '00' even if no key has been
0049EDr 1                   ; pressed. We turn this into a blocking version by waiting for a
0049EDr 1                   ; non-zero character.
0049EDr 1                   ; """
0049EDr 1               
0049EDr 1               _loop:
0049EDr 1  AD 04 F0         lda $f004
0049F0r 1  F0 FB            beq _loop
0049F2r 1  60               rts
0049F3r 1               
0049F3r 1               io_read_sector:
0049F3r 1                   ; sector to read is in io_current_sector
0049F3r 1  5A               phy
0049F4r 1  A9 rr            lda #<minix_data                ; load the minix data location
0049F6r 1  85 rr            sta io_read_location            ; and store it temporarly
0049F8r 1  A9 rr            lda #>minix_data
0049FAr 1  85 rr            sta io_read_location + 1
0049FCr 1  A5 rr 85 rr      cp16 io_current_sector, io_sector_tmp   ; copy sector requested to temporary
004A00r 1  A5 rr 85 rr  
004A04r 1                   ;multiply requested sector by 512 to get byte offset
004A04r 1  A0 09            ldy #9
004A06r 1               @mult:
004A06r 1  06 rr 26 rr      asl16 io_sector_tmp
004A0Ar 1  88               dey
004A0Br 1  D0 F9            bne @mult
004A0Dr 1  18 A5 rr 65      add16 io_sector_tmp, io_read_location, io_sector_tmp     ; add minix data address to byte offset
004A11r 1  rr 85 rr A5  
004A15r 1  rr 65 rr 85  
004A1Ar 1               
004A1Ar 1  A0 00            ldy #0
004A1Cr 1               @loop1:
004A1Cr 1  B1 rr            lda (io_sector_tmp), y
004A1Er 1  91 rr            sta (io_buffer_ptr), y
004A20r 1  C8               iny
004A21r 1  D0 F9            bne @loop1
004A23r 1  E6 rr            inc io_sector_tmp + 1       ; read next page
004A25r 1  E6 rr            inc io_buffer_ptr + 1       ; write to next page
004A27r 1               @loop2:
004A27r 1  B1 rr            lda (io_sector_tmp), y
004A29r 1  91 rr            sta (io_buffer_ptr), y
004A2Br 1  C8               iny
004A2Cr 1  D0 F9            bne @loop2
004A2Er 1  C6 rr            dec io_buffer_ptr + 1       ; point back to the beginning of the buffer
004A30r 1  7A               ply
004A31r 1  60               rts
004A32r 1               
004A32r 1               io_write_sector:
004A32r 1                   ; the sector to write to is in io_current_sector
004A32r 1                   ; the data to write is in the buffer pointed to by io_buffer_ptr
004A32r 1  5A               phy
004A33r 1  A9 rr            lda #<minix_data                ; load the minix data location
004A35r 1  85 rr            sta io_read_location            ; and store it temporarly
004A37r 1  A9 rr            lda #>minix_data
004A39r 1  85 rr            sta io_read_location + 1
004A3Br 1  A5 rr 85 rr      cp16 io_current_sector, io_sector_tmp   ; copy sector requested to temporary
004A3Fr 1  A5 rr 85 rr  
004A43r 1                   ;multiply requested sector by 512 to get byte offset
004A43r 1  A0 09            ldy #9
004A45r 1               @mult:
004A45r 1  06 rr 26 rr      asl16 io_sector_tmp
004A49r 1  88               dey
004A4Ar 1  D0 F9            bne @mult
004A4Cr 1  18 A5 rr 65      add16 io_sector_tmp, io_read_location, io_sector_tmp     ; add minix data address to byte offset
004A50r 1  rr 85 rr A5  
004A54r 1  rr 65 rr 85  
004A59r 1               
004A59r 1  A0 00            ldy #0
004A5Br 1               @loop1:
004A5Br 1  B1 rr            lda (io_buffer_ptr), y
004A5Dr 1  91 rr            sta (io_sector_tmp), y
004A5Fr 1  C8               iny
004A60r 1  D0 F9            bne @loop1
004A62r 1  E6 rr            inc io_sector_tmp + 1       ; read next page
004A64r 1  E6 rr            inc io_buffer_ptr + 1       ; write to next page
004A66r 1               @loop2:
004A66r 1  B1 rr            lda (io_buffer_ptr), y
004A68r 1  91 rr            sta (io_sector_tmp), y
004A6Ar 1  C8               iny
004A6Br 1  D0 F9            bne @loop2
004A6Dr 1  C6 rr            dec io_buffer_ptr + 1       ; point back to the beginning of the buffer
004A6Fr 1  7A               ply
004A70r 1  60               rts
004A71r 1               
004A71r 1               .segment "RODATA"
002800r 1  20 62 79 74  free_message: .byte " bytes free", $0D, 0
002804r 1  65 73 20 66  
002808r 1  72 65 65 0D  
00280Dr 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", AscCR, AscLF, AscCR,AscLF, "Type 'words' for available words",AscCR, AscLF,  0
002811r 1  6F 6D 65 20  
002815r 1  74 6F 20 50  
00284Ar 1               
00284Ar 1               
00284Ar 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
