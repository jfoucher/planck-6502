ca65 V2.18 - N/A
Main file   : platform/planck/cf.s
Current file: platform/planck/cf.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl32 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2                   rol src + 2
000000r 2                   rol src + 3
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc32 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment next byte if LSB wrapped round
000000r 2                   bne @done
000000r 2                   inc src+2       ;Increment the next byte the previous wrapped round
000000r 2                   bne @done
000000r 2                   inc src+3       ;Increment the MSB if previous wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, just decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2               @skip:
000000r 2                   dec src
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16zero src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2                   beq @end            ; if high byte is also zero, we reached zero, exit now
000000r 2               @skip:
000000r 2                   dec src
000000r 2                   bne @end            ; if low byte is not zero exit now
000000r 2                   lda src + 1         ; if low byte was zero, load high byte to check if it's also zero
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               ; compare data at two adresses for defined length
000000r 2               ; On exit, carry is set if there is a match
000000r 2               ; and unset if no match
000000r 2               ; length of data to check is in X
000000r 2               
000000r 2               .macro memcmp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               .local @exit_fail
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   cmp second, x
000000r 2                   bne @exit_fail
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; check 0th element
000000r 2                   cmp second
000000r 2                   bne @exit_fail
000000r 2                   sec
000000r 2                   bra @exit
000000r 2               @exit_fail:
000000r 2                   clc
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               ; copy data from one address to another for defined length
000000r 2               ; length of data to copy is in X
000000r 2               .macro memcp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   sta second, x
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; copy zeroth item
000000r 2                   sta second
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               ; calculates length of zero terminated string
000000r 2               ; result is in x
000000r 2               .macro strlen address
000000r 2               .local @loop
000000r 2               .local @exit
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda address, x
000000r 2                   beq @exit
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               CLOCK_SPEED = 24000000
000000r 1               TALI_OPTIONAL_ASSEMBLER = 1
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               ; select includes to enable card drivers
000000r 1               
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               CF_WRITE_SECTOR_COMMAND = $30
000000r 2               CF_ADDRESS = $FFD0
000000r 2               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               ; .include "drivers/sd.inc"
000000r 1               ; .include "drivers/ps2.inc"
000000r 1               ; .include "drivers/4004.inc"
000000r 1               ; .include "drivers/lcd.inc"
000000r 1               ; .include "drivers/vga.inc"
000000r 1               ; .include "drivers/keyboard.inc"
000000r 1               
000000r 1               .segment "ZEROPAGE": zeropage
000000r 1  xx xx        IRQ_VEC: .res 2
000002r 1  xx xx        NMI_VEC: .res 2
000004r 1  xx xx        io_buffer_ptr: .res 2
000006r 1               
000006r 1               .include "drivers/zp.s"
000006r 2               ; Copyright 2020 Jonathan Foucher
000006r 2               
000006r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000006r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000006r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000006r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000006r 2               ; is furnished to do so, subject to the following conditions:
000006r 2               
000006r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000006r 2               ; substantial portions of the Software.
000006r 2               
000006r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000006r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000006r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000006r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000006r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000006r 2               ; DEALINGS IN THE SOFTWARE.
000006r 2               
000006r 2               ; next_addr: .res 1
000006r 2               
000006r 2               
000006r 2  xx xx        tmp_var: .res 2
000008r 2  xx xx        stack_p: .res 2
00000Ar 2               .ifdef VIA1_BASE
00000Ar 2  xx xx xx xx  time: .res 4
00000Er 2               .endif
00000Er 2               
00000Er 1               
00000Er 1               .segment "BSS"
000000r 1               .ifdef VIA1_BASE
000000r 1  xx           lcd_absent: .res 1
000001r 1               .endif
000001r 1               .ifdef ACIA_BASE
000001r 1  xx           has_acia: .res 1
000002r 1               .endif
000002r 1               
000002r 1               .ifdef CF_ADDRESS
000002r 1               IO_BUFFER = cp0+256 ; set IO_BUFFER to block buffer
000002r 1  xx xx xx xx  IO_SECTOR: .res 4
000006r 1               .endif
000006r 1               
000006r 1               .segment "DATA"
000000r 1  4C rr rr     jmp kernel_init             ; jump to start when loading from CF card
000003r 1               .include "drivers/delayroutines.s"
000003r 2               ; Copyright 2020 Jonathan Foucher
000003r 2               
000003r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000003r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000003r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000003r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000003r 2               ; is furnished to do so, subject to the following conditions:
000003r 2               
000003r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000003r 2               ; substantial portions of the Software.
000003r 2               
000003r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000003r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000003r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000003r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000003r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000003r 2               ; DEALINGS IN THE SOFTWARE.
000003r 2               
000003r 2               
000003r 2               ; this routine delays by 2304 * y + 23 cycles
000003r 2               delay:
000003r 2  DA             phx       ; 3 cycles
000004r 2  5A             phy       ; 3 cycles
000005r 2               two:
000005r 2  A2 FF          ldx #$ff  ; 2 cycles
000007r 2               one:
000007r 2  EA             nop       ; 2 cycles
000008r 2  EA             nop       ; 2 cycles
000009r 2  CA             dex       ; 2 cycles
00000Ar 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
00000Cr 2  88             dey       ; 2 cycles
00000Dr 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Fr 2  7A             ply       ; 4 cycles
000010r 2  FA             plx       ; 4 cycles
000011r 2  60             rts       ; 6 cycles
000012r 2               
000012r 2               ; delay is in Y register
000012r 2               delay_long:
000012r 2  48             pha
000013r 2  5A             phy
000014r 2  DA             phx
000015r 2  98             tya
000016r 2  AA             tax
000017r 2               delay_long_loop:
000017r 2  A0 FF          ldy #$ff
000019r 2  20 rr rr       jsr delay
00001Cr 2  CA             dex
00001Dr 2  D0 F8          bne delay_long_loop
00001Fr 2  FA             plx
000020r 2  7A             ply
000021r 2  68             pla
000022r 2  60             rts
000023r 2               
000023r 2               delay_short:        ; delay Y * 19 cycles
000023r 2  5A             phy
000024r 2               delay_short_loop:
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2  EA             nop               ; 2 cycles
000029r 2  EA             nop               ; 2 cycles
00002Ar 2  EA             nop               ; 2 cycles
00002Br 2               
00002Br 2               
00002Br 2  88             dey               ; 2 cycles
00002Cr 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Er 2  7A             ply
00002Fr 2  60             rts
000030r 2               
000030r 1               
000030r 1               .ifdef VIA1_BASE
000030r 1               .include "drivers/timer.s"
000030r 2               
000030r 2               
000030r 2               COUNTER = CLOCK_SPEED/400        ; n/s
000030r 2               
000030r 2               timer_init:
000030r 2  AD 8E FF         lda IER
000033r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000035r 2  8D 8E FF         sta IER
000038r 2  A9 40            lda #$40        ; timer one free run mode
00003Ar 2  8D 8B FF         sta ACR
00003Dr 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00003Fr 2  8D 84 FF         sta T1CL
000042r 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000044r 2               
000044r 2  8D 85 FF         sta T1CH
000047r 2  64 rr            stz time
000049r 2  64 rr            stz time+1
00004Br 2  64 rr            stz time+2
00004Dr 2  64 rr            stz time+3
00004Fr 2  58               cli
000050r 2  60               rts
000051r 2               
000051r 2               
000051r 2               timer_irq:
000051r 2  E6 rr            inc time
000053r 2  F0 01            beq @inc1
000055r 2               @exit1:
000055r 2                   ; this resets the PS/2 temp variables
000055r 2                   ;jsr reset_ps2
000055r 2  60               rts
000056r 2               @inc1:
000056r 2  E6 rr            inc time+1
000058r 2  F0 02            beq @inc2
00005Ar 2  80 F9            bra @exit1
00005Cr 2               @inc2:
00005Cr 2  E6 rr            inc time+2
00005Er 2  F0 02            beq @inc3
000060r 2  80 F3            bra @exit1
000062r 2               @inc3:
000062r 2  E6 rr            inc time+3
000064r 2  80 EF            bra @exit1
000066r 2  60               rts
000067r 2               
000067r 1               .include "drivers/spi.s"
000067r 2               ; SPI defines
000067r 2               .ifndef DATA
000067r 2               DATA = $80
000067r 2               .endif
000067r 2               SS = $07   ; Slave Select with lowest 3 bits
000067r 2               SCK = $08   ; Clock on bit 3
000067r 2               MISO = $10  ; MISO on bit 4
000067r 2               MOSI = $20  ; MOSI on bit 5
000067r 2               CONF = $40  ; CONF on bit 6
000067r 2               
000067r 2               .segment "BSS"
000006r 2  xx           spi_tmp: .res 1
000007r 2  xx           spi_tmp2: .res 1
000008r 2  xx           spi_slave: .res 1
000009r 2               
000009r 2               .segment "DATA"
000067r 2               
000067r 2               spi_init:
000067r 2  AD 80 FF         lda PORTB               ; load current port B
00006Ar 2  29 90            and #(DATA | MISO)      ; set everything to zero except for PS2 DATA and MISO
00006Cr 2  09 40            ora #CONF               ; set CONF high
00006Er 2  8D 80 FF         sta PORTB               ; save to PORTB
000071r 2  AD 82 FF         lda DDRB                ; get current direction register
000074r 2  09 6F            ora #(MOSI | CONF | SCK | SS) ; set MOSI, CONF, SCK and SS as outputs
000076r 2  29 EF            and #($FF^MISO)                 ; set MISO as input
000078r 2  8D 82 FF         sta DDRB
00007Br 2  A9 FF            lda #$FF                ; flash leds to see what is going on
00007Dr 2  8D 83 FF         sta DDRA
000080r 2  8D 81 FF         sta PORTA
000083r 2  60               rts
000084r 2               
000084r 2               spi_select:
000084r 2                   ; selected slave in A
000084r 2  29 07            and #SS                 ; mask slave select bits
000086r 2  8D 80 FF         sta PORTB               ; set everything low except for SS bits
000089r 2  8D rr rr         sta spi_slave
00008Cr 2  5A               phy
00008Dr 2  A0 01            ldy #$1
00008Fr 2  20 rr rr         jsr delay_short         ; slight delay
000092r 2  09 40            ora #CONF               ; set CONF high to latch address
000094r 2  8D 80 FF         sta PORTB               ; save to PORTB
000097r 2  7A               ply                     ; CONF MUST stay high for the duration of the transfer
000098r 2  60               rts
000099r 2               
000099r 2               spi_clk_toggle:
000099r 2  60               rts
00009Ar 2               
00009Ar 2               spi_transceive:
00009Ar 2                   ; send data in A, received data will be in A
00009Ar 2  5A               phy
00009Br 2                   ; save data in RAM
00009Br 2  8D rr rr         sta spi_tmp
00009Er 2                   ; reset X
00009Er 2  DA               phx
00009Fr 2  A2 08            ldx #8
0000A1r 2                   ; reset result
0000A1r 2  9C rr rr         stz spi_tmp2
0000A4r 2               spi_send_loop:
0000A4r 2  0E rr rr         asl spi_tmp
0000A7r 2  90 08            bcc bit_unset
0000A9r 2               bit_set:
0000A9r 2  AD 80 FF         lda PORTB
0000ACr 2  09 60            ora #(MOSI | CONF)
0000AEr 2  4C rr rr         jmp clock_on
0000B1r 2               bit_unset:
0000B1r 2  AD 80 FF         lda PORTB
0000B4r 2  29 DF            and #(($FF^MOSI) | CONF)
0000B6r 2               clock_on:
0000B6r 2                   ; set data bit
0000B6r 2  0D rr rr         ora spi_slave
0000B9r 2  8D 80 FF         sta PORTB
0000BCr 2               
0000BCr 2                   ; set clock on
0000BCr 2  09 48            ora #(SCK | CONF)
0000BEr 2  0D rr rr         ora spi_slave
0000C1r 2  8D 80 FF         sta PORTB
0000C4r 2               
0000C4r 2                   ; read bit from slave, maybe add slight delay here ?
0000C4r 2  AD 80 FF         lda PORTB
0000C7r 2  29 10            and #MISO           ; mask miso bit
0000C9r 2  D0 07            bne spi_bit_set      ; bit is set
0000CBr 2                   ; bit is unset
0000CBr 2  18               clc
0000CCr 2  2E rr rr         rol spi_tmp2
0000CFr 2  4C rr rr         jmp clock_off
0000D2r 2               
0000D2r 2               spi_bit_set:
0000D2r 2  38               sec
0000D3r 2  2E rr rr         rol spi_tmp2
0000D6r 2               
0000D6r 2               
0000D6r 2               clock_off:
0000D6r 2  AD 80 FF         lda PORTB
0000D9r 2  29 F7            and #(($FF^SCK) | CONF)
0000DBr 2  0D rr rr         ora spi_slave
0000DEr 2  8D 80 FF         sta PORTB
0000E1r 2               end_loop:
0000E1r 2  CA               dex
0000E2r 2  D0 C0            bne spi_send_loop
0000E4r 2                   ; set data low
0000E4r 2  A0 01            ldy #$1
0000E6r 2  20 rr rr         jsr delay_short
0000E9r 2  AD 80 FF         lda PORTB
0000ECr 2  0D rr rr         ora spi_slave
0000EFr 2  29 DF            and #(($FF^MOSI) | CONF)
0000F1r 2  8D 80 FF         sta PORTB
0000F4r 2  FA               plx
0000F5r 2  7A               ply
0000F6r 2  AD rr rr         lda spi_tmp2
0000F9r 2  60               rts
0000FAr 2               
0000FAr 1               .endif
0000FAr 1               
0000FAr 1               .ifdef ACIA_BASE
0000FAr 1               .include "drivers/acia.s"
0000FAr 2               ACIA_DELAY = CLOCK_SPEED / 500000
0000FAr 2               
0000FAr 2               acia_init:
0000FAr 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
0000FDr 2                                           ; set specific modes and functions
0000FDr 2  9C rr rr         stz has_acia
000100r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
000102r 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
000102r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
000105r 2  AD E2 FF         lda ACIA_CMD        ; load command register again
000108r 2  C9 0B            cmp #$0B                ; if not the same
00010Ar 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
00010Cr 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
00010Fr 2  29 60            and #$60                ; check if present or absent
000111r 2  D0 0A            bne acia_absent
000113r 2  A9 01            lda #1
000115r 2  8D rr rr         sta has_acia           ; remember that ACIA is here
000118r 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
00011Ar 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
00011Ar 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
00011Dr 2               
00011Dr 2               acia_absent:
00011Dr 2  A0 14                ldy #20
00011Fr 2               aa_loop:
00011Fr 2  20 rr rr             jsr delay_short
000122r 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
000125r 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
000128r 2  88                   dey
000129r 2  D0 F4                bne aa_loop
00012Br 2               aa_end:
00012Br 2  60                   rts
00012Cr 2               
00012Cr 2               acia_out:
00012Cr 2  48               pha
00012Dr 2  5A               phy
00012Er 2  8D E0 FF         sta ACIA_DATA
000131r 2  A0 30            ldy #ACIA_DELAY            ;minimal delay is $02
000133r 2  20 rr rr         jsr delay_short
000136r 2  7A               ply
000137r 2  68               pla
000138r 2  60               rts
000139r 2               
000139r 2               acia_getc:
000139r 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
00013Cr 2  29 08            and #$08                        ; Check if there is character in the receiver
00013Er 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000140r 2  AD E0 FF         lda ACIA_DATA
000143r 2  38               sec
000144r 2  60               rts
000145r 2               @no_char:
000145r 2  18               clc
000146r 2  60               rts
000147r 2               
000147r 1               .endif
000147r 1               
000147r 1               
000147r 1               .ifdef KB_VIA_BASE
000147r 1               .include "drivers/keyboard.s"
000147r 1               .endif
000147r 1               .ifdef KB_INIT_STATE_RESET
000147r 1               .include "drivers/ps2.s"
000147r 1               .endif
000147r 1               
000147r 1               .ifdef LCD2_ENABLED
000147r 1               .include "drivers/4004.s"
000147r 1               .endif
000147r 1               .ifdef CF_ADDRESS
000147r 1               .include "drivers/cf.s"
000147r 2               .segment "ZEROPAGE": zeropage
00000Er 2  xx xx        CF_POINTER: .res 2
000010r 2               
000010r 2               .segment "BSS"
000009r 2  xx xx xx xx  LBA_SIZE: .res 4
00000Dr 2               .segment "DATA"
000147r 2               
000147r 2               
000147r 2               
000147r 2               cf_init:
000147r 2                   ; phy
000147r 2  A9 04            lda #$4
000149r 2                   ; lda #$6         ; try disabling interrupts from card
000149r 2                   ; ldy #7
000149r 2                   ; sta (CF_ADDRESS),y
000149r 2  8D D7 FF         sta CF_ADDRESS + 7
00014Cr 2  20 rr rr         jsr cf_wait
00014Fr 2  A9 E0            lda #$E0
000151r 2  8D D6 FF         sta CF_ADDRESS + 6
000154r 2  20 rr rr         jsr cf_wait
000157r 2  A9 01            lda #$1
000159r 2  8D D1 FF         sta CF_ADDRESS + 1
00015Cr 2  20 rr rr         jsr cf_wait
00015Fr 2  A9 EF            lda #$EF
000161r 2  8D D7 FF         sta CF_ADDRESS + 7
000164r 2  20 rr rr         jsr cf_wait
000167r 2  20 rr rr         jsr cf_err
00016Ar 2                   ; ply
00016Ar 2  60               rts
00016Br 2               
00016Br 2               
00016Br 2               
00016Br 2               
00016Br 2               cf_read:
00016Br 2  5A               phy
00016Cr 2  A0 00            ldy #0
00016Er 2               @loop:
00016Er 2  AD D0 FF         lda CF_ADDRESS
000171r 2  91 rr            sta (io_buffer_ptr), y
000173r 2  C8               iny
000174r 2  D0 F8            bne @loop
000176r 2  E6 rr            inc io_buffer_ptr + 1
000178r 2  20 rr rr         jsr cf_wait
00017Br 2               @loop2:
00017Br 2  AD D0 FF         lda CF_ADDRESS
00017Er 2  91 rr            sta (io_buffer_ptr), y
000180r 2  C8               iny
000181r 2  D0 F8            bne @loop2
000183r 2  C6 rr            dec io_buffer_ptr + 1
000185r 2               @loop3:
000185r 2  20 rr rr         jsr cf_wait
000188r 2  AD D7 FF         lda CF_ADDRESS + 7
00018Br 2  29 08            and #$08
00018Dr 2  F0 06            beq @exit
00018Fr 2  AD D0 FF         lda CF_ADDRESS
000192r 2  C8               iny
000193r 2  D0 F0            bne @loop3
000195r 2               @exit:
000195r 2  7A               ply
000196r 2  60               rts
000197r 2               
000197r 2               
000197r 2               ; number of sectors to read is in X
000197r 2               cf_read_sector:
000197r 2                   ; sei
000197r 2  20 rr rr         jsr cf_set_lba
00019Ar 2                   ; ldy #2
00019Ar 2                   ; sta (CF_ADDRESS), y
00019Ar 2  A9 01            lda #1
00019Cr 2  8D D2 FF         sta CF_ADDRESS + 2
00019Fr 2  20 rr rr         jsr cf_wait
0001A2r 2  A9 20            lda #CF_READ_SECTOR_COMMAND
0001A4r 2                   ; ldy #7
0001A4r 2                   ; sta (CF_ADDRESS), y
0001A4r 2  8D D7 FF         sta CF_ADDRESS + 7
0001A7r 2  20 rr rr         jsr cf_wait
0001AAr 2  20 rr rr         jsr cf_read
0001ADr 2  20 rr rr         jsr cf_err
0001B0r 2                   ; cli
0001B0r 2  60               rts
0001B1r 2               
0001B1r 2               ; number of sectors to write is in X
0001B1r 2               cf_write_sector:
0001B1r 2                   ; sei
0001B1r 2  20 rr rr         jsr cf_set_lba
0001B4r 2  A9 01            lda #1
0001B6r 2                   ; ldy #2
0001B6r 2                   ; sta (CF_ADDRESS), y
0001B6r 2  8D D2 FF         sta CF_ADDRESS + 2
0001B9r 2  20 rr rr         jsr cf_wait
0001BCr 2  A9 30            lda #CF_WRITE_SECTOR_COMMAND
0001BEr 2                   ; ldy #7
0001BEr 2                   ; sta (CF_ADDRESS), y
0001BEr 2  8D D7 FF         sta CF_ADDRESS + 7
0001C1r 2  20 rr rr         jsr cf_wait
0001C4r 2  20 rr rr         jsr cf_write
0001C7r 2  20 rr rr         jsr cf_err
0001CAr 2                   ; cli
0001CAr 2  60               rts
0001CBr 2               
0001CBr 2               
0001CBr 2               cf_write:
0001CBr 2  5A               phy
0001CCr 2  A0 00            ldy #0
0001CEr 2               @loop:
0001CEr 2  20 rr rr         jsr cf_wait
0001D1r 2               
0001D1r 2  B1 rr            lda (io_buffer_ptr), y
0001D3r 2  8D D0 FF         sta CF_ADDRESS
0001D6r 2  C8               iny
0001D7r 2  D0 F5            bne @loop
0001D9r 2  E6 rr            inc io_buffer_ptr + 1
0001DBr 2               @loop2:
0001DBr 2  20 rr rr         jsr cf_wait
0001DEr 2  B1 rr            lda (io_buffer_ptr), y
0001E0r 2  8D D0 FF         sta CF_ADDRESS
0001E3r 2  C8               iny
0001E4r 2  D0 F5            bne @loop2
0001E6r 2  C6 rr            dec io_buffer_ptr + 1
0001E8r 2               @loop3:
0001E8r 2  20 rr rr         jsr cf_wait
0001EBr 2  AD D7 FF         lda CF_ADDRESS + 7
0001EEr 2  29 08            and #$08
0001F0r 2  F0 06            beq @exit
0001F2r 2  8D D0 FF         sta CF_ADDRESS
0001F5r 2  C8               iny
0001F6r 2  D0 F0            bne @loop3
0001F8r 2               @exit:
0001F8r 2  7A               ply
0001F9r 2  60               rts
0001FAr 2               
0001FAr 2               
0001FAr 2               
0001FAr 2               
0001FAr 2               
0001FAr 2               
0001FAr 2               cf_wait:
0001FAr 2                   ; phy
0001FAr 2                   ; ldy #7
0001FAr 2               @wait_loop:
0001FAr 2                   ; lda (CF_ADDRESS), y
0001FAr 2  AD D7 FF         lda CF_ADDRESS + 7
0001FDr 2  29 80            and #$80
0001FFr 2  D0 F9            bne @wait_loop
000201r 2                   ; ply
000201r 2  60               rts
000202r 2               
000202r 2               cf_set_lba:
000202r 2  AD rr rr         lda IO_SECTOR
000205r 2  8D D3 FF         sta CF_ADDRESS + 3
000208r 2  20 rr rr         jsr cf_wait
00020Br 2  AD rr rr         lda IO_SECTOR + 1
00020Er 2  8D D4 FF         sta CF_ADDRESS + 4
000211r 2  20 rr rr         jsr cf_wait
000214r 2  AD rr rr         lda IO_SECTOR + 2
000217r 2  8D D5 FF         sta CF_ADDRESS + 5
00021Ar 2  20 rr rr         jsr cf_wait
00021Dr 2  AD rr rr         lda IO_SECTOR + 3
000220r 2  29 0F            and #$0F
000222r 2  09 E0            ora #$E0
000224r 2  8D D6 FF         sta CF_ADDRESS + 6
000227r 2  20 rr rr         jsr cf_wait
00022Ar 2  60               rts
00022Br 2               
00022Br 2               cf_err:
00022Br 2                   ; phy
00022Br 2  20 rr rr         jsr cf_wait
00022Er 2                   ; ldy #7
00022Er 2                   ; lda (CF_ADDRESS), y
00022Er 2  AD D7 FF         lda CF_ADDRESS + 7
000231r 2  29 01            and #$01
000233r 2  F0 05            beq @exit
000235r 2               @exit_fail:
000235r 2  A9 21            lda #'!'
000237r 2  20 rr rr         jsr kernel_putc
00023Ar 2               @exit:
00023Ar 2                   ; ply
00023Ar 2  60               rts
00023Br 2               
00023Br 2               
00023Br 2  20 62 79 74  bytes_msg: .byte " bytes"
00023Fr 2  65 73        
000241r 2               cf_end:
000241r 2               
000241r 2               
000241r 1               io_read_sector_address = cf_read_sector
000241r 1               io_write_sector_address = cf_write_sector
000241r 1               .endif
000241r 1               .ifdef SD
000241r 1               
000241r 1               .include "drivers/sd.s"
000241r 1               io_read_sector_address = sd_read_sector
000241r 1               
000241r 1               .endif
000241r 1               
000241r 1               ; .if .def(SD)
000241r 1               ; .include "../../fat16.s"
000241r 1               ; .elseif .def(CF_ADDRESS)
000241r 1               ; .include "../../fat16.s"
000241r 1               ; .endif
000241r 1               
000241r 1               .include "../../utils.s"
000241r 2               ;  print a 16-bit integer
000241r 2               ; lsb in x, msb in a
000241r 2               
000241r 2               .segment "ZEROPAGE": zeropage
000010r 2  xx xx        util_tmp: .res 2
000012r 2               
000012r 2               .segment "BSS"
00000Dr 2  xx xx        util_tmp_var: .res 2
00000Fr 2  xx xx xx xx  pad: .res 4
000013r 2               
000013r 2               .segment "DATA"
000241r 2               
000241r 2               print16:
000241r 2  8D rr rr         sta acc+1
000244r 2  8E rr rr         stx acc
000247r 2               
000247r 2  A2 04            ldx #4
000249r 2               nextdig:
000249r 2  20 rr rr         jsr div
00024Cr 2  AD rr rr         lda ext
00024Fr 2  9D rr rr         sta num,x
000252r 2  CA               dex
000253r 2  10 F4            bpl nextdig
000255r 2               
000255r 2               firstdig:
000255r 2  E8               inx
000256r 2  E0 05            cpx #5
000258r 2  F0 17            beq print0
00025Ar 2  BD rr rr         lda num,x
00025Dr 2  F0 F6            beq firstdig
00025Fr 2               
00025Fr 2               ptnxtdig:
00025Fr 2  18               clc
000260r 2  69 30            adc #'0'
000262r 2  20 rr rr         jsr kernel_putc
000265r 2  E8               inx
000266r 2  E0 05            cpx #5
000268r 2  F0 06            beq pt16done
00026Ar 2  BD rr rr         lda num,x
00026Dr 2  4C rr rr         jmp ptnxtdig
000270r 2               
000270r 2               pt16done:
000270r 2  60               rts
000271r 2               
000271r 2               print0:
000271r 2  A9 30            lda #'0'
000273r 2  20 rr rr         jsr kernel_putc
000276r 2  60               rts
000277r 2               
000277r 2  00 00 00 00  num: .byte 0,0,0,0,0
00027Br 2  00           
00027Cr 2               
00027Cr 2               ; 16/16-bit division, from the fridge
00027Cr 2               ; acc/aux -> acc, remainder in ext
00027Cr 2               div:
00027Cr 2  A9 00            lda #0
00027Er 2  8D rr rr         sta ext+1
000281r 2  A0 10            ldy #$10
000283r 2               dloop:
000283r 2  0E rr rr         asl acc
000286r 2  2E rr rr         rol acc+1
000289r 2  2A               rol
00028Ar 2  2E rr rr         rol ext+1
00028Dr 2  48               pha
00028Er 2  CD rr rr         cmp aux
000291r 2  AD rr rr         lda ext+1
000294r 2  ED rr rr         sbc aux+1
000297r 2  90 0B            bcc div2
000299r 2  8D rr rr         sta ext+1
00029Cr 2  68               pla
00029Dr 2  ED rr rr         sbc aux
0002A0r 2  48               pha
0002A1r 2  EE rr rr         inc acc
0002A4r 2               div2:
0002A4r 2  68               pla
0002A5r 2  88               dey
0002A6r 2  D0 DB            bne dloop
0002A8r 2  8D rr rr         sta ext
0002ABr 2  60               rts
0002ACr 2               
0002ACr 2  00 00        acc: .word 0
0002AEr 2  0A 00        aux: .word 10 ; constant
0002B0r 2  00 00        ext: .word 0
0002B2r 2               
0002B2r 2               
0002B2r 2               
0002B2r 2               calculate_free_mem:
0002B2r 2                   ; load dictionary address
0002B2r 2                   ; fill with $55 until ram_end
0002B2r 2                   ; read and check same
0002B2r 2                   ; fill again with zeroes
0002B2r 2               
0002B2r 2  9C rr rr         stz util_tmp_var
0002B5r 2  9C rr rr         stz util_tmp_var + 1
0002B8r 2               
0002B8r 2  A0 00            ldy #0
0002BAr 2               @loop:
0002BAr 2  A9 55            lda #$55
0002BCr 2  91 rr            sta (util_tmp), y        ; store to mem address
0002BEr 2  D1 rr            cmp (util_tmp), y        ; compare to what is now there
0002C0r 2  D0 19            bne @exit               ; no equal, stop couting and exit
0002C2r 2  A9 00            lda #0                  ; zero the memory again
0002C4r 2  91 rr            sta (util_tmp), y
0002C6r 2  EE rr rr         inc util_tmp_var
0002C9r 2  D0 03            bne @incok
0002CBr 2  EE rr rr         inc util_tmp_var + 1
0002CEr 2               @incok:
0002CEr 2  C8               iny
0002CFr 2  D0 E9            bne @loop
0002D1r 2  A5 rr            lda util_tmp + 1
0002D3r 2  C9 80            cmp #>ram_end
0002D5r 2  B0 04            bcs @exit
0002D7r 2  E6 rr            inc util_tmp + 1
0002D9r 2  80 DF            bra @loop
0002DBr 2               @exit:
0002DBr 2  60               rts
0002DCr 2               
0002DCr 2               
0002DCr 2               
0002DCr 2               print_message:
0002DCr 2  68           	pla					; get return address from stack
0002DDr 2  85 rr        	sta util_tmp
0002DFr 2  68           	pla
0002E0r 2  85 rr        	sta util_tmp + 1
0002E2r 2               
0002E2r 2  80 03        	bra @inc
0002E4r 2               @print:
0002E4r 2  20 rr rr     	jsr kernel_putc
0002E7r 2               
0002E7r 2               @inc:
0002E7r 2  E6 rr        	inc util_tmp
0002E9r 2  D0 02        	bne @inced
0002EBr 2  E6 rr        	inc util_tmp + 1
0002EDr 2               @inced:
0002EDr 2  B2 rr        	lda (util_tmp)
0002EFr 2  D0 F3        	bne @print
0002F1r 2  A5 rr        	lda util_tmp + 1
0002F3r 2  48           	pha
0002F4r 2  A5 rr        	lda util_tmp
0002F6r 2  48           	pha
0002F7r 2               print_message_end:
0002F7r 2  60           	rts
0002F8r 2               
0002F8r 2               
0002F8r 2               print_zp_index_string:
0002F8r 2               @loop:
0002F8r 2  B1 rr            lda (util_tmp), y
0002FAr 2  F0 06            beq @exit
0002FCr 2  20 rr rr         jsr kernel_putc
0002FFr 2  C8               iny
000300r 2  D0 F6            bne @loop
000302r 2               @exit:
000302r 2  60               rts
000303r 2               
000303r 2               
000303r 2               output_ascii:
000303r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
000303r 2  48               pha
000304r 2  4A               lsr             ; convert high nibble first
000305r 2  4A               lsr
000306r 2  4A               lsr
000307r 2  4A               lsr
000308r 2  20 rr rr         jsr output_ascii_nibble_to_ascii
00030Br 2  68               pla
00030Cr 2               
00030Cr 2                   ; fall through to _nibble_to_ascii
00030Cr 2               
00030Cr 2               output_ascii_nibble_to_ascii:
00030Cr 2               ; """Private helper function for byte_to_ascii: Print lower nibble
00030Cr 2               ; of A and and EMIT it. This does the actual work.
00030Cr 2               ; """
00030Cr 2  29 0F            and #$0F
00030Er 2  09 30            ora #'0'
000310r 2  C9 3A            cmp #$3A        ; '9+1
000312r 2  90 02            bcc @1
000314r 2  69 06            adc #$06
000316r 2               
000316r 2               @1:
000316r 2  20 rr rr         jsr kernel_putc
000319r 2  60               rts
00031Ar 2               
00031Ar 1               
00031Ar 1               ; .include "drivers/spi.s"
00031Ar 1               ; .include "drivers/sd.s"
00031Ar 1               ; .include "drivers/vga.s"
00031Ar 1               ; .include "drivers/fat32.s"
00031Ar 1               ; .include "drivers/lcd.s"
00031Ar 1               
00031Ar 1               ; .include "../../ed.s"
00031Ar 1               
00031Ar 1               .include "../../forth.s"
00031Ar 2               
00031Ar 2               
00031Ar 2               ; Definitions for Tali Forth 2
00031Ar 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00031Ar 2               ; First version: 01. Apr 2016 (Liara Forth)
00031Ar 2               ; This version: 29. Jan 2020
00031Ar 2               
00031Ar 2               ; This file is included by taliforth.asm. These are the general
00031Ar 2               ; definitions; platform-specific definitions such as the
00031Ar 2               ; memory map are kept in the platform folder.
00031Ar 2               
00031Ar 2               stack0 =    $0100   ; location of the stack
00031Ar 2               
00031Ar 2               ; User Variables:
00031Ar 2               ; Block variables
00031Ar 2               blk_offset =  0        ; BLK : UP + 0
00031Ar 2               scr_offset =  2        ; SCR : UP + 2
00031Ar 2               
00031Ar 2               ; Wordlists
00031Ar 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
00031Ar 2               num_wordlists_offset =  5
00031Ar 2                                          ; #WORDLISTS (byte) : UP + 5
00031Ar 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
00031Ar 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
00031Ar 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
00031Ar 2                                          ;          (Number of wordlists in search order)
00031Ar 2               search_order_offset =  31
00031Ar 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
00031Ar 2                                          ; Allowing for 9 to keep offsets even.
00031Ar 2               max_wordlists =  12    ; Maximum number of wordlists supported
00031Ar 2                                          ; 4 Tali built-ins + 8 user wordlists
00031Ar 2               
00031Ar 2               ; Buffer variables
00031Ar 2               blkbuffer_offset =     40   ; Address of buffer
00031Ar 2               buffblocknum_offset =  42   ; Block number current in buffer
00031Ar 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
00031Ar 2               
00031Ar 2               ; Block I/O vectors
00031Ar 2               blockread_offset =     46   ; Vector to block reading routine
00031Ar 2               blockwrite_offset =    48   ; Vector to block writing routine
00031Ar 2               
00031Ar 2               
00031Ar 2               ; ASCII CHARACTERS
00031Ar 2               AscCC =   $03  ; break (CTRL-c)
00031Ar 2               AscBELL = $07  ; bell sound
00031Ar 2               AscBS =   $08  ; backspace
00031Ar 2               AscLF =   $0a  ; line feed
00031Ar 2               AscCR =   $0d  ; carriage return
00031Ar 2               AscESC =  $1b  ; escape
00031Ar 2               AscSP =   $20  ; space
00031Ar 2               AscDEL =  $7f  ; delete (CTRL-h)
00031Ar 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
00031Ar 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
00031Ar 2               
00031Ar 2               ; DICTIONARY FLAGS
00031Ar 2               ; The first three bits are currently unused
00031Ar 2               CO = 1  ; Compile Only
00031Ar 2               AN = 2  ; Always Native Compile
00031Ar 2               IM = 4  ; Immediate Word
00031Ar 2               NN = 8  ; Never Native Compile
00031Ar 2               UF = 16 ; Includes Underflow Check (RESERVED)
00031Ar 2               HC = 32 ; Word has Code Field Area (CFA)
00031Ar 2               
00031Ar 2               
00031Ar 2               ; VARIOUS
00031Ar 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
00031Ar 2               
00031Ar 2               ; END
00031Ar 2               
00031Ar 2               .segment "ZEROPAGE": zeropage
000012r 2               ; ZERO PAGE ADDRESSES/VARIABLES
000012r 2               
000012r 2               ; These are kept at the top of Zero Page, with the most important variables at
000012r 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
000012r 2               ; an overflow, the lower, less important variables will be clobbered first,
000012r 2               ; giving the system a chance to recover. In other words, they are part of the
000012r 2               ; floodplain.
000012r 2               
000012r 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
000012r 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
000012r 2               
000012r 2  xx xx        cp: .res 2   ; Compiler Pointer
000014r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000016r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000018r 2                                          ; a :NONAME declared word (see status)
000018r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
00001Ar 2  xx xx        cib: .res 2   ; address of current input buffer
00001Cr 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Er 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
000020r 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
000022r 2  xx xx        output: .res 2  ; vector for EMIT
000024r 2  xx xx        input: .res 2  ; vector for KEY
000026r 2  xx xx        havekey: .res 2  ; vector for KEY?
000028r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
00002Ar 2  xx xx        base: .res 2  ; number radix, default decimal
00002Cr 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Er 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
000030r 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
000032r 2  xx xx        status: .res 2  ; internal status information
000034r 2                                          ; (used by : :NONAME ; ACCEPT)
000034r 2                                          ; Bit 7 = Redefined word message postpone
000034r 2                                          ;         When set before calling CREATE, it will
000034r 2                                          ;         not print the "redefined xxxx" message if
000034r 2                                          ;         the word exists. Instead, this bit will
000034r 2                                          ;         be reused and after CREATE has run, it will
000034r 2                                          ;         be set if the word was redefined and 0 if
000034r 2                                          ;         not. This bit should be 0 when not in use.
000034r 2                                          ; Bit 6 = 1 for normal ":" definitions
000034r 2                                          ;         WORKWORD contains nt of word being compiled
000034r 2                                          ;       = 0 for :NONAME definitions
000034r 2                                          ;         WORKWORD contains xt of word being compiled
000034r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000034r 2                                          ;       = 0 for NUMBER returning a single word
000034r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000034r 2                                          ;       = 0 CTRL-n recalls previous history
000034r 2                                          ; Bit 2 = Current history buffer msb
000034r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000034r 2                                          ; Bit 0 = Current history buffer lsb
000034r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000034r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000036r 2  xx xx        tmp1: .res 2  ; temporary storage
000038r 2  xx xx        tmp2: .res 2  ; temporary storage
00003Ar 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
00003Cr 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Er 2  xx xx        tmptos: .res 2  ; temporary TOS storage
000040r 2  xx xx        editor1: .res 2  ; temporary for editors
000042r 2  xx xx        editor2: .res 2  ; temporary for editors
000044r 2  xx xx        editor3: .res 2  ; temporary for editors
000046r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000048r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
00004Cr 2  xx xx xx xx  
000050r 2               
000050r 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000013r 2  xx xx xx xx  hist_buff: .res $400
000017r 2  xx xx xx xx  
00001Br 2  xx xx xx xx  
000413r 2  xx xx xx xx  buffer0: .res $100
000417r 2  xx xx xx xx  
00041Br 2  xx xx xx xx  
000513r 2               
000513r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
00031Ar 2               
00031Ar 2               
00031Ar 2               
00031Ar 2               forth:
00031Ar 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
00031Ar 3               ; Low-level Forth word routines
00031Ar 3               ; Tali Forth 2 for the 65c02
00031Ar 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00031Ar 3               ; First version: 19. Jan 2014
00031Ar 3               ; This version: 03. Jan 2018
00031Ar 3               
00031Ar 3               ; This list is ordered alphabetically by the names of the words, not their
00031Ar 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
00031Ar 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
00031Ar 3               ; status lines that begins with "; ## ", which allows auto-generation of the
00031Ar 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
00031Ar 3               
00031Ar 3               ;       TBA --> fragment --> coded --> tested --> auto
00031Ar 3               
00031Ar 3               ; "Auto" means that the word is automatically tested by the test suite (good),
00031Ar 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
00031Ar 3               ; it hasn't been tested at all (bad). See the test suite for more details.
00031Ar 3               
00031Ar 3               ; ## COLD ( -- ) "Reset the Forth system"
00031Ar 3               ; ## "cold"  tested  Tali Forth
00031Ar 3               ;       """Reset the Forth system. Does not restart the kernel,
00031Ar 3               ;       use the 65c02 reset for that. Flows into ABORT.
00031Ar 3               ;       """
00031Ar 3               xt_cold:
00031Ar 3  D8                           cld
00031Br 3               
00031Br 3                               ; Set the OUTPUT vector to the default kernel_putc
00031Br 3                               ; We do this really early so we can print error messages
00031Br 3                               ; during debugging
00031Br 3  A9 rr                        lda #<kernel_putc
00031Dr 3  85 rr                        sta output
00031Fr 3  A9 rr                        lda #>kernel_putc
000321r 3  85 rr                        sta output+1
000323r 3               
000323r 3                               ; Load all of the important zero page variables from ROM
000323r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
000325r 3               
000325r 3               @load_zp_loop:
000325r 3                               ; This loop loads them back to front. We can use X here
000325r 3                               ; because Tali hasn't started using the stack yet.
000325r 3  BD rr rr                     lda cold_zp_table,x
000328r 3  95 rr                        sta cp,x
00032Ar 3  CA                           dex
00032Br 3  D0 F8                        bne @load_zp_loop
00032Dr 3               
00032Dr 3                               ; Copy the 0th element.
00032Dr 3  AD rr rr                     lda cold_zp_table
000330r 3  85 rr                        sta cp
000332r 3                               ; Initialize 65c02 stack (Return Stack)
000332r 3  A2 rr                        ldx #rsp0
000334r 3  9A                           txs
000335r 3               
000335r 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
000335r 3                               ; can load high-level words with EVALUATE
000335r 3  A2 rr                        ldx #dsp0
000337r 3               
000337r 3               
000337r 3                               ; Initialize the user variables.
000337r 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
000339r 3  A9 00                        lda #0
00033Br 3               
00033Br 3               @load_user_vars_loop:
00033Br 3                               ; Like the zero page variables, these are initialized
00033Br 3                               ; back to front.
00033Br 3  B9 rr rr                     lda cold_user_table,y
00033Er 3  91 rr                        sta (up),y
000340r 3  88                           dey
000341r 3  D0 F8                        bne @load_user_vars_loop
000343r 3               
000343r 3                               ; Copy the 0th element.
000343r 3  AD rr rr                     lda cold_user_table
000346r 3  92 rr                        sta (up)
000348r 3  20 rr rr                     jsr xt_cr
00034Br 3               
00034Br 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
00034Br 3                               ; you do not have any high-level words, this part can be
00034Br 3                               ; commented out.
00034Br 3  CA                           dex
00034Cr 3  CA                           dex
00034Dr 3  CA                           dex
00034Er 3  CA                           dex
00034Fr 3               
00034Fr 3               
00034Fr 3                               ; start address goes NOS
00034Fr 3  A9 rr                        lda #<forth_words_start
000351r 3  95 02                        sta 2,x
000353r 3  A9 rr                        lda #>forth_words_start
000355r 3  95 03                        sta 3,x
000357r 3               
000357r 3                               ; length goes TOS
000357r 3  A9 rr                        lda #<forth_words_end
000359r 3  38                           sec
00035Ar 3  E9 rr                        sbc #<forth_words_start
00035Cr 3  95 00                        sta 0,x
00035Er 3               
00035Er 3  A9 rr                        lda #>forth_words_end
000360r 3  E9 rr                        sbc #>forth_words_start
000362r 3  95 01                        sta 1,x
000364r 3               
000364r 3               
000364r 3  20 rr rr                     jsr xt_evaluate
000367r 3               
000367r 3                               ; Now define any user words via EVALUATE. If you do not have
000367r 3                               ; any user-defined words, this part can be commented out as
000367r 3                               ; well.
000367r 3  CA                           dex
000368r 3  CA                           dex
000369r 3  CA                           dex
00036Ar 3  CA                           dex
00036Br 3               
00036Br 3               
00036Br 3                               ; start address goes NOS
00036Br 3  A9 rr                        lda #<user_words_start
00036Dr 3  95 02                        sta 2,x
00036Fr 3  A9 rr                        lda #>user_words_start
000371r 3  95 03                        sta 3,x
000373r 3               
000373r 3                               ; length goes TOS
000373r 3  A9 rr                        lda #<user_words_end
000375r 3  38                           sec
000376r 3  E9 rr                        sbc #<user_words_start
000378r 3  95 00                        sta 0,x
00037Ar 3               
00037Ar 3  A9 rr                        lda #>user_words_end
00037Cr 3  E9 rr                        sbc #>user_words_start
00037Er 3  95 01                        sta 1,x
000380r 3               
000380r 3  20 rr rr                     jsr xt_evaluate
000383r 3               
000383r 3                               ; Initialize all of the history buffers by putting a zero in
000383r 3                               ; each length byte.
000383r 3  9C rr rr                     stz hist_buff
000386r 3  9C rr rr                     stz hist_buff+$80
000389r 3  9C rr rr                     stz hist_buff+$100
00038Cr 3  9C rr rr                     stz hist_buff+$180
00038Fr 3  9C rr rr                     stz hist_buff+$200
000392r 3  9C rr rr                     stz hist_buff+$280
000395r 3  9C rr rr                     stz hist_buff+$300
000398r 3  9C rr rr                     stz hist_buff+$380
00039Br 3               
00039Br 3               
00039Br 3                               ; fall through to ABORT
00039Br 3               
00039Br 3               
00039Br 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
00039Br 3               ; ## "abort"  tested  ANS core
00039Br 3                       ; """https://forth-standard.org/standard/core/ABORT
00039Br 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
00039Br 3                       ; subroutine if we want to because we are going to reset the 65c02's
00039Br 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
00039Br 3                       ; actually delete the stuff on the Data Stack.
00039Br 3                       ; """
00039Br 3               xt_abort:
00039Br 3  A2 rr                        ldx #dsp0
00039Dr 3               
00039Dr 3                               ; fall through to QUIT
00039Dr 3               
00039Dr 3               
00039Dr 3               ; ## QUIT ( -- ) "Reset the input and get new input"
00039Dr 3               ; ## "quit"  tested  ANS core
00039Dr 3                       ; """https://forth-standard.org/standard/core/QUIT
00039Dr 3                       ; Rest the input and start command loop
00039Dr 3                       ; """
00039Dr 3               
00039Dr 3               xt_quit:
00039Dr 3                               ; Clear the Return Stack. This is a little screwed up
00039Dr 3                               ; because the 65c02 can only set the Return Stack via X,
00039Dr 3                               ; which is our Data Stack pointer. The ANS specification
00039Dr 3                               ; demands, however, that ABORT reset the Data Stack pointer
00039Dr 3  8A                           txa             ; Save the DSP that we just defined
00039Er 3  A2 rr                        ldx #rsp0
0003A0r 3  9A                           txs
0003A1r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
0003A2r 3               
0003A2r 3                               ; make sure instruction pointer is empty
0003A2r 3  64 rr                        stz ip
0003A4r 3  64 rr                        stz ip+1
0003A6r 3               
0003A6r 3                               ; SOURCE-ID is zero (keyboard input)
0003A6r 3  64 rr                        stz insrc
0003A8r 3  64 rr                        stz insrc+1
0003AAr 3               
0003AAr 3                               ; STATE is zero (interpret, not compile)
0003AAr 3  64 rr                        stz state
0003ACr 3  64 rr                        stz state+1
0003AEr 3               @get_line:
0003AEr 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
0003B0r 3  85 rr                        sta cib
0003B2r 3  A9 rr                        lda #>buffer0
0003B4r 3  85 rr                        sta cib+1
0003B6r 3               
0003B6r 3                               ; Size of current input buffer (CIB) is zero
0003B6r 3  64 rr                        stz ciblen
0003B8r 3  64 rr                        stz ciblen+1
0003BAr 3               
0003BAr 3                               ; Accept a line from the current import source. This is how
0003BAr 3                               ; modern Forths to it.
0003BAr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0003BDr 3               
0003BDr 3                               ; Test flag: LSB of TOS
0003BDr 3  B5 00                        lda 0,x
0003BFr 3  D0 05                        bne @success
0003C1r 3               
0003C1r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
0003C1r 3                               ; need to print an error message and reset the machine. We
0003C1r 3                               ; don't need to save TOS because we're going to clobber it
0003C1r 3                               ; anyway when we go back to ABORT.
0003C1r 3  A9 06                        lda #err_refill
0003C3r 3  4C rr rr                     jmp error
0003C6r 3               
0003C6r 3               @success:
0003C6r 3                               ; Assume we have successfully accepted a string of input from
0003C6r 3                               ; a source, with address cib and length of input in ciblen. We
0003C6r 3                               ; arrive here still with the TRUE flag from REFILL as TOS
0003C6r 3  E8                           inx                     ; drop
0003C7r 3  E8                           inx
0003C8r 3               
0003C8r 3                               ; Main compile/execute routine
0003C8r 3  20 rr rr                     jsr interpret
0003CBr 3               
0003CBr 3                               ; Test for Data Stack underflow. Tali Forth does not check for
0003CBr 3                               ; overflow because it is so rare
0003CBr 3  E0 rr                        cpx #dsp0
0003CDr 3  F0 05                        beq @stack_ok
0003CFr 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
0003D1r 3               
0003D1r 3  4C rr rr                     jmp underflow_error
0003D4r 3               
0003D4r 3               @stack_ok:
0003D4r 3                               ; Display system prompt if all went well. If we're interpreting,
0003D4r 3                               ; this is " ok", if we're compiling, it's " compiled". Note
0003D4r 3                               ; space at beginning of the string.
0003D4r 3  A5 rr                        lda state
0003D6r 3  F0 02                        beq @print
0003D8r 3               
0003D8r 3  A9 01                        lda #1                  ; number for "compile" string
0003DAr 3               @print:
0003DAr 3  20 rr rr                     jsr print_string
0003DDr 3               
0003DDr 3                               ; Awesome line, everybody! Now get the next one.
0003DDr 3  80 CF                        bra @get_line
0003DFr 3               
0003DFr 3               z_cold:
0003DFr 3               z_abort:
0003DFr 3               z_quit:         ; no RTS required
0003DFr 3               
0003DFr 3               
0003DFr 3               
0003DFr 3               ; This table holds all of the initial values for the variables in zero page.
0003DFr 3               ; This table is used by COLD.
0003DFr 3               cold_zp_table:
0003DFr 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
0003E1r 3                                               ; block buffer
0003E1r 3  rr rr                .word dictionary_start  ; dp
0003E3r 3  00 00                .word 0                 ; workword
0003E5r 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0003E7r 3  rr rr                .word buffer0           ; cib
0003E9r 3  00 00                .word 0                 ; ciblen
0003EBr 3  00 00                .word 0                 ; toin
0003EDr 3  00 00                .word 0                 ; ip
0003EFr 3  rr rr                .word kernel_putc       ; output
0003F1r 3  rr rr                .word kernel_getc       ; input
0003F3r 3  00 00                .word 0                 ; havekey
0003F5r 3  00 00                .word 0                 ; state (0 = interpret)
0003F7r 3  0A 00                .word 10                ; base
0003F9r 3  14 00                .word 20                ; nc-limit
0003FBr 3  00 00                .word 0                 ; uf_strip (off by default)
0003FDr 3  rr rr                .word cp0               ; up (user vars put right at beginning of
0003FFr 3                                               ; available RAM)
0003FFr 3  00 00                .word 0                 ; status
000401r 3               cold_zp_table_end:
000401r 3               
000401r 3               ; No further ZP variables are initialized. The variables past this point are
000401r 3               ; all temporaries.
000401r 3               
000401r 3               ; This table holds the inital values for the user variables. This table is
000401r 3               ; used by COLD.
000401r 3               cold_user_table:
000401r 3  00 00                .word 0                         ; BLK
000403r 3  00 00                .word 0                         ; SCR
000405r 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
000406r 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
000407r 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
000409r 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
00040Br 3               .ifdef TALI_OPTIONAL_ASSEMBLER
00040Br 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
00040Dr 3               .else
00040Dr 3                       .word 0
00040Dr 3               .endif
00040Dr 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
00040Fr 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
000413r 3  00 00 00 00  
000417r 3  00 00 00 00  
00041Fr 3  01                   .byte 1                         ; #ORDER
000420r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
000424r 3  00 00 00 00  
000428r 3  00           
000429r 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
00042Br 3  00 00                .word 0                         ; block in buffer
00042Dr 3  00 00                .word 0                         ; buffer status (not in use)
00042Fr 3  rr rr                .word xt_block_word_error       ; block-read vector
000431r 3  rr rr                .word xt_block_word_error       ; block-write vector
000433r 3               cold_user_table_end:
000433r 3               
000433r 3               
000433r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
000433r 3               ; ## "abort""  tested  ANS core
000433r 3                       ; """https://forth-standard.org/standard/core/ABORTq
000433r 3                       ; Abort and print a string.
000433r 3                       ; """
000433r 3               
000433r 3               xt_abort_quote:
000433r 3                               ; save the string
000433r 3  20 rr rr                     jsr xt_s_quote          ; S"
000436r 3               
000436r 3                               ; compile run-time part
000436r 3  A0 rr                        ldy #>abort_quote_runtime
000438r 3  A9 rr                        lda #<abort_quote_runtime
00043Ar 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
00043Dr 3               
00043Dr 3  60           z_abort_quote:  rts
00043Er 3               
00043Er 3               
00043Er 3               abort_quote_runtime:
00043Er 3                       ; """Runtime aspect of ABORT_QUOTE"""
00043Er 3               
00043Er 3                               ; We arrive here with ( f addr u )
00043Er 3  B5 04                        lda 4,x
000440r 3  15 05                        ora 5,x
000442r 3  F0 09                        beq @done       ; if FALSE, we're done
000444r 3               
000444r 3                               ; We're true, so print string and ABORT. We follow Gforth
000444r 3                               ; in going to a new line after the string
000444r 3  20 rr rr                     jsr xt_type
000447r 3  20 rr rr                     jsr xt_cr
00044Ar 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
00044Dr 3               @done:
00044Dr 3                               ; Drop three entries from the Data Stack
00044Dr 3  8A                           txa
00044Er 3  18                           clc
00044Fr 3  69 06                        adc #6
000451r 3  AA                           tax
000452r 3               
000452r 3  60                           rts
000453r 3               
000453r 3               
000453r 3               
000453r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
000453r 3               ; ## "abs"  auto  ANS core
000453r 3                       ; """https://forth-standard.org/standard/core/ABS
000453r 3                       ; Return the absolute value of a number.
000453r 3                       ; """
000453r 3               
000453r 3               xt_abs:
000453r 3  20 rr rr                     jsr underflow_1
000456r 3               
000456r 3  B5 01                        lda 1,x
000458r 3  10 0D                        bpl @done       ; positive number, easy money!
00045Ar 3               
00045Ar 3                               ; negative: calculate 0 - n
00045Ar 3  38                           sec
00045Br 3  A9 00                        lda #0
00045Dr 3  F5 00                        sbc 0,x         ; LSB
00045Fr 3  95 00                        sta 0,x
000461r 3               
000461r 3  A9 00                        lda #0          ; MSB
000463r 3  F5 01                        sbc 1,x
000465r 3  95 01                        sta 1,x
000467r 3               
000467r 3               @done:
000467r 3  60           z_abs:          rts
000468r 3               
000468r 3               
000468r 3               
000468r 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
000468r 3               ; ## "accept"  auto  ANS core
000468r 3                       ; """https://forth-standard.org/standard/core/ACCEPT
000468r 3                       ; Receive a string of at most n1 characters, placing them at
000468r 3                       ; addr. Return the actual number of characters as n2. Characters
000468r 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
000468r 3                       ; modern Forths.
000468r 3                       ; """
000468r 3               
000468r 3               xt_accept:
000468r 3  20 rr rr                     jsr underflow_2
00046Br 3               
00046Br 3                               ; Abort if we were asked to receive 0 chars
00046Br 3  B5 00                        lda 0,x
00046Dr 3  15 01                        ora 1,x
00046Fr 3  D0 09                        bne @not_zero
000471r 3               
000471r 3  E8                           inx
000472r 3  E8                           inx
000473r 3  74 00                        stz 0,x
000475r 3  74 01                        stz 1,x
000477r 3               
000477r 3  4C rr rr                     jmp accept_done
00047Ar 3               
00047Ar 3               @not_zero:
00047Ar 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
00047Cr 3  85 rr                        sta tmp2
00047Er 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000480r 3               
000480r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000482r 3  85 rr                        sta tmp1
000484r 3  B5 03                        lda 3,x
000486r 3  85 rr                        sta tmp1+1
000488r 3               
000488r 3  E8                           inx
000489r 3  E8                           inx
00048Ar 3               
00048Ar 3  A0 00                        ldy #0
00048Cr 3               
00048Cr 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
00048Cr 3                               ; from bit 2 to 3 is OK)
00048Cr 3  A5 rr                        lda status
00048Er 3  29 F7                        and #$f7
000490r 3               
000490r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000490r 3  1A                           inc
000491r 3               
000491r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000491r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000491r 3                               ; received and won't be used to calculate the history buffer
000491r 3                               ; offset.
000491r 3  09 08                        ora #$08
000493r 3  85 rr                        sta status
000495r 3               
000495r 3               accept_loop:
000495r 3                               ; Out of the box, py65mon catches some CTRL sequences such as
000495r 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
000495r 3                               ; vt100 terminal clears the screen automatically.
000495r 3               
000495r 3                               ; This is the internal version of KEY without all the mucking
000495r 3                               ; about with the Data Stack while still using the input vector
000495r 3  20 rr rr                     jsr key_a
000498r 3               
000498r 3                               ; We quit on both line feed and carriage return
000498r 3  C9 0A                        cmp #AscLF
00049Ar 3  F0 20                        beq @eol
00049Cr 3  C9 0D                        cmp #AscCR
00049Er 3  F0 1C                        beq @eol
0004A0r 3               
0004A0r 3                               ; BACKSPACE and DEL do the same thing for the moment
0004A0r 3  C9 08                        cmp #AscBS
0004A2r 3  F0 22                        beq @backspace
0004A4r 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
0004A6r 3  F0 1E                        beq @backspace
0004A8r 3               
0004A8r 3                               ; Check for CTRL-p and CTRL-n to recall input history
0004A8r 3  C9 10                        cmp #AscCP
0004AAr 3  F0 36                        beq @ctrl_p
0004ACr 3  C9 0E                        cmp #AscCN
0004AEr 3  F0 44                        beq @ctrl_n
0004B0r 3               
0004B0r 3                               ; That's enough for now. Save and echo character.
0004B0r 3  91 rr                        sta (tmp1),y
0004B2r 3  C8                           iny
0004B3r 3               
0004B3r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
0004B3r 3  20 rr rr                     jsr emit_a
0004B6r 3               
0004B6r 3  C4 rr                        cpy tmp2        ; reached character limit?
0004B8r 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
0004BAr 3  80 03                        bra @buffer_full
0004BCr 3               
0004BCr 3               @eol:
0004BCr 3  20 rr rr                     jsr xt_space    ; print final space
0004BFr 3               
0004BFr 3               @buffer_full:
0004BFr 3                               ; REFILL updates ciblen and toin, we don't need to do it here
0004BFr 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
0004C1r 3  74 01                        stz 1,x         ; we only accept 256 chars
0004C3r 3               
0004C3r 3  4C rr rr                     jmp accept_done
0004C6r 3               
0004C6r 3               @backspace:
0004C6r 3                               ; Handle backspace and delete kex, which currently do the same
0004C6r 3                               ; thing
0004C6r 3  C0 00                        cpy #0          ; buffer empty?
0004C8r 3  D0 06                        bne @1
0004CAr 3               
0004CAr 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
0004CCr 3  20 rr rr                     jsr emit_a
0004CFr 3  C8                           iny
0004D0r 3               @1:
0004D0r 3  88                           dey
0004D1r 3  A9 08                        lda #AscBS      ; move back one
0004D3r 3  20 rr rr                     jsr emit_a
0004D6r 3  A9 20                        lda #AscSP      ; print a space (rubout)
0004D8r 3  20 rr rr                     jsr emit_a
0004DBr 3  A9 08                        lda #AscBS      ; move back over space
0004DDr 3  20 rr rr                     jsr emit_a
0004E0r 3               
0004E0r 3  80 B3                        bra accept_loop
0004E2r 3               
0004E2r 3               @ctrl_p:
0004E2r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
0004E2r 3               
0004E2r 3                               ; Select the previous buffer
0004E2r 3  A5 rr                        lda status
0004E4r 3               
0004E4r 3                               ; Check for 0 (need to wrap back to 7)
0004E4r 3  29 07                        and #7
0004E6r 3  D0 08                        bne @ctrl_p_dec
0004E8r 3               
0004E8r 3                               ; We need to wrap back to 7.
0004E8r 3  A5 rr                        lda status
0004EAr 3  09 07                        ora #7
0004ECr 3  85 rr                        sta status
0004EEr 3  80 11                        bra @recall_history
0004F0r 3               
0004F0r 3               @ctrl_p_dec:
0004F0r 3                               ; It's safe to decrement the buffer index directly.
0004F0r 3  C6 rr                        dec status
0004F2r 3  80 0D                        bra @recall_history
0004F4r 3               
0004F4r 3               @ctrl_n:
0004F4r 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0004F4r 3                               ; the next buffer Check bit 3. If it's set, this is the first
0004F4r 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0004F4r 3                               ; history buffer.
0004F4r 3  A9 08                        lda #$8
0004F6r 3  24 rr                        bit status
0004F8r 3  D0 07                        bne @recall_history
0004FAr 3               
0004FAr 3                               ; This isn't the first time CTRL-n has been pressed, select the
0004FAr 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0004FAr 3  A5 rr                        lda status
0004FCr 3  29 F7                        and #$f7
0004FEr 3               
0004FEr 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0004FEr 3  1A                           inc
0004FFr 3               
0004FFr 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
0004FFr 3                               ; be cleared below.
0004FFr 3  85 rr                        sta status
000501r 3               
000501r 3                               ; Falls through to @recall_history
000501r 3               
000501r 3               @recall_history:
000501r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
000501r 3  A9 08                        lda #%00001000
000503r 3  14 rr                        trb status
000505r 3               
000505r 3  20 rr rr                     jsr total_recall
000508r 3               
000508r 3                               ; tmp3 now has the address of the previous history buffer.
000508r 3                               ; First byte of buffer is length. Clear the line by sending
000508r 3                               ; CR, Y spaces, then CR.
000508r 3  A9 0D                        lda #AscCR
00050Ar 3  20 rr rr                     jsr emit_a
00050Dr 3               
00050Dr 3               input_clear:
00050Dr 3  C0 00                        cpy #0
00050Fr 3  F0 08                        beq input_cleared
000511r 3               
000511r 3  A9 20                        lda #AscSP
000513r 3  20 rr rr                     jsr emit_a
000516r 3  88                           dey
000517r 3  80 F4                        bra input_clear
000519r 3               
000519r 3               input_cleared:
000519r 3  A9 0D                        lda #AscCR
00051Br 3  20 rr rr                     jsr emit_a
00051Er 3               
00051Er 3                               ; Save the history length byte into histinfo+1
00051Er 3                               ; ldy #0        ; Y is already 0 by clearing the line.
00051Er 3  B1 rr                        lda (tmp3),y
000520r 3  85 rr                        sta status+1
000522r 3               
000522r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
000522r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
000522r 3                               ; buffer)
000522r 3  E6 rr                        inc tmp3
000524r 3  D0 02                        bne @2           ; Increment the upper byte on carry.
000526r 3  E6 rr                        inc tmp3+1
000528r 3               @2:
000528r 3                               ; Copy the history buffer into the input buffer,
000528r 3                               ; sending the characters to the output as we go.
000528r 3  A9 0D                        lda #AscCR
00052Ar 3  20 rr rr                     jsr emit_a
00052Dr 3               
00052Dr 3               @history_loop:
00052Dr 3                               ; See if we have reached the end of the history buffer.
00052Dr 3  C4 rr                        cpy status+1
00052Fr 3  D0 03                        bne @3
000531r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
000534r 3               @3:
000534r 3                               ; See if we have reached the end of the input buffer.
000534r 3                               ; (only comparing to lower byte as we currently limit
000534r 3                               ; to 255 characters max)
000534r 3  C4 rr                        cpy tmp2
000536r 3  F0 0A                        beq @hist_filled_buffer
000538r 3               
000538r 3                               ; Copy a character and echo.
000538r 3  B1 rr                        lda (tmp3),y
00053Ar 3  91 rr                        sta (tmp1),y
00053Cr 3  20 rr rr                     jsr emit_a
00053Fr 3               
00053Fr 3                               ; Move to the next character.
00053Fr 3  C8                           iny
000540r 3  80 EB                        bra @history_loop
000542r 3               
000542r 3               @hist_filled_buffer:
000542r 3                               ; We don't want a history recall to EOL our buffer,
000542r 3                               ; so back up one character and return to editing.
000542r 3  88                           dey
000543r 3  4C rr rr                     jmp accept_loop
000546r 3               accept_done:
000546r 3               @done:
000546r 3                               ; Copy the input buffer into the currently
000546r 3                               ; selected history buffer.
000546r 3  20 rr rr                     jsr total_recall
000549r 3  85 rr                        sta status+1
00054Br 3               
00054Br 3                               ; Also save it in the first buffer byte.
00054Br 3  A0 00                        ldy #0
00054Dr 3  91 rr                        sta (tmp3),y
00054Fr 3               
00054Fr 3                               ; Move path the count to the data bytes
00054Fr 3  E6 rr                        inc tmp3
000551r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
000553r 3  E6 rr                        inc tmp3+1
000555r 3               @4:
000555r 3                               ; Copy the characters from the input buffer to the
000555r 3                               ; history buffer.
000555r 3               
000555r 3               @save_history_loop:
000555r 3  C4 rr                        cpy status+1
000557r 3  F0 07                        beq @save_history_done
000559r 3               
000559r 3  B1 rr                        lda (tmp1),y
00055Br 3  91 rr                        sta (tmp3),y
00055Dr 3  C8                           iny
00055Er 3  80 F5                        bra @save_history_loop
000560r 3               
000560r 3               @save_history_done:
000560r 3               z_accept:
000560r 3  60                           rts
000561r 3               
000561r 3               total_recall:
000561r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
000561r 3               
000561r 3                               ; Generate the address of the buffer in tmp3. Start with the
000561r 3                               ; base address.
000561r 3  A9 rr                        lda #<hist_buff
000563r 3  85 rr                        sta tmp3
000565r 3  A9 rr                        lda #>hist_buff
000567r 3  85 rr                        sta tmp3+1
000569r 3               
000569r 3                               ; This is a bit annoying as some bits go into each byte.
000569r 3                               ; .....xxx gets put into address like ......xx x.......
000569r 3  A5 rr                        lda status
00056Br 3  6A                           ror
00056Cr 3  29 03                        and #3
00056Er 3  18                           clc
00056Fr 3  65 rr                        adc tmp3+1
000571r 3  85 rr                        sta tmp3+1
000573r 3               
000573r 3  A5 rr                        lda status
000575r 3  6A                           ror             ; Rotate through carry into msb.
000576r 3  6A                           ror
000577r 3  29 80                        and #$80
000579r 3  18                           clc
00057Ar 3  65 rr                        adc tmp3
00057Cr 3  85 rr                        sta tmp3
00057Er 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000580r 3  E6 rr                        inc tmp3+1
000582r 3               @1:
000582r 3                               ; Save the current length of the input buffer in
000582r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000582r 3  98                           tya
000583r 3  C9 80                        cmp #$80
000585r 3  90 02                        bcc @2
000587r 3  A9 7F                        lda #$7F
000589r 3               @2:
000589r 3  60                           rts
00058Ar 3               
00058Ar 3               
00058Ar 3               
00058Ar 3               
00058Ar 3               
00058Ar 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
00058Ar 3               ; ## "action-of"  auto  ANS core ext
00058Ar 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
00058Ar 3               
00058Ar 3               xt_action_of:
00058Ar 3                               ; This is a state aware word with differet behavior
00058Ar 3                               ; when used while compiling vs interpreting.
00058Ar 3                               ; Check STATE
00058Ar 3  A5 rr                        lda state
00058Cr 3  05 rr                        ora state+1
00058Er 3  F0 0C                        beq @interpreting
000590r 3               
000590r 3               @compiling:
000590r 3                               ; Run ['] to compile the xt of the next word
000590r 3                               ; as a literal.
000590r 3  20 rr rr                     jsr xt_bracket_tick
000593r 3               
000593r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000593r 3  A0 rr                        ldy #>xt_defer_fetch
000595r 3  A9 rr                        lda #<xt_defer_fetch
000597r 3  20 rr rr                     jsr cmpl_subroutine
00059Ar 3  80 06                        bra @done
00059Cr 3               
00059Cr 3               @interpreting:
00059Cr 3  20 rr rr                     jsr xt_tick
00059Fr 3  20 rr rr                     jsr xt_defer_fetch
0005A2r 3               
0005A2r 3               @done:
0005A2r 3  60           z_action_of:           rts
0005A3r 3               
0005A3r 3               
0005A3r 3               
0005A3r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
0005A3r 3               ; ## "again"  tested  ANS core ext
0005A3r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
0005A3r 3               
0005A3r 3               xt_again:
0005A3r 3  20 rr rr                     jsr underflow_1
0005A6r 3               
0005A6r 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
0005A6r 3                               ; so we have the range and don't have to calculate the
0005A6r 3                               ; offset.
0005A6r 3  A0 00                        ldy #0
0005A8r 3  A9 4C                        lda #$4C        ; JMP
0005AAr 3  91 rr                        sta (cp),y
0005ACr 3  C8                           iny
0005ADr 3               
0005ADr 3  B5 00                        lda 0,x         ; LSB of address
0005AFr 3  91 rr                        sta (cp),y
0005B1r 3  C8                           iny
0005B2r 3               
0005B2r 3  B5 01                        lda 1,x         ; MSB of address
0005B4r 3  91 rr                        sta (cp),y
0005B6r 3  C8                           iny
0005B7r 3               
0005B7r 3                               ; Allot the space we just used
0005B7r 3  98                           tya
0005B8r 3  18                           clc
0005B9r 3  65 rr                        adc cp
0005BBr 3  85 rr                        sta cp
0005BDr 3  90 02                        bcc @done
0005BFr 3  E6 rr                        inc cp+1
0005C1r 3               @done:
0005C1r 3  E8                           inx
0005C2r 3  E8                           inx
0005C3r 3               
0005C3r 3  60           z_again:        rts
0005C4r 3               
0005C4r 3               
0005C4r 3               
0005C4r 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
0005C4r 3               ; ## "align"  auto  ANS core
0005C4r 3                       ; """https://forth-standard.org/standard/core/ALIGN
0005C4r 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
0005C4r 3                       ; routine as well, and also does nothing
0005C4r 3                       ; """
0005C4r 3               
0005C4r 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
0005C4r 3               ; ## "aligned"  auto  ANS core
0005C4r 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
0005C4r 3               
0005C4r 3               xt_align:
0005C4r 3               xt_aligned:
0005C4r 3               z_align:
0005C4r 3  60           z_aligned:      rts             ; stripped out during native compile
0005C5r 3               
0005C5r 3               
0005C5r 3               
0005C5r 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
0005C5r 3               ; ## "allot"  auto  ANS core
0005C5r 3                       ; """https://forth-standard.org/standard/core/ALLOT
0005C5r 3                       ; Reserve a certain number of bytes (not cells) or release them.
0005C5r 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
0005C5r 3                       ; to the beginning of the Dictionary. If n is positive (the most
0005C5r 3                       ; common case), reserve n bytes, but not past the end of the
0005C5r 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
0005C5r 3                       ; """
0005C5r 3               
0005C5r 3               xt_allot:
0005C5r 3  20 rr rr                     jsr underflow_1
0005C8r 3               
0005C8r 3                               ; Releasing memory is going to be a very rare operation,
0005C8r 3                               ; so we check for it at the beginning and try to make
0005C8r 3                               ; the most common case as fast as possible
0005C8r 3  B5 01                        lda 1,x
0005CAr 3  30 22                        bmi @release
0005CCr 3               
0005CCr 3                               ; Common case: We are reserving memory, not releasing it
0005CCr 3  18                           clc
0005CDr 3  A5 rr                        lda cp
0005CFr 3  75 00                        adc 0,x
0005D1r 3  85 rr                        sta cp
0005D3r 3               
0005D3r 3  A5 rr                        lda cp+1
0005D5r 3  75 01                        adc 1,x
0005D7r 3  85 rr                        sta cp+1
0005D9r 3               
0005D9r 3                               ; Wait, did we just grant more space than we have? This is
0005D9r 3                               ; a check we only do here, not for other situations like cmpl_a
0005D9r 3                               ; where smaller amounts are reserved.
0005D9r 3  A0 FF                        ldy #<cp_end
0005DBr 3  C4 rr                        cpy cp
0005DDr 3  A9 7F                        lda #>cp_end
0005DFr 3  E5 rr                        sbc cp+1
0005E1r 3  B0 48                        bcs @done               ; we're fine.
0005E3r 3               
0005E3r 3                               ; Oops, that was too much, we're beyond the end of
0005E3r 3                               ; legal Dictionary RAM. Reduce to max memory and report
0005E3r 3                               ; an error
0005E3r 3  84 rr                        sty cp                  ; still #<cp_end
0005E5r 3  A9 7F                        lda #>cp_end
0005E7r 3  85 rr                        sta cp+1
0005E9r 3               
0005E9r 3  A9 00                        lda #err_allot
0005EBr 3  4C rr rr                     jmp error
0005EEr 3               
0005EEr 3               @release:
0005EEr 3                  		; The ANS standard doesn't really say what to do if too much
0005EEr 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0005EEr 3                               ; even an official test. Gforth is little help either. The good
0005EEr 3                               ; news is, this is going to be a rare case. We want to use as
0005EEr 3                               ; few bytes as possible.
0005EEr 3               
0005EEr 3                               ; What we do is let the user free anything up to the beginning
0005EEr 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0005EEr 3                               ; their own risk. This means that the Dictionary pointer DP
0005EEr 3                               ; might end up pointing to garbage. However, an attempt to
0005EEr 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0005EEr 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0005EEr 3                               ; an error message.
0005EEr 3               
0005EEr 3                               ; We arrive here with ( n ) which is negative. First step,
0005EEr 3                               ; subtract the number TOS from the CP for a new CP
0005EEr 3  CA                           dex
0005EFr 3  CA                           dex
0005F0r 3  A5 rr                        lda cp
0005F2r 3  95 00                        sta 0,x
0005F4r 3  A5 rr                        lda cp+1
0005F6r 3  95 01                        sta 1,x
0005F8r 3               
0005F8r 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0005FBr 3               
0005FBr 3                               ; Second step, see if we've gone too far. We compare the new
0005FBr 3                               ; CP on TOS (which, if we've really screwed up, might be
0005FBr 3                               ; negative) with CP0. This is a signed comparison
0005FBr 3  CA                           dex
0005FCr 3  CA                           dex                             ; new CP now NOS
0005FDr 3  A9 rr                        lda #<cp0
0005FFr 3  95 00                        sta 0,x
000601r 3  A9 rr                        lda #>cp0
000603r 3  95 01                        sta 1,x                         ; CP0 is TOS
000605r 3               
000605r 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
000608r 3               
000608r 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
000608r 3                               ; This means we want Z=1 or N=1
000608r 3  F0 17                        beq @nega_done
00060Ar 3  30 15                        bmi @nega_done
00060Cr 3               
00060Cr 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
00060Cr 3                               ; word in ROM (should be DROP), and abort with an error
00060Cr 3  A9 rr                        lda #<cp0
00060Er 3  85 rr                        sta cp
000610r 3  A9 rr                        lda #>cp0
000612r 3  85 rr                        sta cp+1
000614r 3               
000614r 3  A9 rr                        lda #<dictionary_start
000616r 3  85 rr                        sta dp
000618r 3  A9 rr                        lda #>dictionary_start
00061Ar 3  85 rr                        sta dp+1
00061Cr 3               
00061Cr 3  A9 0A                        lda #err_negallot
00061Er 3  4C rr rr                     jmp error
000621r 3               
000621r 3               @nega_done:
000621r 3                               ; Save new CP, which is NOS
000621r 3  B5 02                        lda 2,x
000623r 3  85 rr                        sta cp
000625r 3  B5 03                        lda 3,x
000627r 3  85 rr                        sta cp+1
000629r 3               
000629r 3  E8                           inx
00062Ar 3  E8                           inx                     ; drop through to @done
00062Br 3               @done:
00062Br 3  E8                           inx
00062Cr 3  E8                           inx
00062Dr 3               z_allot:
00062Dr 3  60                           rts
00062Er 3               
00062Er 3               
00062Er 3               
00062Er 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
00062Er 3               ; ## "allow-native"  auto  Tali Forth
00062Er 3               xt_allow_native:
00062Er 3  20 rr rr                     jsr current_to_dp
000631r 3  A0 01                        ldy #1          ; offset for status byte
000633r 3  B1 rr                        lda (dp),y
000635r 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
000637r 3  91 rr                        sta (dp),y
000639r 3               z_allow_native:
000639r 3  60                           rts
00063Ar 3               
00063Ar 3               
00063Ar 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
00063Ar 3               ; ## "also"  auto  ANS search ext
00063Ar 3                       ; """http://forth-standard.org/standard/search/ALSO"""
00063Ar 3               xt_also:
00063Ar 3  20 rr rr                     jsr xt_get_order
00063Dr 3  20 rr rr                     jsr xt_over
000640r 3  20 rr rr                     jsr xt_swap
000643r 3  20 rr rr                     jsr xt_one_plus
000646r 3  20 rr rr                     jsr xt_set_order
000649r 3               
000649r 3  60           z_also:         rts
00064Ar 3               
00064Ar 3               
00064Ar 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
00064Ar 3               ; ## "always-native"  auto  Tali Forth
00064Ar 3               xt_always_native:
00064Ar 3  20 rr rr                     jsr current_to_dp
00064Dr 3  A0 01                        ldy #1          ; offset for status byte
00064Fr 3  B1 rr                        lda (dp),y
000651r 3  09 02                        ora #AN         ; Make sure AN flag is set
000653r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
000655r 3  91 rr                        sta (dp),y
000657r 3               z_always_native:
000657r 3  60                           rts
000658r 3               
000658r 3               
000658r 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
000658r 3               ; ## "and"  auto  ANS core
000658r 3                       ; """https://forth-standard.org/standard/core/AND"""
000658r 3               xt_and:
000658r 3  20 rr rr                     jsr underflow_2
00065Br 3               
00065Br 3  B5 00                        lda 0,x
00065Dr 3  35 02                        and 2,x
00065Fr 3  95 02                        sta 2,x
000661r 3               
000661r 3  B5 01                        lda 1,x
000663r 3  35 03                        and 3,x
000665r 3  95 03                        sta 3,x
000667r 3               
000667r 3  E8                           inx
000668r 3  E8                           inx
000669r 3               
000669r 3  60           z_and:          rts
00066Ar 3               
00066Ar 3               
00066Ar 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
00066Ar 3               ; ## "assembler-wordlist"  tested  Tali Assembler
00066Ar 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
00066Ar 3                       ; assembler words to the search order so they can be used.
00066Ar 3                       ; See the tutorial on Wordlists and the Search Order for
00066Ar 3                       ; more information.
00066Ar 3                       ;
00066Ar 3                       ; This is a dummy entry, the code is shared with TWO
00066Ar 3                       ; """
00066Ar 3               
00066Ar 3               
00066Ar 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
00066Ar 3               ; ## "at-xy"  tested  ANS facility
00066Ar 3                       ; """https://forth-standard.org/standard/facility/AT-XY
00066Ar 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
00066Ar 3                       ; ANSI code is ESC[<n>;<m>H
00066Ar 3                       ;
00066Ar 3                       ; Do not use U. to print the numbers because the
00066Ar 3                       ; trailing space will not work with xterm
00066Ar 3                       ; """
00066Ar 3               xt_at_xy:
00066Ar 3  20 rr rr                     jsr underflow_2
00066Dr 3               
00066Dr 3  A9 1B                        lda #AscESC
00066Fr 3  20 rr rr                     jsr emit_a
000672r 3  A9 5B                        lda #$5B        ; ASCII for "["
000674r 3  20 rr rr                     jsr emit_a
000677r 3  20 rr rr                     jsr print_u
00067Ar 3  A9 3B                        lda #$3B        ; ASCII for ";"
00067Cr 3  20 rr rr                     jsr emit_a
00067Fr 3  20 rr rr                     jsr print_u
000682r 3  A9 48                        lda #'H'
000684r 3  20 rr rr                     jsr emit_a
000687r 3               
000687r 3  60           z_at_xy:        rts
000688r 3               
000688r 3               
000688r 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
000688r 3               ; ## "\"  auto  ANS core ext
000688r 3                       ; """https://forth-standard.org/standard/core/bs"""
000688r 3               xt_backslash:
000688r 3  A5 rr                        lda ciblen
00068Ar 3  85 rr                        sta toin
00068Cr 3  A5 rr                        lda ciblen+1
00068Er 3  85 rr                        sta toin+1
000690r 3               
000690r 3  60           z_backslash:    rts
000691r 3               
000691r 3               
000691r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000691r 3               ; ## "base"  auto  ANS core
000691r 3                       ; """https://forth-standard.org/standard/core/BASE
000691r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000691r 3                       ; ingore the MSB
000691r 3                       ; """
000691r 3               xt_base:
000691r 3  CA                           dex
000692r 3  CA                           dex
000693r 3  A9 rr                        lda #<base
000695r 3  95 00                        sta 0,x         ; LSB
000697r 3  74 01                        stz 1,x         ; MSB is always 0
000699r 3               
000699r 3  60           z_base:         rts
00069Ar 3               
00069Ar 3               
00069Ar 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
00069Ar 3               ; ## "begin"  auto  ANS core
00069Ar 3                       ; """https://forth-standard.org/standard/core/BEGIN
00069Ar 3                       ;
00069Ar 3                       ; This is just an immediate version of here which could just
00069Ar 3                       ; as well be coded in Forth as
00069Ar 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
00069Ar 3                       ; Since this is a compiling word, we don't care that much about
00069Ar 3                       ; about speed
00069Ar 3                       ; """
00069Ar 3               
00069Ar 3               xt_begin:
00069Ar 3  20 rr rr                     jsr xt_here
00069Dr 3  60           z_begin:        rts
00069Er 3               
00069Er 3               
00069Er 3               
00069Er 3               ; ## BELL ( -- ) "Emit ASCII BELL"
00069Er 3               ; ## "bell"  tested  Tali Forth
00069Er 3               xt_bell:
00069Er 3  A9 07                        lda #7          ; ASCII value for BELl
0006A0r 3  20 rr rr                     jsr emit_a
0006A3r 3               
0006A3r 3  60           z_bell:         rts
0006A4r 3               
0006A4r 3               
0006A4r 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
0006A4r 3               ; ## "bl"  auto  ANS core
0006A4r 3                       ; """https://forth-standard.org/standard/core/BL"""
0006A4r 3               
0006A4r 3               xt_bl:
0006A4r 3  CA                           dex
0006A5r 3  CA                           dex
0006A6r 3  A9 20                        lda #AscSP
0006A8r 3  95 00                        sta 0,x
0006AAr 3  74 01                        stz 1,x
0006ACr 3               
0006ACr 3  60           z_bl:           rts
0006ADr 3               
0006ADr 3               
0006ADr 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
0006ADr 3               ; ## "block"  auto  ANS block
0006ADr 3                       ; """https://forth-standard.org/standard/block/BLK"""
0006ADr 3               xt_blk:
0006ADr 3                               ; BLK is at UP + blk_offset
0006ADr 3  CA                           dex
0006AEr 3  CA                           dex
0006AFr 3  18                           clc
0006B0r 3  A5 rr                        lda up
0006B2r 3  69 00                        adc #blk_offset ; Add offset
0006B4r 3  95 00                        sta 0,x
0006B6r 3  A5 rr                        lda up+1
0006B8r 3  69 00                        adc #0          ; Adding carry
0006BAr 3  95 01                        sta 1,x
0006BCr 3               
0006BCr 3  60           z_blk:          rts
0006BDr 3               
0006BDr 3               
0006BDr 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
0006BDr 3               ; ## "blkbuffer"  auto  Tali block
0006BDr 3               xt_blkbuffer:
0006BDr 3                               ; blkbuffer address is at UP + blkbuffer_offset.
0006BDr 3                               ; Unlike some of the other user variables, we actually
0006BDr 3                               ; want to push the address stored here, which will
0006BDr 3                               ; point to somewhere outside of the user variables.
0006BDr 3  CA                           dex
0006BEr 3  CA                           dex
0006BFr 3                               ; Put the address on the stack.
0006BFr 3  A0 28                        ldy #blkbuffer_offset
0006C1r 3  B1 rr                        lda (up),y
0006C3r 3  95 00                        sta 0,x
0006C5r 3  C8                           iny             ; Move along to the next byte
0006C6r 3  B1 rr                        lda (up),y
0006C8r 3  95 01                        sta 1,x
0006CAr 3               
0006CAr 3  60           z_blkbuffer:    rts
0006CBr 3               
0006CBr 3               
0006CBr 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
0006CBr 3               ; ## "block"  auto  ANS block
0006CBr 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
0006CBr 3               
0006CBr 3               xt_block:
0006CBr 3               
0006CBr 3                               ; See if the block requested is the same as the one we
0006CBr 3                               ; currently have in the buffer. Check the LSB.
0006CBr 3  A0 2A                        ldy #buffblocknum_offset
0006CDr 3  B1 rr                        lda (up),y
0006CFr 3  D5 00                        cmp 0,x
0006D1r 3  D0 0F                        bne @not_in_buffer
0006D3r 3               
0006D3r 3                               ; Check the MSB.
0006D3r 3  C8                           iny
0006D4r 3  B1 rr                        lda (up),y
0006D6r 3  D5 01                        cmp 1,x
0006D8r 3  D0 08                        bne @not_in_buffer
0006DAr 3               
0006DAr 3                               ; The block is in the buffer. See if the buffer is in use.
0006DAr 3  A0 2C                        ldy #buffstatus_offset
0006DCr 3  B1 rr                        lda (up),y
0006DEr 3  29 01                        and #1          ; Check the in-use flag (bit 0)
0006E0r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
0006E2r 3                                               ; @done will replace the block# with the
0006E2r 3                                               ; buffer address.
0006E2r 3               @not_in_buffer:
0006E2r 3                               ; Check the buffer status
0006E2r 3  A0 2C                        ldy #buffstatus_offset
0006E4r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0006E6r 3  C9 03                        cmp #3          ; LSB is needed.
0006E8r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0006EAr 3               
0006EAr 3                               ; We need to save the block.
0006EAr 3  20 rr rr                     jsr xt_blkbuffer
0006EDr 3  20 rr rr                     jsr xt_buffblocknum
0006F0r 3  20 rr rr                     jsr xt_fetch
0006F3r 3  20 rr rr                     jsr xt_block_write
0006F6r 3               
0006F6r 3               @buffer_available:
0006F6r 3                               ; Save the block number.
0006F6r 3  A0 2A                        ldy #buffblocknum_offset
0006F8r 3  B5 00                        lda 0,x
0006FAr 3  91 rr                        sta (up),y
0006FCr 3  C8                           iny
0006FDr 3  B5 01                        lda 1,x
0006FFr 3  91 rr                        sta (up),y
000701r 3               
000701r 3                               ; Get the requested block.
000701r 3  20 rr rr                     jsr xt_blkbuffer
000704r 3  20 rr rr                     jsr xt_swap
000707r 3  20 rr rr                     jsr xt_block_read
00070Ar 3               
00070Ar 3                               ; Mark the buffer as clean and in-use.
00070Ar 3  A9 01                        lda #1
00070Cr 3  A0 2C                        ldy #buffstatus_offset
00070Er 3  91 rr                        sta (up),y
000710r 3               
000710r 3                               ; Make room on the stack for the return address.
000710r 3  CA                           dex
000711r 3  CA                           dex
000712r 3               
000712r 3               @done:
000712r 3                               ; It's in the buffer. Return the buffer address.
000712r 3  A0 28                        ldy #blkbuffer_offset
000714r 3  B1 rr                        lda (up),y
000716r 3  95 00                        sta 0,x
000718r 3  C8                           iny
000719r 3  B1 rr                        lda (up),y
00071Br 3  95 01                        sta 1,x
00071Dr 3               
00071Dr 3  60           z_block:        rts
00071Er 3               
00071Er 3               
00071Er 3               
00071Er 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
00071Er 3               ; ## "block-ramdrive-init"  auto  Tali block
00071Er 3                       ; """Create a RAM drive, with the given number of
00071Er 3                       ; blocks, in the dictionary along with setting up the block words to
00071Er 3                       ; use it.  The read/write routines do not provide bounds checking.
00071Er 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
00071Er 3                       ; """
00071Er 3               
00071Er 3               xt_block_ramdrive_init:
00071Er 3  20 rr rr                     jsr underflow_1
000721r 3               
000721r 3                               ; Store the string to run here as a string literal.
000721r 3                               ; See SLITERAL for the format information. This way, we
000721r 3                               ; don't have the words defined below in the Dictionary until
000721r 3                               ; we really use them.
000721r 3  4C rr rr                     jmp @after_ramdrive_code
000724r 3               
000724r 3               @ramdrive_code:
000724r 3  62 61 73 65          .byte "base @ swap decimal"
000728r 3  20 40 20 73  
00072Cr 3  77 61 70 20  
000737r 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
00073Br 3  34 20 2A     
00073Er 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
000742r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
000746r 3  66 65 72 3A  
00074Ar 3  20 72 61 6D  
000753r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
000753r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
000757r 3  6C 6F 63 6B  
00075Br 3  2D 72 65 61  
000769r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
00076Dr 3  64 72 69 76  
000771r 3  65 20 73 77  
000791r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000795r 3  6C 6F 63 6B  
000799r 3  2D 77 72 69  
0007A8r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
0007ACr 3  64 72 69 76  
0007B0r 3  65 20 73 77  
0007CBr 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
0007CFr 3  6C 6F 63 6B  
0007D3r 3  2D 72 65 61  
0007F5r 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
0007F9r 3  6C 6F 63 6B  
0007FDr 3  2D 77 72 69  
000821r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000825r 3  64 72 69 76  
000829r 3  65 20 73 77  
00083Cr 3               
00083Cr 3               @after_ramdrive_code:
00083Cr 3  20 rr rr                     jsr sliteral_runtime
00083Fr 3               
00083Fr 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000843r 3               
000843r 3                               ; The address and length of the ramdrive code is now on the
000843r 3                               ; stack. Call EVALUATE to run it.
000843r 3  20 rr rr                     jsr xt_evaluate
000846r 3               
000846r 3               z_block_ramdrive_init:
000846r 3  60                           rts
000847r 3               
000847r 3               
000847r 3               
000847r 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000847r 3               ; ## "block-read"  auto  Tali block
000847r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000847r 3                       ; with their own version to read a block from storage.
000847r 3                       ; The stack parameters are ( buffer_address block# -- ).
000847r 3                       ; """
000847r 3               xt_block_read:
000847r 3                               ; Execute the BLOCK-READ-VECTOR
000847r 3  A0 2E                        ldy #blockread_offset
000849r 3  B1 rr                        lda (up),y
00084Br 3  85 rr                        sta tmp1
00084Dr 3  C8                           iny
00084Er 3  B1 rr                        lda (up),y
000850r 3  85 rr                        sta tmp1+1
000852r 3               
000852r 3  6C rr rr                     jmp (tmp1)
000855r 3               
000855r 3               z_block_read:   ; No RTS needed
000855r 3               
000855r 3               
000855r 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000855r 3               ; ## "block-read-vector"  auto  Tali block
000855r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000855r 3                       ; with their own version to read a block from storage.
000855r 3                       ; This word gives the address of the vector so it can be replaced.
000855r 3                       ; """
000855r 3               xt_block_read_vector:
000855r 3                               ; Get the BLOCK-READ-VECTOR address
000855r 3  CA                           dex
000856r 3  CA                           dex
000857r 3  18                           clc
000858r 3  A5 rr                        lda up
00085Ar 3  69 2E                        adc #blockread_offset
00085Cr 3  95 00                        sta 0,x
00085Er 3  A5 rr                        lda up+1
000860r 3  69 00                        adc #0          ; Add carry
000862r 3  95 01                        sta 1,x
000864r 3               
000864r 3               z_block_read_vector:
000864r 3  60                           rts
000865r 3               
000865r 3               
000865r 3               ; This is the default error message the vectored words BLOCK-READ and
000865r 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000865r 3               xt_block_word_error:
000865r 3  A9 0C                        lda #err_blockwords
000867r 3  4C rr rr                     jmp error       ; no RTS needed
00086Ar 3               z_block_word_error:
00086Ar 3               
00086Ar 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
00086Ar 3               ; ## "block-write"  auto  Tali block
00086Ar 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
00086Ar 3                       ; with their own version to write a block to storage.
00086Ar 3                       ; The stack parameters are ( buffer_address block# -- ).
00086Ar 3                       ; """
00086Ar 3               xt_block_write:
00086Ar 3                               ; Execute the BLOCK-READ-VECTOR
00086Ar 3  A0 30                        ldy #blockwrite_offset
00086Cr 3  B1 rr                        lda (up),y
00086Er 3  85 rr                        sta tmp1
000870r 3  C8                           iny
000871r 3  B1 rr                        lda (up),y
000873r 3  85 rr                        sta tmp1+1
000875r 3  6C rr rr                     jmp (tmp1)
000878r 3               
000878r 3               z_block_write:  ; No RTS needed
000878r 3               
000878r 3               
000878r 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000878r 3               ; ## "block-write-vector"  auto  Tali block
000878r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000878r 3                       ; with their own version to write a block to storage.
000878r 3                       ; This word gives the address of the vector so it can be replaced.
000878r 3                       ; """
000878r 3               xt_block_write_vector:
000878r 3                               ; Get the BLOCK-WRITE-VECTOR address
000878r 3  CA                           dex
000879r 3  CA                           dex
00087Ar 3  18                           clc
00087Br 3  A5 rr                        lda up
00087Dr 3  69 30                        adc #blockwrite_offset
00087Fr 3  95 00                        sta 0,x
000881r 3  A5 rr                        lda up+1
000883r 3  69 00                        adc #0          ; Add carry
000885r 3  95 01                        sta 1,x
000887r 3               
000887r 3               z_block_write_vector:
000887r 3  60                           rts
000888r 3               
000888r 3               
000888r 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000888r 3               ; ## "bounds"  auto  Gforth
000888r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000888r 3                       ; Given a string, return the correct Data Stack parameters for
000888r 3                       ; a DO/LOOP loop over its characters. This is realized as
000888r 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000888r 3                       ; """
000888r 3               xt_bounds:
000888r 3  20 rr rr                     jsr underflow_2
00088Br 3               
00088Br 3  18                           clc
00088Cr 3  B5 00                        lda 0,x                 ; LSB u
00088Er 3  B4 02                        ldy 2,x                 ; LSB addr
000890r 3  75 02                        adc 2,x
000892r 3  95 02                        sta 2,x                 ; LSB addr+u
000894r 3  94 00                        sty 0,x
000896r 3               
000896r 3  B5 01                        lda 1,x                 ; MSB u
000898r 3  B4 03                        ldy 3,x                 ; MSB addr
00089Ar 3  75 03                        adc 3,x
00089Cr 3  95 03                        sta 3,x                 ; MSB addr+u
00089Er 3  94 01                        sty 1,x
0008A0r 3               
0008A0r 3  60           z_bounds:       rts
0008A1r 3               
0008A1r 3               
0008A1r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
0008A1r 3               ; ## "[char]"  auto  ANS core
0008A1r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
0008A1r 3                       ; Compile the ASCII value of a character as a literal. This is an
0008A1r 3                       ; immediate, compile-only word.
0008A1r 3                       ;
0008A1r 3                       ; A definition given in
0008A1r 3                       ; http://forth-standard.org/standard/implement is
0008A1r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
0008A1r 3                       ; """
0008A1r 3               xt_bracket_char:
0008A1r 3  20 rr rr                     jsr xt_char
0008A4r 3  20 rr rr                     jsr xt_literal
0008A7r 3  60           z_bracket_char: rts
0008A8r 3               
0008A8r 3               
0008A8r 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
0008A8r 3               ; ## "[']"  auto  ANS core
0008A8r 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
0008A8r 3               xt_bracket_tick:
0008A8r 3  20 rr rr                     jsr xt_tick
0008ABr 3  20 rr rr                     jsr xt_literal
0008AEr 3  60           z_bracket_tick: rts
0008AFr 3               
0008AFr 3               
0008AFr 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
0008AFr 3               ; ## "buffblocknum"  auto  Tali block
0008AFr 3               xt_buffblocknum:
0008AFr 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
0008AFr 3  CA                           dex
0008B0r 3  CA                           dex
0008B1r 3  18                           clc
0008B2r 3  A5 rr                        lda up
0008B4r 3  69 2A                        adc #buffblocknum_offset        ; Add offset
0008B6r 3  95 00                        sta 0,x
0008B8r 3  A5 rr                        lda up+1
0008BAr 3  69 00                        adc #0                          ; Adding carry
0008BCr 3  95 01                        sta 1,x
0008BEr 3               
0008BEr 3  60           z_buffblocknum: rts
0008BFr 3               
0008BFr 3               
0008BFr 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
0008BFr 3               ; ## "buffer"  auto  ANS block
0008BFr 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
0008BFr 3               
0008BFr 3               xt_buffer:
0008BFr 3                               ; Check the buffer status
0008BFr 3  A0 2C                        ldy #buffstatus_offset
0008C1r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0008C3r 3  C9 03                        cmp #3          ; LSB is needed.
0008C5r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0008C7r 3               
0008C7r 3                               ; We need to save the block.
0008C7r 3  20 rr rr                     jsr xt_blkbuffer
0008CAr 3  20 rr rr                     jsr xt_buffblocknum
0008CDr 3  20 rr rr                     jsr xt_fetch
0008D0r 3  20 rr rr                     jsr xt_block_write
0008D3r 3               
0008D3r 3               @buffer_available:
0008D3r 3                               ; Save the block number.
0008D3r 3  A0 2A                        ldy #buffblocknum_offset
0008D5r 3  B5 00                        lda 0,x
0008D7r 3  91 rr                        sta (up),y
0008D9r 3  C8                           iny
0008DAr 3  B5 01                        lda 1,x
0008DCr 3  91 rr                        sta (up),y
0008DEr 3               
0008DEr 3                               ; Mark the buffer as clean and in-use.
0008DEr 3  A9 01                        lda #1
0008E0r 3  A0 2C                        ldy #buffstatus_offset
0008E2r 3  91 rr                        sta (up),y
0008E4r 3               
0008E4r 3               @done:
0008E4r 3                               ; Return the buffer address.
0008E4r 3  A0 28                        ldy #blkbuffer_offset
0008E6r 3  B1 rr                        lda (up),y
0008E8r 3  95 00                        sta 0,x
0008EAr 3  C8                           iny
0008EBr 3  B1 rr                        lda (up),y
0008EDr 3  95 01                        sta 1,x
0008EFr 3               
0008EFr 3  60           z_buffer:       rts
0008F0r 3               
0008F0r 3               
0008F0r 3               
0008F0r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
0008F0r 3               ; ## "buffer:"  auto  ANS core ext
0008F0r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
0008F0r 3                               ; Create a buffer of size u that puts its address on the stack
0008F0r 3                               ; when its name is used.
0008F0r 3                               ; """
0008F0r 3               xt_buffer_colon:
0008F0r 3  20 rr rr                     jsr xt_create
0008F3r 3  20 rr rr                     jsr xt_allot
0008F6r 3  60           z_buffer_colon: rts
0008F7r 3               
0008F7r 3               
0008F7r 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
0008F7r 3               ; ## "buffstatus"  auto  Tali block
0008F7r 3               xt_buffstatus:
0008F7r 3                               ; BUFFSTATUS is at UP + buffstatus_offset
0008F7r 3  CA                           dex
0008F8r 3  CA                           dex
0008F9r 3  18                           clc
0008FAr 3  A5 rr                        lda up
0008FCr 3  69 2C                        adc #buffstatus_offset  ; Add offset
0008FEr 3  95 00                        sta 0,x
000900r 3  A5 rr                        lda up+1
000902r 3  69 00                        adc #0                  ; Adding carry
000904r 3  95 01                        sta 1,x
000906r 3               
000906r 3  60           z_buffstatus:   rts
000907r 3               
000907r 3               
000907r 3               ; ## BYE ( -- ) "Break"
000907r 3               ; ## "bye"  tested  ANS tools ext
000907r 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000907r 3               
000907r 3               xt_bye:
000907r 3                               ;brk
000907r 3  4C rr rr                     jmp platform_bye
00090Ar 3               z_bye:          ;rts             ; never reached
00090Ar 3               
00090Ar 3               
00090Ar 3               
00090Ar 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
00090Ar 3               ; ## "c,"  auto  ANS core
00090Ar 3                       ; """https://forth-standard.org/standard/core/CComma"""
00090Ar 3               
00090Ar 3               xt_c_comma:
00090Ar 3  20 rr rr                     jsr underflow_1
00090Dr 3               
00090Dr 3  B5 00                        lda 0,x
00090Fr 3  20 rr rr                     jsr cmpl_a
000912r 3               
000912r 3  E8                           inx
000913r 3  E8                           inx
000914r 3               
000914r 3  60           z_c_comma:      rts
000915r 3               
000915r 3               
000915r 3               
000915r 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000915r 3               ; ## "c@"  auto  ANS core
000915r 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000915r 3               xt_c_fetch:
000915r 3  20 rr rr                     jsr underflow_1
000918r 3               
000918r 3  A1 00                        lda (0,x)
00091Ar 3  95 00                        sta 0,x
00091Cr 3  74 01                        stz 1,x         ; Ignore LSB
00091Er 3               
00091Er 3  60           z_c_fetch:      rts
00091Fr 3               
00091Fr 3               
00091Fr 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
00091Fr 3               ; ## "c!"  auto  ANS core
00091Fr 3                       ; """https://forth-standard.org/standard/core/CStore"""
00091Fr 3               xt_c_store:
00091Fr 3  20 rr rr                     jsr underflow_2
000922r 3               
000922r 3  B5 02                        lda 2,x
000924r 3  81 00                        sta (0,x)
000926r 3               
000926r 3  E8                           inx
000927r 3  E8                           inx
000928r 3  E8                           inx
000929r 3  E8                           inx
00092Ar 3               
00092Ar 3  60           z_c_store:      rts
00092Br 3               
00092Br 3               
00092Br 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
00092Br 3               ; ## "case"  auto  ANS core ext
00092Br 3                       ; """http://forth-standard.org/standard/core/CASE
00092Br 3                       ;
00092Br 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
00092Br 3                       ; """
00092Br 3               
00092Br 3               
00092Br 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
00092Br 3               ; ## "cell+"  auto  ANS core
00092Br 3                       ; """https://forth-standard.org/standard/core/CELLPlus
00092Br 3                       ; Add the number of bytes ("address units") that one cell needs.
00092Br 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
00092Br 3                       ; """
00092Br 3               
00092Br 3               xt_cell_plus:
00092Br 3  20 rr rr                     jsr underflow_1
00092Er 3               
00092Er 3  F6 00                        inc 0,x
000930r 3  D0 02                        bne @1
000932r 3  F6 01                        inc 1,x
000934r 3               @1:
000934r 3  F6 00                        inc 0,x
000936r 3  D0 02                        bne @done
000938r 3  F6 01                        inc 1,x
00093Ar 3               @done:
00093Ar 3  60           z_cell_plus:    rts
00093Br 3               
00093Br 3               
00093Br 3               
00093Br 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
00093Br 3               ; ## "cells"  auto  ANS core
00093Br 3                       ; """https://forth-standard.org/standard/core/CELLS
00093Br 3                       ;
00093Br 3                       ; Dummy entry for the CELLS word, the code is the same as for
00093Br 3                       ; 2*, which is where the header directs us to
00093Br 3                       ; """
00093Br 3               
00093Br 3               
00093Br 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
00093Br 3               ; ## "char"  auto  ANS core
00093Br 3                       ; """https://forth-standard.org/standard/core/CHAR"""
00093Br 3               
00093Br 3               xt_char:
00093Br 3                               ; get character from string, returns ( addr u )
00093Br 3  20 rr rr                     jsr xt_parse_name
00093Er 3               
00093Er 3                               ; if we got back a zero, we have a problem
00093Er 3  B5 00                        lda 0,x
000940r 3  15 01                        ora 1,x
000942r 3  D0 05                        bne @not_empty
000944r 3               
000944r 3  A9 05                        lda #err_noname
000946r 3  4C rr rr                     jmp error
000949r 3               
000949r 3               @not_empty:
000949r 3  E8                           inx             ; drop number of characters, leave addr
00094Ar 3  E8                           inx
00094Br 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
00094Dr 3  95 00                        sta 0,x
00094Fr 3  74 01                        stz 1,x         ; MSB is always zero
000951r 3               
000951r 3  60           z_char:         rts
000952r 3               
000952r 3               
000952r 3               
000952r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000952r 3               ; ## "char+"  auto  ANS core
000952r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000952r 3                       ;
000952r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000952r 3                       ; """
000952r 3               
000952r 3               
000952r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000952r 3               ; ## "chars"  auto  ANS core
000952r 3                       ; """https://forth-standard.org/standard/core/CHARS
000952r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000952r 3                       ; machine, this does absolutely nothing and is included for
000952r 3                       ; compatibility with other Forth versions
000952r 3                       ; """
000952r 3               
000952r 3               xt_chars:
000952r 3                               ; Checking for underflow seems a bit stupid because this
000952r 3                               ; routine does nothing on this machine. However, the user
000952r 3                               ; should be warned that there is something wrong with the
000952r 3                               ; code if this occurs.
000952r 3  20 rr rr                     jsr underflow_1
000955r 3               
000955r 3  60           z_chars:        rts
000956r 3               
000956r 3               
000956r 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000956r 3               ; ## "cleave"  auto  Tali Forth
000956r 3               
000956r 3                       ; """Given a range of memory with words delimited by whitespace,return
000956r 3                       ; the first word at the top of the stack and the rest of the word
000956r 3                       ; following it.
000956r 3                       ;
000956r 3                       ; Example:
000956r 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000956r 3                       ; s" w1" cleave        -> "" "w1"
000956r 3                       ;
000956r 3                       ; Since it will be used in loops a lot, we want it to work in pure
000956r 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000956r 3                       ; strip leading delimiters.
000956r 3                       ; """
000956r 3               
000956r 3               xt_cleave:
000956r 3  20 rr rr                     jsr underflow_2
000959r 3               
000959r 3                               ; We arrive here with ( addr u ). We need to strip any leading
000959r 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000959r 3                               ; remember how many spaces were stripped. This means we can't
000959r 3                               ; calculate the length of the remainder. Fortunately, Tali
000959r 3                               ; Forth has just the word we need for this:
000959r 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
00095Cr 3               
00095Cr 3                               ; The main part we can turn over to PARSE-NAME, except that we
00095Cr 3                               ; have a string ( addr u ) and not stuff in the input buffer.
00095Cr 3                               ; We get around this by cheating: We place ( addr u ) in the
00095Cr 3                               ; input buffer and then call PARSE-NAME.
00095Cr 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
00095Fr 3               
00095Fr 3  B5 00                        lda 0,x         ; u is new ciblen
000961r 3  85 rr                        sta ciblen
000963r 3  B5 01                        lda 1,x
000965r 3  85 rr                        sta ciblen+1
000967r 3               
000967r 3  B5 02                        lda 2,x         ; addr is new cib
000969r 3  85 rr                        sta cib
00096Br 3  B5 03                        lda 3,x
00096Dr 3  85 rr                        sta cib+1
00096Fr 3               
00096Fr 3  64 rr                        stz toin        ; >IN pointer is zero
000971r 3  64 rr                        stz toin+1
000973r 3               
000973r 3                               ; PARSE-NAME gives us back the substring of the first word
000973r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000976r 3               
000976r 3                               ; If we were given an empty string, then we're done. It's the
000976r 3                               ; resposibility of the user to catch this as a sign to end the
000976r 3                               ; any loop
000976r 3  B5 00                        lda 0,x
000978r 3  15 01                        ora 1,x
00097Ar 3  F0 23                        beq @done
00097Cr 3               
00097Cr 3                               ; Now we have to adjust the original string
00097Cr 3  B5 04                        lda 4,x         ; LSB of original u
00097Er 3  38                           sec
00097Fr 3  F5 00                        sbc 0,x
000981r 3  95 04                        sta 4,x
000983r 3               
000983r 3  B5 05                        lda 5,x         ; MSB of original u
000985r 3  F5 01                        sbc 1,x
000987r 3  95 05                        sta 5,x
000989r 3               
000989r 3  B5 06                        lda 6,x         ; LSB of original addr
00098Br 3  18                           clc
00098Cr 3  75 00                        adc 0,x
00098Er 3  95 06                        sta 6,x
000990r 3               
000990r 3  B5 07                        lda 7,x         ; MSB of original addr
000992r 3  75 01                        adc 1,x
000994r 3  95 07                        sta 7,x
000996r 3               
000996r 3                               ; There is one small problem: PARSE-NAME will probably have
000996r 3                               ; left the string with the rest of the words with leading
000996r 3                               ; delimiters. We use our magic -LEADING again
000996r 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000999r 3  20 rr rr                     jsr xt_minus_leading
00099Cr 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
00099Fr 3               @done:
00099Fr 3                               ; Restore input
00099Fr 3  20 rr rr                     jsr xt_r_to_input
0009A2r 3               
0009A2r 3  60           z_cleave:       rts
0009A3r 3               
0009A3r 3               
0009A3r 3               
0009A3r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
0009A3r 3               ; ## "cmove"  auto  ANS string
0009A3r 3                       ; """https://forth-standard.org/standard/string/CMOVE
0009A3r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
0009A3r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
0009A3r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
0009A3r 3                       ; "move left".
0009A3r 3                       ;
0009A3r 3                       ; There are no official tests for this word.
0009A3r 3                       ; """
0009A3r 3               
0009A3r 3               xt_cmove:
0009A3r 3  20 rr rr                     jsr underflow_3
0009A6r 3               
0009A6r 3                               ; move destination address to where we can work with it
0009A6r 3  B5 02                        lda 2,x
0009A8r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
0009AAr 3  B5 03                        lda 3,x
0009ACr 3  85 rr                        sta tmp2+1
0009AEr 3               
0009AEr 3                               ; move source address to where we can work with it
0009AEr 3  B5 04                        lda 4,x
0009B0r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
0009B2r 3  B5 05                        lda 5,x
0009B4r 3  85 rr                        sta tmp1+1
0009B6r 3               
0009B6r 3  A0 00                        ldy #0
0009B8r 3  B5 01                        lda 1,x         ; number of whole pages to move
0009BAr 3  F0 0F                        beq @dopartial
0009BCr 3               
0009BCr 3               @page:
0009BCr 3  B1 rr                        lda (tmp1),y
0009BEr 3  91 rr                        sta (tmp2),y
0009C0r 3  C8                           iny
0009C1r 3  D0 F9                        bne @page
0009C3r 3               
0009C3r 3  E6 rr                        inc tmp1+1
0009C5r 3  E6 rr                        inc tmp2+1
0009C7r 3  D6 01                        dec 1,x
0009C9r 3  D0 F1                        bne @page
0009CBr 3               
0009CBr 3               @dopartial:
0009CBr 3  B5 00                        lda 0,x         ; length of last page
0009CDr 3  F0 09                        beq @done
0009CFr 3               
0009CFr 3               @partial:
0009CFr 3  B1 rr                        lda (tmp1),y
0009D1r 3  91 rr                        sta (tmp2),y
0009D3r 3  C8                           iny
0009D4r 3               
0009D4r 3  D6 00                        dec 0,x
0009D6r 3  D0 F7                        bne @partial
0009D8r 3               
0009D8r 3               @done:          ; clear the stack
0009D8r 3  8A                           txa
0009D9r 3  18                           clc
0009DAr 3  69 06                        adc #6
0009DCr 3  AA                           tax
0009DDr 3               
0009DDr 3  60           z_cmove:        rts
0009DEr 3               
0009DEr 3               
0009DEr 3               
0009DEr 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
0009DEr 3               ; ## "cmove>"  auto  ANS string
0009DEr 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
0009DEr 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
0009DEr 3                       ; Routines", p. 201, where it is called "move right".
0009DEr 3                       ;
0009DEr 3                       ; There are no official tests for this word.
0009DEr 3                       ; """
0009DEr 3               
0009DEr 3               xt_cmove_up:
0009DEr 3  20 rr rr                     jsr underflow_3
0009E1r 3               
0009E1r 3                               ; Move destination address to where we can work with it
0009E1r 3  B5 02                        lda 2,x
0009E3r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
0009E5r 3  B5 03                        lda 3,x
0009E7r 3  18                           clc
0009E8r 3  75 01                        adc 1,x
0009EAr 3  85 rr                        sta tmp2+1      ; point to last page of destination
0009ECr 3               
0009ECr 3                               ; Move source address to where we can work with it
0009ECr 3  B5 04                        lda 4,x
0009EEr 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
0009F0r 3  B5 05                        lda 5,x
0009F2r 3  18                           clc
0009F3r 3  75 01                        adc 1,x
0009F5r 3  85 rr                        sta tmp1+1      ; point to last page of source
0009F7r 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
0009F9r 3               
0009F9r 3                               ; Move the last partial page first
0009F9r 3  B4 00                        ldy 0,x         ; length of last page
0009FBr 3  F0 0E                        beq @nopartial
0009FDr 3               
0009FDr 3               @outerloop:
0009FDr 3  88                           dey
0009FEr 3  F0 07                        beq @finishpage
000A00r 3               
000A00r 3               @innerloop:
000A00r 3  B1 rr                        lda (tmp1),y
000A02r 3  91 rr                        sta (tmp2),y
000A04r 3  88                           dey
000A05r 3  D0 F9                        bne @innerloop
000A07r 3               
000A07r 3               @finishpage:
000A07r 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000A09r 3  92 rr                        sta (tmp2)
000A0Br 3               
000A0Br 3               @nopartial:
000A0Br 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000A0Dr 3  C6 rr                        dec tmp2+1
000A0Fr 3  D6 01                        dec 1,x
000A11r 3  D0 EA                        bne @outerloop
000A13r 3               @done:
000A13r 3                               ; clear up the stack and leave
000A13r 3  8A                           txa
000A14r 3  18                           clc
000A15r 3  69 06                        adc #6
000A17r 3  AA                           tax
000A18r 3               
000A18r 3  60           z_cmove_up:     rts
000A19r 3               
000A19r 3               
000A19r 3               
000A19r 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000A19r 3               ; ## ":"  auto  ANS core
000A19r 3                       ; """https://forth-standard.org/standard/core/Colon
000A19r 3                       ;
000A19r 3                       ; Use the CREATE routine and fill in the rest by hand.
000A19r 3                       ; """
000A19r 3               
000A19r 3               xt_colon:
000A19r 3                               ; If we're already in the compile state, complain
000A19r 3                               ; and quit
000A19r 3  A5 rr                        lda state
000A1Br 3  05 rr                        ora state+1
000A1Dr 3  F0 05                        beq @1
000A1Fr 3               
000A1Fr 3  A9 07                        lda #err_state
000A21r 3  4C rr rr                     jmp error
000A24r 3               @1:
000A24r 3                               ; switch to compile state
000A24r 3  C6 rr                        dec state
000A26r 3  C6 rr                        dec state+1
000A28r 3               
000A28r 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000A28r 3                               ; word
000A28r 3  A9 40                        lda #%01000000
000A2Ar 3  04 rr                        tsb status
000A2Cr 3               
000A2Cr 3                               ; CREATE is going to change the DP to point to the new word's
000A2Cr 3                               ; header. While this is fine for (say) variables, it would mean
000A2Cr 3                               ; that FIND-NAME etc would find a half-finished word when
000A2Cr 3                               ; looking in the Dictionary. To prevent this, we save the old
000A2Cr 3                               ; version of DP and restore it later. The new DP is placed in
000A2Cr 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000A2Cr 3  20 rr rr                     jsr current_to_dp
000A2Fr 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000A31r 3  48                           pha
000A32r 3  A5 rr                        lda dp
000A34r 3  48                           pha
000A35r 3               
000A35r 3                               ; Tell create not to print warning for duplicate name.
000A35r 3  A9 80                        lda #%10000000
000A37r 3  04 rr                        tsb status
000A39r 3               
000A39r 3  20 rr rr                     jsr xt_create
000A3Cr 3               
000A3Cr 3                               ; Get the nt (not the xt!) of the new word as described above.
000A3Cr 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000A3Cr 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000A3Fr 3  A5 rr                        lda dp
000A41r 3  85 rr                        sta workword
000A43r 3  A5 rr                        lda dp+1
000A45r 3  85 rr                        sta workword+1
000A47r 3               
000A47r 3                               ; Restore original DP
000A47r 3  68                           pla
000A48r 3  85 rr                        sta dp
000A4Ar 3  68                           pla
000A4Br 3  85 rr                        sta dp+1
000A4Dr 3  20 rr rr                     jsr dp_to_current
000A50r 3               
000A50r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000A50r 3                               ; back up three bytes and overwrite that.
000A50r 3  A5 rr                        lda cp
000A52r 3  38                           sec
000A53r 3  E9 03                        sbc #3
000A55r 3  85 rr                        sta cp
000A57r 3  B0 02                        bcs @done
000A59r 3  C6 rr                        dec cp+1
000A5Br 3               @done:
000A5Br 3  60           z_colon:        rts
000A5Cr 3               
000A5Cr 3               
000A5Cr 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000A5Cr 3               ; ## ":NONAME"  auto  ANS core
000A5Cr 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000A5Cr 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000A5Cr 3                       ; """
000A5Cr 3               
000A5Cr 3               xt_colon_noname:
000A5Cr 3                               ; If we're already in the compile state, complain
000A5Cr 3                               ; and quit
000A5Cr 3  A5 rr                        lda state
000A5Er 3  05 rr                        ora state+1
000A60r 3  F0 05                        beq @1
000A62r 3               
000A62r 3  A9 07                        lda #err_state
000A64r 3  4C rr rr                     jmp error
000A67r 3               @1:
000A67r 3                               ; switch to compile state
000A67r 3  C6 rr                        dec state
000A69r 3  C6 rr                        dec state+1
000A6Br 3               
000A6Br 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000A6Br 3                               ; a :NONAME word.
000A6Br 3  A9 40                        lda #%01000000
000A6Dr 3  14 rr                        trb status
000A6Fr 3               
000A6Fr 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000A6Fr 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000A6Fr 3                               ; nt and they will modify their behavior.
000A6Fr 3  A5 rr                        lda cp
000A71r 3  85 rr                        sta workword
000A73r 3  A5 rr                        lda cp+1
000A75r 3  85 rr                        sta workword+1
000A77r 3               @done:
000A77r 3  60           z_colon_noname:        rts
000A78r 3               
000A78r 3               
000A78r 3               
000A78r 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000A78r 3               ; ## ","  auto  ANS core
000A78r 3                       ; """https://forth-standard.org/standard/core/Comma
000A78r 3                       ; Store TOS at current place in memory.
000A78r 3                       ;
000A78r 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000A78r 3                       ; """
000A78r 3               
000A78r 3               xt_comma:
000A78r 3  20 rr rr                     jsr underflow_1
000A7Br 3               
000A7Br 3  B5 00                        lda 0,x
000A7Dr 3  92 rr                        sta (cp)
000A7Fr 3               
000A7Fr 3  E6 rr                        inc cp
000A81r 3  D0 02                        bne @1
000A83r 3  E6 rr                        inc cp+1
000A85r 3               @1:
000A85r 3  B5 01                        lda 1,x
000A87r 3  92 rr                        sta (cp)
000A89r 3               
000A89r 3  E6 rr                        inc cp
000A8Br 3  D0 02                        bne @done
000A8Dr 3  E6 rr                        inc cp+1
000A8Fr 3               @done:
000A8Fr 3  E8                           inx
000A90r 3  E8                           inx
000A91r 3               
000A91r 3  60           z_comma:        rts
000A92r 3               
000A92r 3               
000A92r 3               
000A92r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000A92r 3               ; ## "compare"   auto  ANS string
000A92r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000A92r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000A92r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000A92r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000A92r 3                       ; that entirely matches the beginning of the other string, but is
000A92r 3                       ; shorter, is considered less than the longer string.
000A92r 3                       ; """
000A92r 3               
000A92r 3               xt_compare:
000A92r 3  20 rr rr                     jsr underflow_4
000A95r 3               
000A95r 3                               ; Load the two string addresses into tmp1 and tmp2.
000A95r 3  B5 02                        lda 2,x
000A97r 3  85 rr                        sta tmp2
000A99r 3  B5 03                        lda 3,x
000A9Br 3  85 rr                        sta tmp2+1
000A9Dr 3  B5 06                        lda 6,x
000A9Fr 3  85 rr                        sta tmp1
000AA1r 3  B5 07                        lda 7,x
000AA3r 3  85 rr                        sta tmp1+1
000AA5r 3                               ; The counts will be used in-place on the stack.
000AA5r 3               
000AA5r 3               @compare_loop:
000AA5r 3                               ; Check to see if we are out of letters.
000AA5r 3               
000AA5r 3                               ; Check string1
000AA5r 3  B5 04                        lda 4,x
000AA7r 3  15 05                        ora 5,x
000AA9r 3  F0 2C                        beq @str1_done
000AABr 3               
000AABr 3                               ; Check string2
000AABr 3  B5 00                        lda 0,x
000AADr 3  15 01                        ora 1,x
000AAFr 3  F0 3A                        beq @greater    ; Str2 empty first
000AB1r 3               
000AB1r 3               @check_letter:
000AB1r 3                               ; Both strings have at least one letter left.
000AB1r 3                               ; Check the letters against each other.
000AB1r 3  B2 rr                        lda (tmp1)
000AB3r 3  D2 rr                        cmp (tmp2)
000AB5r 3  90 26                        bcc @less
000AB7r 3  D0 32                        bne @greater
000AB9r 3               @next_letter:
000AB9r 3                               ; Move both tmp pointers and decrement the counts
000AB9r 3                               ; on the stack.
000AB9r 3                               ; Increment tmp1
000AB9r 3  E6 rr                        inc tmp1
000ABBr 3  D0 02                        bne @1
000ABDr 3  E6 rr                        inc tmp1+1
000ABFr 3               @1:
000ABFr 3                               ; Increment tmp2
000ABFr 3  E6 rr                        inc tmp2
000AC1r 3  D0 02                        bne @2
000AC3r 3  E6 rr                        inc tmp2+1
000AC5r 3               @2:
000AC5r 3                               ; Decrement count1 on the stack.
000AC5r 3  B5 04                        lda 4,x
000AC7r 3  D0 02                        bne @3
000AC9r 3  D6 05                        dec 5,x
000ACBr 3               @3:
000ACBr 3  D6 04                        dec 4,x
000ACDr 3               
000ACDr 3                               ; Decrement count2 on the stack.
000ACDr 3  B5 00                        lda 0,x
000ACFr 3  D0 02                        bne @4
000AD1r 3  D6 01                        dec 1,x
000AD3r 3               @4:
000AD3r 3  D6 00                        dec 0,x
000AD5r 3               
000AD5r 3                               ; Loop around and check again.
000AD5r 3  80 CE                        bra @compare_loop
000AD7r 3               
000AD7r 3               @str1_done:
000AD7r 3                               ; String 1 is out of letters. Check string 2.
000AD7r 3  B5 00                        lda 0,x
000AD9r 3  15 01                        ora 1,x
000ADBr 3  F0 08                        beq @equal      ; Both out of letters
000ADDr 3               
000ADDr 3                               ; Falls into less (str1 is out but str2 has more)
000ADDr 3               @less:
000ADDr 3                               ; Return -1
000ADDr 3  A9 FF                        lda #$FF
000ADFr 3  95 06                        sta 6,x
000AE1r 3  95 07                        sta 7,x
000AE3r 3  80 0C                        bra @done
000AE5r 3               @equal:
000AE5r 3                               ; Return 0
000AE5r 3  74 06                        stz 6,x
000AE7r 3  74 07                        stz 7,x
000AE9r 3  80 06                        bra @done
000AEBr 3               @greater:
000AEBr 3                               ; Return 1
000AEBr 3  A9 01                        lda #1
000AEDr 3  95 06                        sta 6,x
000AEFr 3  74 07                        stz 7,x
000AF1r 3                               ; Falls into @done
000AF1r 3               @done:
000AF1r 3                               ; Remove all but the result from the stack.
000AF1r 3  8A                           txa
000AF2r 3  18                           clc
000AF3r 3  69 06                        adc #6
000AF5r 3  AA                           tax
000AF6r 3               
000AF6r 3  60           z_compare:      rts
000AF7r 3               
000AF7r 3               
000AF7r 3               
000AF7r 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000AF7r 3               ; ## "compile,"  auto  ANS core ext
000AF7r 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000AF7r 3                       ; Compile the given xt in the current word definition. It is an
000AF7r 3                       ; error if we are not in the compile state. Because we are using
000AF7r 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000AF7r 3                       ; the traditional way. By default, native compiled is allowed, unless
000AF7r 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000AF7r 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000AF7r 3                       ; is too large to be natively coded: If the size is larger than
000AF7r 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000AF7r 3                       ; Native) flag is set, the word is always natively compiled.
000AF7r 3                       ; """
000AF7r 3               
000AF7r 3               xt_compile_comma:
000AF7r 3  20 rr rr                     jsr underflow_1
000AFAr 3               
000AFAr 3                               ; See if this is an Always Native (AN) word by checking the
000AFAr 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000AFAr 3                               ; the Return Stack
000AFAr 3  B5 01                        lda 1,x                 ; MSB
000AFCr 3  48                           pha
000AFDr 3  B5 00                        lda 0,x
000AFFr 3  48                           pha                     ; LSB
000B00r 3               
000B00r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000B03r 3               
000B03r 3                               ; See if this xt even has an nt.
000B03r 3  B5 00                        lda 0,x
000B05r 3  15 01                        ora 1,x
000B07r 3  D0 03                        bne @check_nt
000B09r 3               
000B09r 3                               ; No nt in dictionary. Just compile as a JSR.
000B09r 3  4C rr rr                     jmp @compile_as_jump
000B0Cr 3               
000B0Cr 3               @check_nt:
000B0Cr 3                               ; put nt away for safe keeping
000B0Cr 3  B5 00                        lda 0,x
000B0Er 3  85 rr                        sta tmptos
000B10r 3  B5 01                        lda 1,x
000B12r 3  85 rr                        sta tmptos+1
000B14r 3               
000B14r 3                               ; status byte is one further down
000B14r 3  F6 00                        inc 0,x
000B16r 3  D0 02                        bne @1
000B18r 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000B1Ar 3               @1:
000B1Ar 3  A1 00                        lda (0,x)
000B1Cr 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000B1Er 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000B20r 3  F0 0D                        beq @compile_check
000B22r 3               
000B22r 3                               ; We're natively compiling no matter what. Get length and
000B22r 3                               ; compile in code. Get the original nt back
000B22r 3  A5 rr                        lda tmptos
000B24r 3  95 00                        sta 0,x
000B26r 3  A5 rr                        lda tmptos+1
000B28r 3  95 01                        sta 1,x
000B2Ar 3               
000B2Ar 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000B2Dr 3               
000B2Dr 3  80 27                        bra @compile_as_code
000B2Fr 3               
000B2Fr 3               @compile_check:
000B2Fr 3                               ; See if Native Compile is even alowed by checking the NN
000B2Fr 3                               ; flag
000B2Fr 3  A5 rr                        lda tmp3
000B31r 3  29 08                        and #NN
000B33r 3  F0 03                        beq @check_size_limit
000B35r 3               
000B35r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000B38r 3               
000B38r 3               @check_size_limit:
000B38r 3                               ; Native compile is a legal option, but we need to see what
000B38r 3                               ; limit the user set for size (in nc_limit)
000B38r 3  A5 rr                        lda tmptos
000B3Ar 3  95 00                        sta 0,x
000B3Cr 3  A5 rr                        lda tmptos+1
000B3Er 3  95 01                        sta 1,x
000B40r 3               
000B40r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000B43r 3               
000B43r 3                               ; Check the wordsize MSB against the user-defined limit.
000B43r 3  B5 01                        lda 1,x
000B45r 3  C5 rr                        cmp nc_limit+1
000B47r 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000B49r 3  D0 08                        bne @jumpto_compile_as_jump
000B4Br 3               
000B4Br 3                               ; Check the wordsize LSB against the user-defined limit.
000B4Br 3  B5 00                        lda 0,x
000B4Dr 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000B4Fr 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000B51r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000B53r 3               
000B53r 3               @jumpto_compile_as_jump:
000B53r 3                               ; If the wordsize is greater than the user-defined
000B53r 3                               ; limit, it will be compiled as a subroutine jump.
000B53r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000B56r 3               
000B56r 3               @compile_as_code:
000B56r 3                               ; We arrive here with the length of the word's code TOS and
000B56r 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000B56r 3                               ; on the data stack
000B56r 3  CA                           dex
000B57r 3  CA                           dex                     ; ( -- u ? )
000B58r 3  CA                           dex
000B59r 3  CA                           dex                     ; ( -- u ? ? )
000B5Ar 3               
000B5Ar 3  B5 04                        lda 4,x
000B5Cr 3  95 00                        sta 0,x                 ; LSB of u
000B5Er 3  B5 05                        lda 5,x
000B60r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000B62r 3               
000B62r 3  68                           pla
000B63r 3  95 04                        sta 4,x                 ; LSB of xt
000B65r 3  68                           pla
000B66r 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000B68r 3               
000B68r 3  A5 rr                        lda cp                  ; LSB of cp
000B6Ar 3  95 02                        sta 2,x
000B6Cr 3  A5 rr                        lda cp+1
000B6Er 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000B70r 3               
000B70r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000B70r 3               
000B70r 3                               ; Native compiling allows us to strip the stack antics off
000B70r 3                               ; a number of words that use the Return Stack such as >R, R>,
000B70r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000B70r 3                               ; xt with the contents of the table
000B70r 3  A0 00                        ldy #0
000B72r 3               
000B72r 3               @strip_loop:
000B72r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000B75r 3  D5 04                        cmp 4,x                 ; LSB of xt
000B77r 3  D0 07                        bne @next_entry
000B79r 3               
000B79r 3                               ; LSB is the same, test MSB
000B79r 3  B9 rr rr                     lda @strip_table+1,y
000B7Cr 3  D5 05                        cmp 5,x
000B7Er 3  F0 0C                        beq @found_entry
000B80r 3               
000B80r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000B80r 3                               ; so we can use the next step for both cases
000B80r 3               @next_entry:
000B80r 3                               ; Not a word that needs stripping, so check next entry in table
000B80r 3                               ; Let's see if we're done with the table (marked by zero entry)
000B80r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000B83r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000B86r 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000B88r 3               
000B88r 3  C8                           iny
000B89r 3  C8                           iny
000B8Ar 3  80 E6                        bra @strip_loop
000B8Cr 3               @found_entry:
000B8Cr 3                               ; This word is one of the ones that needs to have its size
000B8Cr 3                               ; adjusted during native compile. We find the values in the
000B8Cr 3                               ; next table with the same index, which is Y. However, Y is
000B8Cr 3                               ; pointing to the MSB, so we need to go back to the LSB and
000B8Cr 3                               ; halve the index before we can use it.
000B8Cr 3  98                           tya
000B8Dr 3  4A                           lsr
000B8Er 3  A8                           tay
000B8Fr 3               
000B8Fr 3                               ; Get the adjustment out of the size table. We were clever
000B8Fr 3                               ; enough to make sure the cut on both ends of the code is
000B8Fr 3                               ; is the same size.
000B8Fr 3  B9 rr rr                     lda @strip_size,y
000B92r 3  85 rr                        sta tmptos              ; save a copy
000B94r 3               
000B94r 3                               ; Adjust xt: Start later
000B94r 3  18                           clc
000B95r 3  75 04                        adc 4,x
000B97r 3  95 04                        sta 4,x
000B99r 3  90 02                        bcc @2
000B9Br 3  F6 05                        inc 5,x                 ; we just care about the carry
000B9Dr 3               @2:
000B9Dr 3               
000B9Dr 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000B9Dr 3                               ; bottom of the code, we have to double the value
000B9Dr 3  06 rr                        asl tmptos
000B9Fr 3               
000B9Fr 3  38                           sec
000BA0r 3  B5 00                        lda 0,x
000BA2r 3  E5 rr                        sbc tmptos
000BA4r 3  95 00                        sta 0,x
000BA6r 3  B0 02                        bcs @3
000BA8r 3  D6 01                        dec 1,x                 ; we just care about the borrow
000BAAr 3               @3:
000BAAr 3                               ; drop through to underflow check stripping
000BAAr 3               
000BAAr 3               @underflow_strip:
000BAAr 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000BAAr 3               
000BAAr 3                               ; The user can choose to remove the unterflow testing in those
000BAAr 3                               ; words that have the UF flag. This shortens the word by
000BAAr 3                               ; 3 bytes if there is no underflow.
000BAAr 3               
000BAAr 3                               ; See if the user wants underflow stripping turned on
000BAAr 3  A5 rr                        lda uf_strip
000BACr 3  05 rr                        ora uf_strip+1
000BAEr 3  F0 1C                        beq @specials_done
000BB0r 3               
000BB0r 3                               ; See if this word even contains underflow checking
000BB0r 3  A5 rr                        lda tmp3
000BB2r 3  29 10                        and #UF
000BB4r 3  F0 16                        beq @specials_done
000BB6r 3               
000BB6r 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000BB6r 3                               ; long. Note hat PICK is a special case.
000BB6r 3               
000BB6r 3                               ; Adjust xt: Start later
000BB6r 3  18                           clc
000BB7r 3  B5 04                        lda 4,x
000BB9r 3  69 03                        adc #3
000BBBr 3  95 04                        sta 4,x
000BBDr 3  90 02                        bcc @4
000BBFr 3  F6 05                        inc 5,x                  ; we just care about the carry
000BC1r 3               @4:
000BC1r 3                               ; Adjust u: End earlier
000BC1r 3  38                           sec
000BC2r 3  B5 00                        lda 0,x
000BC4r 3  E9 03                        sbc #3
000BC6r 3  95 00                        sta 0,x
000BC8r 3  B0 02                        bcs @5
000BCAr 3  D6 01                        dec 1,x                  ; we just care about the borrow
000BCCr 3               @5:
000BCCr 3               
000BCCr 3                               ; --- END OF SPECIAL CASES ---
000BCCr 3               @specials_done:
000BCCr 3                               ; Store size of area to be copied for calculation of
000BCCr 3                               ; new CP. We have to do this after all of the special cases
000BCCr 3                               ; because they might change the size
000BCCr 3  B5 01                        lda 1,x                 ; MSB
000BCEr 3  48                           pha
000BCFr 3  B5 00                        lda 0,x                 ; LSB
000BD1r 3  48                           pha
000BD2r 3               
000BD2r 3                               ; Enough of this, let's move those bytes already! We have
000BD2r 3                               ; ( xt cp u ) on the stack at this point
000BD2r 3  20 rr rr                     jsr xt_move
000BD5r 3               
000BD5r 3                               ; Update CP
000BD5r 3  18                           clc
000BD6r 3  68                           pla                     ; LSB
000BD7r 3  65 rr                        adc cp
000BD9r 3  85 rr                        sta cp
000BDBr 3               
000BDBr 3  68                           pla                     ; MSB
000BDCr 3  65 rr                        adc cp+1
000BDEr 3  85 rr                        sta cp+1
000BE0r 3               
000BE0r 3  80 2C                        bra @done
000BE2r 3               
000BE2r 3               @strip_table:
000BE2r 3                              ; List of words we strip the Return Stack antics from
000BE2r 3                              ; during native compile, zero terminated. The index here
000BE2r 3                              ; must be the same as for the sizes
000BE2r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000BE6r 3  rr rr        
000BE8r 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000BECr 3  00 00        
000BEEr 3               
000BEEr 3               @strip_size:
000BEEr 3                               ; List of bytes to be stripped from the words that get their
000BEEr 3                               ; Return Stack antics removed during native compile. Index must
000BEEr 3                               ; be the same as for the xts. Zero terminated.
000BEEr 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000BF2r 3  06 00        
000BF4r 3               
000BF4r 3               @compile_as_jump:
000BF4r 3                               ; Compile xt as a subroutine jump
000BF4r 3  A9 20                        lda #$20
000BF6r 3  92 rr                        sta (cp)
000BF8r 3               
000BF8r 3  A0 01                        ldy #1
000BFAr 3  68                           pla             ; LSB
000BFBr 3  91 rr                        sta (cp),y
000BFDr 3  C8                           iny
000BFEr 3  68                           pla             ; MSB
000BFFr 3  91 rr                        sta (cp),y
000C01r 3               
000C01r 3                               ; allot space we just used
000C01r 3  A9 03                        lda #3
000C03r 3  18                           clc
000C04r 3  65 rr                        adc cp
000C06r 3  85 rr                        sta cp
000C08r 3  90 02                        bcc @6
000C0Ar 3  E6 rr                        inc cp+1
000C0Cr 3               @6:
000C0Cr 3  E8                           inx             ; drop xt
000C0Dr 3  E8                           inx
000C0Er 3               @done:
000C0Er 3               z_compile_comma:
000C0Er 3  60                           rts
000C0Fr 3               
000C0Fr 3               
000C0Fr 3               
000C0Fr 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000C0Fr 3               ; ## "compile-only"  tested  Tali Forth
000C0Fr 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000C0Fr 3                       ; word.
000C0Fr 3                       ;
000C0Fr 3                       ; The alternative way to do this is to define a word
000C0Fr 3                       ; ?COMPILE that makes sure  we're in compile mode
000C0Fr 3                       ; """
000C0Fr 3               
000C0Fr 3               xt_compile_only:
000C0Fr 3  20 rr rr                     jsr current_to_dp
000C12r 3  A0 01                        ldy #1          ; offset for status byte
000C14r 3  B1 rr                        lda (dp),y
000C16r 3  09 01                        ora #CO        ; make sure bit 7 is set
000C18r 3  91 rr                        sta (dp),y
000C1Ar 3               
000C1Ar 3  60           z_compile_only: rts
000C1Br 3               
000C1Br 3               
000C1Br 3               
000C1Br 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000C1Br 3               ; ## "constant"  auto  ANS core
000C1Br 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000C1Br 3                       ;
000C1Br 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000C1Br 3                       ; more in assembler and let CREATE do the heavy lifting.
000C1Br 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000C1Br 3                       ; a primer on how this works in various Forths. This is the
000C1Br 3                       ; same code as VALUE in our case.
000C1Br 3                       ; """
000C1Br 3               xt_value:
000C1Br 3               xt_constant:
000C1Br 3  20 rr rr                     jsr underflow_1
000C1Er 3               
000C1Er 3  20 rr rr                     jsr xt_create
000C21r 3               
000C21r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000C21r 3                               ; but we want DOCONST for constants. Go back two bytes and
000C21r 3                               ; replace the subroutine jump target
000C21r 3  38                           sec
000C22r 3  A5 rr                        lda cp
000C24r 3  E9 02                        sbc #2
000C26r 3  85 rr                        sta tmp1
000C28r 3  A5 rr                        lda cp+1
000C2Ar 3  E9 00                        sbc #0
000C2Cr 3  85 rr                        sta tmp1+1
000C2Er 3               
000C2Er 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000C30r 3  92 rr                        sta (tmp1)
000C32r 3  A0 01                        ldy #1
000C34r 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000C36r 3  91 rr                        sta (tmp1),y
000C38r 3               
000C38r 3                               ; Now we save the constant number itself in the next cell
000C38r 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000C3Br 3               
000C3Br 3               adjust_z:
000C3Br 3                               ; Now the length of the complete word (z_word) has increased by
000C3Br 3                               ; two. We need to update that number or else words such as SEE
000C3Br 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000C3Br 3                               ; VALUE and DEFER
000C3Br 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000C3Er 3               
000C3Er 3                               ; z_word is six bytes further down
000C3Er 3  B5 00                        lda 0,x
000C40r 3  85 rr                        sta tmp1
000C42r 3  B5 01                        lda 1,x
000C44r 3  85 rr                        sta tmp1+1
000C46r 3               
000C46r 3  A0 06                        ldy #6
000C48r 3  B1 rr                        lda (tmp1),y
000C4Ar 3  18                           clc
000C4Br 3  69 02                        adc #2
000C4Dr 3  91 rr                        sta (tmp1),y
000C4Fr 3  C8                           iny
000C50r 3  B1 rr                        lda (tmp1),y
000C52r 3  69 00                        adc #0                  ; only need carry
000C54r 3  91 rr                        sta (tmp1),y
000C56r 3               
000C56r 3  E8                           inx
000C57r 3  E8                           inx
000C58r 3               
000C58r 3               z_value:
000C58r 3  60           z_constant:     rts
000C59r 3               
000C59r 3               
000C59r 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000C59r 3               ; ## "count"  auto  ANS core
000C59r 3                       ; """https://forth-standard.org/standard/core/COUNT
000C59r 3                       ; Convert old-style character string to address-length pair. Note
000C59r 3                       ; that the length of the string c-addr is stored in character length
000C59r 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000C59r 3                       ; though COUNT can also be used to step through a string character by
000C59r 3                       ; character.
000C59r 3                       ; """
000C59r 3               xt_count:
000C59r 3  20 rr rr                     jsr underflow_1
000C5Cr 3               
000C5Cr 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000C5Er 3  A8                           tay
000C5Fr 3               
000C5Fr 3                               ; move start address up by one
000C5Fr 3  F6 00                        inc 0,x         ; LSB
000C61r 3  D0 02                        bne @1
000C63r 3  F6 01                        inc 1,x         ; MSB
000C65r 3               
000C65r 3                               ; save number of characters to stack
000C65r 3               @1:
000C65r 3  98                           tya
000C66r 3  CA                           dex
000C67r 3  CA                           dex
000C68r 3  95 00                        sta 0,x         ; LSB
000C6Ar 3  74 01                        stz 1,x         ; MSB, always zero
000C6Cr 3               
000C6Cr 3  60           z_count:        rts
000C6Dr 3               
000C6Dr 3               
000C6Dr 3               ; ## CR ( -- ) "Print a line feed"
000C6Dr 3               ; ## "cr"  auto  ANS core
000C6Dr 3                       ; """https://forth-standard.org/standard/core/CR"""
000C6Dr 3               xt_cr:
000C6Dr 3  A9 0A                        lda #AscLF
000C6Fr 3  20 rr rr                     jsr emit_a
000C72r 3  60           z_cr:           rts
000C73r 3               
000C73r 3               
000C73r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000C73r 3               ; ## "create"  auto  ANS core
000C73r 3                       ; """https://forth-standard.org/standard/core/CREATE
000C73r 3                       ;
000C73r 3                       ; See the drawing in headers.asm for details on the header
000C73r 3                       ; """
000C73r 3               
000C73r 3               xt_create:
000C73r 3                               ; get string
000C73r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000C76r 3               
000C76r 3                               ; if we were given an empty string, we complain and quit
000C76r 3  B5 00                        lda 0,x
000C78r 3  15 01                        ora 1,x
000C7Ar 3  D0 05                        bne @got_name
000C7Cr 3               
000C7Cr 3  A9 05                        lda #err_noname
000C7Er 3  4C rr rr                     jmp error
000C81r 3               
000C81r 3               @got_name:
000C81r 3                               ; Enforce maximal length of string by overwriting the MSB of
000C81r 3                               ; the length. There is a possible error here: If the string
000C81r 3                               ; is exactly 255 chars long, then a lot of the following
000C81r 3                               ; additions will fail because of wrapping
000C81r 3  74 01                        stz 1,x
000C83r 3               
000C83r 3                               ; Check to see if this name already exists.
000C83r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000C86r 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000C89r 3               
000C89r 3  B5 00                        lda 0,x
000C8Br 3  15 01                        ora 1,x
000C8Dr 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000C8Fr 3               
000C8Fr 3                               ; This name already exists.  See if we are supposed to print
000C8Fr 3                               ; the message for it.
000C8Fr 3  E8                           inx                     ; Drop flag (nt) from find-name.
000C90r 3  E8                           inx
000C91r 3               
000C91r 3                               ; Check bit 7
000C91r 3  24 rr                        bit status
000C93r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000C95r 3               
000C95r 3                               ; We aren't supposed to print the redefined message ourselves,
000C95r 3                               ; but we should indicate that it is redefined (for ; to print
000C95r 3                               ; later).
000C95r 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000C97r 3  05 rr                        ora status
000C99r 3  85 rr                        sta status
000C9Br 3  80 18                        bra @process_name
000C9Dr 3               
000C9Dr 3               @redefined_name:
000C9Dr 3                               ; Print the message that the name is redefined.
000C9Dr 3  A9 02                        lda #str_redefined
000C9Fr 3  20 rr rr                     jsr print_string_no_lf
000CA2r 3               
000CA2r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000CA5r 3  20 rr rr                     jsr xt_type
000CA8r 3  20 rr rr                     jsr xt_space
000CABr 3               
000CABr 3  80 08                        bra @process_name
000CADr 3               
000CADr 3               @new_name:
000CADr 3  E8                           inx                     ; Drop flag (0) from find-name.
000CAEr 3  E8                           inx
000CAFr 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000CB1r 3  25 rr                        and status
000CB3r 3  85 rr                        sta status
000CB5r 3               
000CB5r 3               @process_name:
000CB5r 3  B5 00                        lda 0,x
000CB7r 3  85 rr                        sta tmp2                ; store length of string in tmp2
000CB9r 3               
000CB9r 3                               ; remember the first free byte of memory as the start of
000CB9r 3                               ; the new word
000CB9r 3  A5 rr                        lda cp
000CBBr 3  85 rr                        sta tmp1
000CBDr 3  A5 rr                        lda cp+1
000CBFr 3  85 rr                        sta tmp1+1
000CC1r 3               
000CC1r 3                               ; We need 8 bytes plus the length of the string for our new header.
000CC1r 3                               ; This is also the offset for the start of the code field (the
000CC1r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000CC1r 3                               ; just allot the space afterwards
000CC1r 3  B5 00                        lda 0,x
000CC3r 3  18                           clc
000CC4r 3  69 08                        adc #8
000CC6r 3  85 rr                        sta tmp3                ; total header length
000CC8r 3               
000CC8r 3                               ; We need three more bytes for for the hardcoded code field
000CC8r 3                               ; area (CFA), the "payload" of the word which by default will
000CC8r 3                               ; be a subroutine jump to DOVAR
000CC8r 3  18                           clc
000CC9r 3  69 03                        adc #3
000CCBr 3               
000CCBr 3                               ; We overwrite the length of the string returned by PARSE-NAME
000CCBr 3                               ; and then call ALLOT
000CCBr 3  95 00                        sta 0,x
000CCDr 3  74 01                        stz 1,x         ; max header size is 255 chars
000CCFr 3  20 rr rr                     jsr xt_allot    ; ( addr )
000CD2r 3               
000CD2r 3                               ; Get the CURRENT dictionary pointer.
000CD2r 3  20 rr rr                     jsr current_to_dp
000CD5r 3               
000CD5r 3                               ; Now we walk through the header with Y as the index, adding
000CD5r 3                               ; information byte-by-byte
000CD5r 3  A0 00                        ldy #0
000CD7r 3               
000CD7r 3                               ; HEADER BYTE 0: Length of string
000CD7r 3  A5 rr                        lda tmp2
000CD9r 3  91 rr                        sta (tmp1),y
000CDBr 3               
000CDBr 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000CDBr 3                               ; to "never native", user will have to decide if they should
000CDBr 3                               ; be inlined
000CDBr 3  A9 08                        lda #NN
000CDDr 3               
000CDDr 3                               ; Also, words defined by CREATE are marked in the header has
000CDDr 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000CDDr 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000CDDr 3                               ; correctly with DOES> and CREATE. See the discussion at
000CDDr 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000CDDr 3  09 20                        ora #HC
000CDFr 3  C8                           iny
000CE0r 3  91 rr                        sta (tmp1),y
000CE2r 3  C8                           iny
000CE3r 3               
000CE3r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000CE3r 3                               ; in the Dictionary
000CE3r 3  A5 rr                        lda dp
000CE5r 3  91 rr                        sta (tmp1),y
000CE7r 3  C8                           iny
000CE8r 3  A5 rr                        lda dp+1
000CEAr 3  91 rr                        sta (tmp1),y
000CECr 3  C8                           iny
000CEDr 3               
000CEDr 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000CEDr 3  A5 rr                        lda tmp1+1
000CEFr 3  85 rr                        sta dp+1
000CF1r 3  A5 rr                        lda tmp1
000CF3r 3  85 rr                        sta dp
000CF5r 3               
000CF5r 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000CF5r 3                               ; This begins after the header so we take the length of the
000CF5r 3                               ; header, which we cleverly saved in tmp3, and use it as an
000CF5r 3                               ; offset to the address of the start of the word. We come here
000CF5r 3                               ; with tmp1 in A
000CF5r 3  18                           clc
000CF6r 3  65 rr                        adc tmp3        ; add total header length
000CF8r 3  91 rr                        sta (tmp1),y
000CFAr 3  48                           pha             ; we need this in the next step
000CFBr 3  C8                           iny
000CFCr 3               
000CFCr 3  A5 rr                        lda tmp1+1
000CFEr 3  69 00                        adc #0          ; only need the carry
000D00r 3  91 rr                        sta (tmp1),y
000D02r 3  C8                           iny
000D03r 3               
000D03r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000D03r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000D03r 3                               ; bytes down, and then one more byte so that the z_ label points
000D03r 3                               ; to the (still fictional) RTS instruction for correct compilation
000D03r 3  68                           pla             ; LSB of "z_" address
000D04r 3  18                           clc
000D05r 3  69 03                        adc #3
000D07r 3  91 rr                        sta (tmp1),y
000D09r 3               
000D09r 3  88                           dey             ; get the MSB of xt back
000D0Ar 3  B1 rr                        lda (tmp1),y
000D0Cr 3  69 00                        adc #0          ; only need the carry
000D0Er 3  C8                           iny
000D0Fr 3  C8                           iny
000D10r 3  91 rr                        sta (tmp1),y
000D12r 3  C8                           iny
000D13r 3               
000D13r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000D13r 3                               ; length in tmp2. We subtract 8 from the address so we can
000D13r 3                               ; use the same loop index, which is already 8 byte ahead at
000D13r 3                               ; this point
000D13r 3  B5 00                        lda 0,x
000D15r 3  38                           sec
000D16r 3  E9 08                        sbc #8
000D18r 3  85 rr                        sta tmptos
000D1Ar 3               
000D1Ar 3  B5 01                        lda 1,x
000D1Cr 3  E9 00                        sbc #0          ; only need carry
000D1Er 3  85 rr                        sta tmptos+1
000D20r 3               
000D20r 3               @name_loop:
000D20r 3  B1 rr                        lda (tmptos),y
000D22r 3               
000D22r 3                               ; Make sure it goes into the dictionary in lower case.
000D22r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000D24r 3  B0 07                        bcs @store_name
000D26r 3  C9 41                        cmp #$41        ; ASCII 'A'
000D28r 3  90 03                        bcc @store_name
000D2Ar 3               
000D2Ar 3                               ; An uppercase letter has been located. Make it
000D2Ar 3                               ; lowercase.
000D2Ar 3  18                           clc
000D2Br 3  69 20                        adc #$20
000D2Dr 3               
000D2Dr 3                               ; Fall into @store_name.
000D2Dr 3               
000D2Dr 3               @store_name:
000D2Dr 3  91 rr                        sta (tmp1),y
000D2Fr 3  C8                           iny
000D30r 3  C6 rr                        dec tmp2
000D32r 3  D0 EC                        bne @name_loop
000D34r 3               
000D34r 3                               ; After thename string comes the code field, starting at the
000D34r 3                               ; current xt of this word, which is initially a jump to the
000D34r 3                               ; subroutine to DOVAR. We code this jump by hand
000D34r 3  A9 20                        lda #$20        ; opcode of JSR
000D36r 3  91 rr                        sta (tmp1),y
000D38r 3  C8                           iny
000D39r 3  A9 rr                        lda #<dovar
000D3Br 3  91 rr                        sta (tmp1),y
000D3Dr 3  C8                           iny
000D3Er 3  A9 rr                        lda #>dovar
000D40r 3  91 rr                        sta (tmp1),y
000D42r 3               
000D42r 3                               ; Update the CURRENT wordlist with the new DP.
000D42r 3                               ; We do this down here because this routine uses Y.
000D42r 3  20 rr rr                     jsr dp_to_current
000D45r 3               
000D45r 3                               ; And we're done. Restore stack
000D45r 3  E8                           inx
000D46r 3  E8                           inx
000D47r 3               
000D47r 3  60           z_create:       rts
000D48r 3               
000D48r 3               
000D48r 3               
000D48r 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000D48r 3               ; ## "d-"  auto  ANS double
000D48r 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000D48r 3               
000D48r 3               xt_d_minus:
000D48r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000D4Br 3               
000D4Br 3  38                           sec
000D4Cr 3               
000D4Cr 3  B5 06                        lda 6,x         ; LSB of lower word
000D4Er 3  F5 02                        sbc 2,x
000D50r 3  95 06                        sta 6,x
000D52r 3               
000D52r 3  B5 07                        lda 7,x         ; MSB of lower word
000D54r 3  F5 03                        sbc 3,x
000D56r 3  95 07                        sta 7,x
000D58r 3               
000D58r 3  B5 04                        lda 4,x         ; LSB of upper word
000D5Ar 3  F5 00                        sbc 0,x
000D5Cr 3  95 04                        sta 4,x
000D5Er 3               
000D5Er 3  B5 05                        lda 5,x         ; MSB of upper word
000D60r 3  F5 01                        sbc 1,x
000D62r 3  95 05                        sta 5,x
000D64r 3               
000D64r 3  E8                           inx
000D65r 3  E8                           inx
000D66r 3  E8                           inx
000D67r 3  E8                           inx
000D68r 3               
000D68r 3  60           z_d_minus:      rts
000D69r 3               
000D69r 3               
000D69r 3               
000D69r 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000D69r 3               ; ## "d+"  auto  ANS double
000D69r 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000D69r 3               
000D69r 3               xt_d_plus:
000D69r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000D6Cr 3               
000D6Cr 3  18                           clc
000D6Dr 3  B5 02                        lda 2,x         ; LSB of lower word
000D6Fr 3  75 06                        adc 6,x
000D71r 3  95 06                        sta 6,x
000D73r 3               
000D73r 3  B5 03                        lda 3,x         ; MSB of lower word
000D75r 3  75 07                        adc 7,x
000D77r 3  95 07                        sta 7,x
000D79r 3               
000D79r 3  B5 00                        lda 0,x         ; LSB of upper word
000D7Br 3  75 04                        adc 4,x
000D7Dr 3  95 04                        sta 4,x
000D7Fr 3               
000D7Fr 3  B5 01                        lda 1,x         ; MSB of upper word
000D81r 3  75 05                        adc 5,x
000D83r 3  95 05                        sta 5,x
000D85r 3               
000D85r 3  E8                           inx
000D86r 3  E8                           inx
000D87r 3  E8                           inx
000D88r 3  E8                           inx
000D89r 3               
000D89r 3  60           z_d_plus:       rts
000D8Ar 3               
000D8Ar 3               
000D8Ar 3               
000D8Ar 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000D8Ar 3               ; ## "d>s"  auto  ANS double
000D8Ar 3                       ; """https://forth-standard.org/standard/double/DtoS
000D8Ar 3                       ; Though this is basically just DROP, we keep it
000D8Ar 3                       ; separate so we can test for underflow
000D8Ar 3                       ; """
000D8Ar 3               
000D8Ar 3               xt_d_to_s:
000D8Ar 3  20 rr rr                     jsr underflow_2
000D8Dr 3               
000D8Dr 3  E8                           inx
000D8Er 3  E8                           inx
000D8Fr 3               
000D8Fr 3  60           z_d_to_s:       rts
000D90r 3               
000D90r 3               
000D90r 3               
000D90r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000D90r 3               ; ## "dabs"  auto  ANS double
000D90r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000D90r 3               
000D90r 3               xt_dabs:
000D90r 3  20 rr rr                     jsr underflow_2 ; double number
000D93r 3               
000D93r 3  B5 01                        lda 1,x         ; MSB of high cell
000D95r 3  10 17                        bpl @done       ; positive, we get off light
000D97r 3               
000D97r 3                               ; negative, calculate 0 - d
000D97r 3  A0 00                        ldy #0
000D99r 3  38                           sec
000D9Ar 3               
000D9Ar 3  98                           tya
000D9Br 3  F5 02                        sbc 2,x         ; LSB of low cell
000D9Dr 3  95 02                        sta 2,x
000D9Fr 3               
000D9Fr 3  98                           tya
000DA0r 3  F5 03                        sbc 3,x         ; MSB of low cell
000DA2r 3  95 03                        sta 3,x
000DA4r 3               
000DA4r 3  98                           tya
000DA5r 3  F5 00                        sbc 0,x         ; LSB of high cell
000DA7r 3  95 00                        sta 0,x
000DA9r 3               
000DA9r 3  98                           tya
000DAAr 3  F5 01                        sbc 1,x         ; MSB of high cell
000DACr 3  95 01                        sta 1,x
000DAEr 3               @done:
000DAEr 3  60           z_dabs:         rts
000DAFr 3               
000DAFr 3               
000DAFr 3               
000DAFr 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000DAFr 3               ; ## "decimal"  auto  ANS core
000DAFr 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000DAFr 3               xt_decimal:
000DAFr 3  A9 0A                        lda #10
000DB1r 3  85 rr                        sta base
000DB3r 3  64 rr                        stz base+1              ; paranoid
000DB5r 3               
000DB5r 3  60           z_decimal:      rts
000DB6r 3               
000DB6r 3               
000DB6r 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000DB6r 3               ; ## "defer"  auto  ANS core ext
000DB6r 3                       ; """https://forth-standard.org/standard/core/DEFER
000DB6r 3                       ; Reserve an name that can be linked to various xt by IS.
000DB6r 3                       ;
000DB6r 3                       ; The ANS reference implementation is
000DB6r 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000DB6r 3                       ; But we use this routine as a low-level word so things go faster
000DB6r 3               
000DB6r 3               xt_defer:
000DB6r 3  20 rr rr                     jsr xt_create
000DB9r 3               
000DB9r 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000DB9r 3                               ; but we actually want DODEFER this time. Go back two
000DB9r 3                               ; bytes and repace the subroutine jump target
000DB9r 3  A5 rr                        lda cp          ; LSB
000DBBr 3  38                           sec
000DBCr 3  E9 02                        sbc #2
000DBEr 3  85 rr                        sta tmp1
000DC0r 3               
000DC0r 3  A5 rr                        lda cp+1        ; MSB
000DC2r 3  E9 00                        sbc #0          ; we only care about the borrow
000DC4r 3  85 rr                        sta tmp1+1
000DC6r 3               
000DC6r 3                               ; Save the target address
000DC6r 3  A0 00                        ldy #0
000DC8r 3  A9 rr                        lda #<dodefer   ; LSB
000DCAr 3  91 rr                        sta (tmp1),y
000DCCr 3  C8                           iny
000DCDr 3  A9 rr                        lda #>dodefer   ; MSB
000DCFr 3  91 rr                        sta (tmp1),y
000DD1r 3               
000DD1r 3               
000DD1r 3                               ; DODEFER executes the next address it finds after
000DD1r 3                               ; its call. As default, we include the error
000DD1r 3                               ; "Defer not defined"
000DD1r 3  A9 rr                        lda #<defer_error
000DD3r 3  92 rr                        sta (cp)
000DD5r 3  E6 rr                        inc cp
000DD7r 3  D0 02                        bne @1
000DD9r 3  E6 rr                        inc cp+1
000DDBr 3               @1:
000DDBr 3  A9 rr                        lda #>defer_error
000DDDr 3  92 rr                        sta (cp)
000DDFr 3  E6 rr                        inc cp
000DE1r 3  D0 02                        bne @2
000DE3r 3  E6 rr                        inc cp+1
000DE5r 3               @2:
000DE5r 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000DE8r 3               
000DE8r 3  60           z_defer:        rts
000DE9r 3               
000DE9r 3               
000DE9r 3               
000DE9r 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000DE9r 3               ; ## "defer@"  auto  ANS core ext
000DE9r 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000DE9r 3               
000DE9r 3               xt_defer_fetch:
000DE9r 3                               ; No underflow checking as >BODY does it.
000DE9r 3  20 rr rr                     jsr xt_to_body
000DECr 3  20 rr rr                     jsr xt_fetch
000DEFr 3  60           z_defer_fetch:  rts
000DF0r 3               
000DF0r 3               
000DF0r 3               
000DF0r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000DF0r 3               ; ## "defer!"  auto  ANS core ext
000DF0r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000DF0r 3               
000DF0r 3               xt_defer_store:
000DF0r 3                               ; No underflow checking as >BODY and ! do it.
000DF0r 3  20 rr rr                     jsr xt_to_body
000DF3r 3  20 rr rr                     jsr xt_store
000DF6r 3  60           z_defer_store:  rts
000DF7r 3               
000DF7r 3               
000DF7r 3               
000DF7r 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000DF7r 3               ; ## "definitions" auto ANS search
000DF7r 3               xt_definitions:
000DF7r 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000DF9r 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000DFBr 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000DFDr 3  91 rr                        sta (up),y
000DFFr 3  60           z_definitions:  rts
000E00r 3               
000E00r 3               
000E00r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
000E00r 3               ; ## "depth"  auto  ANS core
000E00r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
000E00r 3               xt_depth:
000E00r 3  A9 rr                        lda #dsp0
000E02r 3  86 rr                        stx tmpdsp
000E04r 3  38                           sec
000E05r 3  E5 rr                        sbc tmpdsp
000E07r 3               
000E07r 3                               ; divide by two because each cell is two bytes
000E07r 3  4A                           lsr
000E08r 3               
000E08r 3  CA                           dex
000E09r 3  CA                           dex
000E0Ar 3  95 00                        sta 0,x
000E0Cr 3  74 01                        stz 1,x
000E0Er 3               
000E0Er 3  60           z_depth:        rts
000E0Fr 3               
000E0Fr 3               
000E0Fr 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
000E0Fr 3               ; ## "digit?"  auto  Tali Forth
000E0Fr 3                       ; """Inspired by the pForth instruction DIGIT, see
000E0Fr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
000E0Fr 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
000E0Fr 3                       ; pForth, we get the base (radix) ourselves instead of having the
000E0Fr 3                       ; user provide it. There is no standard name for this routine, which
000E0Fr 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
000E0Fr 3                       ; """
000E0Fr 3               
000E0Fr 3               xt_digit_question:
000E0Fr 3  20 rr rr                     jsr underflow_1
000E12r 3               
000E12r 3                               ; one way or another, we're going to need room for the
000E12r 3                               ; flag on the stack
000E12r 3  CA                           dex
000E13r 3  CA                           dex
000E14r 3  74 00                        stz 0,x                 ; default flag is failure
000E16r 3  74 01                        stz 1,x
000E18r 3  74 03                        stz 3,x                 ; paranoid
000E1Ar 3               
000E1Ar 3                               ; Check the character, now in the LSB of NOS. First, make
000E1Ar 3                               ; sure we're not below the ASCII code for "0"
000E1Ar 3  B5 02                        lda 2,x
000E1Cr 3  C9 30                        cmp #'0'
000E1Er 3  90 23                        bcc @done               ; failure flag already set
000E20r 3               
000E20r 3                               ; Next, see if we are below "9", because that would make
000E20r 3                               ; this a normal number
000E20r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
000E22r 3  90 12                        bcc @checkbase
000E24r 3               
000E24r 3                               ; Well, then let's see if this is the gap between "9" and "A"
000E24r 3                               ; so we can treat the whole range as a number
000E24r 3  C9 41                        cmp #'A'
000E26r 3  90 1B                        bcc @done               ; failure flag is already set
000E28r 3               
000E28r 3                               ; probably a letter, so we make sure it is uppercase
000E28r 3  C9 61                        cmp #'a'
000E2Ar 3  90 07                        bcc @case_done          ; not lower case, too low
000E2Cr 3  C9 7B                        cmp #'z'+1
000E2Er 3  B0 03                        bcs @case_done          ; not lower case, too high
000E30r 3               
000E30r 3  18                           clc                     ; just right
000E31r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
000E33r 3               
000E33r 3               @case_done:
000E33r 3                               ; get rid of the gap between "9" and "A" so we can treat
000E33r 3                               ; the whole range as one number
000E33r 3  38                           sec
000E34r 3  E9 07                        sbc #7                  ; fall through to @checkbase
000E36r 3               
000E36r 3               @checkbase:
000E36r 3                               ; we have a number, now see if it falls inside the range
000E36r 3                               ; provided by BASE
000E36r 3  38                           sec
000E37r 3  E9 30                        sbc #'0'                 ; this is also the conversion step
000E39r 3  C5 rr                        cmp base
000E3Br 3  B0 06                        bcs @done               ; already have false flag
000E3Dr 3               
000E3Dr 3                               ; Found a legal number
000E3Dr 3  95 02                        sta 2,x                 ; put number in NOS
000E3Fr 3  D6 00                        dec 0,x                 ; set success flag
000E41r 3  D6 01                        dec 1,x
000E43r 3               
000E43r 3               @done:
000E43r 3               z_digit_question:
000E43r 3  60                           rts
000E44r 3               
000E44r 3               
000E44r 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
000E44r 3               ; ## "disasm"  tested  Tali Forth
000E44r 3                       ; """Convert a segment of memory to assembler output. This
000E44r 3                       ; word is vectored so people can add their own disassembler.
000E44r 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
000E44r 3                       ; code, see the section on The Disassembler in the manual and
000E44r 3                       ; the file disassembler.asm for more details.
000E44r 3                       ; """
000E44r 3               xt_disasm:
000E44r 3  20 rr rr                     jsr underflow_2
000E47r 3                           .ifdef TALI_OPTIONAL_ASSEMBLER
000E47r 3  20 rr rr                     jsr disassembler
000E4Ar 3                           .endif
000E4Ar 3               
000E4Ar 3  60           z_disasm:       rts
000E4Br 3               
000E4Br 3               
000E4Br 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
000E4Br 3               ; ## "dnegate"  auto  ANS double
000E4Br 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
000E4Br 3               xt_dnegate:
000E4Br 3  20 rr rr                     jsr underflow_2 ; double number
000E4Er 3               
000E4Er 3  A0 00             		ldy #0
000E50r 3  38                           sec
000E51r 3               
000E51r 3  98                           tya
000E52r 3  F5 02                        sbc 2,x         ; LSB of low cell
000E54r 3  95 02                        sta 2,x
000E56r 3               
000E56r 3  98                           tya
000E57r 3  F5 03                        sbc 3,x         ; MSB of low cell
000E59r 3  95 03                        sta 3,x
000E5Br 3               
000E5Br 3  98                           tya
000E5Cr 3  F5 00                        sbc 0,x         ; LSB of high cell
000E5Er 3  95 00                        sta 0,x
000E60r 3               
000E60r 3  98                           tya
000E61r 3  F5 01                        sbc 1,x         ; MSB of high cell
000E63r 3  95 01                        sta 1,x
000E65r 3               
000E65r 3  60           z_dnegate:      rts
000E66r 3               
000E66r 3               
000E66r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
000E66r 3               ; ## "?do"  auto  ANS core ext
000E66r 3                       ; """https://forth-standard.org/standard/core/qDO"""
000E66r 3               xt_question_do:
000E66r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
000E66r 3                               ; to mark which is which
000E66r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
000E68r 3  85 rr                        sta tmp1
000E6Ar 3  80 02                        bra do_common           ; skip flag for DO
000E6Cr 3               
000E6Cr 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
000E6Cr 3               ; ## "do"  auto  ANS core
000E6Cr 3                       ; """https://forth-standard.org/standard/core/DO
000E6Cr 3                       ;
000E6Cr 3                       ; Compile-time part of DO. Could be realized in Forth as
000E6Cr 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
000E6Cr 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
000E6Cr 3                       ; a routine that pushes the end address to the Return Stack at run
000E6Cr 3                       ; time. This is based on a suggestion by Garth Wilson, see
000E6Cr 3                       ; the Control Flow section of the manual for details.
000E6Cr 3                       ;
000E6Cr 3                       ; This may not be native compile. Don't check for a stack underflow
000E6Cr 3                       ; """
000E6Cr 3               
000E6Cr 3               xt_do:
000E6Cr 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
000E6Cr 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
000E6Er 3               do_common:
000E6Er 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
000E6Er 3                               ; compile the address we need to LDA at runtime
000E6Er 3  CA                           dex
000E6Fr 3  CA                           dex
000E70r 3  A5 rr                        lda cp
000E72r 3  95 00                        sta 0,x                 ; LSB
000E74r 3  A5 rr                        lda cp+1
000E76r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
000E78r 3               
000E78r 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
000E78r 3                               ; replace by the actual LDA/PHA instructions
000E78r 3  A9 05                        lda #5                  ; we don't really care about the value,
000E7Ar 3  A8                           tay                     ; so we use 5 to be tricky
000E7Br 3               @loop:
000E7Br 3  91 rr                        sta (cp),y
000E7Dr 3  88                           dey
000E7Er 3  10 FB                        bpl @loop
000E80r 3               
000E80r 3                               ; update CP
000E80r 3  1A                           inc             ; we used 5 as a dummy value, this is why
000E81r 3  18                           clc
000E82r 3  65 rr                        adc cp
000E84r 3  85 rr                        sta cp
000E86r 3  90 02                        bcc @1
000E88r 3  E6 rr                        inc cp+1
000E8Ar 3               @1:
000E8Ar 3                               ; compile the (?DO) portion of ?DO if appropriate
000E8Ar 3  A5 rr                        lda tmp1
000E8Cr 3  F0 17                        beq @compile_do
000E8Er 3               
000E8Er 3                               ; We came from ?DO, so compile its runtime first. We do
000E8Er 3                               ; this with a quick loop because we know it has to be
000E8Er 3                               ; Always Native anyway
000E8Er 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
000E90r 3  5A                           phy             ; save counter to calculate new CP
000E91r 3               @2:
000E91r 3  B9 rr rr                     lda question_do_runtime,y
000E94r 3  91 rr                        sta (cp),y
000E96r 3  88                           dey
000E97r 3  10 F8                        bpl @2
000E99r 3               
000E99r 3                               ; adjust CP
000E99r 3  68                           pla             ; retrieve counter
000E9Ar 3  18                           clc
000E9Br 3  65 rr                        adc cp
000E9Dr 3  85 rr                        sta cp
000E9Fr 3  A5 rr                        lda cp+1
000EA1r 3  69 00                        adc #0          ; only care about carry
000EA3r 3  85 rr                        sta cp+1        ; fall through to @compile_do
000EA5r 3               
000EA5r 3               @compile_do:
000EA5r 3                               ; compile runtime part of DO.
000EA5r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
000EA7r 3  5A                           phy             ; save counter to calculate new CP
000EA8r 3               @3:
000EA8r 3  B9 rr rr                     lda do_runtime,y
000EABr 3  91 rr                        sta (cp),y
000EADr 3  88                           dey
000EAEr 3  10 F8                        bpl @3
000EB0r 3               
000EB0r 3                               ; adjust CP
000EB0r 3  68                           pla             ; retrieve counter
000EB1r 3  18                           clc
000EB2r 3  65 rr                        adc cp
000EB4r 3  85 rr                        sta cp
000EB6r 3  A5 rr                        lda cp+1
000EB8r 3  69 00                        adc #0          ; only care about carry
000EBAr 3  85 rr                        sta cp+1
000EBCr 3               
000EBCr 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
000EBCr 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
000EBCr 3                               ; do with the HERE we're saving for LEAVE
000EBCr 3  CA                           dex
000EBDr 3  CA                           dex
000EBEr 3  A5 rr                        lda cp          ; LSB
000EC0r 3  95 00                        sta 0,x
000EC2r 3  A5 rr                        lda cp+1        ; MSB
000EC4r 3  95 01                        sta 1,x
000EC6r 3               z_question_do:
000EC6r 3  60           z_do:           rts
000EC7r 3               
000EC7r 3               
000EC7r 3               do_runtime:
000EC7r 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
000EC7r 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
000EC7r 3                       ; the FIG Forth loop (you can see which version you have by running
000EC7r 3                       ; a loop with start and limit as the same value, for instance
000EC7r 3                       ; 0 0 DO -- these will walk through the number space). We use a
000EC7r 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
000EC7r 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
000EC7r 3                       ; for further discussion of this. The source given there for
000EC7r 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
000EC7r 3                       ; in some Forths. Usually, we would define this as a separate word
000EC7r 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
000EC7r 3                       ; However, we can do it faster if we just copy the bytes
000EC7r 3                       ; of this routine with a simple loop in DO.
000EC7r 3                       ; """
000EC7r 3                               ; First step: create fudge factor (FUFA) by subtracting the
000EC7r 3                               ; limit from $8000, the number that will trip the overflow
000EC7r 3                               ; flag
000EC7r 3  38                           sec
000EC8r 3  A9 00                        lda #0
000ECAr 3  F5 02                        sbc 2,x         ; LSB of limit
000ECCr 3  95 02                        sta 2,x         ; save FUFA for later use
000ECEr 3               
000ECEr 3  A9 80                        lda #$80
000ED0r 3  F5 03                        sbc 3,x         ; MSB of limit
000ED2r 3  95 03                        sta 3,x         ; save FUFA for later use
000ED4r 3  48                           pha             ; FUFA replaces limit on R stack
000ED5r 3  B5 02                        lda 2,x         ; LSB of limit
000ED7r 3  48                           pha
000ED8r 3               
000ED8r 3                               ; Second step: index is FUFA plus original index
000ED8r 3  18                           clc
000ED9r 3  B5 00                        lda 0,x         ; LSB of original index
000EDBr 3  75 02                        adc 2,x         ; add LSB of FUFA
000EDDr 3  95 00                        sta 0,x
000EDFr 3  B5 01                        lda 1,x         ; MSB of orginal index
000EE1r 3  75 03                        adc 3,x         ; add MSB of FUFA
000EE3r 3  48                           pha
000EE4r 3  B5 00                        lda 0,x         ; LSB of index
000EE6r 3  48                           pha
000EE7r 3               
000EE7r 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
000EE7r 3                               ; use it later. Clean the Data Stack
000EE7r 3  E8                           inx
000EE8r 3  E8                           inx
000EE9r 3  E8                           inx
000EEAr 3  E8                           inx             ; no RTS because this is copied into code
000EEBr 3               do_runtime_end:
000EEBr 3               
000EEBr 3               question_do_runtime:
000EEBr 3               
000EEBr 3                       ; """This is called (?DO) in some Forths. See the explanation at
000EEBr 3                       ; do_runtime for the background on this design
000EEBr 3                       ; """
000EEBr 3                               ; see if TOS and NOS are equal. Change this to assembler
000EEBr 3                               ; for speed
000EEBr 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
000EEEr 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
000EF1r 3               
000EF1r 3  B5 00                        lda 0,x
000EF3r 3  15 01                        ora 1,x
000EF5r 3  F0 06                        beq @do_do
000EF7r 3               
000EF7r 3                               ; We're equal, so dump everything and jump beyond the loop.
000EF7r 3                               ; But first, dump six entries off of the Data Stack
000EF7r 3  8A                           txa
000EF8r 3  18                           clc
000EF9r 3  69 06                        adc #6
000EFBr 3  AA                           tax
000EFCr 3               
000EFCr 3                               ; Then abort the whole loop
000EFCr 3  60                           rts
000EFDr 3               @do_do:
000EFDr 3  E8                           inx             ; clear flag from EQUAL off stack
000EFEr 3  E8                           inx             ; no RTS because this is copied into code
000EFFr 3               question_do_runtime_end:
000EFFr 3               
000EFFr 3               
000EFFr 3               
000EFFr 3               ; ## DOES ( -- ) "Add payload when defining new words"
000EFFr 3               ; ## "does>"  auto  ANS core
000EFFr 3                       ; """https://forth-standard.org/standard/core/DOES
000EFFr 3                       ; Create the payload for defining new defining words. See
000EFFr 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
000EFFr 3                       ; the Developer Guide in the manual for a discussion of
000EFFr 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
000EFFr 3                       ; """
000EFFr 3               
000EFFr 3               xt_does:
000EFFr 3                               ; compile a subroutine jump to runtime of DOES>
000EFFr 3  A0 rr                        ldy #>does_runtime
000F01r 3  A9 rr                        lda #<does_runtime
000F03r 3  20 rr rr                     jsr cmpl_subroutine
000F06r 3               
000F06r 3                               ; compile a subroutine jump to DODOES. In traditional
000F06r 3                               ; terms, this is the Code Field Area (CFA) of the new
000F06r 3                               ; word
000F06r 3  A0 rr                        ldy #>dodoes
000F08r 3  A9 rr                        lda #<dodoes
000F0Ar 3  20 rr rr                     jsr cmpl_subroutine
000F0Dr 3               
000F0Dr 3  60           z_does:         rts
000F0Er 3               
000F0Er 3               
000F0Er 3               does_runtime:
000F0Er 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
000F0Er 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
000F0Er 3                       ; address that contains a subroutine jump to DODOES. We don't
000F0Er 3                       ; jump to DODOES directly because we need to work our magic with
000F0Er 3                       ; the return addresses. This routine is also known as "(DOES)" in
000F0Er 3                       ; other Forths
000F0Er 3                       ; """
000F0Er 3               
000F0Er 3  7A                           ply             ; LSB
000F0Fr 3  68                           pla             ; MSB
000F10r 3               
000F10r 3  C8                           iny
000F11r 3  D0 01                        bne @1
000F13r 3  1A                           inc
000F14r 3               @1:
000F14r 3  84 rr                        sty tmp1
000F16r 3  85 rr                        sta tmp1+1
000F18r 3               
000F18r 3                               ; CREATE has also already modified the DP to point to the new
000F18r 3                               ; word. We have no idea which instructions followed the CREATE
000F18r 3                               ; command if there is a DOES> so the CP could point anywhere
000F18r 3                               ; by now. The address of the word's xt is four bytes down.
000F18r 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
000F1Br 3  A5 rr                        lda dp
000F1Dr 3  18                           clc
000F1Er 3  69 04                        adc #4
000F20r 3  85 rr                        sta tmp2
000F22r 3  A5 rr                        lda dp+1
000F24r 3  69 00                        adc #0          ; we only care about the carry
000F26r 3  85 rr                        sta tmp2+1
000F28r 3               
000F28r 3                               ; Now we get that address and add one byte to skip over the JSR
000F28r 3                               ; opcode
000F28r 3  B2 rr                        lda (tmp2)
000F2Ar 3  18                           clc
000F2Br 3  69 01                        adc #1
000F2Dr 3  85 rr                        sta tmp3
000F2Fr 3  A0 01                        ldy #1
000F31r 3  B1 rr                        lda (tmp2),y
000F33r 3  69 00                        adc #0          ; we only care about the carry
000F35r 3  85 rr                        sta tmp3+1
000F37r 3               
000F37r 3                               ; Replace the DOVAR address with our own
000F37r 3  A5 rr                        lda tmp1        ; LSB
000F39r 3  92 rr                        sta (tmp3)
000F3Br 3  A5 rr                        lda tmp1+1
000F3Dr 3  91 rr                        sta (tmp3),y    ; Y is still 1
000F3Fr 3               
000F3Fr 3                               ; Since we removed the return address that brought us here, we
000F3Fr 3                               ; go back to whatever the main routine was. Otherwise, we we
000F3Fr 3                               ; smash into the subroutine jump to DODOES.
000F3Fr 3  60                           rts
000F40r 3               
000F40r 3               
000F40r 3               
000F40r 3               ; ## DOT ( u -- ) "Print TOS"
000F40r 3               ; ## "."  auto  ANS core
000F40r 3                       ; """https://forth-standard.org/standard/core/d"""
000F40r 3               
000F40r 3               xt_dot:
000F40r 3  20 rr rr                     jsr underflow_1
000F43r 3               
000F43r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
000F46r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
000F49r 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
000F4Cr 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
000F4Fr 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
000F52r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
000F55r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
000F58r 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
000F5Br 3  20 rr rr                     jsr xt_type
000F5Er 3  20 rr rr                     jsr xt_space
000F61r 3               
000F61r 3  60           z_dot:          rts
000F62r 3               
000F62r 3               
000F62r 3               
000F62r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
000F62r 3               ; ## ".("  auto  ANS core
000F62r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
000F62r 3               
000F62r 3               xt_dot_paren:
000F62r 3                               ; Put a right paren on the stack.
000F62r 3  CA                           dex
000F63r 3  CA                           dex
000F64r 3  A9 29                        lda #41     ; Right parenthesis
000F66r 3  95 00                        sta 0,x
000F68r 3  74 01                        stz 1,x
000F6Ar 3               
000F6Ar 3  20 rr rr                     jsr xt_parse
000F6Dr 3  20 rr rr                     jsr xt_type
000F70r 3               
000F70r 3  60           z_dot_paren:    rts
000F71r 3               
000F71r 3               
000F71r 3               
000F71r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
000F71r 3               ; ## ".""  auto  ANS core ext
000F71r 3                       ; """https://forth-standard.org/standard/core/Dotq
000F71r 3                       ; Compile string that is printed during run time. ANS Forth wants
000F71r 3                       ; this to be compile-only, even though everybody and their friend
000F71r 3                       ; uses it for everything. We follow the book here, and recommend
000F71r 3                       ; `.(` for general printing.
000F71r 3                       ; """
000F71r 3               
000F71r 3               xt_dot_quote:
000F71r 3                               ; we let S" do the heavy lifting. Since we're in
000F71r 3                               ; compile mode, it will save the string and reproduce it
000F71r 3                               ; during runtime
000F71r 3  20 rr rr                     jsr xt_s_quote
000F74r 3               
000F74r 3                               ; We then let TYPE do the actual printing
000F74r 3  A0 rr                        ldy #>xt_type
000F76r 3  A9 rr                        lda #<xt_type
000F78r 3  20 rr rr                     jsr cmpl_subroutine
000F7Br 3               
000F7Br 3  60           z_dot_quote:    rts
000F7Cr 3               
000F7Cr 3               
000F7Cr 3               
000F7Cr 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
000F7Cr 3               ; ## ".r"  tested  ANS core ext
000F7Cr 3                       ; """https://forth-standard.org/standard/core/DotR
000F7Cr 3                       ;
000F7Cr 3                       ; Based on the Forth code
000F7Cr 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
000F7Cr 3                       ; """
000F7Cr 3               
000F7Cr 3               xt_dot_r:
000F7Cr 3  20 rr rr                     jsr underflow_2
000F7Fr 3               
000F7Fr 3  20 rr rr                     jsr xt_to_r
000F82r 3  20 rr rr                     jsr xt_dup
000F85r 3  20 rr rr                     jsr xt_abs
000F88r 3  20 rr rr                     jsr xt_zero
000F8Br 3  20 rr rr                     jsr xt_less_number_sign
000F8Er 3  20 rr rr                     jsr xt_number_sign_s
000F91r 3  20 rr rr                     jsr xt_rot
000F94r 3  20 rr rr                     jsr xt_sign
000F97r 3  20 rr rr                     jsr xt_number_sign_greater
000F9Ar 3  20 rr rr                     jsr xt_r_from
000F9Dr 3  20 rr rr                     jsr xt_over
000FA0r 3  20 rr rr                     jsr xt_minus
000FA3r 3  20 rr rr                     jsr xt_spaces
000FA6r 3  20 rr rr                     jsr xt_type
000FA9r 3               
000FA9r 3  60           z_dot_r:        rts
000FAAr 3               
000FAAr 3               
000FAAr 3               
000FAAr 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
000FAAr 3               ; ## ".s"  tested  ANS tools
000FAAr 3                       ; """https://forth-standard.org/standard/tools/DotS
000FAAr 3                       ; Print content of Data Stack non-distructively. We follow the format
000FAAr 3                       ; of Gforth and print the number of elements first in brackets,
000FAAr 3                       ; followed by the Data Stack content (if any).
000FAAr 3                       ;
000FAAr 3                       ; Since this is for humans, we don't have to worry about speed.
000FAAr 3                       ; """
000FAAr 3               
000FAAr 3               xt_dot_s:
000FAAr 3  20 rr rr                     jsr xt_depth    ; ( -- u )
000FADr 3               
000FADr 3                               ; Print stack depth in brackets
000FADr 3  A9 3C                        lda #$3c        ; ASCII for "<"
000FAFr 3  20 rr rr                     jsr emit_a
000FB2r 3               
000FB2r 3                               ; We keep a copy of the number of the things on the stack
000FB2r 3                               ; to use as a counter later down. This assumes that there
000FB2r 3                               ; are less than 255 elements on the stack
000FB2r 3  B5 00                        lda 0,x
000FB4r 3  48                           pha
000FB5r 3               
000FB5r 3                               ; print unsigned number without the trailing space
000FB5r 3  CA                           dex             ; DUP
000FB6r 3  CA                           dex
000FB7r 3  95 00                        sta 0,x
000FB9r 3  74 01                        stz 1,x
000FBBr 3               
000FBBr 3  20 rr rr                     jsr print_u
000FBEr 3               
000FBEr 3  A9 3E                        lda #$3e        ; ASCII for ">"
000FC0r 3  20 rr rr                     jsr emit_a
000FC3r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
000FC5r 3  20 rr rr                     jsr emit_a
000FC8r 3               
000FC8r 3  E8                           inx
000FC9r 3  E8                           inx
000FCAr 3               
000FCAr 3                               ; There will be lots of cases where the stack is empty. If that
000FCAr 3                               ; is so, get out of here quickly
000FCAr 3  E0 rr                        cpx #dsp0
000FCCr 3  F0 1E                        beq @done
000FCEr 3               
000FCEr 3               @have_stack:
000FCEr 3                               ; We have at least one element on the stack. The depth of the
000FCEr 3                               ; stack is on the stack, we can use it as a counter. We go
000FCEr 3                               ; from bottom to top
000FCEr 3  7A                           ply
000FCFr 3               
000FCFr 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
000FD1r 3  85 rr                        sta tmp3
000FD3r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
000FD5r 3               @loop:
000FD5r 3  CA                           dex
000FD6r 3  CA                           dex
000FD7r 3               
000FD7r 3  B2 rr                        lda (tmp3)
000FD9r 3  95 01                        sta 1,x
000FDBr 3  C6 rr                        dec tmp3
000FDDr 3               
000FDDr 3  B2 rr                        lda (tmp3)
000FDFr 3  95 00                        sta 0,x
000FE1r 3  C6 rr                        dec tmp3
000FE3r 3  5A                           phy
000FE4r 3               
000FE4r 3  20 rr rr                     jsr xt_dot
000FE7r 3               
000FE7r 3  7A                           ply
000FE8r 3  88                           dey
000FE9r 3  D0 EA                        bne @loop
000FEBr 3               
000FEBr 3  48                           pha             ; dummy to balance stack
000FECr 3               @done:
000FECr 3  68                           pla
000FEDr 3  60           z_dot_s:        rts
000FEEr 3               
000FEEr 3               
000FEEr 3               
000FEEr 3               ; ## D_DOT ( d -- ) "Print double"
000FEEr 3               ; ## "d."  tested  ANS double
000FEEr 3                       ; """http://forth-standard.org/standard/double/Dd"""
000FEEr 3                       ;
000FEEr 3                       ; From the Forth code:
000FEEr 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
000FEEr 3                       ; """
000FEEr 3               
000FEEr 3               xt_d_dot:
000FEEr 3  20 rr rr                     jsr underflow_2
000FF1r 3               
000FF1r 3  20 rr rr                     jsr xt_tuck
000FF4r 3  20 rr rr                     jsr xt_dabs
000FF7r 3  20 rr rr                     jsr xt_less_number_sign
000FFAr 3  20 rr rr                     jsr xt_number_sign_s
000FFDr 3  20 rr rr                     jsr xt_rot
001000r 3  20 rr rr                     jsr xt_sign
001003r 3  20 rr rr                     jsr xt_number_sign_greater
001006r 3  20 rr rr                     jsr xt_type
001009r 3  20 rr rr                     jsr xt_space
00100Cr 3               
00100Cr 3  60           z_d_dot:        rts
00100Dr 3               
00100Dr 3               
00100Dr 3               
00100Dr 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
00100Dr 3               ; ## "d.r"  tested  ANS double
00100Dr 3                       ; """http://forth-standard.org/standard/double/DDotR"""
00100Dr 3                       ; Based on the Forth code
00100Dr 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
00100Dr 3                       ; """
00100Dr 3               
00100Dr 3               xt_d_dot_r:
00100Dr 3  20 rr rr                     jsr underflow_3
001010r 3                               ; From the forth code:
001010r 3  20 rr rr                     jsr xt_to_r
001013r 3  20 rr rr                     jsr xt_tuck
001016r 3  20 rr rr                     jsr xt_dabs
001019r 3  20 rr rr                     jsr xt_less_number_sign
00101Cr 3  20 rr rr                     jsr xt_number_sign_s
00101Fr 3  20 rr rr                     jsr xt_rot
001022r 3  20 rr rr                     jsr xt_sign
001025r 3  20 rr rr                     jsr xt_number_sign_greater
001028r 3  20 rr rr                     jsr xt_r_from
00102Br 3  20 rr rr                     jsr xt_over
00102Er 3  20 rr rr                     jsr xt_minus
001031r 3  20 rr rr                     jsr xt_spaces
001034r 3  20 rr rr                     jsr xt_type
001037r 3               
001037r 3  60           z_d_dot_r:      rts
001038r 3               
001038r 3               
001038r 3               
001038r 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
001038r 3               ; ## "drop"  auto  ANS core
001038r 3                       ; """https://forth-standard.org/standard/core/DROP"""
001038r 3               xt_drop:
001038r 3  20 rr rr                     jsr underflow_1
00103Br 3               
00103Br 3  E8                           inx
00103Cr 3  E8                           inx
00103Dr 3               
00103Dr 3  60           z_drop:         rts
00103Er 3               
00103Er 3               
00103Er 3               ; ## DUMP ( addr u -- ) "Display a memory region"
00103Er 3               ; ## "dump"  tested  ANS tools
00103Er 3                       ; """https://forth-standard.org/standard/tools/DUMP
00103Er 3                       ;
00103Er 3                       ; DUMP's exact output is defined as "implementation dependent".
00103Er 3                       ; This is in assembler because it is
00103Er 3                       ; useful for testing and development, so we want to have it work
00103Er 3                       ; as soon as possible. Uses TMP2
00103Er 3                       ; """
00103Er 3               
00103Er 3               xt_dump:
00103Er 3  20 rr rr                     jsr underflow_2
001041r 3               @row:
001041r 3                               ; start counter for 16 numbers per row
001041r 3  A0 10                        ldy #16
001043r 3               
001043r 3                               ; We use TMP2 as the index for the ASCII characters
001043r 3                               ; that we print at the and of the hex block. We
001043r 3                               ; start saving them at HERE (CP)
001043r 3  64 rr                        stz tmp2
001045r 3               
001045r 3  20 rr rr                     jsr xt_cr
001048r 3               
001048r 3                               ; print address number
001048r 3  B5 03                        lda 3,x
00104Ar 3  20 rr rr                     jsr byte_to_ascii
00104Dr 3  B5 02                        lda 2,x
00104Fr 3  20 rr rr                     jsr byte_to_ascii
001052r 3               
001052r 3  20 rr rr                     jsr xt_space
001055r 3  20 rr rr                     jsr xt_space
001058r 3               @loop:
001058r 3                               ; if there are zero bytes left to display, we're done
001058r 3  B5 00                        lda 0,x
00105Ar 3  15 01                        ora 1,x
00105Cr 3  F0 39                        beq @all_printed
00105Er 3               
00105Er 3                               ; dump the contents
00105Er 3  A1 02                        lda (2,x)
001060r 3  48                           pha                     ; byte_to_ascii destroys A
001061r 3  20 rr rr                     jsr byte_to_ascii
001064r 3  20 rr rr                     jsr xt_space
001067r 3  68                           pla
001068r 3               
001068r 3                               ; Handle ASCII printing
001068r 3  20 rr rr                     jsr is_printable
00106Br 3  B0 02                        bcs @printable
00106Dr 3  A9 2E                        lda #'.'                 ; Print dot if not printable
00106Fr 3               @printable:
00106Fr 3  5A                           phy                     ; save counter
001070r 3  A4 rr                        ldy tmp2
001072r 3  91 rr                        sta (cp),y
001074r 3  E6 rr                        inc tmp2
001076r 3  7A                           ply
001077r 3               
001077r 3                               ; extra space after eight bytes
001077r 3  C0 09                        cpy #9
001079r 3  D0 03                        bne @next_char
00107Br 3  20 rr rr                     jsr xt_space
00107Er 3               
00107Er 3               @next_char:
00107Er 3  F6 02                        inc 2,x
001080r 3  D0 02                        bne @counter
001082r 3  F6 03                        inc 3,x
001084r 3               
001084r 3               @counter:
001084r 3                               ; loop counter
001084r 3  B5 00                        lda 0,x
001086r 3  D0 02                        bne @1
001088r 3  D6 01                        dec 1,x
00108Ar 3               @1:
00108Ar 3  D6 00                        dec 0,x
00108Cr 3  88                           dey
00108Dr 3  D0 C9                        bne @loop               ; next byte
00108Fr 3               
00108Fr 3                               ; Done with one line, print the ASCII version of these
00108Fr 3                               ; characters
00108Fr 3  20 rr rr                     jsr xt_space
001092r 3  20 rr rr                     jsr print_ascii
001095r 3               
001095r 3  80 AA                        bra @row                ; new row
001097r 3               
001097r 3               @all_printed:
001097r 3                               ; See if there are any ASCII characters in the buffer
001097r 3                               ; left to print
001097r 3  A5 rr                        lda tmp2
001099r 3  F0 06                        beq @done
00109Br 3               
00109Br 3                               ; In theory, we could try to make the ASCII part line
00109Br 3                               ; up with the line before it. But that is a hassle (we
00109Br 3                               ; use three bytes for each missed hex entry, and
00109Br 3                               ; then there is the gap after eight entries) and it
00109Br 3                               ; makes it harder to read. We settle for one extra
00109Br 3                               ; space instead for the moment
00109Br 3  20 rr rr                     jsr xt_space
00109Er 3  20 rr rr                     jsr print_ascii
0010A1r 3               @done:
0010A1r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
0010A4r 3  60           z_dump:         rts
0010A5r 3               
0010A5r 3               
0010A5r 3               print_ascii:
0010A5r 3                               ; Print the ASCII characters that we have saved from
0010A5r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
0010A5r 3                               ; is not compiled (DUMP is probably never compiled anyway)
0010A5r 3                               ; but we keep it inside the scope of DUMP.
0010A5r 3  A0 00                        ldy #0
0010A7r 3               @ascii_loop:
0010A7r 3  B1 rr                        lda (cp),y
0010A9r 3  20 rr rr                     jsr emit_a
0010ACr 3  C8                           iny
0010ADr 3               
0010ADr 3                               ; extra space after eight chars
0010ADr 3  C0 08                        cpy #8
0010AFr 3  D0 03                        bne @1
0010B1r 3  20 rr rr                     jsr xt_space
0010B4r 3               @1:
0010B4r 3  C6 rr                        dec tmp2
0010B6r 3  D0 EF                        bne @ascii_loop
0010B8r 3               
0010B8r 3  60                           rts
0010B9r 3               
0010B9r 3               
0010B9r 3               
0010B9r 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
0010B9r 3               ; ## "dup"  auto  ANS core
0010B9r 3                       ; """https://forth-standard.org/standard/core/DUP"""
0010B9r 3               xt_dup:
0010B9r 3  20 rr rr                     jsr underflow_1
0010BCr 3               
0010BCr 3  CA                           dex
0010BDr 3  CA                           dex
0010BEr 3               
0010BEr 3  B5 02                        lda 2,x         ; LSB
0010C0r 3  95 00                        sta 0,x
0010C2r 3  B5 03                        lda 3,x         ; MSB
0010C4r 3  95 01                        sta 1,x
0010C6r 3               
0010C6r 3  60           z_dup:          rts
0010C7r 3               
0010C7r 3               
0010C7r 3               ; ## ED ( -- u ) "Line-based editor"
0010C7r 3               ; ## "ed"  fragment  Tali Forth
0010C7r 3                       ; """Start the line-based editor ed6502. See separate file
0010C7r 3                       ; ed.asm or the manual for details.
0010C7r 3                       ; """
0010C7r 3               xt_ed:
0010C7r 3                       .ifdef ed6502
0010C7r 3                               jsr ed6502      ; kept in separate file
0010C7r 3                       .endif
0010C7r 3               
0010C7r 3  60           z_ed:           rts
0010C8r 3               
0010C8r 3               
0010C8r 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
0010C8r 3               ; ## "editor-wordlist"  tested  Tali Editor
0010C8r 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
0010C8r 3                       ; words to the search order so they can be used.  This will need
0010C8r 3                       ; to be done before any of the words marked "Tali Editor" can be
0010C8r 3                       ; used.  See the tutorial on Wordlists and the Search Order for
0010C8r 3                       ; more information.
0010C8r 3               
0010C8r 3                       ;
0010C8r 3                       ; This is a dummy entry, the code is shared with ONE
0010C8r 3                       ; """
0010C8r 3               
0010C8r 3               
0010C8r 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
0010C8r 3               ; ## "else"  auto  ANS core
0010C8r 3                       ; """http://forth-standard.org/standard/core/ELSE
0010C8r 3                       ;
0010C8r 3                       ; The code is shared with ENDOF
0010C8r 3                       ; """
0010C8r 3               
0010C8r 3               xt_else:
0010C8r 3               xt_endof:
0010C8r 3                               ; Put an unconditional branch.
0010C8r 3  A0 rr                        ldy #>branch_runtime
0010CAr 3  A9 rr                        lda #<branch_runtime
0010CCr 3  20 rr rr                     jsr cmpl_subroutine
0010CFr 3               
0010CFr 3                               ; Put the address of the branch address on the stack.
0010CFr 3  20 rr rr                     jsr xt_here
0010D2r 3               
0010D2r 3                               ; Use zero for the branch address for now.
0010D2r 3                               ; THEN will fill it in later.
0010D2r 3  20 rr rr                     jsr xt_zero
0010D5r 3  20 rr rr                     jsr xt_comma
0010D8r 3               
0010D8r 3                               ; Get the address to jump to (just after the
0010D8r 3                               ; unconditional branch) for the IF to jump to
0010D8r 3                               ; when false.
0010D8r 3  20 rr rr                     jsr xt_here
0010DBr 3  20 rr rr                     jsr xt_rot
0010DEr 3               
0010DEr 3                               ; Update the original if 0branch address.
0010DEr 3  20 rr rr                     jsr xt_store
0010E1r 3               z_else:
0010E1r 3               z_endof:
0010E1r 3  60                           rts
0010E2r 3               
0010E2r 3               
0010E2r 3               
0010E2r 3               branch_runtime:
0010E2r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
0010E2r 3                       ; formally part of a separate word BRANCH which was later removed.
0010E2r 3                       ; """
0010E2r 3               
0010E2r 3                               ; The address on the Return Stack points to the last byte
0010E2r 3                               ; of the JSR address, one byte below the branch literal
0010E2r 3  68                           pla
0010E3r 3  85 rr                        sta tmpbranch
0010E5r 3  68                           pla
0010E6r 3  85 rr                        sta tmpbranch+1
0010E8r 3               
0010E8r 3                               ; Keep in mind: the address we just popped points one byte
0010E8r 3                               ; lower than the branch literal we want to grab
0010E8r 3  A0 01                        ldy #1
0010EAr 3  B1 rr                        lda (tmpbranch),y  ; LSB
0010ECr 3  85 rr                        sta tmp1
0010EEr 3  C8                           iny
0010EFr 3  B1 rr                        lda (tmpbranch),y  ; MSB
0010F1r 3  85 rr                        sta tmp1+1
0010F3r 3               
0010F3r 3  6C rr rr                     jmp (tmp1)
0010F6r 3               
0010F6r 3               
0010F6r 3               
0010F6r 3               ; ## EMIT ( char -- ) "Print character to current output"
0010F6r 3               ; ## "emit"  auto  ANS core
0010F6r 3                       ; """https://forth-standard.org/standard/core/EMIT
0010F6r 3                       ; Run-time default for EMIT. The user can revector this by changing
0010F6r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
0010F6r 3                       ; do not check to see if we have been given a valid ASCII character.
0010F6r 3                       ; Don't make this native compile.
0010F6r 3                       ; """
0010F6r 3               
0010F6r 3               xt_emit:
0010F6r 3  20 rr rr                     jsr underflow_1
0010F9r 3               
0010F9r 3  B5 00                        lda 0,x
0010FBr 3  E8                           inx
0010FCr 3  E8                           inx
0010FDr 3               
0010FDr 3               emit_a:
0010FDr 3                       ; We frequently want to print the character in A without fooling
0010FDr 3                       ; around with the Data Stack. This is emit_a's job, which still
0010FDr 3                       ; allows the output to be vectored. Call it with JSR as you
0010FDr 3                       ; would XT_EMIT
0010FDr 3  6C rr rr                     jmp (output)            ; JSR/RTS
001100r 3               
001100r 3               z_emit:         ; never reached
001100r 3               
001100r 3               
001100r 3               
001100r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
001100r 3               ; ## "empty-buffers"  tested  ANS block ext
001100r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
001100r 3               xt_empty_buffers:
001100r 3                               ; Set the buffer status to empty.
001100r 3  A0 2C                        ldy #buffstatus_offset
001102r 3  A9 00                        lda #0
001104r 3  91 rr                        sta (up),y      ; Only LSB is used.
001106r 3               z_empty_buffers:
001106r 3  60                           rts
001107r 3               
001107r 3               
001107r 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
001107r 3               ; ## "endcase"  auto  ANS core ext
001107r 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
001107r 3               
001107r 3               xt_endcase:
001107r 3                               ; Postpone DROP to remove the item
001107r 3                               ; being checked.
001107r 3  A0 rr                        ldy #>xt_drop
001109r 3  A9 rr                        lda #<xt_drop
00110Br 3  20 rr rr                     jsr cmpl_subroutine
00110Er 3               
00110Er 3                               ; There are a number of address (of branches that need their
00110Er 3                               ; jump addressed filled in with the address of right here).
00110Er 3                               ; Keep calling THEN to deal with them until we reach the
00110Er 3                               ; 0 that CASE put on the stack at the beginning.
00110Er 3               @endcase_loop:
00110Er 3                               ; Check for 0 on the stack.
00110Er 3  B5 00                        lda 0,x
001110r 3  15 01                        ora 1,x
001112r 3  F0 05                        beq @done
001114r 3               
001114r 3  20 rr rr                     jsr xt_then
001117r 3  80 F5                        bra @endcase_loop
001119r 3               @done:
001119r 3                               ; Remove the 0 from the stack.
001119r 3  E8                           inx
00111Ar 3  E8                           inx
00111Br 3  60           z_endcase:      rts
00111Cr 3               
00111Cr 3               
00111Cr 3               
00111Cr 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
00111Cr 3               ; ## "endof"  auto  ANS core ext
00111Cr 3                       ; """http://forth-standard.org/standard/core/ENDOF
00111Cr 3                       ; This is a dummy entry, the code is shared with ELSE
00111Cr 3                       ; """
00111Cr 3               
00111Cr 3               
00111Cr 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
00111Cr 3               ; ## "environment?"  auto  ANS core
00111Cr 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
00111Cr 3                       ;
00111Cr 3                       ; By ANS definition, we use upper-case strings here, see the
00111Cr 3                       ; string file for details. This can be realized as a high-level
00111Cr 3                       ; Forth word as
00111Cr 3                       ;
00111Cr 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
00111Cr 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
00111Cr 3                       ; HEX
00111Cr 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
00111Cr 3                       ; CASE
00111Cr 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
00111Cr 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
00111Cr 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
00111Cr 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
00111Cr 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
00111Cr 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
00111Cr 3                       ; S" MAX-D"              STRING_OF
00111Cr 3                                                    ; 7FFFFFFF. TRUE ENDOF
00111Cr 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
00111Cr 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
00111Cr 3                       ; S" MAX-UD"             STRING_OF
00111Cr 3                                                    ; FFFFFFFF. TRUE ENDOF
00111Cr 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
00111Cr 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
00111Cr 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
00111Cr 3                       ; ENDCASE ;
00111Cr 3                       ;
00111Cr 3                       ; but that uses lots of memory and increases the start up time. This
00111Cr 3                       ; word is rarely used so we can try to keep it short at the expense
00111Cr 3                       ; of speed.
00111Cr 3                       ; """
00111Cr 3               
00111Cr 3               xt_environment_q:
00111Cr 3  20 rr rr                     jsr underflow_1
00111Fr 3               
00111Fr 3                               ; This code is table-driven: We walk through the list of
00111Fr 3                               ; strings until we find one that matches, and then we take
00111Fr 3                               ; the equivalent data from the results table. This is made
00111Fr 3                               ; a bit harder by the fact that some of these return a
00111Fr 3                               ; double-cell number and some a single-cell one.
00111Fr 3               
00111Fr 3                               ; We will walk through the table with variables that return
00111Fr 3                               ; a single-cell result
00111Fr 3  A0 00                        ldy #00                 ; counter for table
001121r 3               
001121r 3                               ; We use a flag on the the stack to signal if we have a single-cell
001121r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
001121r 3                               ; double-cell.
001121r 3  5A                           phy
001122r 3               @table_loop:
001122r 3                               ; We arrived here with the address of the string to be checked
001122r 3                               ; on the stack. We make a copy. Index is in Y
001122r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
001125r 3               
001125r 3                               ; We do our work on the TOS to speed things up
001125r 3  CA                           dex
001126r 3  CA                           dex                     ; ( addr u addr u ? )
001127r 3               
001127r 3                               ; Get address of string to check from table
001127r 3  B9 rr rr                     lda env_table_single,y
00112Ar 3  95 00                        sta 0,x
00112Cr 3  C8                           iny
00112Dr 3  B9 rr rr                     lda env_table_single,y
001130r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
001132r 3  C8                           iny
001133r 3               
001133r 3                               ; See if this is the last entry. The LSB is still in A
001133r 3  15 00                        ora 0,x
001135r 3  F0 4D                        beq @table_done
001137r 3               
001137r 3                               ; We have a string entry. The address there is stored in
001137r 3                               ; old-style address format, that is, the first byte is the
001137r 3                               ; length of the string
001137r 3  5A                           phy                     ; save Y, which is used by COUNT
001138r 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
00113Br 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
00113Er 3  7A                           ply
00113Fr 3               
00113Fr 3                               ; If we found a match (flag is zero -- COMPARE is weird
00113Fr 3                               ; that way), return the result
00113Fr 3  B5 00                        lda 0,x
001141r 3  15 01                        ora 1,x
001143r 3  F0 04                        beq @got_result
001145r 3               
001145r 3                               ; Flag is not zero, so not a perfect match, so try next
001145r 3                               ; word
001145r 3  E8                           inx                     ; DROP, now ( addr u )
001146r 3  E8                           inx
001147r 3               
001147r 3  80 D9                        bra @table_loop
001149r 3               
001149r 3               @got_result:
001149r 3                               ; We arrive here with ( addr u -1 ) and know that we've found
001149r 3                               ; a match. The index of the match+2 is in Y.
001149r 3  E8                           inx                     ; drop flag, now ( addr u )
00114Ar 3  E8                           inx
00114Br 3  88                           dey                     ; go back to index we had
00114Cr 3  88                           dey
00114Dr 3               
00114Dr 3                               ; See if this is a single-cell word.
00114Dr 3  68                           pla
00114Er 3  D0 0D                        bne @double_result
001150r 3               
001150r 3                               ; Single-cell result
001150r 3  B9 rr rr                     lda env_results_single,y
001153r 3  95 02                        sta 2,x
001155r 3  C8                           iny
001156r 3  B9 rr rr                     lda env_results_single,y
001159r 3  95 03                        sta 3,x                 ; ( res u )
00115Br 3               
00115Br 3  80 1F                        bra @set_flag
00115Dr 3               
00115Dr 3               @double_result:
00115Dr 3                               ; This is a double-celled result, which means we have to
00115Dr 3                               ; fool around with the index some more. We also need a
00115Dr 3                               ; further cell on the stack
00115Dr 3  CA                           dex                     ; ( addr u ? )
00115Er 3  CA                           dex
00115Fr 3               
00115Fr 3                               ; We have 11 single-cell words we check, plus the 0000 as
00115Fr 3                               ; a marker for the end of the table, so we arrive here
00115Fr 3                               ; with Y as 22 or more. To get the index for the double-
00115Fr 3                               ; cell words, we move the result
00115Fr 3  98                           tya
001160r 3  38                           sec
001161r 3  E9 18                        sbc #24
001163r 3               
001163r 3                               ; We have four bytes per entry in the table, but the index
001163r 3                               ; keeps increasing by two, so we only have to multiply by
001163r 3                               ; two (shift left once) to get the right result
001163r 3  0A                           asl
001164r 3  A8                           tay
001165r 3               
001165r 3  B9 rr rr                     lda env_results_double,y
001168r 3  95 02                        sta 2,x
00116Ar 3  C8                           iny
00116Br 3  B9 rr rr                     lda env_results_double,y
00116Er 3  95 03                        sta 3,x                 ; ( res u ? )
001170r 3  C8                           iny
001171r 3               
001171r 3  B9 rr rr                     lda env_results_double,y
001174r 3  95 04                        sta 4,x
001176r 3  C8                           iny
001177r 3  B9 rr rr                     lda env_results_double,y
00117Ar 3  95 05                        sta 5,x                 ; ( res res ? )
00117Cr 3               
00117Cr 3                               ; fall through to @set_flag
00117Cr 3               @set_flag:
00117Cr 3  A9 FF                        lda #$ff
00117Er 3  95 00                        sta 0,x
001180r 3  95 01                        sta 1,x                 ; ( res f )
001182r 3               
001182r 3  80 14                        bra @done
001184r 3               @table_done:
001184r 3                               ; We're done with a table, because the entry was a zero.
001184r 3                               ; We arrive here with ( addr u addr u 0 )
001184r 3               
001184r 3                               ; We take the flag from stack and increase it by one. If the
001184r 3                               ; flag is zero, we have just completed the single-cell number
001184r 3                               ; strings, so we in increase the flag and try again. Otherwise,
001184r 3                               ; we're done with the double-cell table without having found
001184r 3                               ; a match, and we're done
001184r 3  68                           pla
001185r 3  D0 09                        bne @no_match
001187r 3               
001187r 3                               ; Flag is zero, increase it to one and start over to check
001187r 3                               ; double-cell values
001187r 3  1A                           inc
001188r 3  48                           pha
001189r 3               
001189r 3  8A                           txa
00118Ar 3  18                           clc
00118Br 3  69 06                        adc #6                  ; skip six bytes
00118Dr 3  AA                           tax                     ; ( addr u )
00118Er 3               
00118Er 3  80 92                        bra @table_loop
001190r 3               @no_match:
001190r 3                               ; Bummer, not found. We arrive here with
001190r 3                               ; ( addr u addr u 0 ) and need to return just a zero
001190r 3  8A                           txa
001191r 3  18                           clc
001192r 3  69 0A                        adc #10
001194r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
001195r 3               
001195r 3  20 rr rr                     jsr xt_false
001198r 3               @done:
001198r 3               z_environment_q:
001198r 3  60                           rts
001199r 3               
001199r 3               
001199r 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
001199r 3               ; results and one for the double-celled results. The zero cell at the
001199r 3               ; end of each table marks its, uh, end. The strings themselves are defined
001199r 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
001199r 3               ; have to adapt the result code for double printout, where we subtract 22
001199r 3               ; (two bytes each single-cell string and two bytes for the end-of-table
001199r 3               ; marker 0000
001199r 3               env_table_single:
001199r 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
00119Dr 3  rr rr rr rr  
0011A1r 3  rr rr        
0011A3r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
0011A7r 3  rr rr rr rr  
0011ABr 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
0011AFr 3  00 00        
0011B1r 3               
0011B1r 3               env_table_double:
0011B1r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
0011B5r 3  00 00        
0011B7r 3               
0011B7r 3               env_results_single:
0011B7r 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
0011B9r 3  FF 00                .word $00FF     ; /HOLD
0011BBr 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
0011BDr 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
0011BFr 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
0011C1r 3  FF 00                .word $00FF     ; MAX-CHAR
0011C3r 3  FF 7F                .word $7FFF     ; MAX-N
0011C5r 3  FF FF                .word $FFFF     ; MAX-U
0011C7r 3  80 00                .word $0080     ; RETURN-STACK-CELLS
0011C9r 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
0011CBr 3  09 00                .word $0009     ; WORDLISTS
0011CDr 3               
0011CDr 3               env_results_double:
0011CDr 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
0011D1r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
0011D5r 3               
0011D5r 3               
0011D5r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
0011D5r 3               ; ## "="  auto  ANS core
0011D5r 3                       ; """https://forth-standard.org/standard/core/Equal"""
0011D5r 3               
0011D5r 3               xt_equal:
0011D5r 3  20 rr rr                     jsr underflow_2
0011D8r 3               
0011D8r 3  B5 00                        lda 0,x                 ; LSB
0011DAr 3  D5 02                        cmp 2,x
0011DCr 3  D0 0A                        bne @false
0011DEr 3               
0011DEr 3  B5 01                        lda 1,x                 ; MSB
0011E0r 3  D5 03                        cmp 3,x
0011E2r 3  D0 04                        bne @false
0011E4r 3               
0011E4r 3  A9 FF                        lda #$ff
0011E6r 3  80 02                        bra @done
0011E8r 3               
0011E8r 3  A9 00        @false:         lda #0                  ; drop thru to done
0011EAr 3               
0011EAr 3  95 02        @done:          sta 2,x
0011ECr 3  95 03                        sta 3,x
0011EEr 3               
0011EEr 3  E8                           inx
0011EFr 3  E8                           inx
0011F0r 3               
0011F0r 3  60           z_equal:        rts
0011F1r 3               
0011F1r 3               
0011F1r 3               
0011F1r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
0011F1r 3               ; ## "blank"  auto  ANS string
0011F1r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
0011F1r 3               xt_blank:
0011F1r 3                               ; We don't check for underflow here because
0011F1r 3                               ; we deal with that in FILL
0011F1r 3  CA                           dex
0011F2r 3  CA                           dex
0011F3r 3  A9 20                        lda #AscSP
0011F5r 3  95 00                        sta 0,x
0011F7r 3  74 01                        stz 1,x
0011F9r 3               
0011F9r 3  80 06                        bra xt_fill     ; skip over code for ERASE
0011FBr 3               
0011FBr 3               
0011FBr 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
0011FBr 3               ; ## "erase"  auto  ANS core ext
0011FBr 3                       ; """https://forth-standard.org/standard/core/ERASE
0011FBr 3                       ; Note that ERASE works with "address" units
0011FBr 3                       ; (bytes), not cells.
0011FBr 3                       ; """
0011FBr 3               
0011FBr 3               xt_erase:
0011FBr 3                               ; We don't check for underflow here because
0011FBr 3                               ; we deal with that in FILL
0011FBr 3  CA                           dex
0011FCr 3  CA                           dex
0011FDr 3  74 00                        stz 0,x
0011FFr 3  74 01                        stz 1,x
001201r 3               
001201r 3                               ; fall through to FILL
001201r 3               
001201r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
001201r 3               ; ## "fill"  auto  ANS core
001201r 3                       ; """https://forth-standard.org/standard/core/FILL
001201r 3                       ; Fill u bytes of memory with char starting at addr. Note that
001201r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
001201r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
001201r 3                       ; happens when we reach the end of the address space
001201r 3                       ; """
001201r 3               xt_fill:
001201r 3  20 rr rr                     jsr underflow_3
001204r 3               
001204r 3                               ; We use tmp1 to hold the address
001204r 3  B5 04                        lda 4,x         ; LSB
001206r 3  85 rr                        sta tmp1
001208r 3  B5 05                        lda 5,x
00120Ar 3  85 rr                        sta tmp1+1
00120Cr 3               
00120Cr 3                               ; We use tmp2 to hold the counter
00120Cr 3  B5 02                        lda 2,x
00120Er 3  85 rr                        sta tmp2
001210r 3  B5 03                        lda 3,x
001212r 3  85 rr                        sta tmp2+1
001214r 3               
001214r 3                               ; We use Y to hold the character
001214r 3  B5 00                        lda 0,x
001216r 3  A8                           tay
001217r 3               @loop:
001217r 3                               ; Unfortunately, we also need to make sure that we don't
001217r 3                               ; write further than the end of the RAM. So RAM_END must
001217r 3                               ; be larger or equal to the current address
001217r 3  A9 80                        lda #>ram_end           ; MSB
001219r 3  C5 rr                        cmp tmp1+1
00121Br 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
00121Dr 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
00121Fr 3               
00121Fr 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
001221r 3  C5 rr                        cmp tmp1
001223r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
001225r 3               
001225r 3               @check_counter:
001225r 3                               ; See if our counter has reached zero
001225r 3  A5 rr                        lda tmp2
001227r 3  05 rr                        ora tmp2+1
001229r 3  F0 13                        beq @done
00122Br 3               
00122Br 3                               ; We're not in ROM and we still have stuff on the counter, so
00122Br 3                               ; let's actually do what we came here to do
00122Br 3  98                           tya
00122Cr 3  92 rr                        sta (tmp1)
00122Er 3               
00122Er 3                               ; Adjust the counter
00122Er 3  A5 rr                        lda tmp2
001230r 3  D0 02                        bne @1
001232r 3  C6 rr                        dec tmp2+1
001234r 3  C6 rr        @1:               dec tmp2
001236r 3               
001236r 3                               ; Next address
001236r 3  E6 rr                        inc tmp1
001238r 3  D0 DD                        bne @loop
00123Ar 3  E6 rr                        inc tmp1+1
00123Cr 3               
00123Cr 3  80 D9                        bra @loop
00123Er 3               
00123Er 3               @done:
00123Er 3                               ; Drop three cells off the Data Stack. This uses one byte
00123Er 3                               ; less than six times INX
00123Er 3  8A                           txa
00123Fr 3  18                           clc
001240r 3  69 06                        adc #6
001242r 3  AA                           tax
001243r 3               z_blank:
001243r 3               z_erase:
001243r 3  60           z_fill:         rts
001244r 3               
001244r 3               
001244r 3               
001244r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
001244r 3               ; ## "execute"  auto  ANS core
001244r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
001244r 3               xt_execute:
001244r 3  20 rr rr                     jsr underflow_1
001247r 3               
001247r 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
00124Ar 3               
00124Ar 3  60           z_execute:      rts
00124Br 3               
00124Br 3               doexecute:
00124Br 3  B5 00                        lda 0,x
00124Dr 3  85 rr                        sta ip
00124Fr 3  B5 01                        lda 1,x
001251r 3  85 rr                        sta ip+1
001253r 3               
001253r 3  E8                           inx
001254r 3  E8                           inx
001255r 3               
001255r 3                               ; we don't need a RTS here because we highjack the RTS of
001255r 3                               ; the word we're calling to get back to xt_execute
001255r 3  6C rr rr                     jmp (ip)
001258r 3               
001258r 3               ; end of doexecute
001258r 3               
001258r 3               
001258r 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
001258r 3               ; ## "execute-parsing"  auto  Gforth
001258r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001258r 3                       ; Execute the parsing word defined by the execution token (xt) on the
001258r 3                       ; string as if it were passed on the command line. See the file
001258r 3                       ; tests/tali.fs for examples.
001258r 3                       ;
001258r 3                       ; Note that this word is coded completely
001258r 3                       ; different in its Gforth version, see the file execute-parsing.fs
001258r 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
001258r 3                       ; """
001258r 3               xt_execute_parsing:
001258r 3  20 rr rr                     jsr underflow_3
00125Br 3               
00125Br 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
00125Er 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
001261r 3               
001261r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
001263r 3  85 rr                        sta ciblen
001265r 3  B5 01                        lda 1,x
001267r 3  85 rr                        sta ciblen+1
001269r 3               
001269r 3  B5 02                        lda 2,x                 ; NOS is new cib
00126Br 3  85 rr                        sta cib
00126Dr 3  B5 03                        lda 3,x
00126Fr 3  85 rr                        sta cib+1
001271r 3               
001271r 3  64 rr                        stz toin                ; Set >IN to zero
001273r 3  64 rr                        stz toin+1
001275r 3               
001275r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
001278r 3  20 rr rr                     jsr xt_execute
00127Br 3               
00127Br 3  20 rr rr                     jsr xt_r_to_input
00127Er 3               
00127Er 3               z_execute_parsing:
00127Er 3  60                           rts
00127Fr 3               
00127Fr 3               
00127Fr 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
00127Fr 3               ; ## "exit"  auto  ANS core
00127Fr 3                       ; """https://forth-standard.org/standard/core/EXIT
00127Fr 3                       ; If we're in a loop, we need to UNLOOP first and get everything
00127Fr 3                       ; we we might have put on the Return Stack off as well. This should
00127Fr 3                       ; be natively compiled.
00127Fr 3                       ; """
00127Fr 3               
00127Fr 3               xt_exit:
00127Fr 3  60                           rts             ; keep before z_exit
001280r 3               z_exit:                         ; never reached
001280r 3               
001280r 3               
001280r 3               
001280r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
001280r 3               ; ## "false"  auto  ANS core ext
001280r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
001280r 3               xt_false:
001280r 3  CA                           dex
001281r 3  CA                           dex
001282r 3  74 00                        stz 0,x
001284r 3  74 01                        stz 1,x
001286r 3               
001286r 3  60           z_false:        rts
001287r 3               
001287r 3               
001287r 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
001287r 3               ; ## "@"  auto  ANS core
001287r 3                       ; """https://forth-standard.org/standard/core/Fetch"""
001287r 3               xt_fetch:
001287r 3  20 rr rr                     jsr underflow_1
00128Ar 3               
00128Ar 3  A1 00                        lda (0,x)               ; LSB
00128Cr 3  A8                           tay
00128Dr 3  F6 00                        inc 0,x
00128Fr 3  D0 02                        bne @1
001291r 3  F6 01                        inc 1,x
001293r 3               @1:
001293r 3  A1 00                        lda (0,x)               ; MSB
001295r 3  95 01                        sta 1,x
001297r 3  94 00                        sty 0,x
001299r 3               
001299r 3  60           z_fetch:        rts
00129Ar 3               
00129Ar 3               
00129Ar 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
00129Ar 3               ; ## "find"  auto  ANS core
00129Ar 3                       ; """https://forth-standard.org/standard/core/FIND
00129Ar 3                       ; Included for backwards compatibility only, because it still
00129Ar 3                       ; can be found in so may examples. It should, however, be replaced
00129Ar 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
00129Ar 3                       ; flag if not found in the Dictionary, or the xt with a flag to
00129Ar 3                       ; indicate if this is immediate or not. FIND is a wrapper around
00129Ar 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
00129Ar 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
00129Ar 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00129Ar 3                       ; """
00129Ar 3               
00129Ar 3               xt_find:
00129Ar 3  20 rr rr                     jsr underflow_1
00129Dr 3               
00129Dr 3                               ; Save address in case conversion fails. We use the
00129Dr 3                               ; Return Stack instead of temporary variables like TMP1
00129Dr 3                               ; because this is shorter and anybody still using FIND
00129Dr 3                               ; can't be worried about speed anyway
00129Dr 3  B5 01                        lda 1,x                 ; MSB
00129Fr 3  48                           pha
0012A0r 3  B5 00                        lda 0,x                 ; LSB
0012A2r 3  48                           pha
0012A3r 3               
0012A3r 3                               ; Convert ancient-type counted string address to
0012A3r 3                               ; modern format
0012A3r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
0012A6r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
0012A9r 3               
0012A9r 3  B5 00                        lda 0,x
0012ABr 3  15 01                        ora 1,x
0012ADr 3  D0 0B                        bne @found_word
0012AFr 3               
0012AFr 3                               ; No word found. Return address of the string and a false
0012AFr 3                               ; flag
0012AFr 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
0012B2r 3               
0012B2r 3                               ; The address needs to be restored.
0012B2r 3  68                           pla                     ; LSB of address
0012B3r 3  95 02                        sta 2,x
0012B5r 3  68                           pla
0012B6r 3  95 03                        sta 3,x                 ; MSB of address
0012B8r 3               
0012B8r 3  80 27                        bra @done               ; ( addr 0 )
0012BAr 3               
0012BAr 3               @found_word:
0012BAr 3                               ; We don't need the address after all, dump it
0012BAr 3  68                           pla
0012BBr 3  68                           pla
0012BCr 3               
0012BCr 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
0012BCr 3                               ; convert the return values to FIND's format
0012BCr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0012BFr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
0012C2r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
0012C5r 3               
0012C5r 3  A0 00                        ldy #0                  ; Prepare flag
0012C7r 3               
0012C7r 3                               ; The flags are in the second byte of the header
0012C7r 3  F6 00                        inc 0,x
0012C9r 3  D0 02                        bne @1
0012CBr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
0012CDr 3               @1:
0012CDr 3  A1 00                        lda (0,x)               ; ( xt char )
0012CFr 3  29 04                        and #IM
0012D1r 3  D0 08                        bne @immediate          ; bit set, we're immediate
0012D3r 3               
0012D3r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0012D5r 3  95 00                        sta 0,x
0012D7r 3  95 01                        sta 1,x
0012D9r 3  80 06                        bra @done
0012DBr 3               
0012DBr 3               @immediate:
0012DBr 3  A9 01                        lda #1                  ; We're immediate, return 1
0012DDr 3  95 00                        sta 0,x
0012DFr 3  74 01                        stz 1,x
0012E1r 3               @done:
0012E1r 3  60           z_find:         rts
0012E2r 3               
0012E2r 3               
0012E2r 3               
0012E2r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
0012E2r 3               ; ## "find-name"  auto  Gforth
0012E2r 3               
0012E2r 3               xt_find_name:
0012E2r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0012E2r 3                       ; Given a string, find the Name Token (nt) of a word or return
0012E2r 3                       ; zero if the word is not in the dictionary. We use this instead of
0012E2r 3                       ; ancient FIND to look up words in the Dictionary passed by
0012E2r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
0012E2r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
0012E2r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0012E2r 3                       ; FIND calls this word
0012E2r 3                       ; """
0012E2r 3  20 rr rr                     jsr underflow_2
0012E5r 3               
0012E5r 3                               ; check for special case of an empty string (length zero)
0012E5r 3  B5 00                        lda 0,x
0012E7r 3  15 01                        ora 1,x
0012E9r 3  D0 03                        bne @nonempty
0012EBr 3               
0012EBr 3  4C rr rr                     jmp @fail_done
0012EEr 3               
0012EEr 3               @nonempty:
0012EEr 3                               ; Set up for traversing the wordlist search order.
0012EEr 3  64 rr                        stz tmp3                ; Start at the beginning
0012F0r 3               
0012F0r 3               @wordlist_loop:
0012F0r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
0012F2r 3  A5 rr                        lda tmp3
0012F4r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
0012F6r 3  D0 03                        bne @have_string
0012F8r 3               
0012F8r 3                               ; We ran out of wordlists to search.
0012F8r 3  4C rr rr                     jmp @fail_done
0012FBr 3               
0012FBr 3               @have_string:
0012FBr 3                               ; set up first loop iteration
0012FBr 3               
0012FBr 3                               ; Get the current wordlist id
0012FBr 3  18                           clc             ; SEARCH-ORDER is array of bytes.
0012FCr 3  69 1F                        adc #search_order_offset
0012FEr 3  A8                           tay
0012FFr 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
001301r 3                                               ; into the cell array WORDLISTS
001301r 3               
001301r 3                               ; Get the DP for that wordlist.
001301r 3  0A                           asl                     ; Turn offset into cells offset.
001302r 3  18                           clc
001303r 3  69 06                        adc #wordlists_offset
001305r 3  A8                           tay
001306r 3  B1 rr                        lda (up),y
001308r 3  85 rr                        sta tmp1
00130Ar 3  C8                           iny
00130Br 3  B1 rr                        lda (up),y
00130Dr 3  85 rr                        sta tmp1+1
00130Fr 3               
00130Fr 3  B5 02                        lda 2,x                 ; Address of mystery string
001311r 3  85 rr                        sta tmp2
001313r 3  B5 03                        lda 3,x
001315r 3  85 rr                        sta tmp2+1
001317r 3               
001317r 3               @loop:
001317r 3                               ; first quick test: Are strings the same length?
001317r 3  B2 rr                        lda (tmp1)
001319r 3  D5 00                        cmp 0,x
00131Br 3  D0 54                        bne @next_entry
00131Dr 3               
00131Dr 3               @compare_string:
00131Dr 3                               ; are the same length, so we now have to compare each
00131Dr 3                               ; character
00131Dr 3               
00131Dr 3                               ; second quick test: Is the first character the same?
00131Dr 3  B2 rr                        lda (tmp2)      ; first character of mystery string
00131Fr 3               
00131Fr 3                               ; Lowercase the incoming charcter.
00131Fr 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001321r 3  B0 07                        bcs @compare_first
001323r 3  C9 41                        cmp #$41        ; ASCII 'A'
001325r 3  90 03                        bcc @compare_first
001327r 3               
001327r 3                               ; An uppercase letter has been located.  Make it
001327r 3                               ; lowercase.
001327r 3  18                           clc
001328r 3  69 20                        adc #$20
00132Ar 3               
00132Ar 3               @compare_first:
00132Ar 3  A0 08                        ldy #8          ; Offset in nt to name
00132Cr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
00132Er 3  D0 41                        bne @next_entry
001330r 3               
001330r 3                               ; String length is the same and the first character is the
001330r 3                               ; same. If the length of the string is 1, we're already done
001330r 3  B5 00                        lda 0,x
001332r 3  3A                           dec
001333r 3  F0 2C                        beq @success
001335r 3               
001335r 3                               ; No such luck: The strings are the same length and the first
001335r 3                               ; char is the same, but the word is more than one char long.
001335r 3                               ; So we suck it up and compare every single character. We go
001335r 3                               ; from back to front, because words like CELLS and CELL+ would
001335r 3                               ; take longer otherwise. We can also shorten the loop by one
001335r 3                               ; because we've already compared the first char.
001335r 3               
001335r 3                               ; The string of the word we're testing against is 8 bytes down
001335r 3  A5 rr                        lda tmp1
001337r 3  48                           pha             ; Preserve tmp1 on the return stack.
001338r 3  18                           clc
001339r 3  69 08                        adc #8
00133Br 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
00133Dr 3  A5 rr                        lda tmp1+1
00133Fr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001340r 3  69 00                        adc #0          ; we only need the carry
001342r 3  85 rr                        sta tmp1+1
001344r 3               
001344r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001346r 3  88                           dey
001347r 3               
001347r 3               @string_loop:
001347r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001349r 3               
001349r 3                               ; Lowercase the incoming charcter.
001349r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
00134Br 3  B0 07                        bcs @check_char
00134Dr 3  C9 41                        cmp #$41        ; ASCII 'A'
00134Fr 3  90 03                        bcc @check_char
001351r 3               
001351r 3                               ; An uppercase letter has been located.  Make it
001351r 3                               ; lowercase.
001351r 3  18                           clc
001352r 3  69 20                        adc #$20
001354r 3               
001354r 3               @check_char:
001354r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001356r 3  D0 13                        bne @next_entry_tmp1
001358r 3               
001358r 3  88                           dey
001359r 3  D0 EC                        bne @string_loop
00135Br 3               
00135Br 3               @success_tmp1:
00135Br 3  68                           pla             ; Restore tmp1 from the return stack.
00135Cr 3  85 rr                        sta tmp1+1
00135Er 3  68                           pla
00135Fr 3  85 rr                        sta tmp1
001361r 3               
001361r 3               @success:
001361r 3                               ; The strings match. Put correct nt NOS, because we'll drop
001361r 3                               ; TOS before we leave
001361r 3  A5 rr                        lda tmp1
001363r 3  95 02                        sta 2,x
001365r 3  A5 rr                        lda tmp1+1
001367r 3  95 03                        sta 3,x
001369r 3               
001369r 3  80 20                        bra @done
00136Br 3               
00136Br 3               @next_entry_tmp1:
00136Br 3  68                           pla             ; Restore tmp1 from the return stack.
00136Cr 3  85 rr                        sta tmp1+1
00136Er 3  68                           pla
00136Fr 3  85 rr                        sta tmp1
001371r 3               
001371r 3               @next_entry:
001371r 3                               ; Not the same, so we get the next word. Next header
001371r 3                               ; address is two bytes down
001371r 3  A0 02                        ldy #2
001373r 3  B1 rr                        lda (tmp1),y
001375r 3  48                           pha
001376r 3  C8                           iny
001377r 3  B1 rr                        lda (tmp1),y
001379r 3  85 rr                        sta tmp1+1
00137Br 3  68                           pla
00137Cr 3  85 rr                        sta tmp1
00137Er 3               
00137Er 3                               ; If we got a zero, we've walked the whole Dictionary and
00137Er 3                               ; return as a failure, otherwise try again
00137Er 3  05 rr                        ora tmp1+1
001380r 3  D0 95                        bne @loop
001382r 3               
001382r 3                               ; Move on to the next wordlist in the search order.
001382r 3  E6 rr                        inc tmp3
001384r 3  4C rr rr                     jmp @wordlist_loop
001387r 3               
001387r 3               @fail_done:
001387r 3  74 02                        stz 2,x         ; failure flag
001389r 3  74 03                        stz 3,x
00138Br 3               @done:
00138Br 3  E8                           inx
00138Cr 3  E8                           inx
00138Dr 3               
00138Dr 3  60           z_find_name:    rts
00138Er 3               
00138Er 3               
00138Er 3               
00138Er 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
00138Er 3               ; ## "flush"  auto  ANS block
00138Er 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
00138Er 3               xt_flush:
00138Er 3  20 rr rr                     jsr xt_save_buffers
001391r 3               
001391r 3                               ; Set the buffer status to empty.
001391r 3  A0 2C                        ldy #buffstatus_offset
001393r 3  A9 00                        lda #0
001395r 3  91 rr                        sta (up),y      ; Only LSB is used.
001397r 3               z_flush:
001397r 3  60                           rts
001398r 3               
001398r 3               
001398r 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
001398r 3               ; ## "fm/mod"  auto  ANS core
001398r 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
001398r 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
001398r 3                       ;
001398r 3                       ; There are various ways to realize this. We follow EForth with
001398r 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
001398r 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
001398r 3                       ; See (http://www.forth.org/eforth.html). However you can also
001398r 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
001398r 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
001398r 3                       ; """
001398r 3               
001398r 3               xt_fm_slash_mod:
001398r 3  20 rr rr                     jsr underflow_3
00139Br 3               
00139Br 3                               ; if sign of n1 is negative, negate both n1 and d
00139Br 3  64 rr                        stz tmp2        ; default: n is positive
00139Dr 3  B5 01                        lda 1,x         ; MSB of n1
00139Fr 3  10 0E                        bpl @check_d
0013A1r 3               
0013A1r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
0013A3r 3  20 rr rr                     jsr xt_negate   ; NEGATE
0013A6r 3  20 rr rr                     jsr xt_to_r     ; >R
0013A9r 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
0013ACr 3  20 rr rr                     jsr xt_r_from   ; R>
0013AFr 3               
0013AFr 3               @check_d:
0013AFr 3                               ; If d is negative, add n1 to high cell of d
0013AFr 3  B5 03                        lda 3,x         ; MSB of high word of d
0013B1r 3  10 0D                        bpl @multiply
0013B3r 3               
0013B3r 3  18                           clc
0013B4r 3  B5 00                        lda 0,x         ; LSB of n1
0013B6r 3  75 02                        adc 2,x         ; LSB of dh
0013B8r 3  95 02                        sta 2,x
0013BAr 3               
0013BAr 3  B5 01                        lda 1,x         ; MSB of n1
0013BCr 3  75 03                        adc 3,x         ; MSB of dh
0013BEr 3  95 03                        sta 3,x
0013C0r 3               
0013C0r 3               @multiply:
0013C0r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
0013C3r 3               
0013C3r 3                               ; if n was negative, negate the result
0013C3r 3  A5 rr                        lda tmp2
0013C5r 3  F0 07                        beq @done
0013C7r 3               
0013C7r 3  E8                           inx             ; pretend that we SWAP
0013C8r 3  E8                           inx
0013C9r 3  20 rr rr                     jsr xt_negate
0013CCr 3  CA                           dex
0013CDr 3  CA                           dex
0013CEr 3               @done:
0013CEr 3  60           z_fm_slash_mod: rts
0013CFr 3               
0013CFr 3               
0013CFr 3               
0013CFr 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
0013CFr 3               ; ## "forth"  auto  ANS search ext
0013CFr 3                       ; """https://forth-standard.org/standard/search/FORTH"""
0013CFr 3               xt_forth:
0013CFr 3  A0 1F                        ldy #search_order_offset
0013D1r 3  A9 00                        lda #0          ; The WID for Forth is 0.
0013D3r 3               
0013D3r 3  91 rr                        sta (up),y
0013D5r 3               z_forth:
0013D5r 3  60                           rts
0013D6r 3               
0013D6r 3               
0013D6r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
0013D6r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
0013D6r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
0013D6r 3               load_evaluate:
0013D6r 3                               ; Set a flag (using tmp1) to not zero BLK
0013D6r 3  A9 FF                        lda #$FF
0013D8r 3  85 rr                        sta tmp1
0013DAr 3  80 11                        bra load_evaluate_start
0013DCr 3               
0013DCr 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
0013DCr 3               ; ## "evaluate"  auto  ANS core
0013DCr 3                       ; """https://forth-standard.org/standard/core/EVALUATE
0013DCr 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
0013DCr 3                       ; After processing the line, revert to old input source. We use this
0013DCr 3                       ; to compile high-level Forth words and user-defined words during
0013DCr 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
0013DCr 3                       ; accept more than 255 characters here, even though it's a pain in
0013DCr 3                       ; the 8-bit.
0013DCr 3                       ; """
0013DCr 3               
0013DCr 3               xt_evaluate:
0013DCr 3  20 rr rr                     jsr underflow_2
0013DFr 3               
0013DFr 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
0013DFr 3                               ; and will set the block number.
0013DFr 3  64 rr                        stz tmp1
0013E1r 3               
0013E1r 3                               ; If u is zero (which can happen a lot for the user-defined
0013E1r 3                               ; words), just leave again
0013E1r 3  B5 00                        lda 0,x
0013E3r 3  15 01                        ora 1,x
0013E5r 3  D0 06                        bne _eval_got_work
0013E7r 3               
0013E7r 3  E8                           inx
0013E8r 3  E8                           inx
0013E9r 3  E8                           inx
0013EAr 3  E8                           inx
0013EBr 3               
0013EBr 3  80 42                        bra _eval_done
0013EDr 3               
0013EDr 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0013EDr 3               load_evaluate_start:
0013EDr 3               _eval_got_work:
0013EDr 3                               ; Save the current value of BLK on the return stack.
0013EDr 3  A0 01                        ldy #blk_offset+1
0013EFr 3  B1 rr                        lda (up),y
0013F1r 3  48                           pha
0013F2r 3  88                           dey
0013F3r 3  B1 rr                        lda (up),y
0013F5r 3  48                           pha
0013F6r 3               
0013F6r 3                               ; See if we should zero BLK.
0013F6r 3  A5 rr                        lda tmp1
0013F8r 3  D0 05                        bne @nozero
0013FAr 3               
0013FAr 3                               ; Set BLK to zero.
0013FAr 3                               ; lda #0        ; A is already zero from loading tmp1
0013FAr 3  91 rr                        sta (up),y
0013FCr 3  C8                           iny
0013FDr 3  91 rr                        sta (up),y
0013FFr 3               
0013FFr 3               @nozero:
0013FFr 3                               ; Save the input state to the Return Stack
0013FFr 3  20 rr rr                     jsr xt_input_to_r
001402r 3               
001402r 3                               ; set SOURCE-ID to -1
001402r 3  A9 FF                        lda #$ff
001404r 3  85 rr                        sta insrc
001406r 3  85 rr                        sta insrc+1
001408r 3               
001408r 3                               ; set >IN to zero
001408r 3  64 rr                        stz toin
00140Ar 3  64 rr                        stz toin+1
00140Cr 3               
00140Cr 3                               ; move TOS and NOS to input buffers
00140Cr 3  B5 00                        lda 0,x
00140Er 3  85 rr                        sta ciblen
001410r 3  B5 01                        lda 1,x
001412r 3  85 rr                        sta ciblen+1
001414r 3               
001414r 3  B5 02                        lda 2,x
001416r 3  85 rr                        sta cib
001418r 3  B5 03                        lda 3,x
00141Ar 3  85 rr                        sta cib+1
00141Cr 3               
00141Cr 3  E8                           inx             ; A clean stack is a clean mind
00141Dr 3  E8                           inx
00141Er 3  E8                           inx
00141Fr 3  E8                           inx
001420r 3               
001420r 3  20 rr rr                     jsr interpret   ; ( -- )
001423r 3               
001423r 3                               ; restore variables
001423r 3  20 rr rr                     jsr xt_r_to_input
001426r 3               
001426r 3                               ; Restore BLK from the return stack.
001426r 3  A0 00                        ldy #blk_offset
001428r 3  68                           pla
001429r 3  91 rr                        sta (up),y
00142Br 3  C8                           iny
00142Cr 3  68                           pla
00142Dr 3  91 rr                        sta (up),y
00142Fr 3               
00142Fr 3               _eval_done:
00142Fr 3  60           z_evaluate:     rts
001430r 3               
001430r 3               
001430r 3               
001430r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
001430r 3               ; ## "forth-wordlist"  auto  ANS search
001430r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
001430r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
001430r 3               
001430r 3               
001430r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
001430r 3               ; ## "get-current" auto ANS search
001430r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
001430r 3               
001430r 3               xt_get_current:
001430r 3                               ; This is a little different than some of the variables
001430r 3                               ; in the user area as we want the value rather than
001430r 3                               ; the address.
001430r 3  CA                           dex
001431r 3  CA                           dex
001432r 3  A0 04                        ldy #current_offset
001434r 3  B1 rr                        lda (up),y
001436r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
001438r 3  74 01                        stz 1,x         ; so the MSB is zero.
00143Ar 3               
00143Ar 3  60           z_get_current:  rts
00143Br 3               
00143Br 3               
00143Br 3               
00143Br 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
00143Br 3               ; ## "get-order" auto ANS search
00143Br 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
00143Br 3               
00143Br 3               xt_get_order:
00143Br 3                               ; Get #ORDER - the number of wordlists in the search order.
00143Br 3  A0 1E                        ldy #num_order_offset
00143Dr 3  B1 rr                        lda (up),y
00143Fr 3  85 rr                        sta tmp1
001441r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
001443r 3               
001443r 3               @loop:
001443r 3                               ; Count down towards the front of the list.
001443r 3                               ; By decrementing first, we also turn the length into an offset.
001443r 3  C6 rr                        dec tmp1        ; Count down by bytes.
001445r 3               
001445r 3                               ; Get a pointer to the current wordlist, working back to front.
001445r 3  A9 1F                        lda #search_order_offset
001447r 3  18                           clc
001448r 3  65 rr                        adc tmp1
00144Ar 3  A8                           tay
00144Br 3               
00144Br 3                               ; Put that wordlist id on the stack.
00144Br 3  CA                           dex
00144Cr 3  CA                           dex
00144Dr 3  B1 rr                        lda (up),y
00144Fr 3  95 00                        sta 0,x         ; Search order array is bytes, so
001451r 3  74 01                        stz 1,x         ; put a zero in the high byte.
001453r 3               
001453r 3                               ; See if that was the last one to process (first in the list).
001453r 3  A9 00                        lda #0
001455r 3  C5 rr                        cmp tmp1
001457r 3  D0 EA                        bne @loop
001459r 3               
001459r 3               @done:
001459r 3                               ; Put the number of items on the stack.
001459r 3  CA                           dex
00145Ar 3  CA                           dex
00145Br 3  A0 1E                        ldy #num_order_offset
00145Dr 3  B1 rr                        lda (up),y
00145Fr 3  95 00                        sta 0,x
001461r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
001463r 3               
001463r 3  60           z_get_order:    rts
001464r 3               
001464r 3               
001464r 3               
001464r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
001464r 3               ; ## ">"  auto  ANS core
001464r 3                       ; """https://forth-standard.org/standard/core/more"""
001464r 3               
001464r 3               xt_greater_than:
001464r 3  20 rr rr                     jsr underflow_2
001467r 3               
001467r 3  A0 00                        ldy #0          ; default false
001469r 3  20 rr rr                     jsr compare_16bit
00146Cr 3               
00146Cr 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
00146Cr 3  F0 03                        beq @false
00146Er 3  10 01                        bpl @false
001470r 3               
001470r 3                               ; true
001470r 3  88                           dey
001471r 3               @false:
001471r 3  98                           tya
001472r 3               
001472r 3  E8                           inx
001473r 3  E8                           inx
001474r 3  95 00                        sta 0,x
001476r 3  95 01                        sta 1,x
001478r 3               
001478r 3  60           z_greater_than: rts
001479r 3               
001479r 3               
001479r 3               
001479r 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
001479r 3               ; ## "here"  auto  ANS core
001479r 3                       ; """https://forth-standard.org/standard/core/HERE
001479r 3                       ; This code is also used by the assembler directive ARROW
001479r 3                       ; ("->") though as immediate"""
001479r 3               xt_here:
001479r 3               xt_asm_arrow:
001479r 3  CA                           dex
00147Ar 3  CA                           dex
00147Br 3  A5 rr                        lda cp
00147Dr 3  95 00                        sta 0,x
00147Fr 3  A5 rr                        lda cp+1
001481r 3  95 01                        sta 1,x
001483r 3               
001483r 3               z_asm_arrow:
001483r 3  60           z_here:         rts
001484r 3               
001484r 3               
001484r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001484r 3               ; ## "hex"  auto  ANS core ext
001484r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001484r 3               xt_hex:
001484r 3  A9 10                        lda #16
001486r 3  85 rr                        sta base
001488r 3  64 rr                        stz base+1              ; paranoid
00148Ar 3               
00148Ar 3  60           z_hex:          rts
00148Br 3               
00148Br 3               
00148Br 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
00148Br 3               ; ## "hexstore"  auto  Tali
00148Br 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
00148Br 3                       ; by spaces, store the numbers at the address addr2, returning the
00148Br 3                       ; number of elements. Non-number elements are skipped, an zero-length
00148Br 3                       ; string produces a zero output.
00148Br 3                       ; """
00148Br 3               
00148Br 3               xt_hexstore:
00148Br 3  20 rr rr                     jsr underflow_3
00148Er 3               
00148Er 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
001491r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001494r 3               
001494r 3               @loop:
001494r 3                               ; Loop until string is totally consumed
001494r 3  B5 00                        lda 0,x
001496r 3  15 01                        ora 1,x
001498r 3  F0 36                        beq @done
00149Ar 3               
00149Ar 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
00149Dr 3               
00149Dr 3                               ; Prepare the conversion of the number.
00149Dr 3  20 rr rr                     jsr xt_two_to_r
0014A0r 3  20 rr rr                     jsr xt_zero
0014A3r 3  20 rr rr                     jsr xt_zero
0014A6r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
0014A9r 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
0014ACr 3               
0014ACr 3                               ; If u4 is not zero, we have leftover chars and have to do
0014ACr 3                               ; things differently
0014ACr 3  B5 00                        lda 0,x
0014AEr 3  15 01                        ora 1,x
0014B0r 3  D0 17                        bne @have_chars_left
0014B2r 3               
0014B2r 3                               ; Normal case, this number is all done
0014B2r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
0014B5r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
0014B8r 3               
0014B8r 3                               ; Store the new value
0014B8r 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
0014BBr 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
0014BEr 3               
0014BEr 3                               ; Increase counter
0014BEr 3  20 rr rr                     jsr xt_r_from           ; R>
0014C1r 3  20 rr rr                     jsr xt_one_plus         ; 1+
0014C4r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
0014C7r 3  80 CB                        bra @loop
0014C9r 3               
0014C9r 3               @have_chars_left:
0014C9r 3                               ; Pathological case: Drop the rest of this number off the stack
0014C9r 3                               ; and continue with the next word. Doesn't print a warning. We
0014C9r 3                               ; need to drop four cells, that is, eight bytes
0014C9r 3  8A                           txa
0014CAr 3  18                           clc
0014CBr 3  69 08                        adc #8
0014CDr 3  AA                           tax
0014CEr 3  80 C4                        bra @loop
0014D0r 3               
0014D0r 3               @done:
0014D0r 3                               ; Clean up return stack and calculate number of chars stored
0014D0r 3  E8                           inx
0014D1r 3  E8                           inx
0014D2r 3  E8                           inx
0014D3r 3  E8                           inx                     ; 2DROP
0014D4r 3               
0014D4r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
0014D7r 3  20 rr rr                     jsr xt_swap
0014DAr 3  20 rr rr                     jsr xt_minus            ; ( n )
0014DDr 3               
0014DDr 3  60           z_hexstore:     rts
0014DEr 3               
0014DEr 3               
0014DEr 3               
0014DEr 3               ; ## HOLD ( char -- ) "Insert character at current output"
0014DEr 3               ; ## "hold"  auto  ANS core
0014DEr 3                       ; """https://forth-standard.org/standard/core/HOLD
0014DEr 3                       ; Insert a character at the current position of a pictured numeric
0014DEr 3                       ; output string on
0014DEr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0014DEr 3                       ;
0014DEr 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
0014DEr 3                       ; variable tohold instead of HLD.
0014DEr 3                       ; """
0014DEr 3               xt_hold:
0014DEr 3  20 rr rr                     jsr underflow_1
0014E1r 3               
0014E1r 3  A5 rr                        lda tohold
0014E3r 3  D0 02                        bne @1
0014E5r 3  C6 rr                        dec tohold+1
0014E7r 3               @1:
0014E7r 3  C6 rr                        dec tohold
0014E9r 3               
0014E9r 3  B5 00                        lda 0,x
0014EBr 3  92 rr                        sta (tohold)
0014EDr 3  E8                           inx
0014EEr 3  E8                           inx
0014EFr 3               
0014EFr 3  60           z_hold:         rts
0014F0r 3               
0014F0r 3               
0014F0r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0014F0r 3               ; ## "i"  auto  ANS core
0014F0r 3                       ; """https://forth-standard.org/standard/core/I
0014F0r 3                       ; Note that this is not the same as R@ because we use a fudge
0014F0r 3                       ; factor for loop control; see the Control Flow section of the
0014F0r 3                       ; manual for details.
0014F0r 3                       ;
0014F0r 3                       ; We should make this native compile for speed.
0014F0r 3                       ; """
0014F0r 3               
0014F0r 3               xt_i:
0014F0r 3  CA                           dex
0014F1r 3  CA                           dex
0014F2r 3               
0014F2r 3                               ; Get the fudged index off of the top of the stack. It's
0014F2r 3                               ; easier to do math on the stack directly than to pop and
0014F2r 3                               ; push stuff around
0014F2r 3  86 rr                        stx tmpdsp
0014F4r 3  BA                           tsx
0014F5r 3               
0014F5r 3  38                           sec
0014F6r 3  BD 01 01                     lda $0101,x     ; LSB
0014F9r 3  FD 03 01                     sbc $0103,x
0014FCr 3  A8                           tay
0014FDr 3               
0014FDr 3  BD 02 01                     lda $0102,x     ; MSB
001500r 3  FD 04 01                     sbc $0104,x
001503r 3               
001503r 3  A6 rr                        ldx tmpdsp
001505r 3               
001505r 3  95 01                        sta 1,x         ; MSB of de-fudged index
001507r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001509r 3               
001509r 3  60           z_i:            rts
00150Ar 3               
00150Ar 3               
00150Ar 3               
00150Ar 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
00150Ar 3               ; ## "if"  auto  ANS core
00150Ar 3                       ; """http://forth-standard.org/standard/core/IF"""
00150Ar 3               
00150Ar 3               xt_if:
00150Ar 3                               ; Compile a 0BRANCH
00150Ar 3  A0 rr                        ldy #>zero_branch_runtime
00150Cr 3  A9 rr                        lda #<zero_branch_runtime
00150Er 3  20 rr rr                     jsr cmpl_subroutine
001511r 3               
001511r 3                               ; Put the origination address on the stack for else/then
001511r 3  20 rr rr                     jsr xt_here
001514r 3               
001514r 3                               ; Stuff zero in for the branch address right now.
001514r 3                               ; THEN or ELSE will fix it later.
001514r 3  20 rr rr                     jsr xt_zero
001517r 3  20 rr rr                     jsr xt_comma
00151Ar 3  60           z_if:           rts
00151Br 3               
00151Br 3               
00151Br 3               zero_branch_runtime:
00151Br 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
00151Br 3                       ; included 0BRANCH as a high-level word that inserted this code at
00151Br 3                       ; runtime.
00151Br 3                       ; """
00151Br 3               
00151Br 3                               ; We use the return value on the 65c02 stack to determine
00151Br 3                               ; where we want to return to.
00151Br 3  68                           pla
00151Cr 3  85 rr                        sta tmpbranch
00151Er 3  68                           pla
00151Fr 3  85 rr                        sta tmpbranch+1
001521r 3               
001521r 3                               ; See if the flag is zero, which is the whole purpose of
001521r 3                               ; this all
001521r 3  B5 00                        lda 0,x
001523r 3  15 01                        ora 1,x
001525r 3  F0 0F                        beq @zero
001527r 3               
001527r 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
001527r 3                               ; the part between IF and THEN
001527r 3  A5 rr                        lda tmpbranch   ; LSB
001529r 3  18                           clc
00152Ar 3  69 02                        adc #2
00152Cr 3  85 rr                        sta tmp1
00152Er 3  A5 rr                        lda tmpbranch+1 ; MSB
001530r 3  69 00                        adc #0          ; For carry
001532r 3  85 rr                        sta tmp1+1
001534r 3               
001534r 3  80 13                        bra @done
001536r 3               
001536r 3               @zero:
001536r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
001536r 3                               ; the next two bytes. However, the address points to the last
001536r 3                               ; byte of the JSR instruction, not to the next byte afterwards
001536r 3  A0 01                        ldy #1
001538r 3  B1 rr                        lda (tmpbranch),y
00153Ar 3  85 rr                        sta tmp1
00153Cr 3  C8                           iny
00153Dr 3  B1 rr                        lda (tmpbranch),y
00153Fr 3  85 rr                        sta tmp1+1
001541r 3               
001541r 3                               ; Now we have to subtract one byte from the address
001541r 3                               ; given because of the way the 6502 calculates RTS
001541r 3  A5 rr                        lda tmp1
001543r 3  D0 02                        bne @1
001545r 3  C6 rr                        dec tmp1+1
001547r 3               @1:
001547r 3  C6 rr                        dec tmp1
001549r 3               
001549r 3               @done:
001549r 3                               ; However we got here, tmp1 has the value we push to jump
001549r 3                               ; to
001549r 3  A5 rr                        lda tmp1+1
00154Br 3  48                           pha             ; MSB first
00154Cr 3  A5 rr                        lda tmp1
00154Er 3  48                           pha
00154Fr 3               
00154Fr 3                               ; clean up the stack and jump
00154Fr 3  E8                           inx
001550r 3  E8                           inx
001551r 3               
001551r 3  60                           rts
001552r 3               
001552r 3               
001552r 3               
001552r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001552r 3               ; ## "immediate"  auto  ANS core
001552r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001552r 3                       ; Make sure the most recently defined word is immediate. Will only
001552r 3                       ; affect the last word in the dictionary. Note that if the word is
001552r 3                       ; defined in ROM, this will have no affect, but will not produce an
001552r 3                       ; error message.
001552r 3                       ; """
001552r 3               xt_immediate:
001552r 3  20 rr rr                     jsr current_to_dp
001555r 3  A0 01                        ldy #1          ; offset for status byte
001557r 3  B1 rr                        lda (dp),y
001559r 3  09 04                        ora #IM        ; make sure bit 7 is set
00155Br 3  91 rr                        sta (dp),y
00155Dr 3               
00155Dr 3  60           z_immediate:    rts
00155Er 3               
00155Er 3               
00155Er 3               ; ## INPUT ( -- addr ) "Return address of input vector"
00155Er 3               ; ## "input" tested Tali Forth
00155Er 3               
00155Er 3               xt_input:
00155Er 3  CA                           dex
00155Fr 3  CA                           dex
001560r 3  A9 rr                        lda #<input
001562r 3  95 00                        sta 0,x
001564r 3  A9 rr                        lda #>input
001566r 3  95 01                        sta 1,x
001568r 3               
001568r 3  60           z_input:        rts
001569r 3               
001569r 3               
001569r 3               
001569r 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
001569r 3               ; ## "input>r"  tested  Tali Forth
001569r 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
001569r 3                       ; toin to the Return Stack. Used by EVALUTE.
001569r 3                       ;
001569r 3                       ; The naive way of doing
001569r 3                       ; this is to push each two-byte variable to the stack in the form of
001569r 3                       ;
001569r 3                       ;       lda insrc
001569r 3                       ;       pha
001569r 3                       ;       lda insrc+1
001569r 3                       ;       pha
001569r 3                       ;
001569r 3                       ; for a total of 24 byte of instruction in one direction and later
001569r 3                       ; a further 24 bytes to reverse the process. We shorten this at the
001569r 3                       ; cost of some speed by assuming the four variables are grouped
001569r 3                       ; together on the Zero Page and start with insrc (see definitions.asm
001569r 3                       ; for details). The reverse operation is r_to_input. These words must
001569r 3                       ; be flagged as Never Native. Uses tmp1
001569r 3                       ; """
001569r 3               
001569r 3               xt_input_to_r:
001569r 3                               ; We arrive here with the return address on the top of the
001569r 3                               ; 65c02's stack. We need to move it out of the way first
001569r 3  68                           pla
00156Ar 3  85 rr                        sta tmp1
00156Cr 3  68                           pla
00156Dr 3  85 rr                        sta tmp1+1
00156Fr 3               
00156Fr 3                               ; This assumes that insrc is the first of eight bytes and
00156Fr 3                               ; toin+1 the last in the sequence we want to save from the Zero
00156Fr 3                               ; Page.
00156Fr 3  A0 07                        ldy #7
001571r 3               @loop:
001571r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
001574r 3  48                           pha
001575r 3  88                           dey
001576r 3  10 F9                        bpl @loop
001578r 3               
001578r 3                               ; Restore address for return jump
001578r 3  A5 rr                        lda tmp1+1
00157Ar 3  48                           pha
00157Br 3  A5 rr                        lda tmp1
00157Dr 3  48                           pha
00157Er 3               
00157Er 3  60           z_input_to_r: 	rts
00157Fr 3               
00157Fr 3               
00157Fr 3               
00157Fr 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
00157Fr 3               ; ## "int>name"  auto  Tali Forth
00157Fr 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00157Fr 3                       ; This is called >NAME in Gforth, but we change it to
00157Fr 3                       ; INT>NAME to match NAME>INT
00157Fr 3                       ; """
00157Fr 3               
00157Fr 3               xt_int_to_name:
00157Fr 3  20 rr rr                     jsr underflow_1
001582r 3               
001582r 3                               ; Unfortunately, to find the header, we have to walk through
001582r 3                               ; all of the wordlists. We are running out of tmp variables.
001582r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001582r 3                               ; hold the current wordlist on the data stack. This searches
001582r 3                               ; all of the wordlists in id order.
001582r 3  CA                           dex
001583r 3  CA                           dex
001584r 3  74 00                        stz 0,x
001586r 3  74 01                        stz 1,x
001588r 3               
001588r 3               @wordlist_loop:
001588r 3                               ; A needs to have the current wordlist id in it at
001588r 3                               ; the top of this loop.
001588r 3  B5 00                        lda 0,x                 ; Get the current wordlist.
00158Ar 3               
00158Ar 3                               ; Get the DP for that wordlist.
00158Ar 3  0A                           asl                     ; Turn offset into cells offset.
00158Br 3  18                           clc
00158Cr 3  69 06                        adc #wordlists_offset
00158Er 3  A8                           tay
00158Fr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
001591r 3  85 rr                        sta tmp2                ; into tmp2
001593r 3  C8                           iny
001594r 3  B1 rr                        lda (up),y
001596r 3  85 rr                        sta tmp2+1
001598r 3               
001598r 3                               ; Check for an empty wordlist (DP will be 0)
001598r 3  A5 rr                        lda tmp2
00159Ar 3  05 rr                        ora tmp2+1
00159Cr 3  F0 38                        beq @next_wordlist
00159Er 3               
00159Er 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
0015A0r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
0015A2r 3  B5 03                        lda 3,x
0015A4r 3  85 rr                        sta tmp3+1
0015A6r 3               
0015A6r 3               @loop:
0015A6r 3  A0 04                        ldy #4          ; xt is four bytes down
0015A8r 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
0015AAr 3  C5 rr                        cmp tmp3
0015ACr 3  D0 07                        bne @no_match
0015AEr 3               
0015AEr 3                               ; LSB is the same, now check MSB
0015AEr 3  C8                           iny
0015AFr 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
0015B1r 3  C5 rr                        cmp tmp3+1
0015B3r 3  F0 32                        beq @match
0015B5r 3               
0015B5r 3               @no_match:
0015B5r 3                               ; no match, so we need to get the next word. Next nt is two
0015B5r 3                               ; bytes down
0015B5r 3  18                           clc
0015B6r 3  A5 rr                        lda tmp2
0015B8r 3  69 02                        adc #2
0015BAr 3  85 rr                        sta tmp2
0015BCr 3  A5 rr                        lda tmp2+1
0015BEr 3  69 00                        adc #0          ; only care about carry
0015C0r 3  85 rr                        sta tmp2+1
0015C2r 3               
0015C2r 3  A0 00                        ldy #0
0015C4r 3  B1 rr                        lda (tmp2),y
0015C6r 3  48                           pha
0015C7r 3  C8                           iny
0015C8r 3  11 rr                        ora (tmp2),y
0015CAr 3  F0 09                        beq @zero
0015CCr 3               
0015CCr 3                               ; Not zero continue
0015CCr 3  B1 rr                        lda (tmp2),y
0015CEr 3  85 rr                        sta tmp2+1
0015D0r 3  68                           pla
0015D1r 3  85 rr                        sta tmp2
0015D3r 3  80 D1                        bra @loop
0015D5r 3               
0015D5r 3               @zero:
0015D5r 3                               ; if next word is zero, the xt has no nt in this wordlist
0015D5r 3  68                           pla             ; Leftover from above loop
0015D6r 3               
0015D6r 3               @next_wordlist:
0015D6r 3                               ; Move on to the next wordlist.
0015D6r 3  B5 00                        lda 0,x
0015D8r 3  1A                           inc
0015D9r 3  95 00                        sta 0,x
0015DBr 3  C9 0C                        cmp #max_wordlists
0015DDr 3  D0 A9                        bne @wordlist_loop
0015DFr 3               
0015DFr 3                               ; We didn't find it in any of the wordlists.
0015DFr 3                               ; Remove the wordlist id from the stack.
0015DFr 3  E8                           inx
0015E0r 3  E8                           inx
0015E1r 3               
0015E1r 3                               ; We return a zero to indicate that we didn't find it.
0015E1r 3  74 00                        stz 0,x
0015E3r 3  74 01                        stz 1,x
0015E5r 3  80 0A                        bra z_int_to_name
0015E7r 3               
0015E7r 3               @match:
0015E7r 3                               ; We found it. Remove wordlist id from stack.
0015E7r 3  E8                           inx
0015E8r 3  E8                           inx
0015E9r 3               
0015E9r 3                               ; It's a match! Replace TOS with nt
0015E9r 3  A5 rr                        lda tmp2
0015EBr 3  95 00                        sta 0,x
0015EDr 3  A5 rr                        lda tmp2+1
0015EFr 3  95 01                        sta 1,x
0015F1r 3               
0015F1r 3  60           z_int_to_name:  rts
0015F2r 3               
0015F2r 3               
0015F2r 3               
0015F2r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0015F2r 3               ; ## "invert"  auto  ANS core
0015F2r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0015F2r 3               xt_invert:
0015F2r 3  20 rr rr                     jsr underflow_1
0015F5r 3               
0015F5r 3  A9 FF                        lda #$FF
0015F7r 3  55 00                        eor 0,x         ; LSB
0015F9r 3  95 00                        sta 0,x
0015FBr 3               
0015FBr 3  A9 FF                        lda #$FF
0015FDr 3  55 01                        eor 1,x         ; MSB
0015FFr 3  95 01                        sta 1,x
001601r 3               
001601r 3  60           z_invert:       rts
001602r 3               
001602r 3               
001602r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
001602r 3               ; ## "is"  auto  ANS core ext
001602r 3                       ; """http://forth-standard.org/standard/core/IS"""
001602r 3               
001602r 3               xt_is:
001602r 3                               ; This is a state aware word with differet behavior
001602r 3                               ; when used while compiling vs interpreting.
001602r 3                               ; Check STATE
001602r 3  A5 rr                        lda state
001604r 3  05 rr                        ora state+1
001606r 3  F0 0C                        beq @interpreting
001608r 3               
001608r 3               @compiling:
001608r 3                               ; Run ['] to compile the xt of the next word as a literal.
001608r 3  20 rr rr                     jsr xt_bracket_tick
00160Br 3               
00160Br 3                               ; Postpone DEFER! by compiling a JSR to it.
00160Br 3  A0 rr                        ldy #>xt_defer_store
00160Dr 3  A9 rr                        lda #<xt_defer_store
00160Fr 3  20 rr rr                     jsr cmpl_subroutine
001612r 3               
001612r 3  80 06                        bra @done
001614r 3               
001614r 3               @interpreting:
001614r 3  20 rr rr                     jsr xt_tick
001617r 3  20 rr rr                     jsr xt_defer_store
00161Ar 3               @done:
00161Ar 3  60           z_is:           rts
00161Br 3               
00161Br 3               
00161Br 3               
00161Br 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
00161Br 3               ; ## "j"  auto  ANS core
00161Br 3                       ; """https://forth-standard.org/standard/core/J
00161Br 3                       ; Copy second loop counter from Return Stack to stack. Note we use
00161Br 3                       ; a fudge factor for loop control; see the Control Flow section of
00161Br 3                       ; the manual for more details.
00161Br 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
00161Br 3                       ; on the stack above this (three entries), whereas the ideal Forth
00161Br 3                       ; implementation would just have two.
00161Br 3                       ;
00161Br 3                       ; Make this native compiled for speed
00161Br 3                       ; """
00161Br 3               
00161Br 3               xt_j:
00161Br 3  CA                           dex
00161Cr 3  CA                           dex
00161Dr 3               
00161Dr 3                               ; Get the fudged index off from the stack. It's easier to
00161Dr 3                               ; do math on the stack directly than to pop and push stuff
00161Dr 3                               ; around
00161Dr 3  86 rr                        stx tmpdsp
00161Fr 3  BA                           tsx
001620r 3               
001620r 3  38                           sec
001621r 3  BD 07 01                     lda $0107,x     ; LSB
001624r 3  FD 09 01                     sbc $0109,x
001627r 3  A8                           tay
001628r 3               
001628r 3  BD 08 01                     lda $0108,x     ; MSB
00162Br 3  FD 0A 01                     sbc $010A,x
00162Er 3               
00162Er 3  A6 rr                        ldx tmpdsp
001630r 3               
001630r 3  95 01                        sta 1,x         ; MSB of de-fudged index
001632r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001634r 3               
001634r 3  60           z_j:            rts
001635r 3               
001635r 3               
001635r 3               
001635r 3               ; ## KEY ( -- char ) "Get one character from the input"
001635r 3               ; ## "key"  tested  ANS core
001635r 3               xt_key:
001635r 3                       ; """https://forth-standard.org/standard/core/KEY
001635r 3                       ; Get a single character of input from the vectored
001635r 3                       ; input without echoing.
001635r 3                       ; """
001635r 3  20 rr rr                     jsr key_a               ; returns char in A
001638r 3               
001638r 3  CA                           dex
001639r 3  CA                           dex
00163Ar 3  95 00                        sta 0,x
00163Cr 3  74 01                        stz 1,x
00163Er 3               
00163Er 3  60           z_key:          rts
00163Fr 3               
00163Fr 3               key_a:
00163Fr 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
00163Fr 3                       ; 65816, so we have to fake the indirect jump to vector it.
00163Fr 3                       ; This is depressingly slow. We use this routine internally
00163Fr 3                       ; to avoid manipulating the Data Stack when we just want a
00163Fr 3                       ; character
00163Fr 3  6C rr rr                     jmp (input)             ; JSR/RTS
001642r 3               
001642r 3               
001642r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
001642r 3               ; ## "latestnt"  auto  Tali Forth
001642r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001642r 3                       ; The Gforth version of this word is called LATEST
001642r 3                       ; """
001642r 3               xt_latestnt:
001642r 3  CA                           dex
001643r 3  CA                           dex
001644r 3               
001644r 3  20 rr rr                     jsr current_to_dp
001647r 3               
001647r 3  A5 rr                        lda dp
001649r 3  95 00                        sta 0,x
00164Br 3  A5 rr                        lda dp+1
00164Dr 3  95 01                        sta 1,x
00164Fr 3               
00164Fr 3  60           z_latestnt:     rts
001650r 3               
001650r 3               
001650r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
001650r 3               ; ## "latestxt"  auto  Gforth
001650r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
001650r 3               xt_latestxt:
001650r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001653r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
001656r 3               
001656r 3  60           z_latestxt:     rts
001657r 3               
001657r 3               
001657r 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
001657r 3               ; ## "leave"  auto  ANS core
001657r 3                       ; """https://forth-standard.org/standard/core/LEAVE
001657r 3                       ; Note that this does not work with anything but a DO/LOOP in
001657r 3                       ; contrast to other versions such as discussed at
001657r 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
001657r 3                       ;
001657r 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
001657r 3                       ; See the Control Flow section in the manual for details of how this works.
001657r 3                       ; This must be native compile and not IMMEDIATE
001657r 3                       ; """
001657r 3               
001657r 3               xt_leave:
001657r 3                               ; We dump the limit/start entries off the Return Stack
001657r 3                               ; (four bytes)
001657r 3  68                           pla
001658r 3  68                           pla
001659r 3  68                           pla
00165Ar 3  68                           pla
00165Br 3               
00165Br 3  60                           rts             ; this must be compiled, so keep before z_leave
00165Cr 3               z_leave:                        ; not reached, not compiled
00165Cr 3               
00165Cr 3               
00165Cr 3               
00165Cr 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
00165Cr 3               ; ## "["  auto  ANS core
00165Cr 3                       ; """https://forth-standard.org/standard/core/Bracket
00165Cr 3                       ; This is an immediate and compile-only word
00165Cr 3                       ; """
00165Cr 3               xt_left_bracket:
00165Cr 3  64 rr                        stz state
00165Er 3  64 rr                        stz state+1
001660r 3               
001660r 3  60           z_left_bracket: rts
001661r 3               
001661r 3               
001661r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
001661r 3               ; ## "<#"  auto  ANS core
001661r 3                       ; """https://forth-standard.org/standard/core/num-start
001661r 3                       ; Start the process to create pictured numeric output.
001661r 3                       ;
001661r 3                       ; The new
001661r 3                       ; string is constructed from back to front, saving the new character
001661r 3                       ; at the beginning of the output string. Since we use PAD as a
001661r 3                       ; starting address and work backward (!), the string is constructed
001661r 3                       ; in the space between the end of the Dictionary (as defined by CP)
001661r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
001661r 3                       ; programs don't fool around with the PAD but still use its address.
001661r 3                       ; Based on pForth
001661r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
001661r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
001661r 3                       ; internal variable tohold instead of HLD.
001661r 3                       ; """
001661r 3               xt_less_number_sign:
001661r 3  20 rr rr                     jsr xt_pad      ; ( addr )
001664r 3               
001664r 3  B5 00                        lda 0,x
001666r 3  85 rr                        sta tohold
001668r 3  B5 01                        lda 1,x
00166Ar 3  85 rr                        sta tohold+1
00166Cr 3               
00166Cr 3  E8                           inx
00166Dr 3  E8                           inx
00166Er 3               
00166Er 3               z_less_number_sign:
00166Er 3  60                           rts
00166Fr 3               
00166Fr 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
00166Fr 3               ; ## "<"  auto  ANS core
00166Fr 3                       ; """https://forth-standard.org/standard/core/less"""
00166Fr 3               
00166Fr 3               xt_less_than:
00166Fr 3  20 rr rr                     jsr underflow_2
001672r 3               
001672r 3  A0 00                        ldy #0          ; default false
001674r 3  20 rr rr                     jsr compare_16bit
001677r 3               
001677r 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
001677r 3  F0 03                        beq @false
001679r 3  30 01                        bmi @false
00167Br 3               
00167Br 3                               ; true
00167Br 3  88                           dey
00167Cr 3               @false:
00167Cr 3  98                           tya
00167Dr 3               
00167Dr 3  E8                           inx
00167Er 3  E8                           inx
00167Fr 3  95 00                        sta 0,x
001681r 3  95 01                        sta 1,x
001683r 3               
001683r 3  60           z_less_than:    rts
001684r 3               
001684r 3               
001684r 3               
001684r 3               ; ## LIST ( scr# -- ) "List the given screen"
001684r 3               ; ## "list"  tested  ANS block ext
001684r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001684r 3               
001684r 3               xt_list:
001684r 3  20 rr rr                     jsr underflow_1
001687r 3               
001687r 3                               ; Save the screen number in SCR
001687r 3  20 rr rr                     jsr xt_scr
00168Ar 3  20 rr rr                     jsr xt_store
00168Dr 3               
00168Dr 3                               ; Use L from the editor-wordlist to display the screen.
00168Dr 3  20 rr rr                     jsr xt_editor_l
001690r 3               
001690r 3  60           z_list:         rts
001691r 3               
001691r 3               
001691r 3               
001691r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
001691r 3               ; ## "literal"  auto  ANS core
001691r 3                       ; """https://forth-standard.org/standard/core/LITERAL
001691r 3                       ; Compile-only word to store TOS so that it is pushed on stack
001691r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
001691r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
001691r 3                       ;
001691r 3                       ; Note the cmpl_ routines use TMPTOS
001691r 3                       ; """
001691r 3               xt_literal:
001691r 3  20 rr rr                     jsr underflow_1
001694r 3               
001694r 3  A0 rr                        ldy #>literal_runtime
001696r 3  A9 rr                        lda #<literal_runtime
001698r 3  20 rr rr                     jsr cmpl_subroutine
00169Br 3               
00169Br 3                               ; Compile the value that is to be pushed on the Stack during
00169Br 3                               ; runtime
00169Br 3  20 rr rr                     jsr xt_comma
00169Er 3               
00169Er 3  60           z_literal:      rts
00169Fr 3               
00169Fr 3               literal_runtime:
00169Fr 3               
00169Fr 3                               ; During runtime, we push the value following this word back
00169Fr 3                               ; on the Data Stack. The subroutine jump that brought us
00169Fr 3                               ; here put the address to return to on the Return Stack -
00169Fr 3                               ; this points to the data we need to get. This routine is
00169Fr 3                               ; also called (LITERAL) in some Forths
00169Fr 3  CA                           dex
0016A0r 3  CA                           dex
0016A1r 3               
0016A1r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
0016A1r 3                               ; so we are actually popping the address-1 of the literal
0016A1r 3  68                           pla             ; LSB
0016A2r 3  85 rr                        sta tmp1
0016A4r 3  68                           pla             ; MSB
0016A5r 3  85 rr                        sta tmp1+1
0016A7r 3               
0016A7r 3                               ; Fetch the actual literal value and push it on Data stack
0016A7r 3  A0 01                        ldy #1
0016A9r 3  B1 rr                        lda (tmp1),y    ; LSB
0016ABr 3  95 00                        sta 0,x
0016ADr 3  C8                           iny
0016AEr 3  B1 rr                        lda (tmp1),y    ; MSB
0016B0r 3  95 01                        sta 1,x
0016B2r 3               
0016B2r 3                               ; Adjust return address and push back on the Return Stack
0016B2r 3  98                           tya
0016B3r 3  18                           clc
0016B4r 3  65 rr                        adc tmp1
0016B6r 3  A8                           tay
0016B7r 3  A5 rr                        lda tmp1+1
0016B9r 3  69 00                        adc #0
0016BBr 3  48                           pha
0016BCr 3  5A                           phy
0016BDr 3               
0016BDr 3  60                           rts
0016BEr 3               
0016BEr 3               
0016BEr 3               
0016BEr 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
0016BEr 3               ; ## "load"  auto  ANS block
0016BEr 3                       ; """https://forth-standard.org/standard/block/LOAD
0016BEr 3                       ;
0016BEr 3                       ; Note: LOAD current works because there is only one buffer.
0016BEr 3                       ; If/when multiple buffers are supported, we'll have to deal
0016BEr 3                       ; with the fact that it might re-load the old block into a
0016BEr 3                       ; different buffer.
0016BEr 3                       ; """
0016BEr 3               
0016BEr 3               xt_load:
0016BEr 3  20 rr rr                     jsr underflow_1
0016C1r 3               
0016C1r 3                               ; Save the current value of BLK on the return stack.
0016C1r 3  A0 01                        ldy #blk_offset+1
0016C3r 3  B1 rr                        lda (up),y
0016C5r 3  48                           pha
0016C6r 3  88                           dey
0016C7r 3  B1 rr                        lda (up),y
0016C9r 3  48                           pha
0016CAr 3               
0016CAr 3                               ; Set BLK to the given block/screen number.
0016CAr 3  B5 00                        lda 0,x
0016CCr 3  91 rr                        sta (up),y
0016CEr 3  C8                           iny
0016CFr 3  B5 01                        lda 1,x
0016D1r 3  91 rr                        sta (up),y
0016D3r 3               
0016D3r 3                               ; Load that block into a buffer
0016D3r 3  20 rr rr                     jsr xt_block
0016D6r 3               
0016D6r 3                               ; Put 1024 on the stack for the screen length.
0016D6r 3  CA                           dex
0016D7r 3  CA                           dex
0016D8r 3  A9 04                        lda #4
0016DAr 3  95 01                        sta 1,x
0016DCr 3  74 00                        stz 0,x
0016DEr 3               
0016DEr 3                               ; Jump to a special evluate target. This bypasses the underflow
0016DEr 3                               ; check and skips the zeroing of BLK.
0016DEr 3  20 rr rr                     jsr load_evaluate
0016E1r 3               
0016E1r 3                               ; Restore the value of BLK from before the LOAD command.
0016E1r 3  A0 00                        ldy #blk_offset
0016E3r 3  68                           pla
0016E4r 3  91 rr                        sta (up),y
0016E6r 3  C8                           iny
0016E7r 3  68                           pla
0016E8r 3  91 rr                        sta (up),y
0016EAr 3               
0016EAr 3                               ; If BLK is not zero, read it back into the buffer.
0016EAr 3                               ; A still has MSB
0016EAr 3  88                           dey
0016EBr 3  11 rr                        ora (up),y
0016EDr 3  F0 12                        beq @done
0016EFr 3               
0016EFr 3                               ; The block needs to be read back into the buffer.
0016EFr 3  CA                           dex
0016F0r 3  CA                           dex
0016F1r 3  A0 00                        ldy #blk_offset
0016F3r 3  B1 rr                        lda (up),y
0016F5r 3  95 00                        sta 0,x
0016F7r 3  C8                           iny
0016F8r 3  B1 rr                        lda (up),y
0016FAr 3  95 01                        sta 1,x
0016FCr 3  20 rr rr                     jsr xt_block
0016FFr 3               
0016FFr 3                               ; Drop the buffer address.
0016FFr 3  E8                           inx
001700r 3  E8                           inx
001701r 3               
001701r 3               @done:
001701r 3  60           z_load:         rts
001702r 3               
001702r 3               
001702r 3               
001702r 3               ; ## LOOP ( -- ) "Finish loop construct"
001702r 3               ; ## "loop"  auto  ANS core
001702r 3                       ; """https://forth-standard.org/standard/core/LOOP
001702r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
001702r 3                       ; the stack and then call +LOOP.
001702r 3                       ;
001702r 3                       ; In Forth, this is
001702r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
001702r 3                       ;       IMMEDIATE ; COMPILE-ONLY
001702r 3                       ; """
001702r 3               xt_loop:
001702r 3                               ; Have the finished word push 1 on the stack
001702r 3  A0 rr                        ldy #>xt_one
001704r 3  A9 rr                        lda #<xt_one
001706r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
001709r 3               
001709r 3               
001709r 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
001709r 3               ; ## "+loop"  auto  ANS core
001709r 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
001709r 3                       ;
001709r 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
001709r 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
001709r 3                       ;       COMPILE-ONLY
001709r 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
001709r 3                       ; address for looping as TOS and the address for aborting the loop
001709r 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
001709r 3                       ; DO and the Control Flow section of the manual for details).
001709r 3                       ; """
001709r 3               
001709r 3               xt_plus_loop:
001709r 3                               ; Compile the run-time part. We do this with a short loop
001709r 3                               ; and not a call to COMPILE, because it has to be natively
001709r 3                               ; coded anyway.
001709r 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
00170Br 3  5A                           phy             ; save counter to adjust CP
00170Cr 3               @1:
00170Cr 3  B9 rr rr                     lda plus_loop_runtime,y
00170Fr 3  91 rr                        sta (cp),y
001711r 3  88                           dey
001712r 3  10 F8                        bpl @1
001714r 3               
001714r 3                               ; Adjust CP
001714r 3  68                           pla
001715r 3  18                           clc
001716r 3  65 rr                        adc cp
001718r 3  85 rr                        sta cp
00171Ar 3  A5 rr                        lda cp+1
00171Cr 3  69 00                        adc #0          ; only need carry
00171Er 3  85 rr                        sta cp+1
001720r 3               
001720r 3                               ; The address we need to loop back to is TOS. Store it so
001720r 3                               ; the runtime part of +LOOP jumps back up there
001720r 3  20 rr rr                     jsr xt_comma
001723r 3               
001723r 3                               ; Compile an UNLOOP for when we're all done. This is a series
001723r 3                               ; of six PLA, so we just do it here instead jumping around
001723r 3                               ; all over the place
001723r 3  A9 68                        lda #$68                ; opcode for PLA
001725r 3  A0 06                        ldy #6
001727r 3               @2:
001727r 3  91 rr                        sta (cp),y
001729r 3  88                           dey
00172Ar 3  10 FB                        bpl @2
00172Cr 3               
00172Cr 3                               ; Adjust CP
00172Cr 3  A9 06                        lda #6
00172Er 3  18                           clc
00172Fr 3  65 rr                        adc cp
001731r 3  85 rr                        sta cp
001733r 3  A5 rr                        lda cp+1
001735r 3  69 00                        adc #0                  ; only need carry
001737r 3  85 rr                        sta cp+1
001739r 3               
001739r 3                               ; Complete compile of DO/?DO by replacing the six
001739r 3                               ; dummy bytes by PHA instructions. The address where
001739r 3                               ; they are located is on the Data Stack
001739r 3  B5 00                        lda 0,x
00173Br 3  85 rr                        sta tmp1
00173Dr 3  B5 01                        lda 1,x
00173Fr 3  85 rr                        sta tmp1+1
001741r 3  E8                           inx
001742r 3  E8                           inx
001743r 3               
001743r 3                               ; Because of the way that CP works, we don't have to save
001743r 3                               ; CP, but CP-1
001743r 3  A5 rr                        lda cp
001745r 3  38                           sec
001746r 3  E9 01                        sbc #1
001748r 3  85 rr                        sta tmp2
00174Ar 3  A5 rr                        lda cp+1
00174Cr 3  E9 00                        sbc #0
00174Er 3  85 rr                        sta tmp2+1
001750r 3               
001750r 3                               ; now compile this in the DO/?DO routine
001750r 3  A0 00                        ldy #0
001752r 3               
001752r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001754r 3  91 rr                        sta (tmp1),y
001756r 3  C8                           iny
001757r 3  A5 rr                        lda tmp2+1      ; MSB
001759r 3  91 rr                        sta (tmp1),y
00175Br 3  C8                           iny
00175Cr 3  A9 48                        lda #$48        ; Opcode for PHA
00175Er 3  91 rr                        sta (tmp1),y
001760r 3  C8                           iny
001761r 3               
001761r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001763r 3  91 rr                        sta (tmp1),y
001765r 3  C8                           iny
001766r 3  A5 rr                        lda tmp2        ; LSB
001768r 3  91 rr                        sta (tmp1),y
00176Ar 3  C8                           iny
00176Br 3  A9 48                        lda #$48        ; Opcode for PHA
00176Dr 3  91 rr                        sta (tmp1),y
00176Fr 3               z_loop:
00176Fr 3  60           z_plus_loop:    rts
001770r 3               
001770r 3               
001770r 3               plus_loop_runtime:
001770r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001770r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001770r 3                       ; loop control so we can test with the Overflow Flag. See
001770r 3                       ; the Control Flow section of the manual for details.
001770r 3                       ; The step value is TOS in the loop. This
001770r 3                       ; must always be native compiled. In some Forths, this is a separate
001770r 3                       ; word called (+LOOP) or (LOOP)
001770r 3                       ; """
001770r 3               
001770r 3  18                           clc
001771r 3  68                           pla             ; LSB of index
001772r 3  75 00                        adc 0,x         ; LSB of step
001774r 3  A8                           tay             ; temporary storage of LSB
001775r 3               
001775r 3  B8                           clv
001776r 3  68                           pla             ; MSB of index
001777r 3  75 01                        adc 1,x         ; MSB of step
001779r 3  48                           pha             ; put MSB of index back on stack
00177Ar 3               
00177Ar 3  98                           tya             ; put LSB of index back on stack
00177Br 3  48                           pha
00177Cr 3               
00177Cr 3  E8                           inx             ; dump step from TOS
00177Dr 3  E8                           inx
00177Er 3               
00177Er 3                               ; If V flag is set, we're done looping and continue
00177Er 3                               ; after the +LOOP instruction
00177Er 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001780r 3               
001780r 3               @hack:          ; This is why this routine must be natively compiled: We
001780r 3                               ; compile the opcode for JMP here without an address to
001780r 3                               ; go to, which is added by the next next instruction of
001780r 3                               ; LOOP/+LOOP during compile time
001780r 3  4C                           .byte $4C
001781r 3               
001781r 3               plus_loop_runtime_end:
001781r 3               
001781r 3               
001781r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001781r 3               ; ## "lshift"  auto  ANS core
001781r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001781r 3               
001781r 3               xt_lshift:
001781r 3  20 rr rr                     jsr underflow_2
001784r 3               
001784r 3                               ; max shift 16 times
001784r 3  B5 00                        lda 0,x
001786r 3  29 0F                        and #%00001111
001788r 3  F0 08                        beq @done
00178Ar 3               
00178Ar 3  A8                           tay
00178Br 3               
00178Br 3               @loop:
00178Br 3  16 02                        asl 2,x
00178Dr 3  36 03                        rol 3,x
00178Fr 3  88                           dey
001790r 3  D0 F9                        bne @loop
001792r 3               
001792r 3               @done:
001792r 3  E8                           inx
001793r 3  E8                           inx
001794r 3               
001794r 3  60           z_lshift:       rts
001795r 3               
001795r 3               
001795r 3               
001795r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001795r 3               ; ## "m*"  auto  ANS core
001795r 3                       ; """https://forth-standard.org/standard/core/MTimes
001795r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001795r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001795r 3                       ;
001795r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001795r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001795r 3                       ; """
001795r 3               
001795r 3               xt_m_star:
001795r 3  20 rr rr                     jsr underflow_2
001798r 3               
001798r 3                               ; figure out the sign
001798r 3  B5 01                        lda 1,x         ; MSB of n1
00179Ar 3  55 03                        eor 3,x         ; MSB of n2
00179Cr 3               
00179Cr 3                               ; UM* uses all kinds of temporary variables so we don't
00179Cr 3                               ; risk a conflict but just take the cycle hit and push
00179Cr 3                               ; this to the stack
00179Cr 3  48                           pha
00179Dr 3               
00179Dr 3                               ; get the absolute value of both numbers so we can feed
00179Dr 3                               ; them to UM*, which does the real work
00179Dr 3  20 rr rr                     jsr xt_abs
0017A0r 3  20 rr rr                     jsr xt_swap
0017A3r 3  20 rr rr                     jsr xt_abs
0017A6r 3               
0017A6r 3  20 rr rr                     jsr xt_um_star          ; ( d )
0017A9r 3               
0017A9r 3                               ; handle the sign
0017A9r 3  68                           pla
0017AAr 3  10 03                        bpl @done
0017ACr 3               
0017ACr 3  20 rr rr                     jsr xt_dnegate
0017AFr 3               @done:
0017AFr 3  60           z_m_star:       rts
0017B0r 3               
0017B0r 3               
0017B0r 3               
0017B0r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
0017B0r 3               ; ## "marker"  auto  ANS core ext
0017B0r 3                       ; """https://forth-standard.org/standard/core/MARKER
0017B0r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
0017B0r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
0017B0r 3                       ; Run the named word at a later time to restore all of the wordlists
0017B0r 3                       ; to their state when the word was created with marker.  Any words
0017B0r 3                       ; created after the marker (including the marker) will be forgotten.
0017B0r 3                       ;
0017B0r 3                       ; To do this, we want to end up with something that jumps to a
0017B0r 3                       ; run-time component with a link to the original CP and DP values:
0017B0r 3                       ;
0017B0r 3                       ;       jsr marker_runtime
0017B0r 3                       ;       <Original CP MSB>
0017B0r 3                       ;       <Original CP LSB>
0017B0r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
0017B0r 3                       ;       <Original DP LSB>
0017B0r 3                       ;       < USER variables from offset 4 to 39 >
0017B0r 3                       ;
0017B0r 3                       ;       The user variables include:
0017B0r 3                       ;       CURRENT (byte variable)
0017B0r 3                       ;       <All wordlists> (currently 12) (cell array)
0017B0r 3                       ;       <#ORDER> (byte variable)
0017B0r 3                       ;       <All search order> (currently 9) (byte array)
0017B0r 3                       ;
0017B0r 3                       ; This code uses tmp1 and tmp2
0017B0r 3                       ; """
0017B0r 3               
0017B0r 3               xt_marker:
0017B0r 3                               ; Before we do anything, we need to save CP, which
0017B0r 3                               ; after all is the whole point of this operation. CREATE
0017B0r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
0017B0r 3                               ; to the stack
0017B0r 3  20 rr rr                     jsr current_to_dp
0017B3r 3               
0017B3r 3  A5 rr                        lda dp
0017B5r 3  48                           pha
0017B6r 3  A5 rr                        lda dp+1
0017B8r 3  48                           pha
0017B9r 3               
0017B9r 3  A5 rr                        lda cp
0017BBr 3  48                           pha
0017BCr 3  A5 rr                        lda cp+1
0017BEr 3  48                           pha
0017BFr 3               
0017BFr 3  20 rr rr                     jsr xt_create
0017C2r 3               
0017C2r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
0017C2r 3                               ; we have to replace by a jump to marker_runtime. We back up
0017C2r 3                               ; two bytes and then overwrite the address
0017C2r 3  A5 rr                        lda cp          ; LSB
0017C4r 3  38                           sec
0017C5r 3  E9 02                        sbc #2
0017C7r 3  85 rr                        sta cp
0017C9r 3               
0017C9r 3  A5 rr                        lda cp+1        ; MSB
0017CBr 3  E9 00                        sbc #0          ; we only care about the borrow
0017CDr 3  85 rr                        sta cp+1
0017CFr 3               
0017CFr 3                               ; Add the address of the runtime component
0017CFr 3  A0 rr                        ldy #>marker_runtime
0017D1r 3  A9 rr                        lda #<marker_runtime
0017D3r 3  20 rr rr                     jsr cmpl_word
0017D6r 3               
0017D6r 3                               ; Add original CP as payload
0017D6r 3  7A                           ply                     ; MSB
0017D7r 3  68                           pla                     ; LSB
0017D8r 3  20 rr rr                     jsr cmpl_word
0017DBr 3               
0017DBr 3                               ; Add original DP as payload
0017DBr 3  7A                           ply                     ; MSB
0017DCr 3  68                           pla                     ; LSB
0017DDr 3  20 rr rr                     jsr cmpl_word
0017E0r 3               
0017E0r 3                               ; Add the user variables for the wordlists and search order.
0017E0r 3                               ; We're compiling them in byte order.
0017E0r 3  A0 04                        ldy #4                  ; Start at CURRENT
0017E2r 3               @marker_loop:
0017E2r 3  B1 rr                        lda (up),y
0017E4r 3  20 rr rr                     jsr cmpl_a
0017E7r 3  C8                           iny
0017E8r 3  98                           tya
0017E9r 3  C9 28                        cmp #40                 ; One past the end of the search order.
0017EBr 3  D0 F5                        bne @marker_loop
0017EDr 3               
0017EDr 3  60           z_marker:       rts
0017EEr 3               
0017EEr 3               
0017EEr 3               
0017EEr 3               marker_runtime:
0017EEr 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
0017EEr 3                       ; when this marker was defined. We arrive here with the return
0017EEr 3                       ; address on the Return Stack in the usual 65c02 format
0017EEr 3                       ; """
0017EEr 3               
0017EEr 3                               ; Get the address of the string address off the stack and
0017EEr 3                               ; increase by one because of the RTS mechanics
0017EEr 3  68                           pla
0017EFr 3  85 rr                        sta tmp1        ; LSB of address
0017F1r 3  68                           pla
0017F2r 3  85 rr                        sta tmp1+1      ; MSB of address
0017F4r 3               
0017F4r 3  E6 rr                        inc tmp1
0017F6r 3  D0 02                        bne @1
0017F8r 3  E6 rr                        inc tmp1+1
0017FAr 3               @1:
0017FAr 3  A0 00                        ldy #0
0017FCr 3               
0017FCr 3                               ; CP was stored first
0017FCr 3  B1 rr                        lda (tmp1),y
0017FEr 3  85 rr                        sta cp
001800r 3  C8                           iny
001801r 3  B1 rr                        lda (tmp1),y
001803r 3  85 rr                        sta cp+1
001805r 3               
001805r 3                               ; Next was DP
001805r 3  C8                           iny
001806r 3  B1 rr                        lda (tmp1),y
001808r 3  85 rr                        sta dp
00180Ar 3  C8                           iny
00180Br 3  B1 rr                        lda (tmp1),y
00180Dr 3  85 rr                        sta dp+1
00180Fr 3               
00180Fr 3                               ; Conveniently, the offset into both tmp1 and UP is 4
00180Fr 3                               ; to start restoring the wordlists and search order.
00180Fr 3  A0 04                        ldy #4
001811r 3               
001811r 3               @marker_restore_loop:
001811r 3                               ; Copy from the dictionary back on top of the wordlists
001811r 3                               ; and search order.
001811r 3  B1 rr                        lda (tmp1), y
001813r 3  91 rr                        sta (up), y
001815r 3  C8                           iny
001816r 3  98                           tya
001817r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001819r 3  D0 F6                        bne @marker_restore_loop
00181Br 3               
00181Br 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
00181Er 3               
00181Er 3                               ; The return instruction takes us back to the original caller
00181Er 3  60                           rts
00181Fr 3               
00181Fr 3               
00181Fr 3               
00181Fr 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
00181Fr 3               ; ## "max"  auto  ANS core
00181Fr 3                       ; """https://forth-standard.org/standard/core/MAX
00181Fr 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
00181Fr 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
00181Fr 3                       ; Flag indicates which number is larger. See also
00181Fr 3                       ; http://6502.org/tutorials/compare_instructions.html and
00181Fr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
00181Fr 3                       ; """
00181Fr 3               
00181Fr 3               xt_max:
00181Fr 3  20 rr rr                     jsr underflow_2
001822r 3               
001822r 3                               ; Compare LSB. We do this first to set the carry flag
001822r 3  B5 00                        lda 0,x         ; LSB of TOS
001824r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001826r 3               
001826r 3  B5 01                        lda 1,x         ; MSB of TOS
001828r 3  F5 03                        sbc 3,x         ; MSB of NOS
00182Ar 3  50 02                        bvc @no_overflow
00182Cr 3               
00182Cr 3                               ; handle overflow, because we use signed numbers
00182Cr 3  49 80                        eor #$80        ; complement negative flag
00182Er 3               
00182Er 3               @no_overflow:
00182Er 3                               ; if negative, NOS is larger and needs to be kept
00182Er 3  30 08                        bmi @keep_nos
001830r 3               
001830r 3                               ; move TOS to NOS
001830r 3  B5 00                        lda 0,x
001832r 3  95 02                        sta 2,x
001834r 3  B5 01                        lda 1,x
001836r 3  95 03                        sta 3,x
001838r 3               
001838r 3               @keep_nos:
001838r 3  E8                           inx
001839r 3  E8                           inx
00183Ar 3               
00183Ar 3  60           z_max:          rts
00183Br 3               
00183Br 3               
00183Br 3               
00183Br 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
00183Br 3               ; ## "min"  auto  ANS core
00183Br 3                       ; """https://forth-standard.org/standard/core/MIN
00183Br 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
00183Br 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
00183Br 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
00183Br 3                       ; """
00183Br 3               
00183Br 3               xt_min:
00183Br 3  20 rr rr                     jsr underflow_2
00183Er 3               
00183Er 3                               ; compare LSB. We do this first to set the carry flag
00183Er 3  B5 00                        lda 0,x         ; LSB of TOS
001840r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001842r 3               
001842r 3  B5 01                        lda 1,x         ; MSB of TOS
001844r 3  F5 03                        sbc 3,x         ; MSB of NOS
001846r 3  50 02                        bvc @no_overflow
001848r 3               
001848r 3                               ; handle overflow because we use signed numbers
001848r 3  49 80                        eor #$80
00184Ar 3               
00184Ar 3               @no_overflow:
00184Ar 3                               ; if negative, NOS is larger and needs to be dumped
00184Ar 3  10 08                        bpl @keep_nos
00184Cr 3               
00184Cr 3                               ; move TOS to NOS
00184Cr 3  B5 00                        lda 0,x
00184Er 3  95 02                        sta 2,x
001850r 3  B5 01                        lda 1,x
001852r 3  95 03                        sta 3,x
001854r 3               
001854r 3               @keep_nos:
001854r 3  E8                           inx
001855r 3  E8                           inx
001856r 3               
001856r 3  60           z_min:          rts
001857r 3               
001857r 3               
001857r 3               
001857r 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001857r 3               ; ## "-"  auto  ANS core
001857r 3                       ; """https://forth-standard.org/standard/core/Minus"""
001857r 3               xt_minus:
001857r 3  20 rr rr                     jsr underflow_2
00185Ar 3               
00185Ar 3  38                           sec
00185Br 3  B5 02                        lda 2,x         ; LSB
00185Dr 3  F5 00                        sbc 0,x
00185Fr 3  95 02                        sta 2,x
001861r 3               
001861r 3  B5 03                        lda 3,x         ; MSB
001863r 3  F5 01                        sbc 1,x
001865r 3  95 03                        sta 3,x
001867r 3               
001867r 3  E8                           inx
001868r 3  E8                           inx
001869r 3               
001869r 3  60           z_minus:        rts
00186Ar 3               
00186Ar 3               
00186Ar 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
00186Ar 3               ; ## "-leading"  auto  Tali String
00186Ar 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
00186Ar 3                       ; """
00186Ar 3               
00186Ar 3               xt_minus_leading:
00186Ar 3  20 rr rr                     jsr underflow_2
00186Dr 3               
00186Dr 3               @loop:
00186Dr 3                               ; Quit if we were given an empty string. This also terminates
00186Dr 3                               ; the main loop
00186Dr 3  B5 00                        lda 0,x
00186Fr 3  15 01                        ora 1,x
001871r 3  F0 0F                        beq @done
001873r 3               
001873r 3  A1 02                        lda (2,x)               ; get first character
001875r 3  20 rr rr                     jsr is_whitespace
001878r 3  90 08                        bcc @done
00187Ar 3               
00187Ar 3                               ; It's whitespace, move one down
00187Ar 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
00187Dr 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001880r 3               
001880r 3  80 EB                        bra @loop
001882r 3               @done:
001882r 3               z_minus_leading:
001882r 3  60                           rts
001883r 3               
001883r 3               
001883r 3               
001883r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001883r 3               ; ## "-trailing"  auto  ANS string
001883r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001883r 3                       ; Remove trailing spaces
001883r 3                       ; """
001883r 3               
001883r 3               xt_minus_trailing:
001883r 3  20 rr rr                     jsr underflow_2
001886r 3               
001886r 3                               ; if length entry is zero, return a zero and leave the
001886r 3                               ; address part untouched
001886r 3  B5 00                        lda 0,x         ; LSB of n
001888r 3  15 01                        ora 1,x         ; MSB of n
00188Ar 3  F0 33                        beq @done
00188Cr 3               
00188Cr 3                               ; Compute address of last char in tmp1 as
00188Cr 3                               ; addr + u1 - 1
00188Cr 3               
00188Cr 3                               ; addr + u1
00188Cr 3  18                           clc
00188Dr 3  B5 02                        lda 2,x         ; LSB of addr
00188Fr 3  75 00                        adc 0,x
001891r 3  85 rr                        sta tmp1
001893r 3  B5 03                        lda 3,x         ; MSB of addr
001895r 3  75 01                        adc 1,x
001897r 3  85 rr                        sta tmp1+1
001899r 3               
001899r 3                               ; - 1
001899r 3  A5 rr                        lda tmp1
00189Br 3  D0 02                        bne @1
00189Dr 3  C6 rr                        dec tmp1+1
00189Fr 3               @1:
00189Fr 3  C6 rr                        dec tmp1
0018A1r 3               
0018A1r 3               @loop:
0018A1r 3                               ; While spaces are found, move tmp1 backwards and
0018A1r 3                               ; decrease the count on the data stack.
0018A1r 3  B2 rr                        lda (tmp1)
0018A3r 3  C9 20                        cmp #AscSP
0018A5r 3  D0 18                        bne @done
0018A7r 3               
0018A7r 3                               ; Move back one address.
0018A7r 3  A5 rr                        lda tmp1
0018A9r 3  D0 02                        bne @2
0018ABr 3  C6 rr                        dec tmp1+1
0018ADr 3               @2:
0018ADr 3  C6 rr                        dec tmp1
0018AFr 3               
0018AFr 3                               ; Decrement count by one.
0018AFr 3  B5 00                        lda 0,x
0018B1r 3  D0 02                        bne @3
0018B3r 3  D6 01                        dec 1,x
0018B5r 3               @3:
0018B5r 3  D6 00                        dec 0,x
0018B7r 3               
0018B7r 3                               ; Check if there are any characters left.
0018B7r 3  B5 00                        lda 0,x
0018B9r 3  15 01                        ora 1,x
0018BBr 3  F0 02                        beq @done       ; Count has reached zero - we're done!
0018BDr 3               
0018BDr 3  80 E2                        bra @loop
0018BFr 3               
0018BFr 3               @done:
0018BFr 3               z_minus_trailing:
0018BFr 3  60                           rts
0018C0r 3               
0018C0r 3               
0018C0r 3               
0018C0r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
0018C0r 3               ; ## "mod"  auto  ANS core
0018C0r 3                       ; """https://forth-standard.org/standard/core/MOD
0018C0r 3                       ;
0018C0r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
0018C0r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
0018C0r 3                       ; """
0018C0r 3               xt_mod:
0018C0r 3  20 rr rr                     jsr underflow_2
0018C3r 3               
0018C3r 3  20 rr rr                     jsr xt_slash_mod
0018C6r 3               
0018C6r 3  E8                           inx             ; DROP
0018C7r 3  E8                           inx
0018C8r 3               z_mod:
0018C8r 3  60                           rts
0018C9r 3               
0018C9r 3               
0018C9r 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
0018C9r 3               ; ## "move"  auto  ANS core
0018C9r 3                       ; """https://forth-standard.org/standard/core/MOVE
0018C9r 3                       ; Copy u "address units" from addr1 to addr2. Since our address
0018C9r 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
0018C9r 3                       ; is actually the only one of these three words that is in the CORE
0018C9r 3                       ; set.
0018C9r 3                       ;
0018C9r 3                       ; This word must not be natively compiled.
0018C9r 3                       ; """
0018C9r 3               
0018C9r 3               xt_move:
0018C9r 3                               ; We let CMOVE and CMOVE> check if there is underflow or
0018C9r 3                               ; we've been told to copy zero bytes
0018C9r 3               
0018C9r 3                               ; compare MSB first
0018C9r 3  B5 03                        lda 3,x                 ; MSB of addr2
0018CBr 3  D5 05                        cmp 5,x                 ; MSB of addr1
0018CDr 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
0018CFr 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
0018D1r 3               
0018D1r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
0018D4r 3               
0018D4r 3               @lsb:
0018D4r 3                               ; MSB were equal, so do the whole thing over with LSB
0018D4r 3  B5 02                        lda 2,x                 ; LSB of addr2
0018D6r 3  D5 04                        cmp 4,x                 ; LSB of addr1
0018D8r 3  F0 08                        beq @equal              ; LSB is equal as well
0018DAr 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
0018DCr 3               
0018DCr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
0018DFr 3               
0018DFr 3               @to_move_up:
0018DFr 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
0018E2r 3               @equal:
0018E2r 3                               ; drop three entries from Data Stack
0018E2r 3  8A                           txa
0018E3r 3  18                           clc
0018E4r 3  69 06                        adc #6
0018E6r 3  AA                           tax
0018E7r 3               
0018E7r 3  60           z_move:         rts
0018E8r 3               
0018E8r 3               
0018E8r 3               
0018E8r 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
0018E8r 3               ; ## "name>int"  tested  Gforth
0018E8r 3                       ; """See
0018E8r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0018E8r 3                       ; """
0018E8r 3               
0018E8r 3               xt_name_to_int:
0018E8r 3  20 rr rr                     jsr underflow_1
0018EBr 3               
0018EBr 3                               ; The xt starts four bytes down from the nt
0018EBr 3  B5 00                        lda 0,x
0018EDr 3  18                           clc
0018EEr 3  69 04                        adc #4
0018F0r 3  85 rr                        sta tmp3
0018F2r 3               
0018F2r 3  B5 01                        lda 1,x
0018F4r 3  90 01                        bcc @done
0018F6r 3  1A                           inc
0018F7r 3               @done:
0018F7r 3  85 rr                        sta tmp3+1
0018F9r 3               
0018F9r 3  A0 00                        ldy #0
0018FBr 3  B1 rr                        lda (tmp3),y
0018FDr 3  95 00                        sta 0,x
0018FFr 3  C8                           iny
001900r 3  B1 rr                        lda (tmp3),y
001902r 3  95 01                        sta 1,x
001904r 3               
001904r 3  60           z_name_to_int:  rts
001905r 3               
001905r 3               
001905r 3               
001905r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001905r 3               ; ## "name>string"  tested  Gforth
001905r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001905r 3               
001905r 3               xt_name_to_string:
001905r 3  20 rr rr                     jsr underflow_1
001908r 3               
001908r 3  CA                           dex
001909r 3  CA                           dex
00190Ar 3               
00190Ar 3                               ; the length of the string is the first byte of the
00190Ar 3                               ; header pointed to by nt
00190Ar 3  A1 02                        lda (2,x)
00190Cr 3  95 00                        sta 0,x
00190Er 3  74 01                        stz 1,x
001910r 3               
001910r 3                               ; the string itself always starts eight bytes down
001910r 3  B5 02                        lda 2,x         ; LSB
001912r 3  18                           clc
001913r 3  69 08                        adc #8
001915r 3  A8                           tay
001916r 3  B5 03                        lda 3,x         ; MSB
001918r 3  69 00                        adc #0          ; just need carry
00191Ar 3  95 03                        sta 3,x
00191Cr 3  94 02                        sty 2,x
00191Er 3               
00191Er 3               z_name_to_string:
00191Er 3  60                           rts
00191Fr 3               
00191Fr 3               
00191Fr 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
00191Fr 3               ; ## "nc-limit"  tested  Tali Forth
00191Fr 3               
00191Fr 3               xt_nc_limit:
00191Fr 3  CA                           dex
001920r 3  CA                           dex
001921r 3  A9 rr                        lda #<nc_limit
001923r 3  95 00                        sta 0,x
001925r 3  A9 rr                        lda #>nc_limit
001927r 3  95 01                        sta 1,x
001929r 3               
001929r 3  60           z_nc_limit:     rts
00192Ar 3               
00192Ar 3               
00192Ar 3               
00192Ar 3               ; ## NEGATE ( n -- n ) "Two's complement"
00192Ar 3               ; ## "negate"  auto  ANS core
00192Ar 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
00192Ar 3               xt_negate:
00192Ar 3  20 rr rr                     jsr underflow_1
00192Dr 3               
00192Dr 3  A9 00                	lda #0
00192Fr 3  38                           sec
001930r 3  F5 00                        sbc 0,x         ; LSB
001932r 3  95 00                        sta 0,x
001934r 3               
001934r 3  A9 00                        lda #0
001936r 3  F5 01                        sbc 1,x         ; MSB
001938r 3  95 01                        sta 1,x
00193Ar 3               
00193Ar 3  60           z_negate:       rts
00193Br 3               
00193Br 3               
00193Br 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
00193Br 3               ; ## "never-native"  auto  Tali Forth
00193Br 3               xt_never_native:
00193Br 3  20 rr rr                     jsr current_to_dp
00193Er 3  A0 01                        ldy #1          ; offset for status byte
001940r 3  B1 rr                        lda (dp),y
001942r 3  09 08                        ora #NN         ; Make sure NN flag is set
001944r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001946r 3  91 rr                        sta (dp),y
001948r 3               z_never_native:
001948r 3  60                           rts
001949r 3               
001949r 3               
001949r 3               ; ## NIP ( b a -- a ) "Delete NOS"
001949r 3               ; ## "nip"  auto  ANS core ext
001949r 3                       ; """https://forth-standard.org/standard/core/NIP"""
001949r 3               xt_nip:
001949r 3  20 rr rr                     jsr underflow_2
00194Cr 3               
00194Cr 3  B5 00                        lda 0,x         ; LSB
00194Er 3  95 02                        sta 2,x
001950r 3  B5 01                        lda 1,x         ; MSB
001952r 3  95 03                        sta 3,x
001954r 3               
001954r 3  E8                           inx
001955r 3  E8                           inx
001956r 3               
001956r 3  60           z_nip:          rts
001957r 3               
001957r 3               
001957r 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001957r 3               ; ## "<>"  auto  ANS core ext
001957r 3                       ; """https://forth-standard.org/standard/core/ne
001957r 3                       ;
001957r 3                       ; This is just a variant of EQUAL, we code it separately
001957r 3                       ; for speed.
001957r 3                       ; """
001957r 3               
001957r 3               xt_not_equals:
001957r 3  20 rr rr                     jsr underflow_2
00195Ar 3               
00195Ar 3  A0 00                        ldy #0                  ; default is true
00195Cr 3               
00195Cr 3  B5 00                        lda 0,x                 ; LSB
00195Er 3  D5 02                        cmp 2,x
001960r 3  D0 0A                        bne @not_equal
001962r 3               
001962r 3                               ; LSB is equal
001962r 3  B5 01                        lda 1,x                 ; MSB
001964r 3  D5 03                        cmp 3,x
001966r 3  D0 04                        bne @not_equal
001968r 3               
001968r 3  A9 FF                        lda #$FF
00196Ar 3  80 01                        bra @done
00196Cr 3               
00196Cr 3               @not_equal:
00196Cr 3  88                           dey                     ; drop thru to done
00196Dr 3               
00196Dr 3               @done:
00196Dr 3  98                           tya
00196Er 3  E8                           inx
00196Fr 3  E8                           inx
001970r 3  95 00                        sta 0,x
001972r 3  95 01                        sta 1,x
001974r 3               
001974r 3  60           z_not_equals:   rts
001975r 3               
001975r 3               
001975r 3               
001975r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001975r 3               ; ## "-rot"  auto  Gforth
001975r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001975r 3               
001975r 3               xt_not_rote:
001975r 3  20 rr rr                     jsr underflow_3
001978r 3               
001978r 3  B4 01                        ldy 1,x         ; MSB first
00197Ar 3  B5 03                        lda 3,x
00197Cr 3  95 01                        sta 1,x
00197Er 3               
00197Er 3  B5 05                        lda 5,x
001980r 3  95 03                        sta 3,x
001982r 3  94 05                        sty 5,x
001984r 3               
001984r 3  B4 00                        ldy 0,x         ; LSB second
001986r 3  B5 02                        lda 2,x
001988r 3  95 00                        sta 0,x
00198Ar 3               
00198Ar 3  B5 04                        lda 4,x
00198Cr 3  95 02                        sta 2,x
00198Er 3  94 04                        sty 4,x
001990r 3               
001990r 3  60           z_not_rote:     rts
001991r 3               
001991r 3               
001991r 3               
001991r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001991r 3               ; ## "number"  auto  Tali Forth
001991r 3                       ; """Convert a number string to a double or single cell number. This
001991r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001991r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001991r 3                       ; Based in part on the "Starting Forth" code
001991r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001991r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001991r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001991r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001991r 3                       ; dot to signal a double cell number is required to be the last
001991r 3                       ; character of the string.
001991r 3                       ;
001991r 3                       ; Number calls >NUMBER which in turn calls UM*,
001991r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001991r 3                       ; a pain.
001991r 3                       ;"""
001991r 3               
001991r 3               xt_number:
001991r 3  20 rr rr                     jsr underflow_2
001994r 3               
001994r 3                               ; we keep the flags for sign and double in tmpdsp because
001994r 3                               ; we've run out of temporary variables
001994r 3  64 rr                        stz tmpdsp      ; flag for double
001996r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001998r 3               
001998r 3                               ; If the first character is a minus, strip it off and set
001998r 3                               ; the flag
001998r 3  A1 02                        lda (2,x)
00199Ar 3  C9 2D                        cmp #$2D        ; ASCII for "-"
00199Cr 3  D0 0A                        bne @check_dot
00199Er 3               
00199Er 3                               ; It's a minus
00199Er 3  C6 rr                        dec tmpdsp+1
0019A0r 3  F6 02                        inc 2,x         ; start one character later
0019A2r 3  D0 02                        bne @1
0019A4r 3  F6 03                        inc 3,x
0019A6r 3               @1:
0019A6r 3  D6 00                        dec 0,x         ; decrease string length by one
0019A8r 3               
0019A8r 3               @check_dot:
0019A8r 3                               ; If the last character is a dot, strip it off and set a
0019A8r 3                               ; flag. We can use tmptos as a temporary variable
0019A8r 3  B5 02                        lda 2,x         ; LSB of address
0019AAr 3  18                           clc
0019ABr 3  75 00                        adc 0,x         ; length of string
0019ADr 3  85 rr                        sta tmptos
0019AFr 3  B5 03                        lda 3,x
0019B1r 3  69 00                        adc #0          ; only need carry
0019B3r 3  85 rr                        sta tmptos+1
0019B5r 3               
0019B5r 3                               ; tmptos now points to the first character after the string,
0019B5r 3                               ; but we need the last character
0019B5r 3  A5 rr                        lda tmptos
0019B7r 3  D0 02                        bne @2
0019B9r 3  C6 rr                        dec tmptos+1
0019BBr 3               @2:
0019BBr 3  C6 rr                        dec tmptos
0019BDr 3               
0019BDr 3  B2 rr                        lda (tmptos)
0019BFr 3  C9 2E                        cmp #'.'
0019C1r 3  D0 04                        bne @main
0019C3r 3               
0019C3r 3                               ; We have a dot, which means this is a double number. Flag
0019C3r 3                               ; the fact and reduce string length by one
0019C3r 3  C6 rr                        dec tmpdsp
0019C5r 3  D6 00                        dec 0,x
0019C7r 3               
0019C7r 3               @main:
0019C7r 3                               ; Set up stack for subroutine jump to >NUMBER, which means
0019C7r 3                               ; we have to go ( addr u --> ud addr u )
0019C7r 3  CA                           dex
0019C8r 3  CA                           dex
0019C9r 3  CA                           dex
0019CAr 3  CA                           dex
0019CBr 3               
0019CBr 3  B5 04                        lda 4,x         ; LSB of length
0019CDr 3  95 00                        sta 0,x
0019CFr 3  74 01                        stz 1,x         ; MSB, max length 255 chars
0019D1r 3               
0019D1r 3  B5 06                        lda 6,x         ; LSB of address
0019D3r 3  95 02                        sta 2,x
0019D5r 3  B5 07                        lda 7,x         ; MSB of address
0019D7r 3  95 03                        sta 3,x
0019D9r 3               
0019D9r 3  74 04                        stz 4,x         ; clear space for ud
0019DBr 3  74 05                        stz 5,x
0019DDr 3  74 06                        stz 6,x
0019DFr 3  74 07                        stz 7,x
0019E1r 3               
0019E1r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
0019E4r 3               
0019E4r 3                               ; test length of returned string, which should be zero
0019E4r 3  B5 00                        lda 0,x
0019E6r 3  F0 15                        beq @all_converted
0019E8r 3               
0019E8r 3                               ; Something went wrong, we still have characters left over,
0019E8r 3                               ; so we print an error and abort. If the NUMBER was called
0019E8r 3                               ; by INTERPRET, we've already checked for Forth words, so
0019E8r 3                               ; we're in deep trouble one way or another
0019E8r 3  A9 3E                        lda #$3E        ; ASCII for ">"
0019EAr 3  20 rr rr                     jsr emit_a
0019EDr 3  20 rr rr                     jsr xt_type
0019F0r 3  A9 3C                        lda #$3C        ; ASCII for "<"
0019F2r 3  20 rr rr                     jsr emit_a
0019F5r 3  20 rr rr                     jsr xt_space
0019F8r 3               
0019F8r 3  A9 08                        lda #err_syntax
0019FAr 3  4C rr rr                     jmp error
0019FDr 3               
0019FDr 3               @all_converted:
0019FDr 3                               ; We can drop the string info
0019FDr 3  E8                           inx
0019FEr 3  E8                           inx
0019FFr 3  E8                           inx
001A00r 3  E8                           inx
001A01r 3               
001A01r 3                               ; We have a double-cell number on the Data Stack that might
001A01r 3                               ; actually have a minus and might actually be single-cell
001A01r 3  A5 rr                        lda tmpdsp      ; flag for double
001A03r 3  F0 0D                        beq @single
001A05r 3               
001A05r 3                               ; Set status bit 5 to indicate this is a double number
001A05r 3  A9 20                        lda #%00100000
001A07r 3  04 rr                        tsb status
001A09r 3               
001A09r 3                               ; This is a double cell number. If it had a minus, we'll have
001A09r 3                               ; to negate it
001A09r 3  A5 rr                        lda tmpdsp+1
001A0Br 3  F0 12                        beq @done       ; no minus, all done
001A0Dr 3               
001A0Dr 3  20 rr rr                     jsr xt_dnegate
001A10r 3               
001A10r 3  80 0D                        bra @done
001A12r 3               
001A12r 3               @single:
001A12r 3                               ; This is a single number, so we just drop the top cell
001A12r 3  E8                           inx
001A13r 3  E8                           inx
001A14r 3               
001A14r 3                               ; Clear status bit 5 to indicate this is a single number
001A14r 3  A9 20                        lda #%00100000
001A16r 3  14 rr                        trb status
001A18r 3               
001A18r 3                               ; If we had a minus, we'll have to negate it
001A18r 3  A5 rr                        lda tmpdsp+1
001A1Ar 3  F0 03                        beq @done       ; no minus, all done
001A1Cr 3               
001A1Cr 3  20 rr rr                     jsr xt_negate
001A1Fr 3               @done:
001A1Fr 3  60           z_number:       rts
001A20r 3               
001A20r 3               
001A20r 3               
001A20r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001A20r 3               ; ## "#"  auto  ANS core
001A20r 3                       ; """https://forth-standard.org/standard/core/num
001A20r 3                       ; Add one char to the beginning of the pictured output string.
001A20r 3                       ;
001A20r 3                       ; Based on
001A20r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001A20r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001A20r 3                       ; """
001A20r 3               xt_number_sign:
001A20r 3  20 rr rr                     jsr underflow_2         ; double number
001A23r 3               
001A23r 3  20 rr rr                     jsr xt_base
001A26r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001A29r 3               
001A29r 3                               ; The following code is the ancient Forth word UD/MOD, which in
001A29r 3                               ; various Forths (including Gforth) lives on under the hood,
001A29r 3                               ; even though it's not an ANS standard word, it doesn't appear
001A29r 3                               ; in the docs, it's only used here, and there are no tests for
001A29r 3                               ; it. This is why we got rid of it. We'll be converting this
001A29r 3                               ; mess to something more sane in the long run.
001A29r 3  20 rr rr                     jsr xt_to_r             ; >r
001A2Cr 3  20 rr rr                     jsr xt_zero             ; 0
001A2Fr 3  20 rr rr                     jsr xt_r_fetch          ; r@
001A32r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001A35r 3  20 rr rr                     jsr xt_rot              ; rot
001A38r 3  20 rr rr                     jsr xt_rot              ; rot
001A3Br 3  20 rr rr                     jsr xt_r_from           ; r>
001A3Er 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001A41r 3  20 rr rr                     jsr xt_rot              ; rot
001A44r 3                               ; end of UD/MOD ( rem ud )
001A44r 3               
001A44r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001A47r 3               
001A47r 3                               ; Convert the number that is left over to an ASCII character. We
001A47r 3                               ; use a string lookup for speed. Use either abc_str_lower for
001A47r 3                               ; lower case or abc_str_upper for upper case (prefered)
001A47r 3  B5 00                        lda 0,x
001A49r 3  A8                           tay
001A4Ar 3  B9 rr rr                     lda s_abc_upper,y
001A4Dr 3  95 00                        sta 0,x
001A4Fr 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001A51r 3               
001A51r 3  20 rr rr                     jsr xt_hold
001A54r 3               
001A54r 3               z_number_sign:
001A54r 3  60                           rts
001A55r 3               
001A55r 3               
001A55r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001A55r 3               ; ## "#>"  auto  ANS core
001A55r 3                       ; """https://forth-standard.org/standard/core/num-end
001A55r 3                       ; Finish conversion of pictured number string, putting address and
001A55r 3                       ; length on the Data Stack.
001A55r 3                       ;
001A55r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001A55r 3                       ; Based on
001A55r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001A55r 3                       ; """
001A55r 3               xt_number_sign_greater:
001A55r 3               
001A55r 3  20 rr rr                     jsr underflow_2         ; double number
001A58r 3               
001A58r 3                               ; The start address lives in tohold
001A58r 3  A5 rr                        lda tohold
001A5Ar 3  95 00                        sta 0,x         ; LSB of tohold
001A5Cr 3  95 02                        sta 2,x
001A5Er 3  A5 rr                        lda tohold+1
001A60r 3  95 01                        sta 1,x         ; MSB of addr
001A62r 3  95 03                        sta 3,x         ; ( addr addr )
001A64r 3               
001A64r 3                               ; The length of the string is pad - addr
001A64r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001A67r 3               
001A67r 3  38                           sec
001A68r 3  B5 00                        lda 0,x         ; LSB of pad address
001A6Ar 3  F5 02                        sbc 2,x
001A6Cr 3  95 02                        sta 2,x
001A6Er 3               
001A6Er 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001A70r 3  F5 03                        sbc 3,x
001A72r 3  95 03                        sta 3,x         ; ( addr u pad )
001A74r 3               
001A74r 3  E8                           inx
001A75r 3  E8                           inx
001A76r 3               
001A76r 3               z_number_sign_greater:
001A76r 3  60                           rts
001A77r 3               
001A77r 3               
001A77r 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001A77r 3               ; ## "#s"  auto  ANS core
001A77r 3                       ; """https://forth-standard.org/standard/core/numS
001A77r 3                       ; Completely convert number for pictured numerical output.
001A77r 3                       ;
001A77r 3                       ; Based on
001A77r 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001A77r 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001A77r 3                       ; """
001A77r 3               
001A77r 3               xt_number_sign_s:
001A77r 3  20 rr rr                     jsr underflow_2
001A7Ar 3               @loop:
001A7Ar 3                               ; convert a single number ("#")
001A7Ar 3  20 rr rr                     jsr xt_number_sign
001A7Dr 3               
001A7Dr 3                               ; stop when double-celled number in TOS is zero:
001A7Dr 3  B5 00                        lda 0,x
001A7Fr 3  15 01                        ora 1,x
001A81r 3  15 02                        ora 2,x
001A83r 3  15 03                        ora 3,x
001A85r 3  D0 F3                        bne @loop
001A87r 3               
001A87r 3               z_number_sign_s:
001A87r 3  60                           rts
001A88r 3               
001A88r 3               
001A88r 3               
001A88r 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001A88r 3               ; ## "of"  auto  ANS core ext
001A88r 3                       ; """http://forth-standard.org/standard/core/OF"""
001A88r 3               
001A88r 3               xt_of:
001A88r 3                               ; Check if value is equal to this case.
001A88r 3                               ; Postpone over (eg. compile a jsr to it)
001A88r 3  A0 rr                        ldy #>xt_over
001A8Ar 3  A9 rr                        lda #<xt_over
001A8Cr 3  20 rr rr                     jsr cmpl_subroutine
001A8Fr 3               
001A8Fr 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001A8Fr 3  A0 rr                        ldy #>xt_equal
001A91r 3  A9 rr                        lda #<xt_equal
001A93r 3  20 rr rr                     jsr cmpl_subroutine
001A96r 3               
001A96r 3  20 rr rr                     jsr xt_if
001A99r 3               
001A99r 3                               ; If it's true, consume the original value.
001A99r 3                               ; Postpone DROP (eg. compile a jsr to it)
001A99r 3  A0 rr                        ldy #>xt_drop
001A9Br 3  A9 rr                        lda #<xt_drop
001A9Dr 3  20 rr rr                     jsr cmpl_subroutine
001AA0r 3               
001AA0r 3  60           z_of:           rts
001AA1r 3               
001AA1r 3               
001AA1r 3               
001AA1r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001AA1r 3               ; ## "1"  auto  Tali Forth
001AA1r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001AA1r 3               xt_editor_wordlist:
001AA1r 3               xt_one:
001AA1r 3  CA                           dex
001AA2r 3  CA                           dex
001AA3r 3  A9 01                        lda #1
001AA5r 3  95 00                        sta 0,x
001AA7r 3  74 01                        stz 1,x
001AA9r 3               
001AA9r 3               z_editor_wordlist:
001AA9r 3               z_one:
001AA9r 3  60                           rts
001AAAr 3               
001AAAr 3               
001AAAr 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001AAAr 3               ; ## "1-"  auto  ANS core
001AAAr 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001AAAr 3               
001AAAr 3               xt_one_minus:
001AAAr 3  20 rr rr                     jsr underflow_1
001AADr 3               
001AADr 3  B5 00                        lda 0,x
001AAFr 3  D0 02                        bne @1
001AB1r 3  D6 01                        dec 1,x
001AB3r 3               @1:
001AB3r 3  D6 00                        dec 0,x
001AB5r 3               
001AB5r 3  60           z_one_minus:    rts
001AB6r 3               
001AB6r 3               
001AB6r 3               
001AB6r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001AB6r 3               ; ## "1+"  auto  ANS core
001AB6r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001AB6r 3                       ;
001AB6r 3                       ; Code is shared with CHAR-PLUS
001AB6r 3                       ; """
001AB6r 3               
001AB6r 3               xt_char_plus:
001AB6r 3               xt_one_plus:
001AB6r 3  20 rr rr                     jsr underflow_1
001AB9r 3               
001AB9r 3  F6 00                        inc 0,x
001ABBr 3  D0 02                        bne @done
001ABDr 3  F6 01                        inc 1,x
001ABFr 3               
001ABFr 3               @done:
001ABFr 3               z_char_plus:
001ABFr 3  60           z_one_plus:     rts
001AC0r 3               
001AC0r 3               
001AC0r 3               
001AC0r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001AC0r 3               ; ## "only"  auto  ANS search ext
001AC0r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001AC0r 3               
001AC0r 3               xt_only:
001AC0r 3                               ; Put -1 on data stack.
001AC0r 3  CA                           dex
001AC1r 3  CA                           dex
001AC2r 3  A9 FF                        lda #$FF
001AC4r 3  95 00                        sta 0,x
001AC6r 3  95 01                        sta 1,x
001AC8r 3               
001AC8r 3                               ; Invoke set-order to set the minimum search order.
001AC8r 3  20 rr rr                     jsr xt_set_order
001ACBr 3               
001ACBr 3  60           z_only:         rts
001ACCr 3               
001ACCr 3               
001ACCr 3               
001ACCr 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001ACCr 3               ; ## "or"  auto  ANS core
001ACCr 3                       ; """https://forth-standard.org/standard/core/OR"
001ACCr 3               xt_or:
001ACCr 3  20 rr rr                     jsr underflow_2
001ACFr 3               
001ACFr 3  B5 00                        lda 0,x
001AD1r 3  15 02                        ora 2,x
001AD3r 3  95 02                        sta 2,x
001AD5r 3               
001AD5r 3  B5 01                        lda 1,x
001AD7r 3  15 03                        ora 3,x
001AD9r 3  95 03                        sta 3,x
001ADBr 3               
001ADBr 3  E8                           inx
001ADCr 3  E8                           inx
001ADDr 3               
001ADDr 3  60           z_or:           rts
001ADEr 3               
001ADEr 3               
001ADEr 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001ADEr 3               ; ## "order"  auto  ANS core
001ADEr 3                       ; """https://forth-standard.org/standard/search/ORDER
001ADEr 3                       ; Note the search order is displayed from first search to last
001ADEr 3                       ; searched and is therefore exactly the reverse of the order in which
001ADEr 3                       ; Forth stacks are displayed.
001ADEr 3                       ;
001ADEr 3                       ; A Forth implementation of this word is:
001ADEr 3                       ;
001ADEr 3                       ; 	: .wid ( wid -- )
001ADEr 3                       ; 	dup 0=  if ." Forth "  drop    else
001ADEr 3                       ; 	dup 1 = if ." Editor " drop    else
001ADEr 3                       ; 	dup 2 = if ." Assembler " drop else
001ADEr 3                       ; 	dup 3 = if ." Root " drop      else
001ADEr 3                       ; 	           . ( just print the number )
001ADEr 3                       ; 	then then then then ;
001ADEr 3                       ;
001ADEr 3                       ; : ORDER ( -- )
001ADEr 3                       ; 	cr get-order 0 ?do .wid loop
001ADEr 3                       ; 	space space get-current .wid ;
001ADEr 3                       ;
001ADEr 3                       ; This is an interactive program, so speed
001ADEr 3                       ; is not as important as size. We assume we do not have more than 255
001ADEr 3                       ; wordlists.
001ADEr 3                       ; """
001ADEr 3               
001ADEr 3               xt_order:
001ADEr 3  20 rr rr                     jsr xt_cr
001AE1r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001AE4r 3               
001AE4r 3                               ; Paranoid: Check if there are no wordlists, a rather
001AE4r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001AE4r 3                               ; that case, we just drop n and run
001AE4r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001AE6r 3  F0 1E                        beq @drop_done
001AE8r 3               
001AE8r 3               @have_wordlists:
001AE8r 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001AE8r 3                               ; on the stack
001AE8r 3  A8                           tay
001AE9r 3               @loop:
001AE9r 3  E8                           inx
001AEAr 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001AEBr 3  B5 00                        lda 0,x
001AEDr 3               
001AEDr 3  5A                           phy
001AEEr 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001AF1r 3  7A                           ply
001AF2r 3               
001AF2r 3  88                           dey
001AF3r 3  D0 F4                        bne @loop
001AF5r 3               
001AF5r 3                               ; We've printed the wordlists, now we add the current wordlist.
001AF5r 3                               ; This follows the convention of Gforth
001AF5r 3  20 rr rr                     jsr xt_space
001AF8r 3  20 rr rr                     jsr xt_space
001AFBr 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001AFEr 3               
001AFEr 3  B5 00                        lda 0,x
001B00r 3  20 rr rr                     jsr _print_wid_string
001B03r 3  20 rr rr                     jsr xt_cr
001B06r 3               
001B06r 3               @drop_done:
001B06r 3  E8                           inx
001B07r 3  E8                           inx
001B08r 3               z_order:
001B08r 3  60                           rts
001B09r 3               
001B09r 3               _print_wid_string:
001B09r 3                       ; """Helper function for ORDER: Given a WID in A, print the
001B09r 3                       ; corresponding string. If there is no such word list defined, just
001B09r 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001B09r 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001B09r 3                       ; theory, we could speed this up by having the WID be the same as the
001B09r 3                       ; number of the strings. However, ORDER is used rather infrequently and
001B09r 3                       ; this would make changes to the strings.asm file very dangerous, so we
001B09r 3                       ; follow the slightly more complicated route with a translation table.
001B09r 3                       ; """
001B09r 3                               ; If the WID is larger than 3, we have no string avaliable and
001B09r 3                               ; just print the number.
001B09r 3                               ; See http://6502.org/tutorials/compare_instructions.html
001B09r 3                               ; for details
001B09r 3  C9 04                        cmp #4
001B0Br 3  90 09                        bcc @output_string      ; less than 4, print a real string
001B0Dr 3               
001B0Dr 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001B0Dr 3                               ; print the number
001B0Dr 3  CA                           dex
001B0Er 3  CA                           dex
001B0Fr 3  95 00                        sta 0,x
001B11r 3  74 01                        stz 1,x
001B13r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001B16r 3               
001B16r 3               @output_string:
001B16r 3                               ; Get the string number based on WID 0 to 3
001B16r 3  A8                           tay
001B17r 3  B9 rr rr                     lda @wid_data,y
001B1Ar 3               
001B1Ar 3                               ; Print without a line feed
001B1Ar 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001B1Dr 3               
001B1Dr 3               @wid_data:
001B1Dr 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001B1Dr 3                       ; less than 4.
001B1Dr 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001B1Er 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001B1Fr 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001B20r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001B21r 3               
001B21r 3               
001B21r 3               
001B21r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001B21r 3               ; ## "output"  tested  Tali Forth
001B21r 3               xt_output:
001B21r 3                       ; """Return the address where the jump target for EMIT is stored (but
001B21r 3                       ; not the vector itself). By default, this will hold the value of
001B21r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001B21r 3                       ; routine.
001B21r 3                       ; """
001B21r 3  CA                           dex
001B22r 3  CA                           dex
001B23r 3  A9 rr                        lda #<output
001B25r 3  95 00                        sta 0,x
001B27r 3  A9 rr                        lda #>output
001B29r 3  95 01                        sta 1,x
001B2Br 3               
001B2Br 3  60           z_output:       rts
001B2Cr 3               
001B2Cr 3               
001B2Cr 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001B2Cr 3               ; ## "over"  auto  ANS core
001B2Cr 3                       ; """https://forth-standard.org/standard/core/OVER"""
001B2Cr 3               xt_over:
001B2Cr 3  20 rr rr                     jsr underflow_2
001B2Fr 3               
001B2Fr 3  CA                           dex
001B30r 3  CA                           dex
001B31r 3               
001B31r 3  B5 04                        lda 4,x         ; LSB
001B33r 3  95 00                        sta 0,x
001B35r 3  B5 05                        lda 5,x         ; MSB
001B37r 3  95 01                        sta 1,x
001B39r 3               
001B39r 3  60           z_over:         rts
001B3Ar 3               
001B3Ar 3               
001B3Ar 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001B3Ar 3               ; ## "pad"  auto  ANS core ext
001B3Ar 3                       ; """https://forth-standard.org/standard/core/PAD
001B3Ar 3                       ; Return address to a temporary area in free memory for user. Must
001B3Ar 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001B3Ar 3                       ; the compile area pointer (CP) and therefore varies in position.
001B3Ar 3                       ; This area is reserved for the user and not used by the system
001B3Ar 3                       ; """
001B3Ar 3               xt_pad:
001B3Ar 3  CA                           dex
001B3Br 3  CA                           dex
001B3Cr 3               
001B3Cr 3  A5 rr                        lda cp
001B3Er 3  18                           clc
001B3Fr 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001B41r 3  95 00                        sta 0,x
001B43r 3               
001B43r 3  A5 rr                        lda cp+1
001B45r 3  69 00                        adc #0          ; only need carry
001B47r 3  95 01                        sta 1,x
001B49r 3               
001B49r 3  60           z_pad:          rts
001B4Ar 3               
001B4Ar 3               
001B4Ar 3               ; ## PAGE ( -- ) "Clear the screen"
001B4Ar 3               ; ## "page"  tested  ANS facility
001B4Ar 3                       ; """https://forth-standard.org/standard/facility/PAGE
001B4Ar 3                       ; Clears a page if supported by ANS terminal codes. This is
001B4Ar 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001B4Ar 3                       ; left of the screen
001B4Ar 3                       ; """
001B4Ar 3               xt_page:
001B4Ar 3  A9 1B                        lda #AscESC
001B4Cr 3  20 rr rr                     jsr emit_a
001B4Fr 3  A9 5B                        lda #$5B        ; ASCII for "["
001B51r 3  20 rr rr                     jsr emit_a
001B54r 3  A9 32                        lda #'2'
001B56r 3  20 rr rr                     jsr emit_a
001B59r 3  A9 4A                        lda #'J'
001B5Br 3  20 rr rr                     jsr emit_a
001B5Er 3               
001B5Er 3                               ; move cursor to top left of screen
001B5Er 3  20 rr rr                     jsr xt_zero
001B61r 3  20 rr rr                     jsr xt_zero
001B64r 3  20 rr rr                     jsr xt_at_xy
001B67r 3               
001B67r 3  60           z_page:         rts
001B68r 3               
001B68r 3               
001B68r 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001B68r 3               ; ## "("  auto  ANS core
001B68r 3                       ; """http://forth-standard.org/standard/core/p"""
001B68r 3               
001B68r 3               xt_paren:
001B68r 3                               ; Put a right paren on the stack.
001B68r 3  CA                           dex
001B69r 3  CA                           dex
001B6Ar 3  A9 29                        lda #41     ; Right parenthesis
001B6Cr 3  95 00                        sta 0,x
001B6Er 3  74 01                        stz 1,x
001B70r 3               
001B70r 3                               ; Call parse.
001B70r 3  20 rr rr                     jsr xt_parse
001B73r 3               
001B73r 3                               ; Throw away the result.
001B73r 3  E8                           inx
001B74r 3  E8                           inx
001B75r 3  E8                           inx
001B76r 3  E8                           inx
001B77r 3               
001B77r 3  60           z_paren:        rts
001B78r 3               
001B78r 3               
001B78r 3               
001B78r 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001B78r 3               ; ## "parse-name"  auto  ANS core ext
001B78r 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001B78r 3                       ; Find next word in input string, skipping leading whitespace. This is
001B78r 3                       ; a special form of PARSE and drops through to that word. See PARSE
001B78r 3                       ; for more detail. We use this word internally for the interpreter
001B78r 3                       ; because it is a lot easier to use. Reference implementations at
001B78r 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001B78r 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001B78r 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001B78r 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001B78r 3                       ; is actually perfectly legal (see for example
001B78r 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001B78r 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001B78r 3                       ; """
001B78r 3               
001B78r 3               xt_parse_name:
001B78r 3                               ; To enable the compilation of the high-level Forth words
001B78r 3                               ; in forth-words.asm and user-words.asm at boot time,
001B78r 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001B78r 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001B78r 3                               ; to the current location is in toin (>IN). We need to check,
001B78r 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001B78r 3                               ; we can't just use Y as an index.
001B78r 3               
001B78r 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001B78r 3  A5 rr                        lda ciblen              ; LSB of counter
001B7Ar 3  38                           sec
001B7Br 3  E5 rr                        sbc toin
001B7Dr 3  85 rr                        sta tmp1
001B7Fr 3  A5 rr                        lda ciblen+1            ; MSB
001B81r 3  E5 rr                        sbc toin+1
001B83r 3  85 rr                        sta tmp1+1
001B85r 3               
001B85r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001B85r 3  A5 rr                        lda tmp1
001B87r 3  05 rr                        ora tmp1+1
001B89r 3  F0 28                        beq @empty_line
001B8Br 3               
001B8Br 3                               ; We walk through the characters starting at CIB+TOIN, so we
001B8Br 3                               ; save a temp version of that in tmp2
001B8Br 3  A5 rr                        lda cib
001B8Dr 3  18                           clc
001B8Er 3  65 rr                        adc toin
001B90r 3  85 rr                        sta tmp2                ; LSB of first character
001B92r 3  A5 rr                        lda cib+1
001B94r 3  65 rr                        adc toin+1
001B96r 3  85 rr                        sta tmp2+1              ; MSB
001B98r 3               
001B98r 3               @skip_loop:
001B98r 3  B2 rr                        lda (tmp2)              ; work copy of cib
001B9Ar 3  20 rr rr                     jsr is_whitespace
001B9Dr 3  90 1F                        bcc @char_found
001B9Fr 3               
001B9Fr 3                               ; Char is still whitespace, continue
001B9Fr 3  E6 rr                        inc tmp2
001BA1r 3  D0 02                        bne @2
001BA3r 3  E6 rr                        inc tmp2+1
001BA5r 3               @2:
001BA5r 3                               ; Adjust counter
001BA5r 3  A5 rr                        lda tmp1
001BA7r 3  D0 02                        bne @3
001BA9r 3  C6 rr                        dec tmp1+1
001BABr 3               @3:
001BABr 3  C6 rr                        dec tmp1
001BADr 3               
001BADr 3  A5 rr                        lda tmp1
001BAFr 3  05 rr                        ora tmp1+1
001BB1r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001BB3r 3               
001BB3r 3               @empty_line:
001BB3r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001BB3r 3                               ; what to return as an address if a string with only
001BB3r 3                               ; spaces is given. For speed reasons, we just return junk
001BB3r 3                               ; NOS, with the TOS zero as per standard
001BB3r 3  CA                           dex
001BB4r 3  CA                           dex
001BB5r 3  CA                           dex
001BB6r 3  CA                           dex
001BB7r 3               
001BB7r 3  74 00                        stz 0,x                 ; TOS is zero
001BB9r 3  74 01                        stz 1,x
001BBBr 3               
001BBBr 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001BBEr 3               
001BBEr 3               @char_found:
001BBEr 3                               ; We arrive here with tmp2 pointing to the first non-space
001BBEr 3                               ; character. This is where the word really starts, so
001BBEr 3                               ; we use it to calculate the new >IN by subtracting
001BBEr 3  A5 rr                        lda tmp2
001BC0r 3  38                           sec
001BC1r 3  E5 rr                        sbc cib
001BC3r 3  85 rr                        sta toin
001BC5r 3  A5 rr                        lda tmp2+1
001BC7r 3  E5 rr                        sbc cib+1
001BC9r 3  85 rr                        sta toin+1
001BCBr 3               
001BCBr 3                               ; prepare Data Stack for PARSE by adding space
001BCBr 3                               ; as the delimiter
001BCBr 3  CA                           dex
001BCCr 3  CA                           dex
001BCDr 3               
001BCDr 3  A9 20                        lda #AscSP
001BCFr 3  95 00                        sta 0,x
001BD1r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001BD3r 3               
001BD3r 3               
001BD3r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001BD3r 3               ; ## "parse"  tested  ANS core ext
001BD3r 3                       ; """https://forth-standard.org/standard/core/PARSE
001BD3r 3                       ; Find word in input string delimited by character given. Do not
001BD3r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001BD3r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001BD3r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001BD3r 3                       ;
001BD3r 3                       ;
001BD3r 3                       ;     cib  cib+toin   cib+ciblen
001BD3r 3                       ;      v      v            v
001BD3r 3                       ;     |###################|
001BD3r 3                       ;
001BD3r 3                       ;     |------>|  toin (>IN)
001BD3r 3                       ;     |------------------->|  ciblen
001BD3r 3                       ;
001BD3r 3                       ; The input string is stored starting at the address in the Current
001BD3r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001BD3r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001BD3r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001BD3r 3                       ; useful string if there are any characters at all. As with
001BD3r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001BD3r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001BD3r 3                       ; """
001BD3r 3               
001BD3r 3               xt_parse:
001BD3r 3  20 rr rr                     jsr underflow_1
001BD6r 3               
001BD6r 3                               ; If the input buffer is empty, we just return
001BD6r 3  A5 rr                        lda ciblen
001BD8r 3  05 rr                        ora ciblen+1
001BDAr 3  F0 0C                        beq @abort_parse
001BDCr 3               
001BDCr 3                               ; If the pointer >IN is larger or equal to the length of
001BDCr 3                               ; the input buffer (CIBLEN), the line is done. Put
001BDCr 3                               ; differently, we only continue if >IN is smaller than
001BDCr 3                               ; CIBLEN
001BDCr 3  A5 rr                        lda toin+1              ; MSB
001BDEr 3  C5 rr                        cmp ciblen+1
001BE0r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001BE2r 3               
001BE2r 3  A5 rr                        lda toin                ; LSB
001BE4r 3  C5 rr                        cmp ciblen
001BE6r 3  90 08                        bcc @go_parse
001BE8r 3               
001BE8r 3               @abort_parse:
001BE8r 3                               ; Sorry, this line is over
001BE8r 3  CA                           dex
001BE9r 3  CA                           dex
001BEAr 3  74 00                        stz 0,x
001BECr 3  74 01                        stz 1,x
001BEEr 3               
001BEEr 3  80 7A                        bra @done
001BF0r 3               @go_parse:
001BF0r 3                               ; We actually have work to do. Save the delimiter in
001BF0r 3                               ; tmptos.
001BF0r 3  B5 00                        lda 0,x
001BF2r 3  85 rr                        sta tmptos
001BF4r 3               
001BF4r 3                               ; We can now prepare the Data Stack for the return value
001BF4r 3  CA                           dex
001BF5r 3  CA                           dex
001BF6r 3               
001BF6r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001BF6r 3                               ; tmp2 is initially the same as tmp1, then the work index
001BF6r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001BF6r 3               
001BF6r 3                               ; Calculate the beginning of the string, which is also the
001BF6r 3                               ; address to return
001BF6r 3  A5 rr                        lda cib
001BF8r 3  18                           clc
001BF9r 3  65 rr                        adc toin        ; LSB
001BFBr 3  85 rr                        sta tmp1
001BFDr 3  85 rr                        sta tmp2
001BFFr 3  95 02                        sta 2,x
001C01r 3               
001C01r 3  A5 rr                        lda cib+1
001C03r 3  65 rr                        adc toin+1      ; MSB
001C05r 3  85 rr                        sta tmp1+1
001C07r 3  85 rr                        sta tmp2+1
001C09r 3  95 03                        sta 3,x
001C0Br 3               
001C0Br 3                               ; Calculate the address where the input buffer ends plus 1, so
001C0Br 3                               ; we can compare it with TOIN, which is an index
001C0Br 3  A5 rr                        lda cib
001C0Dr 3  18                           clc
001C0Er 3  65 rr                        adc ciblen
001C10r 3  85 rr                        sta tmp3
001C12r 3  A5 rr                        lda cib+1
001C14r 3  65 rr                        adc ciblen+1
001C16r 3  85 rr                        sta tmp3+1
001C18r 3               
001C18r 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001C18r 3  64 rr                        stz tmptos+1
001C1Ar 3               @loop:
001C1Ar 3                               ; If we are at the end of the string, quit
001C1Ar 3  A5 rr                        lda tmp2
001C1Cr 3  C5 rr                        cmp tmp3
001C1Er 3  D0 06                        bne @not_empty
001C20r 3               
001C20r 3  A5 rr                        lda tmp2+1
001C22r 3  C5 rr                        cmp tmp3+1
001C24r 3  F0 1D                        beq @eol
001C26r 3               @not_empty:
001C26r 3                               ; We have to do this the hard way. In fact, it's really
001C26r 3                               ; hard since if we are dealing with a SPACE, the standard
001C26r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001C26r 3                               ; Tali would choke on tabs between words. For details, see
001C26r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001C26r 3                               ; In theory, we could make this faster by defining a delimiter
001C26r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001C26r 3                               ; avoiding having to test every time. However, somebody,
001C26r 3                               ; somewhere might want to parse a zero-delimited list. Since
001C26r 3                               ; any byte value could be chosen for that, we just test for
001C26r 3                               ; a space every single time for the moment.
001C26r 3  B2 rr                        lda (tmp2)
001C28r 3               
001C28r 3  A4 rr                        ldy tmptos
001C2Ar 3  C0 20                        cpy #AscSP
001C2Cr 3  D0 07                        bne @not_whitespace
001C2Er 3               
001C2Er 3                               ; The delimiter is a space, so we're looking for all
001C2Er 3                               ; whitespace
001C2Er 3  20 rr rr                     jsr is_whitespace
001C31r 3  90 02                        bcc @not_whitespace
001C33r 3  80 0C                        bra @found_delimiter
001C35r 3               
001C35r 3               @not_whitespace:
001C35r 3                               ; The delimiter is not a space, so we're looking for
001C35r 3                               ; whatever it is
001C35r 3  C5 rr                        cmp tmptos
001C37r 3  F0 08                        beq @found_delimiter
001C39r 3               
001C39r 3                               ; Not a delimiter, next character
001C39r 3  E6 rr                        inc tmp2
001C3Br 3  D0 DD                        bne @loop
001C3Dr 3  E6 rr                        inc tmp2+1
001C3Fr 3  80 D9                        bra @loop
001C41r 3               
001C41r 3               @found_delimiter:
001C41r 3                               ; Increase the offset: If we've found a delimiter, we want
001C41r 3                               ; TOIN to point to the character after it, not the delimiter
001C41r 3                               ; itself
001C41r 3  E6 rr                        inc tmptos+1
001C43r 3               @eol:
001C43r 3                               ; The length of the new string is tmp2-tmp1
001C43r 3  A5 rr                        lda tmp2
001C45r 3  38                           sec
001C46r 3  E5 rr                        sbc tmp1
001C48r 3  95 00                        sta 0,x
001C4Ar 3               
001C4Ar 3  A5 rr                        lda tmp2+1
001C4Cr 3  E5 rr                        sbc tmp1+1
001C4Er 3  95 01                        sta 1,x
001C50r 3               
001C50r 3                               ; The new offset is tmp2-cib
001C50r 3  A5 rr                        lda tmp2
001C52r 3  38                           sec
001C53r 3  E5 rr                        sbc cib
001C55r 3  85 rr                        sta toin
001C57r 3  A5 rr                        lda tmp2+1
001C59r 3  E5 rr                        sbc cib+1
001C5Br 3  85 rr                        sta toin+1
001C5Dr 3               
001C5Dr 3                               ; Add in the delimiter
001C5Dr 3  A5 rr                        lda toin
001C5Fr 3  18                           clc
001C60r 3  65 rr                        adc tmptos+1
001C62r 3  85 rr                        sta toin
001C64r 3  A5 rr                        lda toin+1
001C66r 3  69 00                        adc #0          ; we only need the carry
001C68r 3  85 rr                        sta toin+1
001C6Ar 3               @done:
001C6Ar 3               z_parse_name:
001C6Ar 3  60           z_parse:        rts
001C6Br 3               
001C6Br 3               
001C6Br 3               
001C6Br 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001C6Br 3               ; ## "pick"  auto  ANS core ext
001C6Br 3                       ; """https://forth-standard.org/standard/core/PICK
001C6Br 3                       ; Take the u-th element out of the stack and put it on TOS,
001C6Br 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001C6Br 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001C6Br 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001C6Br 3                       ; """
001C6Br 3               
001C6Br 3               xt_pick:
001C6Br 3                               ; Checking for underflow is difficult because it depends on
001C6Br 3                               ; which element we want to grab. We could probably figure
001C6Br 3                               ; something out, but it wouldn't work with underflow stripping
001C6Br 3                               ; Since using PICK is considered poor form anyway, we just
001C6Br 3                               ; leave it as it is
001C6Br 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001C6Dr 3  8A                           txa
001C6Er 3  75 00                        adc 0,x
001C70r 3  A8                           tay
001C71r 3               
001C71r 3  B9 02 00                     lda 0002,y
001C74r 3  95 00                        sta 0,x
001C76r 3  B9 03 00                     lda 0003,y
001C79r 3  95 01                        sta 1,x
001C7Br 3               
001C7Br 3  60           z_pick:         rts
001C7Cr 3               
001C7Cr 3               
001C7Cr 3               
001C7Cr 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001C7Cr 3               ; ## "+"  auto  ANS core
001C7Cr 3                       ; """https://forth-standard.org/standard/core/Plus"""
001C7Cr 3               xt_plus:
001C7Cr 3  20 rr rr                     jsr underflow_2
001C7Fr 3               
001C7Fr 3  18                           clc
001C80r 3  B5 00                        lda 0,x         ; LSB
001C82r 3  75 02                        adc 2,x
001C84r 3  95 02                        sta 2,x
001C86r 3               
001C86r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001C88r 3  75 03                        adc 3,x
001C8Ar 3  95 03                        sta 3,x
001C8Cr 3               
001C8Cr 3  E8                           inx
001C8Dr 3  E8                           inx
001C8Er 3               
001C8Er 3  60           z_plus:         rts
001C8Fr 3               
001C8Fr 3               
001C8Fr 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001C8Fr 3               ; ## "+!"  auto  ANS core
001C8Fr 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001C8Fr 3               xt_plus_store:
001C8Fr 3  20 rr rr                     jsr underflow_2
001C92r 3               
001C92r 3                               ; move address to tmp1 so we can work with it
001C92r 3  B5 00                        lda 0,x
001C94r 3  85 rr                        sta tmp1
001C96r 3  B5 01                        lda 1,x
001C98r 3  85 rr                        sta tmp1+1
001C9Ar 3               
001C9Ar 3  A0 00                        ldy #0          ; LSB
001C9Cr 3  B1 rr                        lda (tmp1),y
001C9Er 3  18                           clc
001C9Fr 3  75 02                        adc 2,x
001CA1r 3  91 rr                        sta (tmp1),y
001CA3r 3               
001CA3r 3  C8                           iny             ; MSB
001CA4r 3  B1 rr                        lda (tmp1),y
001CA6r 3  75 03                        adc 3,x
001CA8r 3  91 rr                        sta (tmp1),y
001CAAr 3               
001CAAr 3  E8                           inx
001CABr 3  E8                           inx
001CACr 3  E8                           inx
001CADr 3  E8                           inx
001CAEr 3               
001CAEr 3  60           z_plus_store:   rts
001CAFr 3               
001CAFr 3               
001CAFr 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001CAFr 3               ; ## "postpone"  auto   ANS core
001CAFr 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001CAFr 3                       ; Add the compilation behavior of a word to a new word at
001CAFr 3                       ; compile time. If the word that follows it is immediate, include
001CAFr 3                       ; it so that it will be compiled when the word being defined is
001CAFr 3                       ; itself used for a new word. Tricky, but very useful.
001CAFr 3                       ;
001CAFr 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001CAFr 3                       ; on the Data Stack). This means we cannot build words with
001CAFr 3                       ; "jsr xt_postpone, jsr <word>" directly.
001CAFr 3                       ; """
001CAFr 3               
001CAFr 3               xt_postpone:
001CAFr 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001CB2r 3               
001CB2r 3                               ; if there was no word provided, complain and quit
001CB2r 3  B5 00                        lda 0,x
001CB4r 3  15 01                        ora 1,x
001CB6r 3  D0 05                        bne @1
001CB8r 3               
001CB8r 3  A9 05                        lda #err_noname
001CBAr 3  4C rr rr                     jmp error
001CBDr 3               @1:
001CBDr 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001CC0r 3               
001CC0r 3                               ; if word not in Dictionary, complain and quit
001CC0r 3  D0 05                        bne @2
001CC2r 3  A9 05                        lda #err_noname
001CC4r 3  4C rr rr                     jmp error
001CC7r 3               
001CC7r 3               @2:
001CC7r 3                               ; keep a copy of nt for later
001CC7r 3  B5 00                        lda 0,x
001CC9r 3  85 rr                        sta tmp1
001CCBr 3  B5 01                        lda 1,x
001CCDr 3  85 rr                        sta tmp1+1
001CCFr 3               
001CCFr 3                               ; We need the xt instead of the nt
001CCFr 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001CD2r 3               
001CD2r 3                               ; See if this is an immediate word. This is easier
001CD2r 3                               ; with nt than with xt. The status byte of the word
001CD2r 3                               ; is nt+1
001CD2r 3  E6 rr                        inc tmp1
001CD4r 3  D0 02                        bne @3
001CD6r 3  E6 rr                        inc tmp1+1
001CD8r 3               @3:
001CD8r 3  B2 rr                        lda (tmp1)
001CDAr 3  29 04                        and #IM         ; mask all but Intermediate flag
001CDCr 3  F0 05                        beq @not_immediate
001CDEr 3               
001CDEr 3                               ; We're immediate, so instead of executing it right now, we
001CDEr 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001CDEr 3                               ; takes us back to the original caller
001CDEr 3  20 rr rr                     jsr xt_compile_comma
001CE1r 3  80 0A                        bra @done
001CE3r 3               
001CE3r 3               @not_immediate:
001CE3r 3                               ; This is not an immediate word, so we enact "deferred
001CE3r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001CE3r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001CE3r 3                               ; a subroutine jump to COMPILE,
001CE3r 3  20 rr rr                     jsr xt_literal
001CE6r 3               
001CE6r 3                               ; Last, compile COMPILE,
001CE6r 3  A0 rr                        ldy #>xt_compile_comma
001CE8r 3  A9 rr                        lda #<xt_compile_comma
001CEAr 3  20 rr rr                     jsr cmpl_subroutine
001CEDr 3               @done:
001CEDr 3  60           z_postpone:     rts
001CEEr 3               
001CEEr 3               
001CEEr 3               
001CEEr 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001CEEr 3               ; ## "previous"  auto  ANS search ext
001CEEr 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001CEEr 3               
001CEEr 3               xt_previous:
001CEEr 3  20 rr rr                     jsr xt_get_order
001CF1r 3  20 rr rr                     jsr xt_nip
001CF4r 3  20 rr rr                     jsr xt_one_minus
001CF7r 3  20 rr rr                     jsr xt_set_order
001CFAr 3               
001CFAr 3  60           z_previous:     rts
001CFBr 3               
001CFBr 3               
001CFBr 3               
001CFBr 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001CFBr 3               ; ## "?"  tested  ANS tools
001CFBr 3                       ; """https://forth-standard.org/standard/tools/q
001CFBr 3                       ;
001CFBr 3                       ; Only used interactively. Since humans are so slow, we
001CFBr 3                       ; save size and just go for the subroutine jumps
001CFBr 3                       ; """
001CFBr 3               xt_question:
001CFBr 3                               ; FETCH takes care of underflow check
001CFBr 3  20 rr rr                     jsr xt_fetch
001CFEr 3  20 rr rr                     jsr xt_dot
001D01r 3               
001D01r 3  60           z_question:     rts
001D02r 3               
001D02r 3               
001D02r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001D02r 3               ; ## "?dup"  auto  ANS core
001D02r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001D02r 3               
001D02r 3               xt_question_dup:
001D02r 3  20 rr rr                     jsr underflow_1
001D05r 3               
001D05r 3                               ; Check if TOS is zero
001D05r 3  B5 00                        lda 0,x
001D07r 3  15 01                        ora 1,x
001D09r 3  F0 0A                        beq @done
001D0Br 3               
001D0Br 3                               ; not zero, duplicate
001D0Br 3  CA                           dex
001D0Cr 3  CA                           dex
001D0Dr 3  B5 02                        lda 2,x
001D0Fr 3  95 00                        sta 0,x
001D11r 3  B5 03                        lda 3,x
001D13r 3  95 01                        sta 1,x
001D15r 3               @done:
001D15r 3  60           z_question_dup: rts
001D16r 3               
001D16r 3               
001D16r 3               
001D16r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001D16r 3               ; ## "r@"  auto  ANS core
001D16r 3                       ; """https://forth-standard.org/standard/core/RFetch
001D16r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001D16r 3                       ; work normally as well
001D16r 3                       ;
001D16r 3                       ; An alternative way to write this word
001D16r 3                       ; would be to access the elements on the stack directly like 2R@
001D16r 3                       ; does, these versions should be compared at some point.
001D16r 3                       ; """
001D16r 3               xt_r_fetch:
001D16r 3                               ; get the return address
001D16r 3  7A                           ply             ; LSB
001D17r 3  84 rr                        sty tmp1
001D19r 3  7A                           ply             ; MSB
001D1Ar 3               
001D1Ar 3                               ; --- CUT FOR NATIVE COMPILE ---
001D1Ar 3               
001D1Ar 3                               ; get the actual top of Return Stack
001D1Ar 3  CA                           dex
001D1Br 3  CA                           dex
001D1Cr 3               
001D1Cr 3  68                           pla             ; LSB
001D1Dr 3  95 00                        sta 0,x
001D1Fr 3  68                           pla             ; MSB
001D20r 3  95 01                        sta 1,x
001D22r 3               
001D22r 3                               ; now we have to put that value back
001D22r 3  48                           pha
001D23r 3  B5 00                        lda 0,x
001D25r 3  48                           pha
001D26r 3               
001D26r 3                               ; --- CUT FOR NATIVE COMPILE ---
001D26r 3               
001D26r 3                               ; restore return value
001D26r 3  5A                           phy             ; MSB
001D27r 3  A4 rr                        ldy tmp1
001D29r 3  5A                           phy             ; LSB
001D2Ar 3               
001D2Ar 3  60           z_r_fetch:      rts
001D2Br 3               
001D2Br 3               
001D2Br 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001D2Br 3               ; ## "r>"  auto  ANS core
001D2Br 3                       ; """https://forth-standard.org/standard/core/Rfrom
001D2Br 3                       ; Move Top of Return Stack to Top of Data Stack.
001D2Br 3                       ;
001D2Br 3                       ; We have to move
001D2Br 3                       ; the RTS address out of the way first. This word is handled
001D2Br 3                       ; differently for native and and subroutine compilation, see COMPILE,
001D2Br 3                       ; This is a compile-only word
001D2Br 3                       ; """
001D2Br 3               
001D2Br 3               xt_r_from:
001D2Br 3                               ; Rescue the address of the return jump that is currently
001D2Br 3                               ; on top of the Return Stack. If this word is natively
001D2Br 3                               ; compiled, this is a total waste of time
001D2Br 3  68                           pla             ; LSB
001D2Cr 3  85 rr                        sta tmptos
001D2Er 3  7A                           ply             ; MSB
001D2Fr 3               
001D2Fr 3                               ; --- CUT FOR NATIVE CODING ---
001D2Fr 3               
001D2Fr 3  CA                           dex
001D30r 3  CA                           dex
001D31r 3               
001D31r 3                               ; now we can access the actual data
001D31r 3               
001D31r 3  68                           pla             ; LSB
001D32r 3  95 00                        sta 0,x
001D34r 3  68                           pla             ; MSB
001D35r 3  95 01                        sta 1,x
001D37r 3               
001D37r 3                               ; --- CUT FOR NATIVE CODING ---
001D37r 3               
001D37r 3                               ; restore the return address
001D37r 3  5A                           phy             ; MSB
001D38r 3  A5 rr                        lda tmptos
001D3Ar 3  48                           pha             ; LSB
001D3Br 3               
001D3Br 3  60           z_r_from:       rts
001D3Cr 3               
001D3Cr 3               
001D3Cr 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001D3Cr 3               ; ## "r>input"  tested  Tali Forth
001D3Cr 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001D3Cr 3                       ; and toin from the Return Stack.
001D3Cr 3                       ;
001D3Cr 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001D3Cr 3                       ; """
001D3Cr 3               
001D3Cr 3               xt_r_to_input:
001D3Cr 3               
001D3Cr 3                               ; We arrive here with the return address on the top of the
001D3Cr 3                               ; 65c02's stack. We need to move it out of the way first
001D3Cr 3  68                           pla
001D3Dr 3  85 rr                        sta tmp1
001D3Fr 3  68                           pla
001D40r 3  85 rr                        sta tmp1+1
001D42r 3               
001D42r 3                               ; This assumes that insrc is the first of eight bytes and
001D42r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001D42r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001D42r 3                               ; of the Return Stack.
001D42r 3  A0 00                        ldy #0
001D44r 3               @loop:
001D44r 3  68                           pla
001D45r 3  99 rr rr                     sta insrc,y
001D48r 3  C8                           iny
001D49r 3  C0 08                        cpy #8
001D4Br 3  D0 F7                        bne @loop
001D4Dr 3               
001D4Dr 3                               ; Restore address for return jump
001D4Dr 3  A5 rr                        lda tmp1+1
001D4Fr 3  48                           pha
001D50r 3  A5 rr                        lda tmp1
001D52r 3  48                           pha
001D53r 3               
001D53r 3  60           z_r_to_input: 	rts
001D54r 3               
001D54r 3               
001D54r 3               
001D54r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001D54r 3               ; ## "recurse"  auto  ANS core
001D54r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001D54r 3                       ;
001D54r 3                       ; This word may not be natively compiled
001D54r 3                       ; """
001D54r 3               
001D54r 3               xt_recurse:
001D54r 3                               ; The whole routine amounts to compiling a reference to
001D54r 3                               ; the word that is being compiled. First, we save the JSR
001D54r 3                               ; instruction
001D54r 3  A0 00                        ldy #0
001D56r 3               
001D56r 3  A9 20                        lda #$20        ; opcode for JSR
001D58r 3  91 rr                        sta (cp),y
001D5Ar 3  C8                           iny
001D5Br 3               
001D5Br 3                               ; Next, we save the LSB and MSB of the xt of the word
001D5Br 3                               ; we are currently working on. We first need to see if
001D5Br 3                               ; WORKWORD has the nt (: started the word) or the
001D5Br 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001D5Br 3  24 rr                        bit status
001D5Dr 3  70 0C                        bvs @nt_in_workword
001D5Fr 3               
001D5Fr 3                               ; This is a special :NONAME word. Just copy the xt
001D5Fr 3                               ; from WORKWORD into the dictionary.
001D5Fr 3  A5 rr                        lda workword
001D61r 3  91 rr                        sta (cp),y
001D63r 3  C8                           iny
001D64r 3  A5 rr                        lda workword+1
001D66r 3  91 rr                        sta (cp),y
001D68r 3  C8                           iny
001D69r 3  80 1B                        bra @update_cp
001D6Br 3               
001D6Br 3               @nt_in_workword:
001D6Br 3                               ; This is a regular : word, so the xt is four bytes down
001D6Br 3                               ; from the nt which we saved in WORKWORD. We could probably
001D6Br 3                               ; use NAME>INT here but this is going to be faster, and
001D6Br 3                               ; fast counts with recursion
001D6Br 3  A5 rr                        lda workword            ; LSB
001D6Dr 3  18                           clc
001D6Er 3  69 04                        adc #4
001D70r 3  85 rr                        sta tmp1
001D72r 3  A5 rr                        lda workword+1          ; MSB
001D74r 3  69 00                        adc #0
001D76r 3  85 rr                        sta tmp1+1
001D78r 3               
001D78r 3  B2 rr                        lda (tmp1)
001D7Ar 3  91 rr                        sta (cp),y
001D7Cr 3  5A                           phy
001D7Dr 3  A0 01                        ldy #1
001D7Fr 3  B1 rr                        lda (tmp1),y
001D81r 3  7A                           ply
001D82r 3  C8                           iny
001D83r 3  91 rr                        sta (cp),y
001D85r 3  C8                           iny
001D86r 3               
001D86r 3               @update_cp:
001D86r 3  98                           tya
001D87r 3  18                           clc
001D88r 3  65 rr                        adc cp
001D8Ar 3  85 rr                        sta cp
001D8Cr 3  90 02                        bcc @done
001D8Er 3  E6 rr                        inc cp+1
001D90r 3               @done:
001D90r 3  60           z_recurse:      rts
001D91r 3               
001D91r 3               
001D91r 3               
001D91r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001D91r 3               ; ## "refill"  tested  ANS core ext
001D91r 3                       ; """https://forth-standard.org/standard/core/REFILL
001D91r 3                       ; Attempt to fill the input buffer from the input source, returning
001D91r 3                       ; a true flag if successful. When the input source is the user input
001D91r 3                       ; device, attempt to receive input into the terminal input buffer. If
001D91r 3                       ; successful, make the result the input buffer, set >IN to zero, and
001D91r 3                       ; return true. Receipt of a line containing no characters is considered
001D91r 3                       ; successful. If there is no input available from the current input
001D91r 3                       ; source, return false. When the input source is a string from EVALUATE,
001D91r 3                       ; return false and perform no other action." See
001D91r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001D91r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001D91r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001D91r 3                       ; entire block as a 1024 byte string.
001D91r 3                       ; """"
001D91r 3               
001D91r 3               xt_refill:
001D91r 3                               ; Get input source from SOURCE-ID. This is an
001D91r 3                               ; optimized version of a subroutine jump to SOURCE-ID
001D91r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001D93r 3  D0 2D                        bne @src_not_kbd
001D95r 3               
001D95r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001D95r 3                               ; with ACCEPT, which wants the address of the current input
001D95r 3                               ; buffer NOS and the max number of characters to accept TOS
001D95r 3  CA                           dex
001D96r 3  CA                           dex
001D97r 3  CA                           dex
001D98r 3  CA                           dex
001D99r 3               
001D99r 3  A5 rr                        lda cib                 ; address of CIB is NOS
001D9Br 3  95 02                        sta 2,x
001D9Dr 3  A5 rr                        lda cib+1
001D9Fr 3  95 03                        sta 3,x
001DA1r 3               
001DA1r 3  64 rr                        stz ciblen              ; go in with empty buffer
001DA3r 3  64 rr                        stz ciblen+1
001DA5r 3               
001DA5r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001DA7r 3  95 00                        sta 0,x
001DA9r 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001DABr 3               
001DABr 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001DAEr 3               
001DAEr 3                               ; ACCEPT returns the number of characters accepted, which
001DAEr 3                               ; belong in CIBLEN
001DAEr 3  B5 00                        lda 0,x
001DB0r 3  85 rr                        sta ciblen
001DB2r 3  B5 01                        lda 1,x
001DB4r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001DB6r 3               
001DB6r 3                               ; make >IN point to beginning of buffer
001DB6r 3  64 rr                        stz toin
001DB8r 3  64 rr                        stz toin+1
001DBAr 3               
001DBAr 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001DBCr 3  95 00                        sta 0,x
001DBEr 3  95 01                        sta 1,x
001DC0r 3               
001DC0r 3  80 10                        bra @done
001DC2r 3               
001DC2r 3               @src_not_kbd:
001DC2r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001DC2r 3                               ; memory or a file (remember, no blocks in this version).
001DC2r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001DC2r 3  1A                           inc
001DC3r 3  D0 08                        bne @src_not_string
001DC5r 3               
001DC5r 3                               ; Simply return FALSE flag as per specification
001DC5r 3  CA                           dex
001DC6r 3  CA                           dex
001DC7r 3  74 00                        stz 0,x
001DC9r 3  74 01                        stz 1,x
001DCBr 3               
001DCBr 3  80 05                        bra z_refill
001DCDr 3               
001DCDr 3               @src_not_string:
001DCDr 3                               ; Since we don't have blocks, this must mean that we are trying
001DCDr 3                               ; to read from a file. However, we don't have files yet, so we
001DCDr 3                               ; report an error and jump to ABORT.
001DCDr 3  A9 01                        lda #err_badsource
001DCFr 3  4C rr rr                     jmp error
001DD2r 3               @done:
001DD2r 3  60           z_refill:       rts
001DD3r 3               
001DD3r 3               
001DD3r 3               
001DD3r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001DD3r 3               ; ## "repeat"  auto  ANS core
001DD3r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001DD3r 3               
001DD3r 3               xt_repeat:
001DD3r 3                               ; Run again first
001DD3r 3  20 rr rr                     jsr xt_again
001DD6r 3               
001DD6r 3                               ; Stuff HERE in for the branch address
001DD6r 3                               ; to get out of the loop
001DD6r 3  20 rr rr                     jsr xt_here
001DD9r 3  20 rr rr                     jsr xt_swap
001DDCr 3  20 rr rr                     jsr xt_store
001DDFr 3               
001DDFr 3  60           z_repeat:       rts
001DE0r 3               
001DE0r 3               
001DE0r 3               
001DE0r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001DE0r 3               ; ## "]"  auto  ANS core
001DE0r 3                       ; """https://forth-standard.org/standard/right-bracket
001DE0r 3                       ; This is an immediate word.
001DE0r 3                       ; """
001DE0r 3               xt_right_bracket:
001DE0r 3  A9 FF                        lda #$FF
001DE2r 3  85 rr                        sta state
001DE4r 3  85 rr                        sta state+1
001DE6r 3               z_right_bracket:
001DE6r 3  60                           rts
001DE7r 3               
001DE7r 3               
001DE7r 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001DE7r 3               ; ## "root-wordlist"  tested  Tali Editor
001DE7r 3               xt_root_wordlist:
001DE7r 3  CA                           dex             ; The WID for the Root wordlist is 3.
001DE8r 3  CA                           dex
001DE9r 3  A9 03                        lda #3
001DEBr 3  95 00                        sta 0,x
001DEDr 3  74 01                        stz 1,x
001DEFr 3               
001DEFr 3               z_root_wordlist:
001DEFr 3  60                           rts
001DF0r 3               
001DF0r 3               
001DF0r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001DF0r 3               ; ## "rot"  auto  ANS core
001DF0r 3                       ; """https://forth-standard.org/standard/core/ROT
001DF0r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001DF0r 3                       ; on top!
001DF0r 3                       ; """
001DF0r 3               
001DF0r 3               xt_rot:
001DF0r 3  20 rr rr                     jsr underflow_3
001DF3r 3               
001DF3r 3  B4 05                        ldy 5,x         ; MSB first
001DF5r 3  B5 03                        lda 3,x
001DF7r 3  95 05                        sta 5,x
001DF9r 3  B5 01                        lda 1,x
001DFBr 3  95 03                        sta 3,x
001DFDr 3  94 01                        sty 1,x
001DFFr 3               
001DFFr 3  B4 04                        ldy 4,x         ; LSB next
001E01r 3  B5 02                        lda 2,x
001E03r 3  95 04                        sta 4,x
001E05r 3  B5 00                        lda 0,x
001E07r 3  95 02                        sta 2,x
001E09r 3  94 00                        sty 0,x
001E0Br 3               
001E0Br 3  60           z_rot:          rts
001E0Cr 3               
001E0Cr 3               
001E0Cr 3               
001E0Cr 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
001E0Cr 3               ; ## "rshift"  auto  ANS core
001E0Cr 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
001E0Cr 3               xt_rshift:
001E0Cr 3  20 rr rr                     jsr underflow_2
001E0Fr 3               
001E0Fr 3                               ; We shift maximal by 16 bits, mask everything else
001E0Fr 3  B5 00                        lda 0,x
001E11r 3  29 0F                        and #%00001111
001E13r 3  F0 08                        beq @done               ; if 0 shifts, quit
001E15r 3               
001E15r 3  A8                           tay
001E16r 3               @loop:
001E16r 3  56 03                        lsr 3,x
001E18r 3  76 02                        ror 2,x
001E1Ar 3  88                           dey
001E1Br 3  D0 F9                        bne @loop
001E1Dr 3               @done:
001E1Dr 3  E8                           inx
001E1Er 3  E8                           inx
001E1Fr 3               
001E1Fr 3  60           z_rshift:       rts
001E20r 3               
001E20r 3               
001E20r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001E20r 3               ; ## "s\""  auto  ANS core
001E20r 3                       ; """https://forth-standard.org/standard/core/Seq
001E20r 3                       ; Store address and length of string given, returning ( addr u ).
001E20r 3                       ; ANS core claims this is compile-only, but the file set expands it
001E20r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001E20r 3                       ; are evil. We follow general usage. This is just like S" except
001E20r 3                       ; that it allows for some special escaped characters.
001E20r 3                       ; """
001E20r 3               
001E20r 3               xt_s_backslash_quote:
001E20r 3                               ; tmp2 will be used to determine if we are handling
001E20r 3                               ; escaped characters or not. In this case, we are,
001E20r 3                               ; so set it to $FF (the upper byte will be used to
001E20r 3                               ; determine if we just had a \ and the next character
001E20r 3                               ; needs to be modifed as an escaped character).
001E20r 3  A9 FF                        lda #$FF
001E22r 3  85 rr                        sta tmp2
001E24r 3  64 rr                        stz tmp2+1
001E26r 3               
001E26r 3                               ; Now that the flag is set, jump into s_quote to process
001E26r 3                               ; the string.
001E26r 3  20 rr rr                     jsr s_quote_start
001E29r 3               @done:
001E29r 3               z_s_backslash_quote:
001E29r 3  60                           rts
001E2Ar 3               
001E2Ar 3               
001E2Ar 3               ; This is a helper function for s_backslash_quote to convert a character
001E2Ar 3               ; from ASCII to the corresponding hex value, eg 'F'->15
001E2Ar 3               convert_hex_value:
001E2Ar 3               
001E2Ar 3  C9 41                cmp #'A'
001E2Cr 3  90 07                bcc @digit
001E2Er 3               
001E2Er 3                       ; It's A-F
001E2Er 3  29 DF                and #$DF                ; Make it uppercase.
001E30r 3  38                   sec
001E31r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
001E33r 3  80 03                bra @done
001E35r 3               
001E35r 3               @digit:
001E35r 3                       ; It's 0-9
001E35r 3  38                   sec
001E36r 3  E9 30                sbc #'0'
001E38r 3               
001E38r 3               @done:
001E38r 3  60                   rts
001E39r 3               
001E39r 3               
001E39r 3               
001E39r 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
001E39r 3               ; ## "search-wordlist" auto ANS search
001E39r 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
001E39r 3               
001E39r 3               xt_search_wordlist:
001E39r 3  20 rr rr                     jsr underflow_3
001E3Cr 3               
001E3Cr 3                               ; Set up tmp1 with the wordlist indicated by wid
001E3Cr 3                               ; on the stack. Start by putting the base address
001E3Cr 3                               ; of the wordlists in tmp2.
001E3Cr 3  A5 rr                        lda up
001E3Er 3  18                           clc
001E3Fr 3  69 06                        adc #wordlists_offset
001E41r 3  85 rr                        sta tmp2
001E43r 3  A5 rr                        lda up+1
001E45r 3  69 00                        adc #0          ; Adding carry
001E47r 3  85 rr                        sta tmp2+1
001E49r 3               
001E49r 3                               ; Add the wid (in cells) to the base address.
001E49r 3  B5 00                        lda 0,x
001E4Br 3  0A                           asl             ; Convert wid to offset in cells (x2)
001E4Cr 3  65 rr                        adc tmp2
001E4Er 3  85 rr                        sta tmp2
001E50r 3  90 02                        bcc @1
001E52r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
001E54r 3               
001E54r 3                               ; tmp2 now holds the address of the dictionary pointer
001E54r 3                               ; for the given wordlist.
001E54r 3               @1:
001E54r 3                               ; Remove the wid from the stack.
001E54r 3  E8                           inx
001E55r 3  E8                           inx
001E56r 3               
001E56r 3                               ; check for special case of an empty string (length zero)
001E56r 3  B5 00                        lda 0,x
001E58r 3  15 01                        ora 1,x
001E5Ar 3  D0 03                        bne @check_wordlist
001E5Cr 3  4C rr rr                     jmp @done
001E5Fr 3               
001E5Fr 3               @check_wordlist:
001E5Fr 3                               ; Check for special case of empty wordlist
001E5Fr 3                               ; (dictionary pointer, in tmp2, is 0)
001E5Fr 3  A5 rr                        lda tmp2
001E61r 3  05 rr                        ora tmp2+1
001E63r 3  D0 03                        bne @have_string
001E65r 3  4C rr rr                     jmp @done
001E68r 3               
001E68r 3               @have_string:
001E68r 3                               ; set up first loop iteration
001E68r 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
001E6Ar 3  85 rr                        sta tmp1
001E6Cr 3               
001E6Cr 3  E6 rr                        inc tmp2                ; Move to the upper byte
001E6Er 3  D0 02                        bne @2
001E70r 3  E6 rr                        inc tmp2+1
001E72r 3               @2:
001E72r 3  B2 rr                        lda (tmp2)
001E74r 3  85 rr                        sta tmp1+1
001E76r 3               
001E76r 3                               ; Reuse tmp2 to hold the address of the mystery string.
001E76r 3  B5 02                        lda 2,x                 ; Address of mystery string
001E78r 3  85 rr                        sta tmp2
001E7Ar 3  B5 03                        lda 3,x
001E7Cr 3  85 rr                        sta tmp2+1
001E7Er 3               
001E7Er 3               @loop:
001E7Er 3                               ; first quick test: Are strings the same length?
001E7Er 3  B2 rr                        lda (tmp1)
001E80r 3  D5 00                        cmp 0,x
001E82r 3  D0 7B                        bne @next_entry
001E84r 3               
001E84r 3               @compare_string:
001E84r 3                               ; are the same length, so we now have to compare each
001E84r 3                               ; character
001E84r 3               
001E84r 3                               ; second quick test: Is the first character the same?
001E84r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001E86r 3               
001E86r 3                               ; Lowercase the incoming charcter.
001E86r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001E88r 3  B0 07                        bcs @compare_first
001E8Ar 3  C9 41                        cmp #$41        ; ASCII 'A'
001E8Cr 3  90 03                        bcc @compare_first
001E8Er 3               
001E8Er 3                               ; An uppercase letter has been located.  Make it
001E8Er 3                               ; lowercase.
001E8Er 3  18                           clc
001E8Fr 3  69 20                        adc #$20
001E91r 3               
001E91r 3               @compare_first:
001E91r 3  A0 08                        ldy #8          ; Offset in nt to name
001E93r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001E95r 3  D0 68                        bne @next_entry
001E97r 3               
001E97r 3                               ; string length are the same and the first character is the
001E97r 3                               ; same. If the length of the string is 1, we're already done
001E97r 3  B5 00                        lda 0,x
001E99r 3  3A                           dec
001E9Ar 3  F0 2C                        beq @success
001E9Cr 3               
001E9Cr 3                               ; No such luck: The strings are the same length and the first
001E9Cr 3                               ; char is the same, but the word is more than one char long.
001E9Cr 3                               ; So we suck it up and compare every single character. We go
001E9Cr 3                               ; from back to front, because words like CELLS and CELL+ would
001E9Cr 3                               ; take longer otherwise. We can also shorten the loop by one
001E9Cr 3                               ; because we've already compared the first char.
001E9Cr 3               
001E9Cr 3                               ; The string of the word we're testing against is 8 bytes down
001E9Cr 3  A5 rr                        lda tmp1
001E9Er 3  48                           pha             ; Preserve tmp1 on the return stack.
001E9Fr 3  18                           clc
001EA0r 3  69 08                        adc #8
001EA2r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001EA4r 3  A5 rr                        lda tmp1+1
001EA6r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001EA7r 3  69 00                        adc #0          ; we only need the carry
001EA9r 3  85 rr                        sta tmp1+1
001EABr 3               
001EABr 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001EADr 3  88                           dey
001EAEr 3               
001EAEr 3               @string_loop:
001EAEr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001EB0r 3               
001EB0r 3                               ; Lowercase the incoming charcter.
001EB0r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001EB2r 3  B0 07                        bcs @check_char
001EB4r 3  C9 41                        cmp #$41        ; ASCII 'A'
001EB6r 3  90 03                        bcc @check_char
001EB8r 3               
001EB8r 3                               ; An uppercase letter has been located.  Make it
001EB8r 3                               ; lowercase.
001EB8r 3  18                           clc
001EB9r 3  69 20                        adc #$20
001EBBr 3               @check_char:
001EBBr 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001EBDr 3  D0 3A                        bne @next_entry_tmp1
001EBFr 3               
001EBFr 3  88                           dey
001EC0r 3  D0 EC                        bne @string_loop
001EC2r 3               
001EC2r 3               @success_tmp1:
001EC2r 3  68                           pla             ; Restore tmp1 from the return stack.
001EC3r 3  85 rr                        sta tmp1+1
001EC5r 3  68                           pla
001EC6r 3  85 rr                        sta tmp1
001EC8r 3               
001EC8r 3               @success:
001EC8r 3                               ; The strings match. Drop the count and put correct nt TOS
001EC8r 3  E8                           inx
001EC9r 3  E8                           inx
001ECAr 3  A5 rr                        lda tmp1
001ECCr 3  95 00                        sta 0,x
001ECEr 3  A5 rr                        lda tmp1+1
001ED0r 3  95 01                        sta 1,x
001ED2r 3               
001ED2r 3                               ; Change the nt into an xt, but save a copy of the nt
001ED2r 3                               ; to look up whether the word is immediate or not.
001ED2r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001ED5r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001ED8r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001EDBr 3               
001EDBr 3  A0 00                        ldy #0                  ; Prepare flag
001EDDr 3               
001EDDr 3                               ; The flags are in the second byte of the header
001EDDr 3  F6 00                        inc 0,x
001EDFr 3  D0 02                        bne @3
001EE1r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001EE3r 3               @3:
001EE3r 3  A1 00                        lda (0,x)               ; ( xt char )
001EE5r 3  29 04                        and #IM
001EE7r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001EE9r 3               
001EE9r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001EEBr 3  95 00                        sta 0,x
001EEDr 3  95 01                        sta 1,x
001EEFr 3  80 28                        bra @done_nodrop
001EF1r 3               
001EF1r 3               @immediate:
001EF1r 3  A9 01                        lda #1                  ; We're immediate, return 1
001EF3r 3  95 00                        sta 0,x
001EF5r 3  74 01                        stz 1,x
001EF7r 3               
001EF7r 3  80 20                        bra @done_nodrop
001EF9r 3               
001EF9r 3               @next_entry_tmp1:
001EF9r 3  68                           pla             ; Restore tmp1 from the return stack.
001EFAr 3  85 rr                        sta tmp1+1
001EFCr 3  68                           pla
001EFDr 3  85 rr                        sta tmp1
001EFFr 3               @next_entry:
001EFFr 3                               ; Not the same, so we get the next word. Next header
001EFFr 3                               ; address is two bytes down
001EFFr 3  A0 02                        ldy #2
001F01r 3  B1 rr                        lda (tmp1),y
001F03r 3  48                           pha
001F04r 3  C8                           iny
001F05r 3  B1 rr                        lda (tmp1),y
001F07r 3  85 rr                        sta tmp1+1
001F09r 3  68                           pla
001F0Ar 3  85 rr                        sta tmp1
001F0Cr 3               
001F0Cr 3                               ; If we got a zero, we've walked the whole Dictionary and
001F0Cr 3                               ; return as a failure, otherwise try again
001F0Cr 3  05 rr                        ora tmp1+1
001F0Er 3  F0 03                        beq @fail_done
001F10r 3  4C rr rr                     jmp @loop
001F13r 3               
001F13r 3               @fail_done:
001F13r 3  74 02                        stz 2,x         ; failure flag
001F15r 3  74 03                        stz 3,x
001F17r 3               @done:
001F17r 3  E8                           inx
001F18r 3  E8                           inx
001F19r 3               @done_nodrop:
001F19r 3               z_search_wordlist:
001F19r 3  60                           rts
001F1Ar 3               
001F1Ar 3               
001F1Ar 3               
001F1Ar 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
001F1Ar 3               ; ## "see" tested  ANS tools
001F1Ar 3                       ; """https://forth-standard.org/standard/tools/SEE
001F1Ar 3                       ; SEE takes the name of a word and prints its name token (nt),
001F1Ar 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
001F1Ar 3                       ; code and disassembles it.
001F1Ar 3                       ; """
001F1Ar 3               
001F1Ar 3               xt_see:
001F1Ar 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
001F1Dr 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
001F20r 3               
001F20r 3                               ; If we got back a zero we don't know that word and so we quit
001F20r 3                               ; with an error
001F20r 3  B5 00                        lda 0,x
001F22r 3  15 01                        ora 1,x
001F24r 3  D0 05                        bne @1
001F26r 3               
001F26r 3  A9 05                        lda #err_noname
001F28r 3  4C rr rr                     jmp error
001F2Br 3               @1:
001F2Br 3  20 rr rr                     jsr xt_cr
001F2Er 3               
001F2Er 3                               ; We have a legal word, so let's get serious. Save the current
001F2Er 3                               ; number base and use hexadecimal instead.
001F2Er 3  A5 rr                        lda base
001F30r 3  48                           pha
001F31r 3  20 rr rr                     jsr xt_hex
001F34r 3               
001F34r 3  A9 0A                        lda #str_see_nt
001F36r 3  20 rr rr                     jsr print_string_no_lf
001F39r 3               
001F39r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001F3Cr 3  20 rr rr                     jsr xt_u_dot
001F3Fr 3  20 rr rr                     jsr xt_space            ; ( nt )
001F42r 3               
001F42r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001F45r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001F48r 3               
001F48r 3  A9 0B                        lda #str_see_xt
001F4Ar 3  20 rr rr                     jsr print_string_no_lf
001F4Dr 3               
001F4Dr 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
001F50r 3  20 rr rr                     jsr xt_u_dot
001F53r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
001F56r 3               
001F56r 3                               ; We print letters for flags and then later follow it with 1 or
001F56r 3                               ; 0 to mark if which flag is set
001F56r 3  A9 09                        lda #str_see_flags
001F58r 3  20 rr rr                     jsr print_string_no_lf
001F5Br 3               
001F5Br 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
001F5Er 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
001F61r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
001F64r 3               
001F64r 3  B5 00                        lda 0,x
001F66r 3               
001F66r 3                               ; This is crude, but for the moment it is good enough
001F66r 3  A0 06                        ldy #6                  ; Not all bits are used
001F68r 3               @flag_loop:
001F68r 3  48                           pha
001F69r 3  29 01                        and #%00000001
001F6Br 3  18                           clc
001F6Cr 3  69 30                        adc #$30                ; ASCII "0"
001F6Er 3  20 rr rr                     jsr emit_a
001F71r 3  20 rr rr                     jsr xt_space
001F74r 3               
001F74r 3  68                           pla
001F75r 3  6A                           ror                     ; Next flag
001F76r 3               
001F76r 3  88                           dey
001F77r 3  D0 EF                        bne @flag_loop
001F79r 3               
001F79r 3  20 rr rr                     jsr xt_cr
001F7Cr 3               
001F7Cr 3  E8                           inx
001F7Dr 3  E8                           inx                     ; ( nt xt )
001F7Er 3               
001F7Er 3                               ; Figure out the size
001F7Er 3  A9 0C                        lda #str_see_size
001F80r 3  20 rr rr                     jsr print_string_no_lf
001F83r 3               
001F83r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001F86r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
001F89r 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
001F8Cr 3  20 rr rr                     jsr xt_decimal
001F8Fr 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
001F92r 3  20 rr rr                     jsr xt_hex
001F95r 3  20 rr rr                     jsr xt_cr
001F98r 3               
001F98r 3                               ; Dump hex and disassemble
001F98r 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
001F9Br 3  20 rr rr                     jsr xt_dump
001F9Er 3  20 rr rr                     jsr xt_cr
001FA1r 3  20 rr rr                     jsr xt_disasm
001FA4r 3               
001FA4r 3  68                           pla
001FA5r 3  85 rr                        sta base
001FA7r 3               
001FA7r 3  60           z_see:          rts
001FA8r 3               
001FA8r 3               
001FA8r 3               
001FA8r 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
001FA8r 3               ; ## "set-current" auto ANS search
001FA8r 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
001FA8r 3               
001FA8r 3               xt_set_current:
001FA8r 3  20 rr rr                     jsr underflow_1
001FABr 3               
001FABr 3                               ; Save the value from the data stack.
001FABr 3  A0 04                        ldy #current_offset
001FADr 3  B5 00                        lda 0,x         ; CURRENT is byte variable
001FAFr 3  91 rr                        sta (up),y      ; so only the LSB is used.
001FB1r 3               
001FB1r 3  E8                           inx
001FB2r 3  E8                           inx
001FB3r 3               
001FB3r 3  60           z_set_current:  rts
001FB4r 3               
001FB4r 3               
001FB4r 3               
001FB4r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
001FB4r 3               ; ## "set-order" auto ANS search
001FB4r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
001FB4r 3               
001FB4r 3               xt_set_order:
001FB4r 3                               ; Test for -1 TOS
001FB4r 3  A9 FF                        lda #$FF
001FB6r 3  D5 01                        cmp 1,x
001FB8r 3  D0 12                        bne @start
001FBAr 3  D5 00                        cmp 0,x
001FBCr 3  D0 0E                        bne @start
001FBEr 3               
001FBEr 3                               ; There is a -1 TOS.  Replace it with the default
001FBEr 3                               ; search order, which is just the FORTH-WORDLIST.
001FBEr 3  CA                           dex             ; Make room for the count.
001FBFr 3  CA                           dex
001FC0r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
001FC2r 3  A9 03                        lda #3
001FC4r 3  95 02                        sta 2,x
001FC6r 3  74 01                        stz 1,x         ; Count is 1.
001FC8r 3  A9 01                        lda #1
001FCAr 3  95 00                        sta 0,x
001FCCr 3               
001FCCr 3                               ; Continue processing with ( forth-wordlist 1 -- )
001FCCr 3               @start:
001FCCr 3                               ; Set #ORDER - the number of wordlists in the search order.
001FCCr 3  A0 1E                        ldy #num_order_offset
001FCEr 3  B5 00                        lda 0,x
001FD0r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
001FD2r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
001FD4r 3                                               ; Only the low byte is saved in tmp1 as
001FD4r 3                                               ; only 8 wordlists are allowed.
001FD4r 3               
001FD4r 3  E8                           inx             ; Drop the count off the data stack.
001FD5r 3  E8                           inx
001FD6r 3               
001FD6r 3                               ; Check if there are zero wordlists.
001FD6r 3  A5 rr                        lda tmp1
001FD8r 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
001FDAr 3               
001FDAr 3                               ; Move the wordlist ids from the data stack to the search order.
001FDAr 3  A0 1F                        ldy #search_order_offset
001FDCr 3               @loop:
001FDCr 3                               ; Move one wordlist id over into the search order.
001FDCr 3  B5 00                        lda 0,x         ; The search order is a byte array
001FDEr 3  91 rr                        sta (up),y      ; so only save the LSB
001FE0r 3  C8                           iny
001FE1r 3               
001FE1r 3                               ; Remove it from the data stack.
001FE1r 3  E8                           inx
001FE2r 3  E8                           inx
001FE3r 3               
001FE3r 3                               ; See if that was the last one to process (first in the list).
001FE3r 3  C6 rr                        dec tmp1
001FE5r 3  D0 F5                        bne @loop
001FE7r 3               
001FE7r 3               @done:
001FE7r 3  60           z_set_order:    rts
001FE8r 3               
001FE8r 3               
001FE8r 3               
001FE8r 3               
001FE8r 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001FE8r 3               ; ## "s""  auto  ANS core
001FE8r 3                       ; """https://forth-standard.org/standard/core/Sq
001FE8r 3                       ; Store address and length of string given, returning ( addr u ).
001FE8r 3                       ; ANS core claims this is compile-only, but the file set expands it
001FE8r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001FE8r 3                       ; are evil. We follow general usage.
001FE8r 3                       ;
001FE8r 3                       ; Can also be realized as
001FE8r 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
001FE8r 3                       ; but it is used so much we want it in code.
001FE8r 3                       ; """
001FE8r 3               
001FE8r 3               xt_s_quote:
001FE8r 3                               ; tmp2 will be used to determine if we are handling
001FE8r 3                               ; escaped characters or not.  In this case, we are
001FE8r 3                               ; not, so set it to zero.
001FE8r 3  64 rr                        stz tmp2
001FEAr 3  64 rr                        stz tmp2+1
001FECr 3               
001FECr 3               s_quote_start:
001FECr 3                               ; Make room on the data stack for the address.
001FECr 3  CA                           dex
001FEDr 3  CA                           dex
001FEEr 3                               ; Make room on the data stack for the count.
001FEEr 3  CA                           dex
001FEFr 3  CA                           dex
001FF0r 3               
001FF0r 3                               ; Put a jmp over the string data with address to be filled
001FF0r 3                               ; in later.
001FF0r 3  A9 4C                        lda #$4C
001FF2r 3  20 rr rr                     jsr cmpl_a
001FF5r 3               
001FF5r 3                               ; Address to be filled in later, just use $4C for the moment
001FF5r 3  20 rr rr                     jsr cmpl_a
001FF8r 3  20 rr rr                     jsr cmpl_a
001FFBr 3               
001FFBr 3                               ; Save the current value of HERE on the data stack for the
001FFBr 3                               ; address of the string.
001FFBr 3  A5 rr                        lda cp
001FFDr 3  95 02                        sta 2,x
001FFFr 3  A5 rr                        lda cp+1
002001r 3  95 03                        sta 3,x
002003r 3               
002003r 3               @savechars_loop:
002003r 3                               ; Start saving the string into the dictionary up to the
002003r 3                               ; ending double quote. First, check to see if the input
002003r 3                               ; buffer is empty.
002003r 3  A5 rr                        lda toin+1              ; MSB
002005r 3  C5 rr                        cmp ciblen+1
002007r 3  90 2A                        bcc @input_fine         ; unsigned comparison
002009r 3               
002009r 3  A5 rr                        lda toin                ; LSB
00200Br 3  C5 rr                        cmp ciblen
00200Dr 3  90 24                        bcc @input_fine
00200Fr 3               
00200Fr 3                               ; Input buffer is empty. Refill it. Refill calls accept,
00200Fr 3                               ; which uses tmp2 and tmp3. Save and restore them.
00200Fr 3  A5 rr                        lda tmp2
002011r 3  48                           pha
002012r 3  A5 rr                        lda tmp2+1
002014r 3  48                           pha
002015r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
002017r 3  48                           pha
002018r 3               
002018r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
00201Br 3               
00201Br 3  68                           pla
00201Cr 3  85 rr                        sta tmp3
00201Er 3  68                           pla
00201Fr 3  85 rr                        sta tmp2+1
002021r 3  68                           pla
002022r 3  85 rr                        sta tmp2
002024r 3               
002024r 3                               ; Check result of refill.
002024r 3  B5 00                        lda 0,x
002026r 3  15 01                        ora 1,x
002028r 3  D0 05                        bne @refill_ok
00202Ar 3               
00202Ar 3                               ; Something when wrong with refill.
00202Ar 3  A9 06                        lda #err_refill
00202Cr 3  4C rr rr                     jmp error
00202Fr 3               
00202Fr 3               @refill_ok:
00202Fr 3                               ; Remove the refill flag from the data stack.
00202Fr 3  E8                           inx
002030r 3  E8                           inx
002031r 3               
002031r 3                               ; For refill success, jump back up to the empty check, just in
002031r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
002031r 3                               ; input)
002031r 3  80 D0                        bra @savechars_loop
002033r 3               
002033r 3               @input_fine:
002033r 3                               ; There should be at least one valid char to use.
002033r 3                               ; Calculate it's address at CIB+TOIN into tmp1
002033r 3  A5 rr                        lda cib
002035r 3  18                           clc
002036r 3  65 rr                        adc toin        ; LSB
002038r 3  85 rr                        sta tmp1
00203Ar 3  A5 rr                        lda cib+1
00203Cr 3  65 rr                        adc toin+1      ; MSB
00203Er 3  85 rr                        sta tmp1+1
002040r 3               
002040r 3                               ; Get the character
002040r 3  B2 rr                        lda (tmp1)
002042r 3               
002042r 3                               ; Check to see if we are handling escaped characters.
002042r 3  24 rr                        bit tmp2
002044r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
002046r 3  4C rr rr                     jmp @regular_char
002049r 3               
002049r 3               @handle_escapes:
002049r 3                               ; We are handling escaped characters.  See if we have
002049r 3                               ; already seen the backslash.
002049r 3  24 rr                        bit tmp2+1
00204Br 3  30 03                        bmi @escaped
00204Dr 3  4C rr rr                     jmp @not_escaped
002050r 3               
002050r 3               @escaped:
002050r 3               
002050r 3                               ; We have seen a backslash (previous character). Check to see if
002050r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
002050r 3                               ; be clear in that case )
002050r 3  70 22                        bvs @check_esc_chars
002052r 3               
002052r 3                               ; We are in the middle of a \x sequence. Check to see if we
002052r 3                               ; are on the first or second digit.
002052r 3  A9 01                        lda #1
002054r 3  24 rr                        bit tmp2+1
002056r 3  D0 10                        bne @esc_x_second_digit
002058r 3               
002058r 3                               ; First digit.
002058r 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
00205Ar 3  B2 rr                        lda (tmp1)  ; Get the char again.
00205Cr 3               
00205Cr 3                               ; Convert to hex
00205Cr 3  20 rr rr                     jsr convert_hex_value
00205Fr 3               
00205Fr 3                               ; This is the upper nybble, so move it up.
00205Fr 3  0A                           asl
002060r 3  0A                           asl
002061r 3  0A                           asl
002062r 3  0A                           asl
002063r 3  85 rr                        sta tmp3    ; Save it for later.
002065r 3  4C rr rr                     jmp @next_character
002068r 3               
002068r 3               @esc_x_second_digit:
002068r 3               
002068r 3                               ; We are on the second hex digit of a \x sequence. Clear the
002068r 3                               ; escaped character flag (because we are handling it right
002068r 3                               ; here)
002068r 3  64 rr                        stz tmp2+1
00206Ar 3  B2 rr                        lda (tmp1)
00206Cr 3               
00206Cr 3                               ; Convert to hex, combine with value in tmp3
00206Cr 3  20 rr rr                     jsr convert_hex_value
00206Fr 3  05 rr                        ora tmp3
002071r 3               
002071r 3  4C rr rr                     jmp @save_character
002074r 3               
002074r 3               @check_esc_chars:
002074r 3                               ; Clear the escaped character flag (because we are
002074r 3                               ; handling it right here)
002074r 3  64 rr                        stz tmp2+1
002076r 3               
002076r 3                               ; Process the escaped character
002076r 3               @check_esc_a:
002076r 3  C9 61                        cmp #'a'
002078r 3  D0 05                        bne @check_esc_b
00207Ar 3               
00207Ar 3                               ; BEL (ASCII value 7)
00207Ar 3  A9 07                        lda #7
00207Cr 3  4C rr rr                     jmp @save_character
00207Fr 3               
00207Fr 3               @check_esc_b:
00207Fr 3  C9 62                        cmp #'b'
002081r 3  D0 05                        bne @check_esc_e
002083r 3               
002083r 3                               ; Backspace (ASCII value 8)
002083r 3  A9 08                        lda #8
002085r 3  4C rr rr                     jmp @save_character
002088r 3               
002088r 3               @check_esc_e:
002088r 3  C9 65                        cmp #'e'
00208Ar 3  D0 04                        bne @check_esc_f
00208Cr 3               
00208Cr 3                               ; ESC (ASCII value 27)
00208Cr 3  A9 1B                        lda #27
00208Er 3  80 75                        bra @save_character
002090r 3               
002090r 3               @check_esc_f:
002090r 3  C9 66                        cmp #'f'
002092r 3  D0 04                        bne @check_esc_l
002094r 3               
002094r 3                               ; FF (ASCII value 12)
002094r 3  A9 0C                        lda #12
002096r 3  80 6D                        bra @save_character
002098r 3               
002098r 3               @check_esc_l:
002098r 3  C9 6C                        cmp #'l'
00209Ar 3  D0 04                        bne @check_esc_m
00209Cr 3               
00209Cr 3                               ; LF (ASCII value 10)
00209Cr 3  A9 0A                        lda #10
00209Er 3  80 65                        bra @save_character
0020A0r 3               
0020A0r 3               @check_esc_m:
0020A0r 3                               ; This one is not like the others because we save two
0020A0r 3                               ; characters
0020A0r 3  C9 6D                        cmp #'m'
0020A2r 3  D0 09                        bne @check_esc_n
0020A4r 3               
0020A4r 3                               ; CR/LF pair (ASCII values 13, 10)
0020A4r 3  A9 0D                        lda #13
0020A6r 3  20 rr rr                     jsr cmpl_a
0020A9r 3  A9 0A                        lda #10
0020ABr 3  80 58                        bra @save_character
0020ADr 3               
0020ADr 3               @check_esc_n:
0020ADr 3  C9 6E                        cmp #'n'
0020AFr 3  D0 04                        bne @check_esc_q
0020B1r 3               
0020B1r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
0020B1r 3  A9 0A                        lda #10
0020B3r 3  80 50                        bra @save_character
0020B5r 3               
0020B5r 3               @check_esc_q:
0020B5r 3  C9 71                        cmp #'q'
0020B7r 3  D0 04                        bne @check_esc_r
0020B9r 3               
0020B9r 3                               ; Double quote (ASCII value 34)
0020B9r 3  A9 22                        lda #34
0020BBr 3  80 48                        bra @save_character
0020BDr 3               
0020BDr 3               @check_esc_r:
0020BDr 3  C9 72                        cmp #'r'
0020BFr 3  D0 04                        bne @check_esc_t
0020C1r 3               
0020C1r 3                               ; CR (ASCII value 13)
0020C1r 3  A9 0D                        lda #13
0020C3r 3  80 40                        bra @save_character
0020C5r 3               
0020C5r 3               @check_esc_t:
0020C5r 3  C9 74                        cmp #'t'
0020C7r 3  D0 04                        bne @check_esc_v
0020C9r 3               
0020C9r 3                               ; Horizontal TAB (ASCII value 9)
0020C9r 3  A9 09                        lda #9
0020CBr 3  80 38                        bra @save_character
0020CDr 3               
0020CDr 3               @check_esc_v:
0020CDr 3  C9 76                        cmp #'v'
0020CFr 3  D0 04                        bne @check_esc_z
0020D1r 3               
0020D1r 3                               ; Vertical TAB (ASCII value 11)
0020D1r 3  A9 0B                        lda #11
0020D3r 3  80 30                        bra @save_character
0020D5r 3               
0020D5r 3               @check_esc_z:
0020D5r 3  C9 7A                        cmp #'z'
0020D7r 3  D0 04                        bne @check_esc_quote
0020D9r 3               
0020D9r 3                               ; NULL (ASCII value 0)
0020D9r 3  A9 00                        lda #0
0020DBr 3  80 28                        bra @save_character
0020DDr 3               
0020DDr 3               @check_esc_quote:
0020DDr 3  C9 22                        cmp #$22
0020DFr 3  D0 04                        bne @check_esc_x
0020E1r 3               
0020E1r 3                               ; Double quote (ASCII value 34)
0020E1r 3  A9 22                        lda #34
0020E3r 3  80 20                        bra @save_character
0020E5r 3               
0020E5r 3               @check_esc_x:
0020E5r 3  C9 78                        cmp #'x'
0020E7r 3  D0 06                        bne @check_esc_backslash
0020E9r 3               
0020E9r 3                               ; This one is difficult. We need to get the next TWO
0020E9r 3                               ; characters (which might require a refill in the middle)
0020E9r 3                               ; and combine them as two hex digits. We do this by
0020E9r 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
0020E9r 3                               ; and using bit 0 to keep track of which digit we are on.
0020E9r 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
0020EBr 3  85 rr                        sta tmp2+1
0020EDr 3  80 19                        bra @next_character
0020EFr 3               
0020EFr 3               @check_esc_backslash:
0020EFr 3  C9 5C                        cmp #$5C
0020F1r 3  D0 04                        bne @not_escaped
0020F3r 3               
0020F3r 3                               ; Backslash (ASCII value 92)
0020F3r 3  A9 5C                        lda #92
0020F5r 3  80 0E                        bra @save_character
0020F7r 3               
0020F7r 3               @not_escaped:
0020F7r 3                               ; Check for the backslash to see if we should escape
0020F7r 3                               ; the next char.
0020F7r 3  C9 5C                        cmp #$5C        ; The backslash char
0020F9r 3  D0 06                        bne @regular_char
0020FBr 3               
0020FBr 3                               ; We found a backslash.  Don't save anyhing, but set
0020FBr 3                               ; a flag (in tmp2+1) to handle the next char. We don't
0020FBr 3                               ; try to get the next char here as it may require a
0020FBr 3                               ; refill of the input buffer.
0020FBr 3  A9 FF                        lda #$FF
0020FDr 3  85 rr                        sta tmp2+1
0020FFr 3  80 07                        bra @next_character
002101r 3               
002101r 3               @regular_char:
002101r 3                               ; Check if the current character is the end of the string.
002101r 3  C9 22                        cmp #$22        ; ASCII for "
002103r 3  F0 0C                        beq @found_string_end
002105r 3               
002105r 3               @save_character:
002105r 3                               ; If we didn't reach the end of the string, compile this
002105r 3                               ; character into the dictionary
002105r 3  20 rr rr                     jsr cmpl_a
002108r 3               
002108r 3               @next_character:
002108r 3                               ; Move on to the next character.
002108r 3  E6 rr                        inc toin
00210Ar 3  D0 02                        bne @savechars_loop_longjump
00210Cr 3  E6 rr                        inc toin+1
00210Er 3               
00210Er 3               @savechars_loop_longjump:
00210Er 3  4C rr rr                     jmp @savechars_loop
002111r 3               
002111r 3               @found_string_end:
002111r 3                               ; Use up the delimiter.
002111r 3  E6 rr                        inc toin
002113r 3  D0 02                        bne @1
002115r 3  E6 rr                        inc toin+1
002117r 3               @1:
002117r 3                               ; Calculate the length of the string, which is the
002117r 3                               ; difference between cp and the address of the start
002117r 3                               ; of the string (currently saved on the stack).
002117r 3  A5 rr                        lda cp
002119r 3  38                           sec
00211Ar 3  F5 02                        sbc 2,x
00211Cr 3  95 00                        sta 0,x         ; LSB
00211Er 3  A5 rr                        lda cp+1
002120r 3  F5 03                        sbc 3,x
002122r 3  95 01                        sta 1,x         ; MSB
002124r 3               
002124r 3                               ; Update the address of the jump-over jmp instruction.
002124r 3                               ; First determine location of jmp instructions address.
002124r 3                               ; It should be 2 bytes before the start of the string.
002124r 3                               ; Compute it into tmp1, which is no longer being used.
002124r 3  B5 02                        lda 2,x
002126r 3  38                           sec
002127r 3  E9 02                        sbc #2
002129r 3  85 rr                        sta tmp1
00212Br 3  B5 03                        lda 3,x
00212Dr 3  E9 00                        sbc #0          ; Propagate borrow
00212Fr 3  85 rr                        sta tmp1+1
002131r 3               
002131r 3                               ; Update the address of the jump to HERE.
002131r 3  A5 rr                        lda cp
002133r 3  92 rr                        sta (tmp1)
002135r 3  A0 01                        ldy #1
002137r 3  A5 rr                        lda cp+1
002139r 3  91 rr                        sta (tmp1),y
00213Br 3               
00213Br 3                               ; What happens next depends on the state (which is bad, but
00213Br 3                               ; that's the way it works at the moment). If we are
00213Br 3                               ; interpretating, we save the string to a transient buffer
00213Br 3                               ; and return that address (used for file calls, see
00213Br 3                               ; https://forth-standard.org/standard/file/Sq . If we're
00213Br 3                               ; compiling, we just need SLITERAL
00213Br 3  A5 rr                        lda state
00213Dr 3  05 rr                        ora state+1             ; paranoid
00213Fr 3  F0 03                        beq @done
002141r 3               
002141r 3                               ; Jump into the middle of the sliteral word, after the
002141r 3                               ; string data has been compiled into the dictionary,
002141r 3                               ; because we've already done that step.
002141r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
002144r 3               
002144r 3               @done:
002144r 3  60           z_s_quote:      rts
002145r 3               
002145r 3               
002145r 3               
002145r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
002145r 3               ; ## "s>d"  auto  ANS core
002145r 3                       ; """https://forth-standard.org/standard/core/StoD"""
002145r 3               
002145r 3               xt_s_to_d:
002145r 3  20 rr rr                     jsr underflow_1
002148r 3               
002148r 3  CA                           dex
002149r 3  CA                           dex
00214Ar 3  74 00                        stz 0,x
00214Cr 3  74 01                        stz 1,x
00214Er 3               
00214Er 3  B5 03                        lda 3,x
002150r 3  10 04                        bpl @done
002152r 3               
002152r 3                               ; negative, extend sign
002152r 3  D6 00                        dec 0,x
002154r 3  D6 01                        dec 1,x
002156r 3               @done:
002156r 3  60           z_s_to_d:       rts
002157r 3               
002157r 3               
002157r 3               
002157r 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
002157r 3               ; ## "save-buffers"  tested  ANS block
002157r 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
002157r 3               
002157r 3               xt_save_buffers:
002157r 3                               ; Check the buffer status
002157r 3  A0 2C                        ldy #buffstatus_offset
002159r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00215Br 3  C9 03                        cmp #3          ; LSB is needed.
00215Dr 3  D0 12                        bne @done       ; Either not used or not dirty = done!
00215Fr 3               
00215Fr 3                               ; We need to save the block.
00215Fr 3  20 rr rr                     jsr xt_blkbuffer
002162r 3  20 rr rr                     jsr xt_buffblocknum
002165r 3  20 rr rr                     jsr xt_fetch
002168r 3  20 rr rr                     jsr xt_block_write
00216Br 3               
00216Br 3                               ; Mark the buffer as clean now.
00216Br 3  A9 01                        lda #1
00216Dr 3  A0 2C                        ldy #buffstatus_offset
00216Fr 3  91 rr                        sta (up),y
002171r 3               
002171r 3               @done:
002171r 3  60           z_save_buffers: rts
002172r 3               
002172r 3               
002172r 3               
002172r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
002172r 3               ; ## "scr"  auto  ANS block ext
002172r 3                       ; """https://forth-standard.org/standard/block/SCR"""
002172r 3               xt_scr:
002172r 3                               ; SCR is at UP + scr_offset
002172r 3  CA                           dex
002173r 3  CA                           dex
002174r 3  18                           clc
002175r 3  A5 rr                        lda up
002177r 3  69 02                        adc #scr_offset ; Add offset
002179r 3  95 00                        sta 0,x
00217Br 3  A5 rr                        lda up+1
00217Dr 3  69 00                        adc #0          ; Adding carry
00217Fr 3  95 01                        sta 1,x
002181r 3               
002181r 3  60           z_scr:          rts
002182r 3               
002182r 3               
002182r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002182r 3               ; ## "search"   auto  ANS string
002182r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002182r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002182r 3                       ; addr1 u1). If a match is found the flag will be true and
002182r 3                       ; addr3 will have the address of the start of the match and u3 will have
002182r 3                       ; the number of characters remaining from the match point to the end
002182r 3                       ; of the original string1. If a match is not found, the flag will be
002182r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002182r 3                       ; """
002182r 3               
002182r 3               xt_search:
002182r 3  20 rr rr                     jsr underflow_4
002185r 3               
002185r 3                               ; ANS says if the second string is a zero-length string it
002185r 3                               ; automatically matches.
002185r 3  B5 00                        lda 0,x
002187r 3  15 01                        ora 1,x
002189r 3  D0 0B                        bne @start_search
00218Br 3               
00218Br 3                               ; The second string is a zero length string.  Just remove
00218Br 3                               ; the second string and put a true flag.
00218Br 3  E8                           inx             ; Remove u2
00218Cr 3  E8                           inx
00218Dr 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
00218Fr 3  95 00                        sta 0,x
002191r 3  95 01                        sta 1,x
002193r 3  4C rr rr                     jmp z_search
002196r 3               
002196r 3               @start_search:
002196r 3                               ; Put an offset (starting at zero) on the stack.
002196r 3  20 rr rr                     jsr xt_zero
002199r 3               
002199r 3               @search_loop:
002199r 3                               ; We stop (not found) when u2 + offset > u1
002199r 3                               ; Calculate u2+offset into tmp1
002199r 3  18                           clc
00219Ar 3  B5 00                        lda 0,x
00219Cr 3  75 02                        adc 2,x
00219Er 3  85 rr                        sta tmp1
0021A0r 3  B5 01                        lda 1,x
0021A2r 3  75 03                        adc 3,x
0021A4r 3               
0021A4r 3               
0021A4r 3                               ; Compare to u1. Start with the high byte
0021A4r 3  D5 07                        cmp 7,x
0021A6r 3  90 12                        bcc @init_comparison ; Obviously less
0021A8r 3  D0 06                        bne @not_found
0021AAr 3               
0021AAr 3                               ; The upper address byte matched - check the lower byte
0021AAr 3                               ; Load u1 first so we can use just a carry to check.
0021AAr 3  B5 06                        lda 6,x
0021ACr 3  C5 rr                        cmp tmp1
0021AEr 3  B0 0A                        bcs @init_comparison
0021B0r 3               
0021B0r 3               @not_found:
0021B0r 3                               ; The substring isn't in the main string.
0021B0r 3                               ; Return just the main string and a false flag.
0021B0r 3  E8                           inx             ; Remove offset
0021B1r 3  E8                           inx
0021B2r 3  E8                           inx             ; Remove u2
0021B3r 3  E8                           inx
0021B4r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
0021B6r 3  74 01                        stz 1,x
0021B8r 3  80 66                        bra z_search
0021BAr 3               
0021BAr 3               @init_comparison:
0021BAr 3                               ; Use tmp1 to hold address in string 1.
0021BAr 3                               ; Use tmp2 to hold address in string 2.
0021BAr 3                               ; Use tmp3 to hold the number of characters left to check.
0021BAr 3               
0021BAr 3                               ; Compute the starting address in string 1
0021BAr 3                               ; as addr1 + offset
0021BAr 3  18                           clc
0021BBr 3  B5 08                        lda 8,x
0021BDr 3  75 00                        adc 0,x
0021BFr 3  85 rr                        sta tmp1
0021C1r 3  B5 09                        lda 9,x
0021C3r 3  75 01                        adc 1,x
0021C5r 3  85 rr                        sta tmp1+1
0021C7r 3               
0021C7r 3                               ; The starting address in string 2 is just addr2.
0021C7r 3  B5 04                        lda 4,x
0021C9r 3  85 rr                        sta tmp2
0021CBr 3  B5 05                        lda 5,x
0021CDr 3  85 rr                        sta tmp2+1
0021CFr 3               
0021CFr 3                               ; The number of characters to check is u2.
0021CFr 3  B5 02                        lda 2,x
0021D1r 3  85 rr                        sta tmp3
0021D3r 3  B5 03                        lda 3,x
0021D5r 3  85 rr                        sta tmp3+1
0021D7r 3               
0021D7r 3               @comparison_loop:
0021D7r 3                               ; Check to see if the current characters match.
0021D7r 3  B2 rr                        lda (tmp1)
0021D9r 3  D2 rr                        cmp (tmp2)
0021DBr 3  F0 05                        beq @letters_match
0021DDr 3               
0021DDr 3                               ; One of the letters didn't match.
0021DDr 3                               ; Increment the offset and try again.
0021DDr 3  20 rr rr                     jsr xt_one_plus
0021E0r 3  80 B7                        bra @search_loop
0021E2r 3               
0021E2r 3               @letters_match:
0021E2r 3                               ; The letters match.  Advance the pointers until the
0021E2r 3                               ; count reaches zero.
0021E2r 3  E6 rr                        inc tmp1
0021E4r 3  D0 02                        bne @1
0021E6r 3  E6 rr                        inc tmp1+1
0021E8r 3               @1:
0021E8r 3  E6 rr                        inc tmp2
0021EAr 3  D0 02                        bne @2
0021ECr 3  E6 rr                        inc tmp2+1
0021EEr 3               @2:
0021EEr 3                               ; Decrement the count of remaining letters to check.
0021EEr 3  A5 rr                        lda tmp3
0021F0r 3  D0 02                        bne @3
0021F2r 3  C6 rr                        dec tmp3+1
0021F4r 3               @3:
0021F4r 3  C6 rr                        dec tmp3
0021F6r 3               
0021F6r 3                               ; Check if we've reached zero.
0021F6r 3  A5 rr                        lda tmp3
0021F8r 3  05 rr                        ora tmp3+1
0021FAr 3  D0 DB                        bne @comparison_loop ; Check the next letter
0021FCr 3               
0021FCr 3                               ; We've run out of letters and they all match!
0021FCr 3                               ; Return (addr1+offset) (u1-offset) true
0021FCr 3                               ; Add offset to addr1.
0021FCr 3  18                           clc
0021FDr 3  B5 00                        lda 0,x
0021FFr 3  75 08                        adc 8,x
002201r 3  95 08                        sta 8,x
002203r 3  B5 01                        lda 1,x
002205r 3  75 09                        adc 9,x
002207r 3  95 09                        sta 9,x
002209r 3               
002209r 3                               ; Subtract offset from u1.
002209r 3  38                           sec
00220Ar 3  B5 06                        lda 6,x
00220Cr 3  F5 00                        sbc 0,x
00220Er 3  95 06                        sta 6,x
002210r 3  B5 07                        lda 7,x
002212r 3  F5 01                        sbc 1,x
002214r 3  95 07                        sta 7,x
002216r 3               
002216r 3                               ; Replace addr2, u2, and offset with a true flag.
002216r 3  E8                           inx             ; drop offset
002217r 3  E8                           inx
002218r 3  E8                           inx             ; drop u2
002219r 3  E8                           inx
00221Ar 3  A9 FF                        lda #$FF
00221Cr 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
00221Er 3  95 01                        sta 1,x
002220r 3               
002220r 3  60           z_search:       rts
002221r 3               
002221r 3               
002221r 3               
002221r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
002221r 3               ; ## ";"  auto  ANS core
002221r 3                       ; """https://forth-standard.org/standard/core/Semi
002221r 3                       ; End the compilation of a new word into the Dictionary.
002221r 3                       ;
002221r 3                       ; When we
002221r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
002221r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
002221r 3                       ; A Forth definition would be (see "Starting Forth"):
002221r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
002221r 3                       ; practice of Gforth, we warn here if a word has been redefined.
002221r 3                       ; """
002221r 3               
002221r 3               xt_semicolon:
002221r 3                               ; Check if this is a : word or a :NONAME word.
002221r 3  24 rr                        bit status
002223r 3  70 11                        bvs @colonword
002225r 3               
002225r 3                               ; This is a :NONAME word - just put an RTS on the end and
002225r 3                               ; the address (held in workword) on the stack.
002225r 3  A9 60                        lda #$60                ; opcode for RTS
002227r 3  20 rr rr                     jsr cmpl_a
00222Ar 3               
00222Ar 3  CA                           dex
00222Br 3  CA                           dex
00222Cr 3  A5 rr                        lda workword
00222Er 3  95 00                        sta 0,x
002230r 3  A5 rr                        lda workword+1
002232r 3  95 01                        sta 1,x
002234r 3  80 45                        bra @semicolon_done
002236r 3               
002236r 3               @colonword:
002236r 3                               ; CP is the byte that will be the address we use in the
002236r 3                               ; header as the end-of-compile address (z_word). This is
002236r 3                               ; six bytes down from the header
002236r 3  A0 06                        ldy #6
002238r 3  A5 rr                        lda cp
00223Ar 3  91 rr                        sta (workword),y
00223Cr 3  C8                           iny
00223Dr 3  A5 rr                        lda cp+1
00223Fr 3  91 rr                        sta (workword),y
002241r 3               
002241r 3                               ; Allocate one further byte and save the RTS instruction
002241r 3                               ; there
002241r 3  A9 60                        lda #$60                ; opcode for RTS
002243r 3  20 rr rr                     jsr cmpl_a
002246r 3               
002246r 3                               ; Before we formally add the word to the Dictionary, we
002246r 3                               ; check to see if it is already present, and if yes, we
002246r 3                               ; warn the user.
002246r 3               
002246r 3                               ; See if word already in Dictionary.
002246r 3                               ; (STATUS bit 7 will be high as CREATE already
002246r 3                               ;  checked for us.)
002246r 3  24 rr                        bit status
002248r 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
00224Ar 3               
00224Ar 3                               ; We start by putting the string of the
00224Ar 3                               ; word we're defining on the stack
00224Ar 3  CA                           dex
00224Br 3  CA                           dex
00224Cr 3  CA                           dex
00224Dr 3  CA                           dex
00224Er 3               
00224Er 3                               ; WORKWORD points to the beginning of the head of our new
00224Er 3                               ; word, where the first byte is the length of the string
00224Er 3                               ; We can't use LATESTNT because we haven't added the new
00224Er 3                               ; word to the Dictionary yet
00224Er 3  B2 rr                        lda (workword)
002250r 3  95 00                        sta 0,x
002252r 3  74 01                        stz 1,x
002254r 3               
002254r 3                               ; Eight bytes below WORKWORD is the actual beginning of
002254r 3                               ; the string
002254r 3  A5 rr                        lda workword
002256r 3  18                           clc
002257r 3  69 08                        adc #8
002259r 3  95 02                        sta 2,x
00225Br 3  A5 rr                        lda workword+1
00225Dr 3  69 00                        adc #0                  ; only want carry
00225Fr 3  95 03                        sta 3,x
002261r 3               
002261r 3                               ; This word is already in the Dictionary, so we print a
002261r 3                               ; warning to the user.
002261r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
002263r 3  20 rr rr                     jsr print_string_no_lf
002266r 3               
002266r 3                               ; Now we print the offending word.
002266r 3  20 rr rr                     jsr xt_type
002269r 3  20 rr rr                     jsr xt_space
00226Cr 3               
00226Cr 3                               ; Clear bit 7 of status (so future words will print message
00226Cr 3                               ; by defaut)
00226Cr 3  A9 80                        lda #%10000000
00226Er 3  14 rr                        trb status
002270r 3               
002270r 3               @new_word:
002270r 3                               ; Let's get this over with. Save beginning of our word
002270r 3                               ; as new last word in the Dictionary
002270r 3  A5 rr                        lda workword
002272r 3  85 rr                        sta dp
002274r 3  A5 rr                        lda workword+1
002276r 3  85 rr                        sta dp+1
002278r 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
00227Br 3                                                       ; CURRENT wordlist.
00227Br 3               @semicolon_done:
00227Br 3                               ; Word definition complete. Return compile flag to zero
00227Br 3                               ; to return to interpret mode
00227Br 3  64 rr                        stz state
00227Dr 3  64 rr                        stz state+1
00227Fr 3               
00227Fr 3  60           z_semicolon:    rts
002280r 3               
002280r 3               
002280r 3               
002280r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
002280r 3               ; ## "sign"  auto  ANS core
002280r 3                       ; """https://forth-standard.org/standard/core/SIGN
002280r 3                       ;
002280r 3                       ; Code based on
002280r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
002280r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
002280r 3                       ; """
002280r 3               
002280r 3               xt_sign:
002280r 3  20 rr rr                     jsr underflow_1
002283r 3               
002283r 3  B5 01                        lda 1,x         ; check MSB of TOS
002285r 3  30 04                        bmi @minus
002287r 3               
002287r 3  E8                           inx
002288r 3  E8                           inx
002289r 3  80 09                        bra @done
00228Br 3               @minus:
00228Br 3  A9 2D                        lda #$2D        ; ASCII for "-"
00228Dr 3  95 00                        sta 0,x         ; overwrite TOS
00228Fr 3  74 01                        stz 1,x         ; paranoid
002291r 3               
002291r 3  20 rr rr                     jsr xt_hold
002294r 3               @done:
002294r 3  60           z_sign:         rts
002295r 3               
002295r 3               
002295r 3               
002295r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
002295r 3               ; ## "/"  auto  ANS core
002295r 3                       ; """https://forth-standard.org/standard/core/Div
002295r 3                       ;
002295r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
002295r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
002295r 3                       ; This code is currently unoptimized. This code without the SLASH
002295r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
002295r 3                       ; """
002295r 3               
002295r 3               xt_slash:
002295r 3                               ; With all the multiplication going on, it would be hard to
002295r 3                               ; make sure that one of our temporary variables is not
002295r 3                               ; overwritten. We make sure that doesn't happen by taking the
002295r 3                               ; hit of pushing the flag to the 65c02's stack
002295r 3  A9 00                        lda #0
002297r 3  48                           pha
002298r 3  80 03                        bra _common
00229Ar 3               
00229Ar 3               xt_slash_mod:
00229Ar 3                               ; Note that /MOD accesses this code
00229Ar 3  A9 FF                        lda #$FF
00229Cr 3  48                           pha             ; falls through to _common
00229Dr 3               
00229Dr 3               _common:
00229Dr 3  20 rr rr                     jsr xt_to_r             ; >R
0022A0r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
0022A3r 3  20 rr rr                     jsr xt_r_from           ; R>
0022A6r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
0022A9r 3               
0022A9r 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
0022A9r 3                               ; $FF is SLASH MOD
0022A9r 3  68                           pla
0022AAr 3  D0 05                        bne @done
0022ACr 3               
0022ACr 3                               ; The following code is for SLASH only
0022ACr 3  20 rr rr                     jsr xt_swap
0022AFr 3  E8                           inx             ; DROP
0022B0r 3  E8                           inx
0022B1r 3               @done:
0022B1r 3               z_slash_mod:
0022B1r 3  60           z_slash:        rts
0022B2r 3               
0022B2r 3               
0022B2r 3               
0022B2r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
0022B2r 3               ; ## "/mod"  auto  ANS core
0022B2r 3                       ; """https://forth-standard.org/standard/core/DivMOD
0022B2r 3                       ;
0022B2r 3                       ; This is a dummy entry, the actual code is shared with SLASH
0022B2r 3                       ; """
0022B2r 3               
0022B2r 3               
0022B2r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
0022B2r 3               ; ## "/string"  auto  ANS string
0022B2r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
0022B2r 3                       ;
0022B2r 3                       ; Forth code is
0022B2r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
0022B2r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
0022B2r 3                       ; TOS from NOS, and then drop TOS
0022B2r 3                       ; """
0022B2r 3               
0022B2r 3               xt_slash_string:
0022B2r 3  20 rr rr                     jsr underflow_3
0022B5r 3               
0022B5r 3  18                           clc             ; 3OS+TOS
0022B6r 3  B5 00                        lda 0,x
0022B8r 3  75 04                        adc 4,x
0022BAr 3  95 04                        sta 4,x
0022BCr 3               
0022BCr 3  B5 01                        lda 1,x
0022BEr 3  75 05                        adc 5,x
0022C0r 3  95 05                        sta 5,x
0022C2r 3               
0022C2r 3  38                           sec             ; NOS-TOS
0022C3r 3  B5 02                        lda 2,x
0022C5r 3  F5 00                        sbc 0,x
0022C7r 3  95 02                        sta 2,x
0022C9r 3               
0022C9r 3  B5 03                        lda 3,x
0022CBr 3  F5 01                        sbc 1,x
0022CDr 3  95 03                        sta 3,x
0022CFr 3               
0022CFr 3  E8                           inx
0022D0r 3  E8                           inx
0022D1r 3               
0022D1r 3  60           z_slash_string: rts
0022D2r 3               
0022D2r 3               
0022D2r 3               
0022D2r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
0022D2r 3               ; ## "sliteral" auto  ANS string
0022D2r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
0022D2r 3                       ; Add the runtime for an existing string.
0022D2r 3                       ; """
0022D2r 3               
0022D2r 3               xt_sliteral:
0022D2r 3  20 rr rr                     jsr underflow_2
0022D5r 3               
0022D5r 3                               ; We can't assume that ( addr u ) of the current string is in
0022D5r 3                               ; a stable area (eg. already in the dictionary.) Copy the
0022D5r 3                               ; string data into the dictionary using move.
0022D5r 3               
0022D5r 3                               ; Put a jmp over the string data with address to be filled
0022D5r 3                               ; in later.
0022D5r 3  A9 4C                        lda #$4C
0022D7r 3  20 rr rr                     jsr cmpl_a
0022DAr 3               
0022DAr 3                               ; Address to be filled in later.
0022DAr 3  20 rr rr                     jsr cmpl_a
0022DDr 3  20 rr rr                     jsr cmpl_a
0022E0r 3               
0022E0r 3                               ; Turn the data stack from ( addr u ) into
0022E0r 3                               ; ( here u addr here u ) so move can be called with
0022E0r 3                               ; the remaining items on the stack ready for processing.
0022E0r 3                               ; Reserve three extra words on the stack.
0022E0r 3  8A                           txa
0022E1r 3  38                           sec
0022E2r 3  E9 06                        sbc #6
0022E4r 3  AA                           tax
0022E5r 3               
0022E5r 3                               ; Move addr down from TOS-4 to TOS-2
0022E5r 3  B5 08                        lda 8,x
0022E7r 3  95 04                        sta 4,x
0022E9r 3  B5 09                        lda 9,x
0022EBr 3  95 05                        sta 5,x
0022EDr 3               
0022EDr 3                               ; Copy u from TOS-3 to TOS
0022EDr 3  B5 06                        lda 6,x
0022EFr 3  95 00                        sta 0,x
0022F1r 3  B5 07                        lda 7,x
0022F3r 3  95 01                        sta 1,x
0022F5r 3               
0022F5r 3                               ; Put HERE into TOS-1 and TOS-4
0022F5r 3  A5 rr                        lda cp
0022F7r 3  95 08                        sta 8,x
0022F9r 3  95 02                        sta 2,x
0022FBr 3  A5 rr                        lda cp+1
0022FDr 3  95 09                        sta 9,x
0022FFr 3  95 03                        sta 3,x
002301r 3               
002301r 3                               ; Copy the string into the dictionary.
002301r 3  20 rr rr                     jsr xt_move
002304r 3               
002304r 3                               ; Update cp.
002304r 3  18                           clc
002305r 3  A5 rr                        lda cp
002307r 3  75 00                        adc 0,x
002309r 3  85 rr                        sta cp
00230Br 3  A5 rr                        lda cp+1
00230Dr 3  75 01                        adc 1,x
00230Fr 3  85 rr                        sta cp+1
002311r 3               
002311r 3                               ; Update the address of the jump-over jmp instruction.
002311r 3                               ; First determine location of jmp instructions address.
002311r 3                               ; It should be 2 bytes before the start of the string.
002311r 3               
002311r 3                               ; Compute it into tmp1, which is no longer being used.
002311r 3  B5 02                        lda 2,x
002313r 3  38                           sec
002314r 3  E9 02                        sbc #2
002316r 3  85 rr                        sta tmp1
002318r 3  B5 03                        lda 3,x
00231Ar 3  E9 00                        sbc #0          ; Propagate borrow
00231Cr 3  85 rr                        sta tmp1+1
00231Er 3               
00231Er 3                               ; Update the address of the jump to HERE.
00231Er 3  A5 rr                        lda cp
002320r 3  92 rr                        sta (tmp1)
002322r 3  A0 01                        ldy #1
002324r 3  A5 rr                        lda cp+1
002326r 3  91 rr                        sta (tmp1),y
002328r 3               
002328r 3                               ; Stack is now ( addr2 u ) where addr2 is the new
002328r 3                               ; location in the dictionary.
002328r 3               
002328r 3               sliteral_const_str:
002328r 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
002328r 3                               ; pushes the new ( addr u ) pair to the Data Stack.
002328r 3                               ; When we're done, the code will look like this:
002328r 3               
002328r 3                               ; xt -->    jmp a
002328r 3                               ;           <string data bytes>
002328r 3                               ;  a -->    jsr sliteral_runtime
002328r 3                               ;           <string address>
002328r 3                               ;           <string length>
002328r 3                               ; rts -->
002328r 3               
002328r 3                               ; This means we'll have to adjust the return address for two
002328r 3                               ; cells, not just one
002328r 3  A0 rr                        ldy #>sliteral_runtime
00232Ar 3  A9 rr                        lda #<sliteral_runtime
00232Cr 3  20 rr rr                     jsr cmpl_subroutine
00232Fr 3               
00232Fr 3                               ; We want to have the address end up as NOS and the length
00232Fr 3                               ; as TOS, so we store the address first
00232Fr 3  B4 03                        ldy 3,x                ; address MSB
002331r 3  B5 02                        lda 2,x                ; address LSB
002333r 3  20 rr rr                     jsr cmpl_word
002336r 3               
002336r 3  B4 01                        ldy 1,x                ; length MSB
002338r 3  B5 00                        lda 0,x                ; length LSB
00233Ar 3  20 rr rr                     jsr cmpl_word
00233Dr 3               
00233Dr 3                               ; clean up and leave
00233Dr 3  E8                           inx
00233Er 3  E8                           inx
00233Fr 3  E8                           inx
002340r 3  E8                           inx
002341r 3               
002341r 3  60           z_sliteral:     rts
002342r 3               
002342r 3               
002342r 3               sliteral_runtime:
002342r 3               
002342r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
002342r 3                       ; the Data Stack. We arrive here with the return address as the
002342r 3                       ; top of Return Stack, which points to the address of the string
002342r 3                       ; """
002342r 3  CA                           dex
002343r 3  CA                           dex
002344r 3  CA                           dex
002345r 3  CA                           dex
002346r 3               
002346r 3                               ; Get the address of the string address off the stack and
002346r 3                               ; increase by one because of the RTS mechanics
002346r 3  68                           pla
002347r 3  85 rr                        sta tmp1        ; LSB of address
002349r 3  68                           pla
00234Ar 3  85 rr                        sta tmp1+1      ; MSB of address
00234Cr 3               
00234Cr 3                               ; Walk through both and save them
00234Cr 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
00234Er 3  B1 rr                        lda (tmp1),y
002350r 3  95 02                        sta 2,x         ; LSB of address
002352r 3  C8                           iny
002353r 3               
002353r 3  B1 rr                        lda (tmp1),y
002355r 3  95 03                        sta 3,x         ; MSB of address
002357r 3  C8                           iny
002358r 3               
002358r 3  B1 rr                        lda (tmp1),y
00235Ar 3  95 00                        sta 0,x         ; LSB of length
00235Cr 3  C8                           iny
00235Dr 3               
00235Dr 3  B1 rr                        lda (tmp1),y
00235Fr 3  95 01                        sta 1,x         ; MSB of length
002361r 3               
002361r 3                               ; restore return address
002361r 3  18                           clc
002362r 3  A5 rr                        lda tmp1
002364r 3  69 04                        adc #4
002366r 3  A8                           tay             ; LSB
002367r 3  A5 rr                        lda tmp1+1
002369r 3  69 00                        adc #0          ; we only need carry
00236Br 3  48                           pha             ; MSB
00236Cr 3  5A                           phy
00236Dr 3               
00236Dr 3  60                           rts
00236Er 3               
00236Er 3               
00236Er 3               
00236Er 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
00236Er 3               ; ## "sm/rem"  auto  ANS core
00236Er 3                       ; """https://forth-standard.org/standard/core/SMDivREM
00236Er 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
00236Er 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
00236Er 3                       ;
00236Er 3                       ; Forth:
00236Er 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
00236Er 3                       ; R> ?NEGATE SWAP
00236Er 3                       ; """
00236Er 3               
00236Er 3               xt_sm_slash_rem:
00236Er 3  20 rr rr                     jsr underflow_3 ; contains double number
002371r 3               
002371r 3                               ; push MSB of high cell of d to Data Stack so we can check
002371r 3                               ; its sign later
002371r 3  B5 03                        lda 3,x
002373r 3  48                           pha
002374r 3               
002374r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
002374r 3                               ; its sign later as well
002374r 3  B5 01                        lda 1,x
002376r 3  55 03                        eor 3,x
002378r 3  48                           pha
002379r 3               
002379r 3                               ; Prepare division by getting absolute of n1 and d
002379r 3  20 rr rr                     jsr xt_abs
00237Cr 3  E8                           inx             ; pretend we pushed n1 to R
00237Dr 3  E8                           inx
00237Er 3               
00237Er 3  20 rr rr                     jsr xt_dabs
002381r 3  CA                           dex
002382r 3  CA                           dex
002383r 3               
002383r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002386r 3               
002386r 3                               ; if the XOR compiled above is negative, negate the
002386r 3                               ; quotient (n3)
002386r 3  68                           pla
002387r 3  10 03                        bpl @1
002389r 3  20 rr rr                     jsr xt_negate
00238Cr 3               @1:
00238Cr 3                               ; if d was negative, negate the remainder (n2)
00238Cr 3  68                           pla
00238Dr 3  10 07                        bpl @done
00238Fr 3               
00238Fr 3  E8                           inx             ; pretend we pushed quotient to R
002390r 3  E8                           inx
002391r 3  20 rr rr                     jsr xt_negate
002394r 3  CA                           dex
002395r 3  CA                           dex
002396r 3               
002396r 3               @done:
002396r 3  60           z_sm_slash_rem: rts
002397r 3               
002397r 3               
002397r 3               
002397r 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
002397r 3               ; ## "source"  auto  ANS core
002397r 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
002397r 3               xt_source:
002397r 3                               ; add address
002397r 3  CA                           dex
002398r 3  CA                           dex
002399r 3  A5 rr                        lda cib
00239Br 3  95 00                        sta 0,x
00239Dr 3  A5 rr                        lda cib+1
00239Fr 3  95 01                        sta 1,x
0023A1r 3               
0023A1r 3                               ; add size
0023A1r 3  CA                           dex
0023A2r 3  CA                           dex
0023A3r 3  A5 rr                        lda ciblen
0023A5r 3  95 00                        sta 0,x
0023A7r 3  A5 rr                        lda ciblen+1
0023A9r 3  95 01                        sta 1,x
0023ABr 3               
0023ABr 3  60           z_source:       rts
0023ACr 3               
0023ACr 3               
0023ACr 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
0023ACr 3               ; ## "source-id"  tested  ANS core ext
0023ACr 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
0023ACr 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
0023ACr 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
0023ACr 3                       ; string, and a text file gives the fileid.
0023ACr 3                       ; """
0023ACr 3               xt_source_id:
0023ACr 3  CA                           dex
0023ADr 3  CA                           dex
0023AEr 3               
0023AEr 3  A5 rr                        lda insrc
0023B0r 3  95 00                        sta 0,x
0023B2r 3  A5 rr                        lda insrc+1
0023B4r 3  95 01                        sta 1,x
0023B6r 3               
0023B6r 3  60           z_source_id:    rts
0023B7r 3               
0023B7r 3               
0023B7r 3               ; ## SPACE ( -- ) "Print a single space"
0023B7r 3               ; ## "space"  auto  ANS core
0023B7r 3                       ; """https://forth-standard.org/standard/core/SPACE"""
0023B7r 3               xt_space:
0023B7r 3  A9 20                        lda #AscSP
0023B9r 3  20 rr rr                     jsr emit_a
0023BCr 3               
0023BCr 3  60           z_space:        rts
0023BDr 3               
0023BDr 3               
0023BDr 3               ; ## SPACES ( u -- ) "Print a number of spaces"
0023BDr 3               ; ## "spaces"  auto  ANS core
0023BDr 3                       ; """https://forth-standard.org/standard/core/SPACES"""
0023BDr 3               
0023BDr 3               xt_spaces:
0023BDr 3  20 rr rr                     jsr underflow_1
0023C0r 3               
0023C0r 3                               ; catch any zero in TOS fast
0023C0r 3  B5 00                        lda 0,x
0023C2r 3  15 01                        ora 1,x
0023C4r 3  F0 2A                        beq @done
0023C6r 3               
0023C6r 3                               ; Usually we're only going to print far less than 256 spaces,
0023C6r 3                               ; so we create a quick loop for that. Short loop could be realized
0023C6r 3                               ; as a separate subroutine, but unless we're really pressed for
0023C6r 3                               ; memory at some point, this is faster
0023C6r 3  B4 01                        ldy 1,x
0023C8r 3  D0 0C                        bne @lots_of_spaces
0023CAr 3               
0023CAr 3  B4 00                        ldy 0,x
0023CCr 3               @quick_loop:
0023CCr 3                               ; we reach here knowing that there must be a number that is not
0023CCr 3                               ; zero in the TOS
0023CCr 3  A9 20                        lda #AscSP
0023CEr 3  20 rr rr                     jsr emit_a
0023D1r 3  88                           dey
0023D2r 3  F0 1C                        beq @done
0023D4r 3  80 F6                        bra @quick_loop
0023D6r 3               
0023D6r 3               @lots_of_spaces:
0023D6r 3                               ; We go through the first loop once to get rid of the lower
0023D6r 3                               ; counter byte. This could be zero
0023D6r 3  B4 00                        ldy 0,x
0023D8r 3               
0023D8r 3               @first_slow_loop:
0023D8r 3  F0 08                        beq @slow_outer_loop
0023DAr 3  A9 20                        lda #AscSP
0023DCr 3  20 rr rr                     jsr emit_a
0023DFr 3  88                           dey
0023E0r 3  80 F6                        bra @first_slow_loop
0023E2r 3               
0023E2r 3               @slow_outer_loop:
0023E2r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
0023E2r 3  A0 00                        ldy #00
0023E4r 3               
0023E4r 3               @slow_inner_loop:
0023E4r 3  A9 20                        lda #AscSP
0023E6r 3  20 rr rr                     jsr emit_a
0023E9r 3  88                           dey
0023EAr 3  D0 F8                        bne @slow_inner_loop
0023ECr 3               
0023ECr 3  D6 01                        dec 1,x
0023EEr 3  D0 F2                        bne @slow_outer_loop
0023F0r 3               
0023F0r 3               @done:
0023F0r 3  E8                           inx             ; drop
0023F1r 3  E8                           inx
0023F2r 3               
0023F2r 3  60           z_spaces:       rts
0023F3r 3               
0023F3r 3               
0023F3r 3               
0023F3r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0023F3r 3               ; ## "*"  auto  ANS core
0023F3r 3                       ; """https://forth-standard.org/standard/core/Times
0023F3r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0023F3r 3                       ;
0023F3r 3                       ; This is nothing  more than UM* DROP
0023F3r 3                       ; """
0023F3r 3               
0023F3r 3               xt_star:
0023F3r 3  20 rr rr                     jsr underflow_2
0023F6r 3               
0023F6r 3  20 rr rr                     jsr xt_um_star
0023F9r 3  E8                           inx
0023FAr 3  E8                           inx
0023FBr 3               
0023FBr 3  60           z_star:         rts
0023FCr 3               
0023FCr 3               
0023FCr 3               
0023FCr 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0023FCr 3               ; ## "*/"  auto  ANS core
0023FCr 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0023FCr 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0023FCr 3                       ; without a remainder. This is */MOD without the mod.
0023FCr 3                       ;
0023FCr 3                       ; This word
0023FCr 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0023FCr 3                       ; pretty much what we do here
0023FCr 3                       ; """
0023FCr 3               xt_star_slash:
0023FCr 3                               ; We let */MOD check for underflow
0023FCr 3  20 rr rr                     jsr xt_star_slash_mod
0023FFr 3  20 rr rr                     jsr xt_swap
002402r 3  E8                           inx
002403r 3  E8                           inx
002404r 3               z_star_slash:
002404r 3  60                           rts
002405r 3               
002405r 3               
002405r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
002405r 3               ; ## "*/mod"  auto  ANS core
002405r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
002405r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
002405r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
002405r 3                       ; single-cell quotient n5.
002405r 3                       ;
002405r 3                       ; In Forth, this is
002405r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
002405r 3                       ; """
002405r 3               xt_star_slash_mod:
002405r 3  20 rr rr                     jsr underflow_3
002408r 3               
002408r 3  20 rr rr                     jsr xt_to_r
00240Br 3  20 rr rr                     jsr xt_m_star
00240Er 3  20 rr rr                     jsr xt_r_from
002411r 3  20 rr rr                     jsr xt_sm_slash_rem
002414r 3               
002414r 3               z_star_slash_mod:
002414r 3  60                           rts
002415r 3               
002415r 3               
002415r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
002415r 3               ; ## "state"  auto  ANS core
002415r 3                       ; """https://forth-standard.org/standard/core/STATE
002415r 3                       ; STATE is true when in compilation state, false otherwise. Note
002415r 3                       ; we do not return the state itself, but only the address where
002415r 3                       ; it lives. The state should not be changed directly by the user; see
002415r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
002415r 3                       ; """
002415r 3               xt_state:
002415r 3  CA                           dex
002416r 3  CA                           dex
002417r 3  A9 rr                        lda #<state
002419r 3  95 00                        sta 0,x
00241Br 3  A9 rr                        lda #>state
00241Dr 3  95 01                        sta 1,x
00241Fr 3               
00241Fr 3  60           z_state:        rts
002420r 3               
002420r 3               
002420r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
002420r 3               ; ## "!"  auto  ANS core
002420r 3                       ; """https://forth-standard.org/standard/core/Store"""
002420r 3               xt_store:
002420r 3  20 rr rr                     jsr underflow_2
002423r 3               
002423r 3  B5 02                        lda 2,x         ; LSB
002425r 3  81 00                        sta (0,x)
002427r 3               
002427r 3  F6 00                        inc 0,x
002429r 3  D0 02                        bne @1
00242Br 3  F6 01                        inc 1,x
00242Dr 3               @1:
00242Dr 3  B5 03                        lda 3,x         ; MSB
00242Fr 3  81 00                        sta (0,x)
002431r 3               
002431r 3  E8                           inx             ; 2DROP
002432r 3  E8                           inx
002433r 3  E8                           inx
002434r 3  E8                           inx
002435r 3               
002435r 3  60           z_store:        rts
002436r 3               
002436r 3               
002436r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
002436r 3               ; ## "strip-underflow"  tested  Tali Forth
002436r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
002436r 3                       ; checking should be removed during the compilation of new words.
002436r 3                       ; Default is false.
002436r 3                       ; """
002436r 3               xt_strip_underflow:
002436r 3  CA                           dex
002437r 3  CA                           dex
002438r 3               
002438r 3  A9 rr                        lda #<uf_strip
00243Ar 3  95 00                        sta 0,x
00243Cr 3  A9 rr                        lda #>uf_strip
00243Er 3  95 01                        sta 1,x
002440r 3               
002440r 3               z_strip_underflow:
002440r 3  60                           rts
002441r 3               
002441r 3               
002441r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
002441r 3               ; ## "swap"  auto  ANS core
002441r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
002441r 3               xt_swap:
002441r 3  20 rr rr                     jsr underflow_2
002444r 3               
002444r 3  B5 00                        lda 0,x         ; LSB
002446r 3  B4 02                        ldy 2,x
002448r 3  95 02                        sta 2,x
00244Ar 3  94 00                        sty 0,x
00244Cr 3               
00244Cr 3  B5 01                        lda 1,x         ; MSB
00244Er 3  B4 03                        ldy 3,x
002450r 3  95 03                        sta 3,x
002452r 3  94 01                        sty 1,x
002454r 3               
002454r 3  60           z_swap:         rts
002455r 3               
002455r 3               
002455r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002455r 3               ; ## "then"  auto  ANS core
002455r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002455r 3               xt_then:
002455r 3                               ; Get the address to jump to.
002455r 3  20 rr rr                     jsr xt_here
002458r 3               
002458r 3                               ; Stuff HERE in for the branch address back
002458r 3                               ; at the IF or ELSE (origination address is on stack).
002458r 3  20 rr rr                     jsr xt_swap
00245Br 3  20 rr rr                     jsr xt_store
00245Er 3               
00245Er 3  60           z_then:         rts
00245Fr 3               
00245Fr 3               
00245Fr 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
00245Fr 3               ; ## "thru"  tested  ANS block ext
00245Fr 3                       ; """https://forth-standard.org/standard/block/THRU"""
00245Fr 3               
00245Fr 3               xt_thru:
00245Fr 3  20 rr rr                     jsr underflow_2
002462r 3               
002462r 3                               ; We need to loop here, and can't use the data stack
002462r 3                               ; because the LOADed screens might use it.  We'll
002462r 3                               ; need to use the same trick that DO loops use, holding
002462r 3                               ; the limit and current index on the return stack.
002462r 3               
002462r 3                               ; Put the ending screen number on the return stack
002462r 3  B5 01                        lda 1,x
002464r 3  48                           pha
002465r 3  B5 00                        lda 0,x
002467r 3  48                           pha
002468r 3  E8                           inx
002469r 3  E8                           inx
00246Ar 3               @thru_loop:
00246Ar 3                               ; Put the starting screen number on the stack,
00246Ar 3                               ; but keep a copy
00246Ar 3  B5 01                        lda 1,x
00246Cr 3  48                           pha
00246Dr 3  B5 00                        lda 0,x
00246Fr 3  48                           pha
002470r 3               
002470r 3                               ; Load this screen.
002470r 3  20 rr rr                     jsr xt_load
002473r 3               
002473r 3                               ; Get the number and limit back off the stack.  Rather than
002473r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002473r 3               
002473r 3                               ; Get the screen we just loaded.
002473r 3  68                           pla
002474r 3  85 rr                        sta tmp1
002476r 3  68                           pla
002477r 3  85 rr                        sta tmp1+1
002479r 3               
002479r 3                               ; Get the ending screen.
002479r 3  68                           pla
00247Ar 3  85 rr                        sta tmp2
00247Cr 3  68                           pla
00247Dr 3  85 rr                        sta tmp2+1
00247Fr 3               
00247Fr 3                               ; See if we just loaded the last screen.
00247Fr 3                               ; A already has the MSB of the last screen in it.
00247Fr 3  C5 rr                        cmp tmp1+1
002481r 3  D0 08                        bne @next_screen
002483r 3  A5 rr                        lda tmp2        ; Compare the LSB
002485r 3  C5 rr                        cmp tmp1
002487r 3  D0 02                        bne @next_screen
002489r 3  80 18                        bra @done       ; We just did the last screen.
00248Br 3               
00248Br 3               @next_screen:
00248Br 3                               ; Put the ending screen back on the data stack.
00248Br 3  A5 rr                        lda tmp2+1
00248Dr 3  48                           pha
00248Er 3  A5 rr                        lda tmp2
002490r 3  48                           pha
002491r 3               
002491r 3                               ; Increment the current screen.
002491r 3  E6 rr                        inc tmp1
002493r 3  D0 02                        bne @1
002495r 3  E6 rr                        inc tmp1+1
002497r 3               @1:
002497r 3                               ; Put the current screen on the stack to prepare for
002497r 3                               ; the next loop.
002497r 3  CA                           dex
002498r 3  CA                           dex
002499r 3  A5 rr                        lda tmp1
00249Br 3  95 00                        sta 0,x
00249Dr 3  A5 rr                        lda tmp1+1
00249Fr 3  95 01                        sta 1,x
0024A1r 3  80 C7                        bra @thru_loop
0024A3r 3               @done:
0024A3r 3  60           z_thru:         rts
0024A4r 3               
0024A4r 3               
0024A4r 3               
0024A4r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
0024A4r 3               ; ## "'"  auto  ANS core
0024A4r 3                       ; """https://forth-standard.org/standard/core/Tick"""
0024A4r 3               
0024A4r 3               xt_tick:
0024A4r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
0024A7r 3               
0024A7r 3                               ; if we got a zero, there was a problem getting the
0024A7r 3                               ; name of the word
0024A7r 3  B5 00                        lda 0,x
0024A9r 3  15 01                        ora 1,x
0024ABr 3  D0 05                        bne @1
0024ADr 3               
0024ADr 3  A9 05                        lda #err_noname
0024AFr 3  4C rr rr                     jmp error
0024B2r 3               @1:
0024B2r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
0024B5r 3               
0024B5r 3                               ; If we didn't find the word in the Dictionary, abort
0024B5r 3  B5 00                        lda 0,x
0024B7r 3  15 01                        ora 1,x
0024B9r 3  D0 05                        bne @2
0024BBr 3               
0024BBr 3  A9 08                        lda #err_syntax
0024BDr 3  4C rr rr                     jmp error
0024C0r 3               @2:
0024C0r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
0024C3r 3               
0024C3r 3  60           z_tick:         rts
0024C4r 3               
0024C4r 3               
0024C4r 3               
0024C4r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
0024C4r 3               ; ## "to"  auto  ANS core ext
0024C4r 3                       ; """https://forth-standard.org/standard/core/TO
0024C4r 3                       ; Gives a new value to a, uh, VALUE.
0024C4r 3                       ;
0024C4r 3                       ; One possible Forth
0024C4r 3                       ; implementation is  ' >BODY !  but given the problems we have
0024C4r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
0024C4r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
0024C4r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
0024C4r 3                       ;
0024C4r 3                       ; Note that the standard has different behaviors for TO depending
0024C4r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
0024C4r 3                       ; This makes TO state-dependent (which is bad) and also rather
0024C4r 3                       ; complex (see the Gforth implementation for comparison). This
0024C4r 3                       ; word may not be natively compiled and must be immediate. Frankly,
0024C4r 3                       ; it would have made more sense to have two words for this.
0024C4r 3                       ; """
0024C4r 3               
0024C4r 3               xt_to:
0024C4r 3                               ; One way or the other, we need the xt of the word after this
0024C4r 3                               ; one. At this point, we don't know if we are interpreted or
0024C4r 3                               ; compile, so we don't know if there is a value n on the stack,
0024C4r 3                               ; so we can't do an underflow check yet
0024C4r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
0024C7r 3               
0024C7r 3                               ; The PFA (DFA in this case) is three bytes down,
0024C7r 3                               ; after the jump to DOCONST
0024C7r 3  B5 00                        lda 0,x                 ; LSB
0024C9r 3  18                           clc
0024CAr 3  69 03                        adc #3
0024CCr 3  85 rr                        sta tmp1
0024CEr 3  B5 01                        lda 1,x                 ; MSB
0024D0r 3  69 00                        adc #0                  ; we just want the carry
0024D2r 3  85 rr                        sta tmp1+1
0024D4r 3               
0024D4r 3  E8                           inx
0024D5r 3  E8                           inx                     ; ( [n] )
0024D6r 3               
0024D6r 3                               ; Now it gets ugly. See which state we are in
0024D6r 3  A5 rr                        lda state
0024D8r 3  05 rr                        ora state+1
0024DAr 3  F0 34                        beq @interpret
0024DCr 3               
0024DCr 3                               ; Well, we're compiling. We want to end up with simple
0024DCr 3                               ; code that just takes the number that is TOS and saves
0024DCr 3                               ; it in the address of the xt we were just given. So we
0024DCr 3                               ; want to compile this routine:
0024DCr 3                               ;
0024DCr 3                               ;       lda 0,x                 - B5 00
0024DCr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0024DCr 3                               ;       lda 1,x                 - B5 01
0024DCr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0024DCr 3                               ;       inx                     - E8
0024DCr 3                               ;       inx                     - E8
0024DCr 3                               ;
0024DCr 3                               ; which at least is nice and short. Other than that, we pretty
0024DCr 3                               ; much have to do this the hard and long way, because with the
0024DCr 3                               ; LSBs and MSBs, we can't really put the numbers in a data
0024DCr 3                               ; range and store them with a loop. Sigh.
0024DCr 3               
0024DCr 3  A0 00                        ldy #$00                ; Code for LDA 0,X
0024DEr 3  A9 B5                        lda #$B5
0024E0r 3  20 rr rr                     jsr cmpl_word
0024E3r 3               
0024E3r 3  A9 8D                        lda #$8D                ; Code for STA abs
0024E5r 3  20 rr rr                     jsr cmpl_a
0024E8r 3               
0024E8r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0024EAr 3  A5 rr                        lda tmp1
0024ECr 3  20 rr rr                     jsr cmpl_word
0024EFr 3               
0024EFr 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0024F1r 3  A9 B5                        lda #$B5
0024F3r 3  20 rr rr                     jsr cmpl_word
0024F6r 3               
0024F6r 3  A9 8D                        lda #$8D                ; Code for STA abs
0024F8r 3  20 rr rr                     jsr cmpl_a
0024FBr 3               
0024FBr 3  E6 rr                        inc tmp1                ; Calculate MSB
0024FDr 3  D0 02                        bne @1
0024FFr 3  E6 rr                        inc tmp1+1
002501r 3               @1:
002501r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002503r 3  A5 rr                        lda tmp1
002505r 3  20 rr rr                     jsr cmpl_word
002508r 3               
002508r 3  A0 E8                        ldy #$E8                ; Code for INX
00250Ar 3  98                           tya
00250Br 3  20 rr rr                     jsr cmpl_word
00250Er 3               
00250Er 3  80 0F                        bra @done
002510r 3               
002510r 3               @interpret:
002510r 3                               ; We're interpreting, so we arrive here with n
002510r 3                               ; on the stack. This is an annoying place to put
002510r 3                               ; the underflow check because we can't
002510r 3                               ; automatically strip it out
002510r 3  20 rr rr                     jsr underflow_1
002513r 3               
002513r 3                               ; We skip over the jump to DOCONST and store the number
002513r 3                               ; in the Program Field Area (PDF, in this case more a
002513r 3                               ; Data Field Area
002513r 3  B5 00                        lda 0,x
002515r 3  92 rr                        sta (tmp1)              ; LSB
002517r 3               
002517r 3  A0 01                        ldy #1
002519r 3  B5 01                        lda 1,x                 ; MSB
00251Br 3  91 rr                        sta (tmp1),y            ; fall through to common
00251Dr 3               
00251Dr 3  E8                           inx                     ; DROP
00251Er 3  E8                           inx
00251Fr 3               @done:
00251Fr 3  60           z_to:           rts
002520r 3               
002520r 3               
002520r 3               
002520r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
002520r 3               ; ## ">body"  auto  ANS core
002520r 3                       ; """https://forth-standard.org/standard/core/toBODY
002520r 3                       ; Given a word's execution token (xt), return the address of the
002520r 3                       ; start of that word's parameter field (PFA). This is defined as the
002520r 3                       ; address that HERE would return right after CREATE.
002520r 3                       ;
002520r 3                       ; This is a
002520r 3                       ; difficult word for STC Forths, because most words don't actually
002520r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
002520r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
002520r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
002520r 3                       ; """
002520r 3               
002520r 3               xt_to_body:
002520r 3  20 rr rr                     jsr underflow_1
002523r 3               
002523r 3                               ; Ideally, xt already points to the CFA. We just need to check
002523r 3                               ; the HC flag for special cases
002523r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
002526r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
002529r 3               
002529r 3                               ; The status byte is nt+1
002529r 3  F6 00                        inc 0,x
00252Br 3  D0 02                        bne @1
00252Dr 3  F6 01                        inc 1,x
00252Fr 3               @1:
00252Fr 3  A1 00                        lda (0,x)               ; get status byte
002531r 3  29 20                        and #HC
002533r 3  F0 0D                        beq @no_cfa
002535r 3               
002535r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
002535r 3                               ; so we add three to xt, which is NOS
002535r 3  18                           clc
002536r 3  B5 02                        lda 2,x         ; LSB
002538r 3  69 03                        adc #3
00253Ar 3  95 02                        sta 2,x
00253Cr 3  B5 03                        lda 3,x         ; MSB
00253Er 3  69 00                        adc #0          ; we conly care about the carry
002540r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
002542r 3               @no_cfa:
002542r 3  E8                           inx             ; get rid of the nt
002543r 3  E8                           inx
002544r 3               @done:
002544r 3  60           z_to_body:      rts
002545r 3               
002545r 3               
002545r 3               
002545r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
002545r 3               ; ## ">in"  auto  ANS core
002545r 3               xt_to_in:
002545r 3  CA                           dex
002546r 3  CA                           dex
002547r 3               
002547r 3  A9 rr                        lda #<toin
002549r 3  95 00                        sta 0,x
00254Br 3  A9 rr                        lda #>toin      ; paranoid, should be zero
00254Dr 3  95 01                        sta 1,x
00254Fr 3               
00254Fr 3  60           z_to_in:        rts
002550r 3               
002550r 3               
002550r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
002550r 3               ; ## ">number"  auto  ANS core
002550r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
002550r 3                       ; Convert a string to a double number. Logic here is based on the
002550r 3                       ; routine by Phil Burk of the same name in pForth, see
002550r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
002550r 3                       ; for the original Forth code. We arrive here from NUMBER which has
002550r 3                       ; made sure that we don't have to deal with a sign and we don't have
002550r 3                       ; to deal with a dot as a last character that signalizes double -
002550r 3                       ; this should be a pure number string.
002550r 3                       ;
002550r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
002550r 3                       ; cannot access any of those.
002550r 3                       ;
002550r 3                       ; For the math routine, we move the inputs to the scratchpad to
002550r 3                       ; avoid having to fool around with the Data Stack.
002550r 3                       ;
002550r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002550r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
002550r 3                       ;     |           |           |           |           |
002550r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
002550r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002550r 3                       ;
002550r 3                       ; The math routine works by converting one character to its
002550r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
002550r 3                       ; the moment. We then multiply the UD-HI value with the radix
002550r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
002550r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
002550r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
002550r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
002550r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
002550r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
002550r 3                       ; storing the result back in S and S+2, before we start another
002550r 3                       ; round with it as the new UD-LO and UD-HI.
002550r 3                       ; """
002550r 3               
002550r 3               
002550r 3               xt_to_number:
002550r 3  20 rr rr                     jsr underflow_4
002553r 3               
002553r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002553r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002553r 3                               ; the Data Stack, but will be ignored and later overwritten
002553r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002553r 3  B5 06                        lda 6,x         ; ud-lo LSB
002555r 3  85 rr                        sta scratch
002557r 3  B5 07                        lda 7,x         ; ud-lo MSB
002559r 3  85 rr                        sta scratch+1
00255Br 3               
00255Br 3  B5 04                        lda 4,x         ; ud-hi LSB
00255Dr 3  85 rr                        sta scratch+2
00255Fr 3  B5 05                        lda 5,x         ; ud-hi MSB
002561r 3  85 rr                        sta scratch+3
002563r 3               
002563r 3                               ; Push down one on the Data Stack to use TOS for character
002563r 3                               ; conversion ( ud-lo ud-hi addr u x )
002563r 3  CA                           dex
002564r 3  CA                           dex
002565r 3               
002565r 3               @loop:
002565r 3                               ; Get one character based on address
002565r 3  A1 04                        lda (4,x)
002567r 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
002569r 3  74 01                        stz 1,x                 ; paranoid
00256Br 3               
00256Br 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
00256Er 3               
00256Er 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
00256Er 3                               ; check the flag. If it is zero, we return what we have and
00256Er 3                               ; let the caller (usually NUMBER) complain
00256Er 3  B5 00                        lda 0,x
002570r 3  D0 04                        bne @digit_ok
002572r 3               
002572r 3  E8                           inx
002573r 3  E8                           inx
002574r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
002576r 3               
002576r 3               @digit_ok:
002576r 3                               ; Conversion was successful. We arrive here with
002576r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
002576r 3                               ; math routine
002576r 3               
002576r 3                               ; Save n so we don't have to fool around with the
002576r 3                               ; Data Stack
002576r 3  B5 02                        lda 2,x
002578r 3  85 rr                        sta scratch+4
00257Ar 3  B5 03                        lda 3,x
00257Cr 3  85 rr                        sta scratch+5
00257Er 3               
00257Er 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
00257Er 3                               ; original one on the Data Stack) with the radix from BASE.
00257Er 3                               ; We can clobber TOS and NOS because we saved n
00257Er 3  A5 rr                        lda scratch+2
002580r 3  95 02                        sta 2,x         ; NOS
002582r 3  A5 rr                        lda scratch+3
002584r 3  95 03                        sta 3,x
002586r 3               
002586r 3  A5 rr                        lda base
002588r 3  95 00                        sta 0,x         ; TOS
00258Ar 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
00258Cr 3               
00258Cr 3                               ; UM* returns a double-celled number
00258Cr 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
00258Fr 3               
00258Fr 3                               ; Move ud-hi-lo to safety
00258Fr 3  B5 02                        lda 2,x         ; ud-hi-lo
002591r 3  85 rr                        sta scratch+6
002593r 3  B5 03                        lda 3,x
002595r 3  85 rr                        sta scratch+7
002597r 3               
002597r 3                               ; Now we multiply ud-lo, overwriting the stack entries
002597r 3  A5 rr                        lda scratch
002599r 3  95 02                        sta 2,x
00259Br 3  A5 rr                        lda scratch+1
00259Dr 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
00259Fr 3               
00259Fr 3  A5 rr                        lda base
0025A1r 3  95 00                        sta 0,x
0025A3r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
0025A5r 3               
0025A5r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
0025A8r 3               
0025A8r 3  B5 00                        lda 0,x
0025AAr 3  85 rr                        sta scratch+2
0025ACr 3  B5 01                        lda 1,x
0025AEr 3  85 rr                        sta scratch+3
0025B0r 3               
0025B0r 3  B5 02                        lda 2,x
0025B2r 3  85 rr                        sta scratch
0025B4r 3  B5 03                        lda 3,x
0025B6r 3  85 rr                        sta scratch+1
0025B8r 3               
0025B8r 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
0025B8r 3                               ; both in the scratch pad
0025B8r 3  18                           clc
0025B9r 3  A5 rr                        lda scratch     ; ud-lo LSB
0025BBr 3  65 rr                        adc scratch+4   ; n LSB
0025BDr 3  85 rr                        sta scratch     ; this is the new ud-lo
0025BFr 3  A5 rr                        lda scratch+1   ; ud-lo MSB
0025C1r 3  65 rr                        adc scratch+5   ; n MSB
0025C3r 3  85 rr                        sta scratch+1
0025C5r 3               
0025C5r 3  A5 rr                        lda scratch+2   ; LSB
0025C7r 3  65 rr                        adc scratch+6
0025C9r 3  85 rr                        sta scratch+2   ; this is the new ud-hi
0025CBr 3  A5 rr                        lda scratch+3   ; MSB
0025CDr 3  65 rr                        adc scratch+7
0025CFr 3  85 rr                        sta scratch+3
0025D1r 3               
0025D1r 3                               ; Clean up: Get rid of one of the two top elements on
0025D1r 3                               ; the Data Stack. We don't really care which one
0025D1r 3  E8                           inx
0025D2r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
0025D3r 3               
0025D3r 3                               ; One character down. Move address up
0025D3r 3  F6 04                        inc 4,x
0025D5r 3  D0 02                        bne @1
0025D7r 3  F6 05                        inc 5,x
0025D9r 3               @1:
0025D9r 3                               ; Decrease counter
0025D9r 3  D6 02                        dec 2,x
0025DBr 3  D0 88                        bne @loop
0025DDr 3               
0025DDr 3               @done:
0025DDr 3                               ; Counter has reached zero or we have an error. In both
0025DDr 3                               ; cases, we clean up the Data Stack and return. Error gives
0025DDr 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
0025DDr 3                               ; ( ud-lo ud-hi addr u ud-lo )
0025DDr 3  E8                           inx
0025DEr 3  E8                           inx             ; ( ud-lo ud-hi addr u )
0025DFr 3               
0025DFr 3                               ; The new ud-lo and ud-hi are still on the scratch pad
0025DFr 3  A5 rr                        lda scratch     ; new ud-lo
0025E1r 3  95 06                        sta 6,x
0025E3r 3  A5 rr                        lda scratch+1
0025E5r 3  95 07                        sta 7,x
0025E7r 3               
0025E7r 3  A5 rr                        lda scratch+2
0025E9r 3  95 04                        sta 4,x
0025EBr 3  A5 rr                        lda scratch+3
0025EDr 3  95 05                        sta 5,x
0025EFr 3               
0025EFr 3  60           z_to_number:    rts
0025F0r 3               
0025F0r 3               
0025F0r 3               
0025F0r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0025F0r 3               ; ## ">order"  tested  Gforth search
0025F0r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0025F0r 3               
0025F0r 3               xt_to_order:
0025F0r 3                               ; Put the wid on the return stack for now.
0025F0r 3  20 rr rr                     jsr xt_to_r
0025F3r 3               
0025F3r 3                               ; Get the current search order.
0025F3r 3  20 rr rr                     jsr xt_get_order
0025F6r 3               
0025F6r 3                               ; Get back the wid and add it to the list.
0025F6r 3  20 rr rr                     jsr xt_r_from
0025F9r 3  20 rr rr                     jsr xt_swap
0025FCr 3  20 rr rr                     jsr xt_one_plus
0025FFr 3               
0025FFr 3                               ; Set the search order with the new list.
0025FFr 3  20 rr rr                     jsr xt_set_order
002602r 3               
002602r 3  60           z_to_order:     rts
002603r 3               
002603r 3               
002603r 3               
002603r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
002603r 3               ; ## ">r"  auto  ANS core
002603r 3                       ; """https://forth-standard.org/standard/core/toR
002603r 3                       ; This word is handled differently for native and for
002603r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
002603r 3                       ; word.
002603r 3                       ; """
002603r 3               xt_to_r:
002603r 3                               ; Save the return address. If this word is natively
002603r 3                               ; coded, this is a complete waste of cycles, but
002603r 3                               ; required for subroutine coding
002603r 3  68                           pla             ; LSB
002604r 3  85 rr                        sta tmptos
002606r 3  7A                           ply             ; MSB
002607r 3               
002607r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002607r 3               
002607r 3                               ; We check for underflow in the second step, so we can
002607r 3                               ; strip off the stack thrashing for native compiling first
002607r 3  20 rr rr                     jsr underflow_1
00260Ar 3               
00260Ar 3                               ; now we can do the actual work
00260Ar 3  B5 01                        lda 1,x         ; MSB
00260Cr 3  48                           pha
00260Dr 3  B5 00                        lda 0,x         ; LSB
00260Fr 3  48                           pha
002610r 3               
002610r 3  E8                           inx
002611r 3  E8                           inx
002612r 3               
002612r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002612r 3               
002612r 3                               ; restore return address
002612r 3  5A                           phy             ; MSB
002613r 3  A5 rr                        lda tmptos
002615r 3  48                           pha             ; LSB
002616r 3               
002616r 3  60           z_to_r:         rts
002617r 3               
002617r 3               
002617r 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
002617r 3               ; ## "true"  auto  ANS core ext
002617r 3                       ; """https://forth-standard.org/standard/core/TRUE"""
002617r 3               xt_true:
002617r 3  CA                           dex
002618r 3  CA                           dex
002619r 3  A9 FF                        lda #$FF
00261Br 3  95 00                        sta 0,x
00261Dr 3  95 01                        sta 1,x
00261Fr 3               
00261Fr 3  60           z_true:         rts
002620r 3               
002620r 3               
002620r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
002620r 3               ; ## "tuck"  auto  ANS core ext
002620r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
002620r 3               xt_tuck:
002620r 3  20 rr rr                     jsr underflow_2
002623r 3               
002623r 3  CA                           dex
002624r 3  CA                           dex
002625r 3               
002625r 3  B4 04                        ldy 4,x         ; LSB
002627r 3  B5 02                        lda 2,x
002629r 3  95 04                        sta 4,x
00262Br 3  94 02                        sty 2,x
00262Dr 3  95 00                        sta 0,x
00262Fr 3               
00262Fr 3  B4 05                        ldy 5,x         ; MSB
002631r 3  B5 03                        lda 3,x
002633r 3  95 05                        sta 5,x
002635r 3  94 03                        sty 3,x         ; bba
002637r 3  95 01                        sta 1,x         ; baa
002639r 3               
002639r 3  60           z_tuck:         rts
00263Ar 3               
00263Ar 3               
00263Ar 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
00263Ar 3               ; ## "2"  auto  Tali Forth
00263Ar 3                       ;
00263Ar 3                       ; This code is shared with ASSEMBLER-WORDLIST
00263Ar 3               xt_assembler_wordlist:
00263Ar 3               xt_two:
00263Ar 3  CA                           dex
00263Br 3  CA                           dex
00263Cr 3  A9 02                        lda #2
00263Er 3  95 00                        sta 0,x
002640r 3  74 01                        stz 1,x
002642r 3               
002642r 3               z_assembler_wordlist:
002642r 3  60           z_two:          rts
002643r 3               
002643r 3               
002643r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
002643r 3               ; ## "2drop"  auto  ANS core
002643r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
002643r 3               xt_two_drop:
002643r 3  20 rr rr                     jsr underflow_2
002646r 3               
002646r 3  E8                           inx
002647r 3  E8                           inx
002648r 3  E8                           inx
002649r 3  E8                           inx
00264Ar 3               
00264Ar 3  60           z_two_drop:     rts
00264Br 3               
00264Br 3               
00264Br 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
00264Br 3               ; ## "2dup"  auto  ANS core
00264Br 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
00264Br 3               xt_two_dup:
00264Br 3  20 rr rr                     jsr underflow_2
00264Er 3               
00264Er 3  CA                           dex
00264Fr 3  CA                           dex
002650r 3  CA                           dex
002651r 3  CA                           dex
002652r 3               
002652r 3  B5 04                        lda 4,x         ; TOS
002654r 3  95 00                        sta 0,x
002656r 3  B5 05                        lda 5,x
002658r 3  95 01                        sta 1,x
00265Ar 3               
00265Ar 3  B5 06                        lda 6,x         ; NOS
00265Cr 3  95 02                        sta 2,x
00265Er 3  B5 07                        lda 7,x
002660r 3  95 03                        sta 3,x
002662r 3               
002662r 3  60           z_two_dup:      rts
002663r 3               
002663r 3               
002663r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
002663r 3               ; ## "2@"  auto  ANS core
002663r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
002663r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
002663r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
002663r 3                       ; """
002663r 3               xt_two_fetch:
002663r 3  20 rr rr                     jsr underflow_1
002666r 3               
002666r 3  B5 00                        lda 0,x
002668r 3  85 rr                        sta tmp1
00266Ar 3  B4 01                        ldy 1,x
00266Cr 3  84 rr                        sty tmp1+1
00266Er 3               
00266Er 3  CA                           dex             ; reuse one stack element
00266Fr 3  CA                           dex
002670r 3               
002670r 3  B2 rr                        lda (tmp1)      ; copy LSB
002672r 3  95 00                        sta 0,x
002674r 3  A0 01                        ldy #1          ; copy next
002676r 3  B1 rr                        lda (tmp1),y
002678r 3  95 01                        sta 1,x
00267Ar 3  C8                           iny             ; copy next
00267Br 3  B1 rr                        lda (tmp1),y
00267Dr 3  95 02                        sta 2,x
00267Fr 3  C8                           iny             ; copy next
002680r 3  B1 rr                        lda (tmp1),y
002682r 3  95 03                        sta 3,x
002684r 3               
002684r 3  60           z_two_fetch:    rts
002685r 3               
002685r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002685r 3               ; ## "2over"  auto  ANS core
002685r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002685r 3               xt_two_over:
002685r 3  20 rr rr                     jsr underflow_4
002688r 3               
002688r 3  CA                           dex
002689r 3  CA                           dex
00268Ar 3  CA                           dex
00268Br 3  CA                           dex
00268Cr 3               
00268Cr 3  B5 08                        lda 8,x
00268Er 3  95 00                        sta 0,x
002690r 3               
002690r 3  B5 09                        lda 9,x
002692r 3  95 01                        sta 1,x
002694r 3               
002694r 3  B5 0A                        lda 10,x
002696r 3  95 02                        sta 2,x
002698r 3               
002698r 3  B5 0B                        lda 11,x
00269Ar 3  95 03                        sta 3,x
00269Cr 3               
00269Cr 3  60           z_two_over:     rts
00269Dr 3               
00269Dr 3               
00269Dr 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
00269Dr 3               ; ## "2r@"  auto  ANS core ext
00269Dr 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
00269Dr 3                       ;
00269Dr 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
00269Dr 3                       ; assembler. We use trickery to access the elements on the Return
00269Dr 3                       ; Stack instead of pulling the return address first and storing
00269Dr 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
00269Dr 3                       ; it as Never Native; at some point, we should compare versions to
00269Dr 3                       ; see if an Always Native version would be better
00269Dr 3                       ; """
00269Dr 3               xt_two_r_fetch:
00269Dr 3               		; make room on the Data Stack
00269Dr 3  CA                           dex
00269Er 3  CA                           dex
00269Fr 3  CA                           dex
0026A0r 3  CA                           dex
0026A1r 3               
0026A1r 3                               ; Get four bytes off of Return Stack. This assumes that
0026A1r 3                               ; we took a subroutine jump here so the first two entries
0026A1r 3                               ; are the return address
0026A1r 3  8A                           txa
0026A2r 3  BA                           tsx
0026A3r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
0026A4r 3  7A                           ply
0026A5r 3  AA                           tax
0026A6r 3               
0026A6r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
0026A6r 3                               ; the return address for this word. This is a whole lot
0026A6r 3                               ; easier on the 65816
0026A6r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
0026A9r 3  95 00                        sta 0,x
0026ABr 3  B9 04 01                     lda $0104,y     ; MSB of top entry
0026AEr 3  95 01                        sta 1,x
0026B0r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
0026B3r 3  95 02                        sta 2,x
0026B5r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
0026B8r 3  95 03                        sta 3,x
0026BAr 3               
0026BAr 3  60           z_two_r_fetch:  rts
0026BBr 3               
0026BBr 3               
0026BBr 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
0026BBr 3               ; ## "2r>"  auto  ANS core ext
0026BBr 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
0026BBr 3                       ; Pull top two entries from Return Stack.
0026BBr 3                       ;
0026BBr 3                       ; Is the same as
0026BBr 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
0026BBr 3                       ; the top value on the ReturnStack for a STC Forth is the
0026BBr 3                       ; return address, which we need to get out of the way first.
0026BBr 3                       ; Native compile needs to be handled as a special case.
0026BBr 3                       ; """
0026BBr 3               xt_two_r_from:
0026BBr 3                               ; save the return address
0026BBr 3  68                           pla                     ; LSB
0026BCr 3  85 rr                        sta tmp1
0026BEr 3  68                           pla                     ; MSB
0026BFr 3  85 rr                        sta tmp1+1
0026C1r 3               
0026C1r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0026C1r 3               
0026C1r 3               		; make room on stack
0026C1r 3  CA                           dex
0026C2r 3  CA                           dex
0026C3r 3  CA                           dex
0026C4r 3  CA                           dex
0026C5r 3               
0026C5r 3                               ; In theory, we should test for underflow on the Return
0026C5r 3                               ; Stack. However, given the traffic there with an STC
0026C5r 3                               ; Forth, that's probably not really useful
0026C5r 3               
0026C5r 3                               ; now we can access the data
0026C5r 3  68                           pla                     ; LSB
0026C6r 3  95 00                        sta 0,x
0026C8r 3  68                           pla                     ; MSB
0026C9r 3  95 01                        sta 1,x
0026CBr 3               
0026CBr 3  68                           pla                     ; LSB
0026CCr 3  95 02                        sta 2,x
0026CEr 3  68                           pla                     ; MSB
0026CFr 3  95 03                        sta 3,x
0026D1r 3               
0026D1r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0026D1r 3               
0026D1r 3                               ; restore return address
0026D1r 3  A5 rr                        lda tmp1+1              ; MSB
0026D3r 3  48                           pha
0026D4r 3  A5 rr                        lda tmp1                ; LSB
0026D6r 3  48                           pha
0026D7r 3               
0026D7r 3  60           z_two_r_from:   rts
0026D8r 3               
0026D8r 3               
0026D8r 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
0026D8r 3               ; ## "2/"  auto  ANS core
0026D8r 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
0026D8r 3               xt_two_slash:
0026D8r 3  20 rr rr                     jsr underflow_1
0026DBr 3               
0026DBr 3                               ; We can't just LSR the LSB and ROR the MSB because that
0026DBr 3                               ; would do bad things to the sign
0026DBr 3  B5 01                        lda 1,x
0026DDr 3  0A                           asl                     ; save the sign
0026DEr 3  76 01                        ror 1,x
0026E0r 3  76 00                        ror 0,x
0026E2r 3               
0026E2r 3  60           z_two_slash:    rts
0026E3r 3               
0026E3r 3               
0026E3r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
0026E3r 3               ; ## "2*"  auto  ANS core
0026E3r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
0026E3r 3                       ;
0026E3r 3                       ; Also used for CELLS
0026E3r 3                       ; """
0026E3r 3               xt_two_star:
0026E3r 3               xt_cells:
0026E3r 3  20 rr rr                     jsr underflow_1
0026E6r 3               
0026E6r 3  16 00                        asl 0,x
0026E8r 3  36 01                        rol 1,x
0026EAr 3               z_cells:
0026EAr 3  60           z_two_star:     rts
0026EBr 3               
0026EBr 3               
0026EBr 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0026EBr 3               ; ## "2!"  auto  ANS core
0026EBr 3                       ; """https://forth-standard.org/standard/core/TwoStore
0026EBr 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0026EBr 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0026EBr 3                       ; """
0026EBr 3               xt_two_store:
0026EBr 3  20 rr rr                     jsr underflow_3
0026EEr 3               
0026EEr 3  B5 00                        lda 0,x
0026F0r 3  85 rr                        sta tmp1
0026F2r 3  B4 01                        ldy 1,x
0026F4r 3  84 rr                        sty tmp1+1
0026F6r 3               
0026F6r 3  E8                           inx
0026F7r 3  E8                           inx
0026F8r 3               
0026F8r 3  B5 00                        lda 0,x         ; copy MSB
0026FAr 3  92 rr                        sta (tmp1)
0026FCr 3  B5 01                        lda 1,x         ; copy next
0026FEr 3  A0 01                        ldy #1
002700r 3  91 rr                        sta (tmp1),y
002702r 3  B5 02                        lda 2,x         ; copy next
002704r 3  C8                           iny
002705r 3  91 rr                        sta (tmp1),y
002707r 3  B5 03                        lda 3,x         ; copy MSB
002709r 3  C8                           iny
00270Ar 3  91 rr                        sta (tmp1),y
00270Cr 3               
00270Cr 3  E8                           inx             ; 2DROP
00270Dr 3  E8                           inx
00270Er 3  E8                           inx
00270Fr 3  E8                           inx
002710r 3               
002710r 3  60           z_two_store:    rts
002711r 3               
002711r 3               
002711r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
002711r 3               ; ## "2swap"  auto  ANS core
002711r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
002711r 3               xt_two_swap:
002711r 3  20 rr rr                     jsr underflow_4
002714r 3               
002714r 3                               ; 0 <-> 4
002714r 3  B5 00                        lda 0,x
002716r 3  B4 04                        ldy 4,x
002718r 3  95 04                        sta 4,x
00271Ar 3  94 00                        sty 0,x
00271Cr 3               
00271Cr 3                               ; 1 <-> 5
00271Cr 3  B5 01                        lda 1,x
00271Er 3  B4 05                        ldy 5,x
002720r 3  95 05                        sta 5,x
002722r 3  94 01                        sty 1,x
002724r 3               
002724r 3                               ; 2 <-> 6
002724r 3  B5 02                        lda 2,x
002726r 3  B4 06                        ldy 6,x
002728r 3  95 06                        sta 6,x
00272Ar 3  94 02                        sty 2,x
00272Cr 3               
00272Cr 3                               ; 3 <-> 7
00272Cr 3  B5 03                        lda 3,x
00272Er 3  B4 07                        ldy 7,x
002730r 3  95 07                        sta 7,x
002732r 3  94 03                        sty 3,x
002734r 3               
002734r 3  60           z_two_swap:     rts
002735r 3               
002735r 3               
002735r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
002735r 3               ; ## "2>r"  auto  ANS core ext
002735r 3                       ; """https://forth-standard.org/standard/core/TwotoR
002735r 3                       ; Push top two entries to Return Stack.
002735r 3                       ;
002735r 3                       ; The same as SWAP >R >R
002735r 3                       ; except that if we jumped here, the return address will be in the
002735r 3                       ; way. May not be natively compiled unless we're clever and use
002735r 3                       ; special routines.
002735r 3                       ; """
002735r 3               xt_two_to_r:
002735r 3                               ; save the return address
002735r 3  68                           pla             ; LSB
002736r 3  85 rr                        sta tmp1
002738r 3  68                           pla             ; MSB
002739r 3  85 rr                        sta tmp1+1
00273Br 3               
00273Br 3                               ; --- CUT HERE FOR NATIVE CODING ---
00273Br 3               
00273Br 3  20 rr rr                     jsr underflow_2
00273Er 3               
00273Er 3                               ; now we can move the data
00273Er 3  B5 03                        lda 3,x         ; MSB
002740r 3  48                           pha
002741r 3  B5 02                        lda 2,x         ; LSB
002743r 3  48                           pha
002744r 3               
002744r 3                               ; now we can move the data
002744r 3  B5 01                        lda 1,x         ; MSB
002746r 3  48                           pha
002747r 3  B5 00                        lda 0,x         ; LSB
002749r 3  48                           pha
00274Ar 3               
00274Ar 3  E8                           inx
00274Br 3  E8                           inx
00274Cr 3  E8                           inx
00274Dr 3  E8                           inx
00274Er 3               
00274Er 3                               ; --- CUT HERE FOR NATIVE CODING ---
00274Er 3               
00274Er 3                               ; restore return address
00274Er 3  A5 rr                        lda tmp1+1      ; MSB
002750r 3  48                           pha
002751r 3  A5 rr                        lda tmp1        ; LSB
002753r 3  48                           pha
002754r 3               
002754r 3  60           z_two_to_r:     rts
002755r 3               
002755r 3               
002755r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002755r 3               ; ## "2constant"  auto  ANS double
002755r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002755r 3                       ;
002755r 3                       ; Based on the Forth code
002755r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002755r 3                       ; """
002755r 3               xt_two_constant:
002755r 3  20 rr rr                     jsr underflow_2
002758r 3               
002758r 3  20 rr rr                     jsr xt_create
00275Br 3  20 rr rr                     jsr xt_swap
00275Er 3  20 rr rr                     jsr xt_comma
002761r 3  20 rr rr                     jsr xt_comma
002764r 3               
002764r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
002767r 3  20 rr rr                     jsr dodoes
00276Ar 3               
00276Ar 3  20 rr rr                     jsr xt_dup
00276Dr 3  20 rr rr                     jsr xt_fetch
002770r 3  20 rr rr                     jsr xt_swap
002773r 3  20 rr rr                     jsr xt_cell_plus
002776r 3  20 rr rr                     jsr xt_fetch
002779r 3               
002779r 3  60           z_two_constant: rts
00277Ar 3               
00277Ar 3               
00277Ar 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
00277Ar 3               ; ## "2literal"  auto  ANS double
00277Ar 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
00277Ar 3                       ; Based on the Forth code
00277Ar 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
00277Ar 3                       ; """
00277Ar 3               xt_two_literal:
00277Ar 3  20 rr rr                     jsr underflow_2 ; double number
00277Dr 3               
00277Dr 3  20 rr rr                     jsr xt_swap
002780r 3  20 rr rr                     jsr xt_literal
002783r 3  20 rr rr                     jsr xt_literal
002786r 3               
002786r 3  60           z_two_literal:  rts
002787r 3               
002787r 3               
002787r 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002787r 3               ; ## "2variable"  auto  ANS double
002787r 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002787r 3                       ; The variable is not initialized to zero.
002787r 3                       ;
002787r 3                       ; This can be realized in Forth as either
002787r 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002787r 3                       ; """
002787r 3               xt_two_variable:
002787r 3                               ; We just let CRATE and ALLOT do the heavy lifting
002787r 3  20 rr rr                     jsr xt_create
00278Ar 3               
00278Ar 3  CA                           dex
00278Br 3  CA                           dex
00278Cr 3  A9 04                        lda #4
00278Er 3  95 00                        sta 0,x
002790r 3  74 01                        stz 1,x
002792r 3               
002792r 3  20 rr rr                     jsr xt_allot
002795r 3               
002795r 3  60           z_two_variable: rts
002796r 3               
002796r 3               
002796r 3               ; ## TYPE ( addr u -- ) "Print string"
002796r 3               ; ## "type"  auto  ANS core
002796r 3                       ; """https://forth-standard.org/standard/core/TYPE
002796r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002796r 3                       ; """
002796r 3               
002796r 3               xt_type:
002796r 3  20 rr rr                     jsr underflow_2
002799r 3               
002799r 3                               ; Save the starting address into tmp1
002799r 3  B5 02                        lda 2,x
00279Br 3  85 rr                        sta tmp1
00279Dr 3  B5 03                        lda 3,x
00279Fr 3  85 rr                        sta tmp1+1
0027A1r 3               @loop:
0027A1r 3                               ; done if length is zero
0027A1r 3  B5 00                        lda 0,x
0027A3r 3  15 01                        ora 1,x
0027A5r 3  F0 15                        beq @done
0027A7r 3               
0027A7r 3                               ; Send the current character
0027A7r 3  B2 rr                        lda (tmp1)
0027A9r 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
0027ACr 3               
0027ACr 3                               ; Move the address along (in tmp1)
0027ACr 3  E6 rr                        inc tmp1
0027AEr 3  D0 02                        bne @1
0027B0r 3  E6 rr                        inc tmp1+1
0027B2r 3               @1:
0027B2r 3                               ; Reduce the count (on the data stack)
0027B2r 3  B5 00                        lda 0,x
0027B4r 3  D0 02                        bne @2
0027B6r 3  D6 01                        dec 1,x
0027B8r 3               @2:
0027B8r 3  D6 00                        dec 0,x
0027BAr 3               
0027BAr 3  80 E5                        bra @loop
0027BCr 3               @done:
0027BCr 3  E8                           inx
0027BDr 3  E8                           inx
0027BEr 3  E8                           inx
0027BFr 3  E8                           inx
0027C0r 3               
0027C0r 3  60           z_type:         rts
0027C1r 3               
0027C1r 3               
0027C1r 3               
0027C1r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
0027C1r 3               ; ## "u."  tested  ANS core
0027C1r 3                       ; """https://forth-standard.org/standard/core/Ud
0027C1r 3                       ;
0027C1r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
0027C1r 3                       ; We use the internal assembler function print_u followed
0027C1r 3                       ; by a single space
0027C1r 3                       ; """
0027C1r 3               xt_u_dot:
0027C1r 3  20 rr rr                     jsr underflow_1
0027C4r 3               
0027C4r 3  20 rr rr                     jsr print_u
0027C7r 3  A9 20                        lda #AscSP
0027C9r 3  20 rr rr                     jsr emit_a
0027CCr 3               
0027CCr 3  60           z_u_dot:        rts
0027CDr 3               
0027CDr 3               
0027CDr 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
0027CDr 3               ; ## "u.r"  tested  ANS core ext
0027CDr 3                       ; """https://forth-standard.org/standard/core/UDotR"""
0027CDr 3               xt_u_dot_r:
0027CDr 3  20 rr rr                     jsr underflow_2
0027D0r 3               
0027D0r 3  20 rr rr                     jsr xt_to_r
0027D3r 3  20 rr rr                     jsr xt_zero
0027D6r 3  20 rr rr                     jsr xt_less_number_sign
0027D9r 3  20 rr rr                     jsr xt_number_sign_s
0027DCr 3  20 rr rr                     jsr xt_number_sign_greater
0027DFr 3  20 rr rr                     jsr xt_r_from
0027E2r 3  20 rr rr                     jsr xt_over
0027E5r 3  20 rr rr                     jsr xt_minus
0027E8r 3  20 rr rr                     jsr xt_spaces
0027EBr 3  20 rr rr                     jsr xt_type
0027EEr 3               
0027EEr 3  60           z_u_dot_r:      rts
0027EFr 3               
0027EFr 3               
0027EFr 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
0027EFr 3               ; ## "u>"  auto  ANS core ext
0027EFr 3                       ; """https://forth-standard.org/standard/core/Umore"""
0027EFr 3               xt_u_greater_than:
0027EFr 3  20 rr rr                     jsr underflow_2
0027F2r 3               
0027F2r 3  B5 00                        lda 0,x
0027F4r 3  D5 02                        cmp 2,x
0027F6r 3  B5 01                        lda 1,x
0027F8r 3  F5 03                        sbc 3,x
0027FAr 3  E8                           inx
0027FBr 3  E8                           inx
0027FCr 3               
0027FCr 3  A9 00                        lda #0
0027FEr 3  69 FF                        adc #$ff
002800r 3  95 00                        sta 0,x         ; store flag
002802r 3  95 01                        sta 1,x
002804r 3               
002804r 3  60           z_u_greater_than:    rts
002805r 3               
002805r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002805r 3               ; ## "u<"  auto  ANS core
002805r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002805r 3               xt_u_less_than:
002805r 3  20 rr rr                     jsr underflow_2
002808r 3               
002808r 3  B5 02                        lda 2,x
00280Ar 3  D5 00                        cmp 0,x
00280Cr 3  B5 03                        lda 3,x
00280Er 3  F5 01                        sbc 1,x
002810r 3  E8                           inx
002811r 3  E8                           inx
002812r 3               
002812r 3  A9 00                        lda #0
002814r 3  69 FF                        adc #$ff
002816r 3  95 00                        sta 0,x         ; store flag
002818r 3  95 01                        sta 1,x
00281Ar 3               
00281Ar 3  60           z_u_less_than:    rts
00281Br 3               
00281Br 3               
00281Br 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
00281Br 3               ; ## "ud."  auto  Tali double
00281Br 3                       ;
00281Br 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
00281Br 3                       ; """
00281Br 3               xt_ud_dot:
00281Br 3  20 rr rr                     jsr underflow_2 ; double number
00281Er 3               
00281Er 3  20 rr rr                     jsr xt_less_number_sign
002821r 3  20 rr rr                     jsr xt_number_sign_s
002824r 3  20 rr rr                     jsr xt_number_sign_greater
002827r 3  20 rr rr                     jsr xt_type
00282Ar 3  20 rr rr                     jsr xt_space
00282Dr 3               
00282Dr 3  60           z_ud_dot:        rts
00282Er 3               
00282Er 3               
00282Er 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
00282Er 3               ; ## "ud.r"  auto  Tali double
00282Er 3                       ;
00282Er 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
00282Er 3                       ; """
00282Er 3               xt_ud_dot_r:
00282Er 3  20 rr rr                     jsr underflow_3
002831r 3               
002831r 3  20 rr rr                     jsr xt_to_r
002834r 3  20 rr rr                     jsr xt_less_number_sign
002837r 3  20 rr rr                     jsr xt_number_sign_s
00283Ar 3  20 rr rr                     jsr xt_number_sign_greater
00283Dr 3  20 rr rr                     jsr xt_r_from
002840r 3  20 rr rr                     jsr xt_over
002843r 3  20 rr rr                     jsr xt_minus
002846r 3  20 rr rr                     jsr xt_spaces
002849r 3  20 rr rr                     jsr xt_type
00284Cr 3               
00284Cr 3  60           z_ud_dot_r:      rts
00284Dr 3               
00284Dr 3               
00284Dr 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
00284Dr 3               ; ## "um/mod"  auto  ANS core
00284Dr 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
00284Dr 3                       ; Divide double cell number by single cell number, returning the
00284Dr 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
00284Dr 3                       ; This is the basic division operation all others use. Based on FIG
00284Dr 3                       ; Forth code, modified by Garth Wilson, see
00284Dr 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
00284Dr 3                       ;
00284Dr 3                       ; This uses tmp1, tmp1+1, and tmptos
00284Dr 3                       ; """
00284Dr 3               
00284Dr 3               xt_um_slash_mod:
00284Dr 3  20 rr rr                     jsr underflow_3
002850r 3               
002850r 3                               ; catch division by zero
002850r 3  B5 00                        lda 0,x
002852r 3  15 01                        ora 1,x
002854r 3  D0 05                        bne @not_zero
002856r 3               
002856r 3  A9 04                        lda #err_divzero
002858r 3  4C rr rr                     jmp error
00285Br 3               
00285Br 3               @not_zero:
00285Br 3                               ; We loop 17 times
00285Br 3  A9 11                        lda #17
00285Dr 3  85 rr                        sta tmptos
00285Fr 3               
00285Fr 3               @loop:
00285Fr 3                               ; rotate low cell of dividend one bit left (LSB)
00285Fr 3  36 04                        rol 4,x
002861r 3  36 05                        rol 5,x
002863r 3               
002863r 3                               ; loop control
002863r 3  C6 rr                        dec tmptos
002865r 3  F0 22                        beq @done
002867r 3               
002867r 3                               ; rotate high cell of dividend one bit left (MSB)
002867r 3  36 02                        rol 2,x
002869r 3  36 03                        rol 3,x
00286Br 3               
00286Br 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
00286Dr 3  26 rr                        rol tmp1
00286Fr 3               
00286Fr 3                               ; subtract dividend hi cell minus divisor
00286Fr 3  38                           sec
002870r 3  B5 02                        lda 2,x
002872r 3  F5 00                        sbc 0,x
002874r 3  85 rr                        sta tmp1+1
002876r 3  B5 03                        lda 3,x
002878r 3  F5 01                        sbc 1,x
00287Ar 3               
00287Ar 3  A8                           tay
00287Br 3  A5 rr                        lda tmp1
00287Dr 3  E9 00                        sbc #0
00287Fr 3  90 DE                        bcc @loop
002881r 3               
002881r 3                               ; make result new dividend high cell
002881r 3  A5 rr                        lda tmp1+1
002883r 3  95 02                        sta 2,x
002885r 3  94 03                        sty 3,x         ; used as temp storage
002887r 3               
002887r 3  80 D6                        bra @loop
002889r 3               @done:
002889r 3  E8                           inx
00288Ar 3  E8                           inx
00288Br 3               
00288Br 3  20 rr rr                     jsr xt_swap
00288Er 3               
00288Er 3  60           z_um_slash_mod: rts
00288Fr 3               
00288Fr 3               
00288Fr 3               
00288Fr 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
00288Fr 3               ; ## "um*"  auto  ANS core
00288Fr 3                       ; """https://forth-standard.org/standard/core/UMTimes
00288Fr 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
00288Fr 3                       ; Old Forth versions such as FIG Forth call this U*
00288Fr 3                       ;
00288Fr 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
00288Fr 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
00288Fr 3                       ; discussion.
00288Fr 3                       ;
00288Fr 3                       ; We don't use the system scratch pad (SYSPAD) for temp
00288Fr 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
00288Fr 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
00288Fr 3                       ;
00288Fr 3                       ; Consider switching to a table-supported version based on
00288Fr 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
00288Fr 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
00288Fr 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
00288Fr 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
00288Fr 3                       ; """
00288Fr 3               
00288Fr 3               xt_um_star:
00288Fr 3  20 rr rr                     jsr underflow_2
002892r 3               
002892r 3                               ; to eliminate clc inside the loop, the value at
002892r 3                               ; tmp1 is reduced by 1 in advance
002892r 3  18                           clc
002893r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002895r 3  E9 00                        sbc #0
002897r 3  85 rr                        sta tmp2
002899r 3               
002899r 3  B5 01                        lda 1,x
00289Br 3  E9 00                        sbc #0
00289Dr 3  90 31                        bcc @zero       ; is TOS zero?
00289Fr 3  85 rr                        sta tmp2+1
0028A1r 3               
0028A1r 3  A9 00                        lda #0
0028A3r 3  85 rr                        sta tmp1
0028A5r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
0028A7r 3  CA                           dex
0028A8r 3  CA                           dex
0028A9r 3               
0028A9r 3               @outer_loop:
0028A9r 3  A0 08                        ldy #8          ; counter inner loop
0028ABr 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
0028ADr 3               
0028ADr 3               @inner_loop:
0028ADr 3  90 0C                        bcc @no_add
0028AFr 3  85 rr                        sta tmp1+1      ; save time, don't CLC
0028B1r 3  A5 rr                        lda tmp1
0028B3r 3  65 rr                        adc tmp2
0028B5r 3  85 rr                        sta tmp1
0028B7r 3  A5 rr                        lda tmp1+1
0028B9r 3  65 rr                        adc tmp2+1
0028BBr 3               
0028BBr 3               @no_add:
0028BBr 3  6A                           ror
0028BCr 3  66 rr                        ror tmp1
0028BEr 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
0028C0r 3               
0028C0r 3  88                           dey
0028C1r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
0028C3r 3               
0028C3r 3  E8                           inx
0028C4r 3  E4 rr                        cpx tmp3
0028C6r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
0028C8r 3               
0028C8r 3                               ; all done, store high word of result
0028C8r 3  95 01                        sta 1,x
0028CAr 3  A5 rr                        lda tmp1
0028CCr 3  95 00                        sta 0,x
0028CEr 3  80 04                        bra @done
0028D0r 3               
0028D0r 3               @zero:
0028D0r 3  74 02                        stz 2,x
0028D2r 3  74 03                        stz 3,x
0028D4r 3               @done:
0028D4r 3  60           z_um_star:      rts
0028D5r 3               
0028D5r 3               
0028D5r 3               
0028D5r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
0028D5r 3               ; ## "unloop"  auto  ANS core
0028D5r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
0028D5r 3                       ;
0028D5r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
0028D5r 3                       ; """
0028D5r 3               xt_unloop:
0028D5r 3                               ; Drop fudge number (limit/start from DO/?DO off the
0028D5r 3                               ; return stack
0028D5r 3  68                           pla
0028D6r 3  68                           pla
0028D7r 3  68                           pla
0028D8r 3  68                           pla
0028D9r 3               
0028D9r 3                               ; Now drop the LEAVE address that was below them off
0028D9r 3                               ; the Return Stack as well
0028D9r 3  68                           pla
0028DAr 3  68                           pla
0028DBr 3               
0028DBr 3  60           z_unloop:       rts
0028DCr 3               
0028DCr 3               
0028DCr 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
0028DCr 3               ; ## "until"  auto  ANS core
0028DCr 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
0028DCr 3               xt_until:
0028DCr 3                               ; Compile a 0BRANCH
0028DCr 3  A0 rr                        ldy #>zero_branch_runtime
0028DEr 3  A9 rr                        lda #<zero_branch_runtime
0028E0r 3  20 rr rr                     jsr cmpl_subroutine
0028E3r 3               
0028E3r 3                               ; The address to loop back to is on the stack.
0028E3r 3                               ; Just compile it as the destination for the
0028E3r 3                               ; 0branch.
0028E3r 3  20 rr rr                     jsr xt_comma
0028E6r 3               
0028E6r 3  60           z_until:        rts
0028E7r 3               
0028E7r 3               
0028E7r 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
0028E7r 3               ; ## "unused"  auto  ANS core ext
0028E7r 3                       ; """https://forth-standard.org/standard/core/UNUSED
0028E7r 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
0028E7r 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
0028E7r 3                       ; defaults to $400
0028E7r 3                       ; """
0028E7r 3               xt_unused:
0028E7r 3  CA                           dex
0028E8r 3  CA                           dex
0028E9r 3               
0028E9r 3  A9 FF                        lda #<cp_end
0028EBr 3  38                           sec
0028ECr 3  E5 rr                        sbc cp
0028EEr 3  95 00                        sta 0,x
0028F0r 3               
0028F0r 3  A9 7F                        lda #>cp_end
0028F2r 3  E5 rr                        sbc cp+1
0028F4r 3  95 01                        sta 1,x
0028F6r 3               
0028F6r 3  60           z_unused:       rts
0028F7r 3               
0028F7r 3               
0028F7r 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
0028F7r 3               ; ## "update"  auto  ANS block
0028F7r 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
0028F7r 3               xt_update:
0028F7r 3                               ; Turn on the dirty bit. We can't use TSB here because it only
0028F7r 3                               ; has Absolute and Direct Pages addressing modes
0028F7r 3  A0 2C                        ldy #buffstatus_offset
0028F9r 3  B1 rr                        lda (up),y
0028FBr 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
0028FDr 3  91 rr                        sta (up),y
0028FFr 3               
0028FFr 3  60           z_update:       rts
002900r 3               
002900r 3               
002900r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002900r 3               ; ## "useraddr"  tested  Tali Forth
002900r 3               xt_useraddr:
002900r 3  CA                           dex
002901r 3  CA                           dex
002902r 3  A9 rr                        lda #<up
002904r 3  95 00                        sta 0,x
002906r 3  A9 rr                        lda #>up
002908r 3  95 01                        sta 1,x
00290Ar 3               
00290Ar 3  60           z_useraddr:     rts
00290Br 3               
00290Br 3               
00290Br 3               ; ## VALUE ( n "name" -- ) "Define a value"
00290Br 3               ; ## "value"  auto  ANS core
00290Br 3                       ; """https://forth-standard.org/standard/core/VALUE
00290Br 3                       ;
00290Br 3                       ; This is a dummy header for the WORDLIST. The actual code is
00290Br 3                       ; identical to that of CONSTANT
00290Br 3                       ; """
00290Br 3               
00290Br 3               
00290Br 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
00290Br 3               ; ## "variable"  auto  ANS core
00290Br 3                       ; """https://forth-standard.org/standard/core/VARIABLE
00290Br 3                       ; There are various Forth definitions for this word, such as
00290Br 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
00290Br 3                       ; second one so the variable is initialized to zero
00290Br 3                       ; """
00290Br 3               xt_variable:
00290Br 3                               ; we let CREATE do the heavy lifting
00290Br 3  20 rr rr                     jsr xt_create
00290Er 3               
00290Er 3                               ; there is no "STZ (CP)" so we have to do this the hard
00290Er 3                               ; way
00290Er 3  A9 00                        lda #0
002910r 3               
002910r 3  92 rr                        sta (cp)
002912r 3  E6 rr                        inc cp
002914r 3  D0 02                        bne @1
002916r 3  E6 rr                        inc cp+1
002918r 3               @1:
002918r 3  92 rr                        sta (cp)
00291Ar 3  E6 rr                        inc cp
00291Cr 3  D0 02                        bne @2
00291Er 3  E6 rr                        inc cp+1
002920r 3               @2:
002920r 3                               ; Now we need to adjust the length of the complete word by two
002920r 3  20 rr rr                     jsr adjust_z
002923r 3               
002923r 3  60           z_variable:     rts
002924r 3               
002924r 3               
002924r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002924r 3               ; ## "while"  auto  ANS core
002924r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002924r 3               xt_while:
002924r 3                               ; Compile a 0branch
002924r 3  A0 rr                        ldy #>zero_branch_runtime
002926r 3  A9 rr                        lda #<zero_branch_runtime
002928r 3  20 rr rr                     jsr cmpl_subroutine
00292Br 3               
00292Br 3                               ; Put the address (here) where the destination
00292Br 3                               ; address needs to go so it can be put there later.
00292Br 3  20 rr rr                     jsr xt_here
00292Er 3               
00292Er 3                               ; Fill in the destination address with 0 for now.
00292Er 3  20 rr rr                     jsr xt_zero
002931r 3  20 rr rr                     jsr xt_comma
002934r 3               
002934r 3                               ; Swap the two addresses on the stack.
002934r 3  20 rr rr                     jsr xt_swap
002937r 3               
002937r 3  60           z_while:        rts
002938r 3               
002938r 3               
002938r 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002938r 3               ; ## "within"  auto  ANS core ext
002938r 3                       ; """https://forth-standard.org/standard/core/WITHIN
002938r 3                       ;
002938r 3                       ; This an assembler version of the ANS Forth implementation
002938r 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002938r 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002938r 3                       ; ROT TUCK > -ROT > INVERT AND
002938r 3                       ; """"
002938r 3               xt_within:
002938r 3  20 rr rr                     jsr underflow_3
00293Br 3               
00293Br 3  20 rr rr                     jsr xt_over
00293Er 3  20 rr rr                     jsr xt_minus
002941r 3  20 rr rr                     jsr xt_to_r
002944r 3  20 rr rr                     jsr xt_minus
002947r 3  20 rr rr                     jsr xt_r_from
00294Ar 3  20 rr rr                     jsr xt_u_less_than
00294Dr 3               
00294Dr 3  60           z_within:       rts
00294Er 3               
00294Er 3               
00294Er 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
00294Er 3               ; ## "word"  auto  ANS core
00294Er 3                       ; """https://forth-standard.org/standard/core/WORD
00294Er 3                       ; Obsolete parsing word included for backwards compatibility only.
00294Er 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
00294Er 3                       ; and copies word to storage area for a maximum size of 255 bytes.
00294Er 3                       ; Returns the result as a counted string (requires COUNT to convert
00294Er 3                       ; to modern format), and inserts a space after the string. See "Forth
00294Er 3                       ; Programmer's Handbook" 3rd edition p. 159 and
00294Er 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
00294Er 3                       ; for discussions of why you shouldn't be using WORD anymore.
00294Er 3                       ;
00294Er 3                       ; Forth
00294Er 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
00294Er 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
00294Er 3                       ; """
00294Er 3               
00294Er 3               xt_word:
00294Er 3  20 rr rr                     jsr underflow_1
002951r 3               
002951r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002951r 3                               ; but unlike PARSE
002951r 3  A4 rr                        ldy toin                ; >IN
002953r 3               @loop:
002953r 3  C4 rr                        cpy ciblen              ; quit if end of input
002955r 3  F0 09                        beq @found_char
002957r 3  B1 rr                        lda (cib),y
002959r 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
00295Br 3  D0 03                        bne @found_char
00295Dr 3               
00295Dr 3  C8                           iny
00295Er 3  80 F3                        bra @loop
002960r 3               @found_char:
002960r 3                               ; Save index of where word starts
002960r 3  84 rr                        sty toin
002962r 3               
002962r 3                               ; The real work is done by parse
002962r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002965r 3               
002965r 3                               ; Convert the modern ( addr u ) string format to obsolete
002965r 3                               ; ( caddr ) format. We just do this in the Dictionary
002965r 3  B5 00                        lda 0,x
002967r 3  92 rr                        sta (cp)                ; Save length of string
002969r 3  48                           pha                     ; Keep copy of length for later
00296Ar 3               
00296Ar 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
00296Dr 3  A5 rr                        lda cp
00296Fr 3  18                           clc
002970r 3  69 01                        adc #1
002972r 3  95 02                        sta 2,x                 ; LSB of CP
002974r 3  A5 rr                        lda cp+1
002976r 3  69 00                        adc #0
002978r 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
00297Ar 3               
00297Ar 3  20 rr rr                     jsr xt_move
00297Dr 3               
00297Dr 3                               ; Return caddr
00297Dr 3  CA                           dex
00297Er 3  CA                           dex
00297Fr 3  A5 rr                        lda cp
002981r 3  95 00                        sta 0,x
002983r 3  A5 rr                        lda cp+1
002985r 3  95 01                        sta 1,x
002987r 3               
002987r 3                               ; Adjust CP
002987r 3  68                           pla                     ; length of string
002988r 3  18                           clc
002989r 3  65 rr                        adc cp
00298Br 3  85 rr                        sta cp
00298Dr 3  A5 rr                        lda cp+1
00298Fr 3  69 00                        adc #0                  ; we only need the carry
002991r 3  85 rr                        sta cp+1
002993r 3  60           z_word:         rts
002994r 3               
002994r 3               
002994r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002994r 3               ; ## "wordlist" auto ANS search
002994r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002994r 3                       ; See the tutorial on Wordlists and the Search Order for
002994r 3                       ; more information.
002994r 3                       ; """
002994r 3               
002994r 3               xt_wordlist:
002994r 3                               ; Get the current number of wordlists
002994r 3  A0 05                        ldy #num_wordlists_offset
002996r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002998r 3                                               ; the LSB needs to be checked.
002998r 3               
002998r 3                               ; See if we are already at the max.
002998r 3  C9 0C                        cmp #max_wordlists
00299Ar 3  D0 05                        bne @ok
00299Cr 3               
00299Cr 3                               ; Print an error message if all wordlists used.
00299Cr 3  A9 0B                        lda #err_wordlist
00299Er 3  4C rr rr                     jmp error
0029A1r 3               
0029A1r 3               @ok:
0029A1r 3  1A                           inc             ; Increment the wordlist#
0029A2r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
0029A4r 3  CA                           dex             ; and put it on the stack.
0029A5r 3  CA                           dex
0029A6r 3  95 00                        sta 0,x
0029A8r 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
0029AAr 3               
0029AAr 3  60           z_wordlist:     rts
0029ABr 3               
0029ABr 3               
0029ABr 3               
0029ABr 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
0029ABr 3               ; ## "words"  tested  ANS tools
0029ABr 3                       ; """https://forth-standard.org/standard/tools/WORDS
0029ABr 3                       ; This is pretty much only used at the command line so we can
0029ABr 3                       ; be slow and try to save space.
0029ABr 3                       ; """
0029ABr 3               
0029ABr 3               xt_words:
0029ABr 3                               ; we follow Gforth by starting on the next
0029ABr 3                               ; line
0029ABr 3  20 rr rr                     jsr xt_cr
0029AEr 3               
0029AEr 3                               ; We pretty-format the output by inserting a line break
0029AEr 3                               ; before the end of the line. We can get away with pushing
0029AEr 3                               ; the counter to the stack because this is usually an
0029AEr 3                               ; interactive word and speed is not that important
0029AEr 3  A9 00                        lda #0
0029B0r 3  48                           pha
0029B1r 3               
0029B1r 3                               ; Set up for traversing the wordlist search order.
0029B1r 3  CA                           dex                     ; Make room on the stack for
0029B2r 3  CA                           dex                     ; a dictionary pointer.
0029B3r 3  64 rr                        stz tmp3                ; Start at the beginning of
0029B5r 3                                                       ; the search order.
0029B5r 3               @wordlist_loop:
0029B5r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
0029B7r 3  A5 rr                        lda tmp3
0029B9r 3  D1 rr                        cmp (up),y              ; See if we are done.
0029BBr 3  D0 02                        bne @have_wordlist
0029BDr 3               
0029BDr 3                               ; We ran out of wordlists to search.
0029BDr 3  80 44                        bra @words_done
0029BFr 3               
0029BFr 3               @have_wordlist:
0029BFr 3                               ; start with last word in Dictionary
0029BFr 3                               ; Get the current wordlist id
0029BFr 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
0029C0r 3  69 1F                        adc #search_order_offset
0029C2r 3  A8                           tay
0029C3r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
0029C5r 3               
0029C5r 3                               ; Get the DP for that wordlist.
0029C5r 3  0A                           asl                     ; Turn offset into cells offset.
0029C6r 3  18                           clc
0029C7r 3  69 06                        adc #wordlists_offset
0029C9r 3  A8                           tay
0029CAr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
0029CCr 3  95 00                        sta 0,x                 ; on the stack. ( nt )
0029CEr 3  C8                           iny
0029CFr 3  B1 rr                        lda (up),y
0029D1r 3  95 01                        sta 1,x
0029D3r 3               
0029D3r 3               @loop:
0029D3r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0029D6r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
0029D9r 3               
0029D9r 3                               ; Insert line break if we're about to go past the end of the
0029D9r 3                               ; line
0029D9r 3  68                           pla
0029DAr 3  18                           clc
0029DBr 3  75 00                        adc 0,x
0029DDr 3  1A                           inc                     ; don't forget the space between words
0029DEr 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
0029E0r 3  90 05                        bcc @1
0029E2r 3               
0029E2r 3  20 rr rr                     jsr xt_cr
0029E5r 3  A9 00                        lda #0
0029E7r 3               @1:
0029E7r 3  48                           pha
0029E8r 3  20 rr rr                     jsr xt_type             ; ( nt )
0029EBr 3               
0029EBr 3  A9 20                        lda #AscSP
0029EDr 3  20 rr rr                     jsr emit_a
0029F0r 3               
0029F0r 3                               ; get next word, which begins two down
0029F0r 3  20 rr rr                     jsr xt_one_plus         ; 1+
0029F3r 3  20 rr rr                     jsr xt_one_plus         ; 1+
0029F6r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
0029F9r 3               
0029F9r 3                               ; if next address is zero, we're done
0029F9r 3  B5 00                        lda 0,x
0029FBr 3  15 01                        ora 1,x
0029FDr 3  D0 D4                        bne @loop
0029FFr 3               
0029FFr 3                               ; Move on to the next wordlist in the search order.
0029FFr 3  E6 rr                        inc tmp3
002A01r 3  80 B2                        bra @wordlist_loop
002A03r 3               
002A03r 3               @words_done:
002A03r 3  68                           pla                     ; dump counter
002A04r 3               
002A04r 3  E8                           inx
002A05r 3  E8                           inx
002A06r 3               
002A06r 3  60           z_words:        rts
002A07r 3               
002A07r 3               
002A07r 3               
002A07r 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002A07r 3               ; ## "wordsize"  auto  Tali Forth
002A07r 3                       ; """Given an word's name token (nt), return the size of the
002A07r 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002A07r 3                       ; count the final RTS.
002A07r 3                       ; """
002A07r 3               xt_wordsize:
002A07r 3  20 rr rr                     jsr underflow_1
002A0Ar 3               
002A0Ar 3                               ; We get the start address of the word from its header entry
002A0Ar 3                               ; for the start of the actual code (execution token, xt)
002A0Ar 3                               ; which is four bytes down, and the pointer to the end of the
002A0Ar 3                               ; code (z_word, six bytes down)
002A0Ar 3  B5 00                        lda 0,x
002A0Cr 3  85 rr                        sta tmp1
002A0Er 3  B5 01                        lda 1,x
002A10r 3  85 rr                        sta tmp1+1
002A12r 3               
002A12r 3  A0 06                        ldy #6
002A14r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002A16r 3  88                           dey
002A17r 3  88                           dey
002A18r 3               
002A18r 3  38                           sec
002A19r 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002A1Br 3  95 00                        sta 0,x
002A1Dr 3               
002A1Dr 3  A0 07                        ldy #7
002A1Fr 3  B1 rr                        lda (tmp1),y    ; MSB of z
002A21r 3  88                           dey
002A22r 3  88                           dey
002A23r 3               
002A23r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002A25r 3  95 01                        sta 1,x
002A27r 3               
002A27r 3  60           z_wordsize:     rts
002A28r 3               
002A28r 3               
002A28r 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002A28r 3               ; ## "xor"  auto  ANS core
002A28r 3                       ; """https://forth-standard.org/standard/core/XOR"""
002A28r 3               xt_xor:
002A28r 3  20 rr rr                     jsr underflow_2
002A2Br 3               
002A2Br 3  B5 00                        lda 0,x
002A2Dr 3  55 02                        eor 2,x
002A2Fr 3  95 02                        sta 2,x
002A31r 3               
002A31r 3  B5 01                        lda 1,x
002A33r 3  55 03                        eor 3,x
002A35r 3  95 03                        sta 3,x
002A37r 3               
002A37r 3  E8                           inx
002A38r 3  E8                           inx
002A39r 3               
002A39r 3  60           z_xor:          rts
002A3Ar 3               
002A3Ar 3               
002A3Ar 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002A3Ar 3               ; ## "0"  auto  Tali Forth
002A3Ar 3                       ; """The disassembler assumes that this routine does not use Y. Note
002A3Ar 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002A3Ar 3                       ; is 0."""
002A3Ar 3               xt_case:
002A3Ar 3               xt_forth_wordlist:
002A3Ar 3               xt_zero:
002A3Ar 3  CA                           dex             ; push
002A3Br 3  CA                           dex
002A3Cr 3  74 00                        stz 0,x
002A3Er 3  74 01                        stz 1,x
002A40r 3               z_case:
002A40r 3               z_forth_wordlist:
002A40r 3               z_zero:
002A40r 3  60                           rts
002A41r 3               
002A41r 3               
002A41r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002A41r 3               ; ## "0="  auto  ANS core
002A41r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002A41r 3               
002A41r 3               xt_zero_equal:
002A41r 3  20 rr rr                     jsr underflow_1
002A44r 3               
002A44r 3  B5 00                        lda 0,x
002A46r 3  15 01                        ora 1,x
002A48r 3  F0 04                        beq @zero
002A4Ar 3               
002A4Ar 3                               ; not a zero, so we need a FALSE flag (0)
002A4Ar 3  A9 00                        lda #0
002A4Cr 3  80 02                        bra @store
002A4Er 3               @zero:
002A4Er 3                               ; We have a zero, so we need a TRUE flag (-1)
002A4Er 3  A9 FF                        lda #$ff
002A50r 3               @store:
002A50r 3  95 00                        sta 0,x
002A52r 3  95 01                        sta 1,x
002A54r 3               
002A54r 3  60           z_zero_equal:   rts
002A55r 3               
002A55r 3               
002A55r 3               
002A55r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002A55r 3               ; ## "0>"  auto  ANS core ext
002A55r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002A55r 3               
002A55r 3               xt_zero_greater:
002A55r 3  20 rr rr                     jsr underflow_1
002A58r 3               
002A58r 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002A5Ar 3               
002A5Ar 3  B5 01                        lda 1,x         ; MSB
002A5Cr 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002A5Er 3  15 00                        ora 0,x
002A60r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002A62r 3               
002A62r 3  88                           dey             ; TOS is postive, make true
002A63r 3               @done:
002A63r 3  98                           tya
002A64r 3  95 00                        sta 0,x
002A66r 3  95 01                        sta 1,x
002A68r 3               
002A68r 3  60           z_zero_greater: rts
002A69r 3               
002A69r 3               
002A69r 3               
002A69r 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002A69r 3               ; ## "0<"  auto  ANS core
002A69r 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002A69r 3               
002A69r 3               xt_zero_less:
002A69r 3  20 rr rr                     jsr underflow_1
002A6Cr 3               
002A6Cr 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002A6Er 3               
002A6Er 3  B5 01                        lda 1,x         ; MSB
002A70r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002A72r 3               
002A72r 3  88                           dey             ; TOS is negative, make TRUE
002A73r 3               @done:
002A73r 3  98                           tya
002A74r 3  95 00                        sta 0,x
002A76r 3  95 01                        sta 1,x
002A78r 3               
002A78r 3  60           z_zero_less:    rts
002A79r 3               
002A79r 3               
002A79r 3               
002A79r 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002A79r 3               ; ## "0<>"  auto  ANS core ext
002A79r 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002A79r 3               
002A79r 3               xt_zero_unequal:
002A79r 3  20 rr rr                     jsr underflow_1
002A7Cr 3               
002A7Cr 3  A0 00                        ldy #0          ; default false
002A7Er 3               
002A7Er 3  B5 00                        lda 0,x
002A80r 3  15 01                        ora 1,x
002A82r 3  F0 01                        beq @got_zero
002A84r 3               
002A84r 3  88                           dey
002A85r 3               @got_zero:
002A85r 3  98                           tya
002A86r 3  95 00                        sta 0,x
002A88r 3  95 01                        sta 1,x
002A8Ar 3               
002A8Ar 3  60           z_zero_unequal: rts
002A8Br 3               
002A8Br 3               
002A8Br 3               
002A8Br 3               ; ==========================================================
002A8Br 3               ; EDITOR words
002A8Br 3               
002A8Br 3               ; This routine is used by both enter-screen and erase-screen
002A8Br 3               ; to get a buffer for the given screen number and set SCR to
002A8Br 3               ; the given screen number.  This word is not in the dictionary.
002A8Br 3               xt_editor_screen_helper:
002A8Br 3  20 rr rr                     jsr xt_dup
002A8Er 3  20 rr rr                     jsr xt_scr
002A91r 3  20 rr rr                     jsr xt_store
002A94r 3  20 rr rr                     jsr xt_buffer
002A97r 3               z_editor_screen_helper:
002A97r 3  60                           rts
002A98r 3               
002A98r 3               
002A98r 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002A98r 3               ; ## "enter-screen"  auto  Tali Editor
002A98r 3               
002A98r 3               xt_editor_enter_screen:
002A98r 3                               ; Set the variable SCR and get a buffer for the
002A98r 3                               ; given screen number.
002A98r 3  20 rr rr                     jsr xt_editor_screen_helper
002A9Br 3               
002A9Br 3                               ; Drop the buffer address.
002A9Br 3  20 rr rr                     jsr xt_drop
002A9Er 3               
002A9Er 3                               ; Overwrite the lines one at a time.
002A9Er 3  64 rr                        stz editor1
002AA0r 3               @prompt_loop:
002AA0r 3                               ; Put the current line number on the stack.
002AA0r 3  CA                           dex
002AA1r 3  CA                           dex
002AA2r 3  A5 rr                        lda editor1
002AA4r 3  95 00                        sta 0,x
002AA6r 3  74 01                        stz 1,x
002AA8r 3               
002AA8r 3                               ; Use the O word to prompt for overwrite.
002AA8r 3  20 rr rr                     jsr xt_editor_o
002AABr 3               
002AABr 3                               ; Move on to the next line.
002AABr 3  E6 rr                        inc editor1
002AADr 3  A9 10                        lda #16
002AAFr 3  C5 rr                        cmp editor1
002AB1r 3  D0 ED                        bne @prompt_loop
002AB3r 3               
002AB3r 3               z_editor_enter_screen:
002AB3r 3  60                           rts
002AB4r 3               
002AB4r 3               
002AB4r 3               
002AB4r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002AB4r 3               ; ## "erase-screen"  tested  Tali Editor
002AB4r 3               xt_editor_erase_screen:
002AB4r 3                               ; Set the variable SCR and get a buffer for the
002AB4r 3                               ; given screen number.
002AB4r 3  20 rr rr                     jsr xt_editor_screen_helper
002AB7r 3               
002AB7r 3                               ; Put 1024 (chars/screen) on stack.
002AB7r 3  CA                           dex
002AB8r 3  CA                           dex
002AB9r 3  74 00                        stz 0,x
002ABBr 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002ABDr 3  95 01                        sta 1,x
002ABFr 3               
002ABFr 3                               ; Erase the entire block (fill with spaces).
002ABFr 3  20 rr rr                     jsr xt_blank
002AC2r 3               
002AC2r 3                               ; Mark buffer as updated.
002AC2r 3  20 rr rr                     jsr xt_update
002AC5r 3               
002AC5r 3               z_editor_erase_screen:
002AC5r 3  60                           rts
002AC6r 3               
002AC6r 3               
002AC6r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002AC6r 3               ; ## "el"  tested  Tali Editor
002AC6r 3               xt_editor_el:
002AC6r 3                               ; Turn the line number into buffer offset.
002AC6r 3                               ; This also loads the block into the buffer if it's
002AC6r 3                               ; not there for some reason.
002AC6r 3  20 rr rr                     jsr xt_editor_line
002AC9r 3               
002AC9r 3                               ; Put 64 (# of chars/line) on the stack.
002AC9r 3  CA                           dex
002ACAr 3  CA                           dex
002ACBr 3  A9 40                        lda #64
002ACDr 3  95 00                        sta 0,x
002ACFr 3  74 01                        stz 1,x
002AD1r 3               
002AD1r 3                               ; Fill with spaces.
002AD1r 3  20 rr rr                     jsr xt_blank
002AD4r 3               
002AD4r 3                               ; Mark buffer as updated.
002AD4r 3  20 rr rr                     jsr xt_update
002AD7r 3               
002AD7r 3  60           z_editor_el:    rts
002AD8r 3               
002AD8r 3               
002AD8r 3               ; ## EDITOR_L ( -- ) "List the current screen"
002AD8r 3               ; ## "l"  tested  Tali Editor
002AD8r 3               
002AD8r 3               xt_editor_l:
002AD8r 3                               ; Load the current screen
002AD8r 3  CA                           dex             ; Put SCR on the stack.
002AD9r 3  CA                           dex
002ADAr 3  A0 02                        ldy #scr_offset
002ADCr 3  B1 rr                        lda (up),y
002ADEr 3  95 00                        sta 0,x
002AE0r 3  C8                           iny
002AE1r 3  B1 rr                        lda (up),y
002AE3r 3  95 01                        sta 1,x
002AE5r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002AE8r 3               
002AE8r 3  20 rr rr                     jsr xt_cr
002AEBr 3               
002AEBr 3                               ; Print the screen number.
002AEBr 3                               ; We're using sliteral, so we need to set up the
002AEBr 3                               ; appropriate data structure (see sliteral)
002AEBr 3  80 08                        bra @after_screen_msg
002AEDr 3               
002AEDr 3               @screen_msg:
002AEDr 3  53 63 72 65                  .byte "Screen #"
002AF1r 3  65 6E 20 23  
002AF5r 3               
002AF5r 3               @after_screen_msg:
002AF5r 3  20 rr rr                     jsr sliteral_runtime
002AF8r 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002AFCr 3               
002AFCr 3  20 rr rr                     jsr xt_type
002AFFr 3               
002AFFr 3                               ; Put the screen number and printed size for u.r on the stack.
002AFFr 3  20 rr rr                     jsr xt_scr
002B02r 3  20 rr rr                     jsr xt_fetch
002B05r 3  CA                           dex
002B06r 3  CA                           dex
002B07r 3  A9 04                        lda #4          ; four spaces
002B09r 3  95 00                        sta 0,x
002B0Br 3  74 01                        stz 1,x
002B0Dr 3  20 rr rr                     jsr xt_u_dot_r
002B10r 3               
002B10r 3                               ; The address of the buffer is currently on the stack.
002B10r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002B10r 3                               ; keep track of the line number in tmp3.
002B10r 3  64 rr                        stz tmp3
002B12r 3               
002B12r 3               @line_loop:
002B12r 3  20 rr rr                     jsr xt_cr
002B15r 3               
002B15r 3                               ; Print the line number (2-space fixed width)
002B15r 3  CA                           dex
002B16r 3  CA                           dex
002B17r 3  CA                           dex
002B18r 3  CA                           dex
002B19r 3  74 03                        stz 3,x
002B1Br 3  A5 rr                        lda tmp3
002B1Dr 3  95 02                        sta 2,x
002B1Fr 3  74 01                        stz 1,x
002B21r 3  A9 02                        lda #2
002B23r 3  95 00                        sta 0,x
002B25r 3  20 rr rr                     jsr xt_u_dot_r
002B28r 3  20 rr rr                     jsr xt_space
002B2Br 3               
002B2Br 3                               ; Print one line using the address on the stack.
002B2Br 3  20 rr rr                     jsr xt_dup
002B2Er 3  CA                           dex
002B2Fr 3  CA                           dex
002B30r 3  A9 40                        lda #64
002B32r 3  95 00                        sta 0,x
002B34r 3  74 01                        stz 1,x
002B36r 3  20 rr rr                     jsr xt_type
002B39r 3               
002B39r 3                               ; Add 64 to the address on the stack to move to the next line.
002B39r 3  18                           clc
002B3Ar 3  A9 40                        lda #64
002B3Cr 3  75 00                        adc 0,x
002B3Er 3  95 00                        sta 0,x
002B40r 3  B5 01                        lda 1,x
002B42r 3  69 00                        adc #0      ; Add carry
002B44r 3  95 01                        sta 1,x
002B46r 3               
002B46r 3                               ; Increment the line number (held in tmp3)
002B46r 3  E6 rr                        inc tmp3
002B48r 3               
002B48r 3                               ; See if we are done.
002B48r 3  A5 rr                        lda tmp3
002B4Ar 3  C9 10                        cmp #16
002B4Cr 3  D0 C4                        bne @line_loop
002B4Er 3               
002B4Er 3  20 rr rr                     jsr xt_cr
002B51r 3                               ; Drop the address on the stack.
002B51r 3  E8                           inx
002B52r 3  E8                           inx
002B53r 3               
002B53r 3  60           z_editor_l:            rts
002B54r 3               
002B54r 3               
002B54r 3               
002B54r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002B54r 3               ; ## "line"  tested  Tali Editor
002B54r 3               
002B54r 3               xt_editor_line:
002B54r 3  20 rr rr                     jsr underflow_1
002B57r 3               
002B57r 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002B57r 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002B59r 3               @shift_tos_left:
002B59r 3  16 00                        asl 0,x         ; Shift TOS to the left
002B5Br 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002B5Dr 3  88                           dey
002B5Er 3  D0 F9                        bne @shift_tos_left
002B60r 3                               ; Load the current screen into a buffer
002B60r 3                               ; and get the buffer address
002B60r 3  20 rr rr                     jsr xt_scr
002B63r 3  20 rr rr                     jsr xt_fetch
002B66r 3  20 rr rr                     jsr xt_block
002B69r 3               
002B69r 3                               ; Add the offset to the buffer base address.
002B69r 3  20 rr rr                     jsr xt_plus
002B6Cr 3               
002B6Cr 3  60           z_editor_line:  rts
002B6Dr 3               
002B6Dr 3               
002B6Dr 3               
002B6Dr 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002B6Dr 3               ; ## "o"  tested  Tali Editor
002B6Dr 3               xt_editor_o:
002B6Dr 3                               ; Print prompt
002B6Dr 3  20 rr rr                     jsr xt_cr
002B70r 3  20 rr rr                     jsr xt_dup
002B73r 3  20 rr rr                     jsr xt_two
002B76r 3  20 rr rr                     jsr xt_u_dot_r
002B79r 3  20 rr rr                     jsr xt_space
002B7Cr 3  A9 2A                        lda #42         ; ASCII for *
002B7Er 3  20 rr rr                     jsr emit_a
002B81r 3  20 rr rr                     jsr xt_space
002B84r 3               
002B84r 3                               ; Accept new input (directly into the buffer)
002B84r 3  20 rr rr                     jsr xt_editor_line
002B87r 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002B8Ar 3  CA                           dex
002B8Br 3  CA                           dex
002B8Cr 3  A9 40                        lda #64         ; chars/line
002B8Er 3  95 00                        sta 0,x
002B90r 3  74 01                        stz 1,x
002B92r 3  20 rr rr                     jsr xt_accept
002B95r 3               
002B95r 3                               ; Fill the rest with spaces.
002B95r 3                               ; Stack is currently ( line_address numchars_from_accept )
002B95r 3  20 rr rr                     jsr xt_dup
002B98r 3  20 rr rr                     jsr xt_not_rote ; -rot
002B9Br 3  20 rr rr                     jsr xt_plus
002B9Er 3  CA                           dex
002B9Fr 3  CA                           dex
002BA0r 3  A9 40                        lda #64         ; chars/line
002BA2r 3  95 00                        sta 0,x
002BA4r 3  74 01                        stz 1,x
002BA6r 3  20 rr rr                     jsr xt_rot
002BA9r 3  20 rr rr                     jsr xt_minus
002BACr 3  20 rr rr                     jsr xt_blank
002BAFr 3               
002BAFr 3                               ; Mark buffer as updated.
002BAFr 3  20 rr rr                     jsr xt_update
002BB2r 3               
002BB2r 3  60           z_editor_o:     rts
002BB3r 3               
002BB3r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002BB3r 3               ; ## "lcdput" coded Custom
002BB3r 3               xt_lcdput:
002BB3r 3  20 rr rr                     jsr underflow_1
002BB6r 3               
002BB6r 3  B5 00                        lda 0,x
002BB8r 3                       .ifdef lcd_print
002BB8r 3                               jsr lcd_print
002BB8r 3                       .endif
002BB8r 3  E8                           inx
002BB9r 3  E8                           inx
002BBAr 3  60           z_lcdput: rts
002BBBr 3               
002BBBr 3               
002BBBr 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002BBBr 3               ; ## "lcdprint"  coded Custom
002BBBr 3               
002BBBr 3               xt_lcdprint:
002BBBr 3  20 rr rr                     jsr underflow_2
002BBEr 3               
002BBEr 3                               ; Save the starting address into tmp1
002BBEr 3  B5 02                        lda 2,x
002BC0r 3  85 rr                        sta tmp1
002BC2r 3  B5 03                        lda 3,x
002BC4r 3  85 rr                        sta tmp1+1
002BC6r 3               @loop:
002BC6r 3                               ; done if length is zero
002BC6r 3  B5 00                        lda 0,x
002BC8r 3  15 01                        ora 1,x
002BCAr 3  F0 12                        beq @done
002BCCr 3               
002BCCr 3                               ; Send the current character
002BCCr 3  B2 rr                        lda (tmp1)
002BCEr 3                       .ifdef lcd_print
002BCEr 3                               jsr lcd_print      ; avoids stack foolery
002BCEr 3                       .endif
002BCEr 3                               ; Move the address along (in tmp1)
002BCEr 3  E6 rr                        inc tmp1
002BD0r 3  D0 02                        bne @1
002BD2r 3  E6 rr                        inc tmp1+1
002BD4r 3               @1:
002BD4r 3                               ; Reduce the count (on the data stack)
002BD4r 3  B5 00                        lda 0,x
002BD6r 3  D0 02                        bne @2
002BD8r 3  D6 01                        dec 1,x
002BDAr 3               @2:
002BDAr 3  D6 00                        dec 0,x
002BDCr 3               
002BDCr 3  80 E8                        bra @loop
002BDEr 3               @done:
002BDEr 3  E8                           inx
002BDFr 3  E8                           inx
002BE0r 3  E8                           inx
002BE1r 3  E8                           inx
002BE2r 3               
002BE2r 3  60           z_lcdprint:         rts
002BE3r 3               
002BE3r 3               
002BE3r 3               
002BE3r 3               ; ## CLS ( -- ) "clea VGA screen"
002BE3r 3               ; ## "cls" coded Custom
002BE3r 3               xt_cls:
002BE3r 3                       .ifdef vga_clear
002BE3r 3                               jsr vga_clear
002BE3r 3                       .endif
002BE3r 3               
002BE3r 3  60           z_cls: rts
002BE4r 3               
002BE4r 3               
002BE4r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002BE4r 3               ; ## "spi_init" coded Custom
002BE4r 3               xt_spi_init:
002BE4r 3               .ifdef VIA1_BASE
002BE4r 3  20 rr rr                     jsr spi_init
002BE7r 3               .endif
002BE7r 3  60           z_spi_init: rts
002BE8r 3               
002BE8r 3               
002BE8r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002BE8r 3               ; ## "spi_clk_toggle" coded Custom
002BE8r 3               xt_spi_clk_toggle:
002BE8r 3               .ifdef VIA1_BASE
002BE8r 3  20 rr rr                     jsr spi_clk_toggle
002BEBr 3               .endif
002BEBr 3  60           z_spi_clk_toggle: rts
002BECr 3               
002BECr 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002BECr 3               ; ## "spi_select" coded Custom
002BECr 3               xt_spi_select:
002BECr 3               .ifdef VIA1_BASE
002BECr 3  20 rr rr                     jsr underflow_1
002BEFr 3               
002BEFr 3  B5 00                        lda 0,x
002BF1r 3               
002BF1r 3  20 rr rr                     jsr spi_select
002BF4r 3               
002BF4r 3  E8                           inx
002BF5r 3  E8                           inx
002BF6r 3               .endif
002BF6r 3  60           z_spi_select: rts
002BF7r 3               
002BF7r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002BF7r 3               ; ## "spi_transceive" coded Custom
002BF7r 3               xt_spi_transceive:
002BF7r 3               .ifdef VIA1_BASE
002BF7r 3  20 rr rr                     jsr underflow_1
002BFAr 3               
002BFAr 3  B5 00                        lda 0,x
002BFCr 3               
002BFCr 3  20 rr rr                     jsr spi_transceive
002BFFr 3               
002BFFr 3  95 00                        sta 0,x         ; put return value in TOS
002C01r 3  74 01                        stz 1,X         ;reset value there
002C03r 3               .endif
002C03r 3  60           z_spi_transceive: rts
002C04r 3               
002C04r 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002C04r 3               ; ## "sd_init" coded Custom
002C04r 3               xt_sd_init:
002C04r 3               .ifdef SD
002C04r 3                               jsr underflow_1
002C04r 3               
002C04r 3                               lda 0,x
002C04r 3                               jsr sd_init
002C04r 3                               beq @ok
002C04r 3                               pha
002C04r 3                               printascii sd_init_error_message
002C04r 3                               pla
002C04r 3               @ok:
002C04r 3                               sta 0,x         ; put return value in TOS
002C04r 3                               stz 1,X         ;reset value there
002C04r 3               .endif
002C04r 3  60           z_sd_init: rts
002C05r 3               
002C05r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002C05r 3               ; ## "sd_readsector" coded Custom
002C05r 3               xt_sd_readsector:
002C05r 3               
002C05r 3               .ifdef SD
002C05r 3                               jsr underflow_2
002C05r 3                               ; get and save sector number (32 bit number, double)
002C05r 3                               ; most significant part is TOS
002C05r 3                               lda 0, x
002C05r 3                               sta IO_SECTOR + 2
002C05r 3                               lda 1, x
002C05r 3                               sta IO_SECTOR + 3
002C05r 3                               ; least significant part is NOS
002C05r 3                               lda 2, x
002C05r 3                               sta IO_SECTOR + 0
002C05r 3                               lda 3, x
002C05r 3                               sta IO_SECTOR + 1
002C05r 3                               lda #1
002C05r 3                               sta SD_CRC
002C05r 3               
002C05r 3                               jsr sd_readsector
002C05r 3                               sta 0,x         ; put return value in TOS
002C05r 3                               stz 1,X         ;reset value there
002C05r 3               
002C05r 3                               inx
002C05r 3                               inx
002C05r 3               .endif
002C05r 3  60           z_sd_readsector: rts
002C06r 3               
002C06r 3               
002C06r 3               ; ## time ( -- addr ) "get time storage address"
002C06r 3               ; ## "time" coded Custom
002C06r 3               xt_time:
002C06r 3                       .ifdef time
002C06r 3  A9 rr                lda #time
002C08r 3                       .else
002C08r 3                       lda #0
002C08r 3                       .endif
002C08r 3  CA                   dex
002C09r 3  CA                   dex
002C0Ar 3  95 00                sta 0,x
002C0Cr 3  74 01                stz 1,x
002C0Er 3               
002C0Er 3               
002C0Er 3  60           z_time: rts
002C0Fr 3               
002C0Fr 3               
002C0Fr 3               xt_cf_info:
002C0Fr 3               .ifdef CF_ADDRESS
002C0Fr 3  20 rr rr             jsr cf_info
002C12r 3  20 rr rr             jsr xt_cr
002C15r 3  20 rr rr             jsr cf_print_id
002C18r 3  20 rr rr             jsr cf_print_capacity
002C1Br 3               .endif
002C1Br 3               z_cf_info:
002C1Br 3  60                   rts
002C1Cr 3               
002C1Cr 3               cf_info:
002C1Cr 3               ;     jsr cf_init
002C1Cr 3               ;     jsr cf_wait
002C1Cr 3               ;     lda #$EC
002C1Cr 3               ;     sta CF_ADDRESS + 7
002C1Cr 3               ;     lda #<IO_BUFFER
002C1Cr 3               ;     sta io_buffer_ptr
002C1Cr 3               ;     lda #>IO_BUFFER
002C1Cr 3               ;     sta io_buffer_ptr + 1
002C1Cr 3               ;     jsr cf_read
002C1Cr 3  60               rts
002C1Dr 3               
002C1Dr 3               cf_print_capacity:
002C1Dr 3  5A               phy
002C1Er 3               
002C1Er 3  20 rr rr         jsr xt_cr
002C21r 3               
002C21r 3  A0 78            ldy #120
002C23r 3                   ; print lba size
002C23r 3  B1 rr            lda (io_buffer_ptr), y
002C25r 3  8D rr rr         sta LBA_SIZE
002C28r 3  C8               iny
002C29r 3  B1 rr            lda (io_buffer_ptr), y
002C2Br 3  8D rr rr         sta LBA_SIZE + 1
002C2Er 3               
002C2Er 3  C8               iny
002C2Fr 3  B1 rr            lda (io_buffer_ptr), y
002C31r 3  8D rr rr         sta LBA_SIZE + 2
002C34r 3               
002C34r 3  C8               iny
002C35r 3  B1 rr            lda (io_buffer_ptr), y
002C37r 3  8D rr rr         sta LBA_SIZE + 3
002C3Ar 3               
002C3Ar 3  A0 09            ldy #9
002C3Cr 3               @loop:
002C3Cr 3  0E rr rr 2E      asl32 LBA_SIZE
002C40r 3  rr rr 2E rr  
002C44r 3  rr 2E rr rr  
002C48r 3  88               dey
002C49r 3  D0 F1            bne @loop
002C4Br 3               
002C4Br 3  CA               dex
002C4Cr 3  CA               dex
002C4Dr 3  CA               dex
002C4Er 3  CA               dex
002C4Fr 3               
002C4Fr 3  AD rr rr         lda LBA_SIZE
002C52r 3  95 02            sta 2, x
002C54r 3  AD rr rr         lda LBA_SIZE + 1
002C57r 3  95 03            sta 3, x
002C59r 3  AD rr rr         lda LBA_SIZE + 2
002C5Cr 3  95 00            sta 0, x
002C5Er 3  AD rr rr         lda LBA_SIZE + 3
002C61r 3  95 01            sta 1, x
002C63r 3               
002C63r 3  20 rr rr         jsr xt_ud_dot
002C66r 3               
002C66r 3  CA               dex
002C67r 3  CA               dex
002C68r 3  CA               dex
002C69r 3  CA               dex
002C6Ar 3  A9 06            lda #6
002C6Cr 3  95 00            sta 0, x
002C6Er 3  74 01            stz 1, x
002C70r 3  A9 rr            lda #<bytes_msg
002C72r 3  95 02            sta 2, x
002C74r 3  A9 rr            lda #>bytes_msg
002C76r 3  95 03            sta 3, x
002C78r 3  20 rr rr         jsr xt_type
002C7Br 3  20 rr rr         jsr xt_cr
002C7Er 3  7A               ply
002C7Fr 3  60               rts
002C80r 3               
002C80r 3               
002C80r 3               
002C80r 3               
002C80r 3               cf_print_id:
002C80r 3                   ; print model number
002C80r 3  5A               phy
002C81r 3  A0 37            ldy #55
002C83r 3               @loop:
002C83r 3  B1 rr            lda (io_buffer_ptr), y
002C85r 3  20 rr rr         jsr kernel_putc
002C88r 3  88               dey
002C89r 3  B1 rr            lda (io_buffer_ptr), y
002C8Br 3  20 rr rr         jsr kernel_putc
002C8Er 3  C8               iny
002C8Fr 3  C8               iny
002C90r 3  C8               iny
002C91r 3  C0 5F            cpy #(40+55)
002C93r 3  90 EE            bcc @loop
002C95r 3  7A               ply
002C96r 3  60               rts
002C97r 3               
002C97r 3               
002C97r 3               xt_io_readblock:
002C97r 3               .ifdef io_read_sector_address
002C97r 3                       ; block-read ( addr blk# -- )
002C97r 3  B5 02                lda 2, x
002C99r 3  85 rr                sta io_buffer_ptr
002C9Br 3  B5 03                lda 3, x
002C9Dr 3  85 rr                sta io_buffer_ptr + 1
002C9Fr 3  B5 00                lda 0, x
002CA1r 3  8D rr rr             sta IO_SECTOR
002CA4r 3  B5 01                lda 1, x
002CA6r 3  8D rr rr             sta IO_SECTOR + 1
002CA9r 3  9C rr rr             stz IO_SECTOR + 2
002CACr 3  9C rr rr             stz IO_SECTOR + 3
002CAFr 3               
002CAFr 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CB2r 3  2E rr rr             rol IO_SECTOR + 1
002CB5r 3  2E rr rr             rol IO_SECTOR + 2
002CB8r 3               
002CB8r 3                       ; lda io_buffer_ptr
002CB8r 3                       ; sta 0, x
002CB8r 3                       ; lda io_buffer_ptr + 1
002CB8r 3                       ; sta 1, x
002CB8r 3                       ; jsr xt_dot
002CB8r 3               
002CB8r 3  20 rr rr             jsr io_read_sector
002CBBr 3  EE rr rr D0          inc32 IO_SECTOR
002CBFr 3  0D EE rr rr  
002CC3r 3  D0 08 EE rr  
002CCDr 3  E6 rr                inc io_buffer_ptr + 1
002CCFr 3  E6 rr                inc io_buffer_ptr + 1
002CD1r 3  20 rr rr             jsr io_read_sector
002CD4r 3                       ; lda io_buffer_ptr
002CD4r 3                       ; sta 0, x
002CD4r 3                       ; lda io_buffer_ptr + 1
002CD4r 3                       ; sta 1, x
002CD4r 3                       ; jsr xt_dot
002CD4r 3               
002CD4r 3  E8                   inx
002CD5r 3  E8                   inx
002CD6r 3               
002CD6r 3               .endif
002CD6r 3               z_io_readblock:
002CD6r 3  60                   rts
002CD7r 3               
002CD7r 3               xt_io_writeblock:
002CD7r 3               .ifdef io_read_sector_address
002CD7r 3                       ; block-write ( addr blk# -- )
002CD7r 3  B5 02                lda 2, x
002CD9r 3  85 rr                sta io_buffer_ptr
002CDBr 3  B5 03                lda 3, x
002CDDr 3  85 rr                sta io_buffer_ptr + 1
002CDFr 3  B5 00                lda 0, x
002CE1r 3  8D rr rr             sta IO_SECTOR
002CE4r 3  B5 01                lda 1, x
002CE6r 3  8D rr rr             sta IO_SECTOR + 1
002CE9r 3  9C rr rr             stz IO_SECTOR + 2
002CECr 3  9C rr rr             stz IO_SECTOR + 3
002CEFr 3               
002CEFr 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CF2r 3  2E rr rr             rol IO_SECTOR + 1
002CF5r 3  2E rr rr             rol IO_SECTOR + 2
002CF8r 3               
002CF8r 3  20 rr rr             jsr io_write_sector
002CFBr 3  EE rr rr D0          inc32 IO_SECTOR
002CFFr 3  0D EE rr rr  
002D03r 3  D0 08 EE rr  
002D0Dr 3  E6 rr                inc io_buffer_ptr + 1
002D0Fr 3  E6 rr                inc io_buffer_ptr + 1
002D11r 3  20 rr rr             jsr io_write_sector
002D14r 3               
002D14r 3               
002D14r 3                       ; inc io_buffer_ptr + 1           ; jump two pages forward
002D14r 3                       ; inc io_buffer_ptr + 1
002D14r 3                       ; jsr io_write_sector
002D14r 3  E8                   inx
002D15r 3  E8                   inx
002D16r 3                       ; inx
002D16r 3                       ; inx
002D16r 3               .endif
002D16r 3               z_io_writeblock:
002D16r 3  60                   rts
002D17r 3               ; END
002D17r 3               
002D17r 3               
002D17r 2                   .include "headers.s"          ; Headers of native words
002D17r 3               ; Dictionary Headers for Tali Forth 2
002D17r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002D17r 3               ; First version: 05. Dec 2016 (Liara Forth)
002D17r 3               ; This version: 29. Dec 2018
002D17r 3               
002D17r 3               ; Dictionary headers are kept separately from the code, which allows various
002D17r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002D17r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002D17r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002D17r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002D17r 3               ; is always one cell down from the current word's own nt. In the code itself,
002D17r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002D17r 3               
002D17r 3               ; This gives us the following header structure:
002D17r 3               
002D17r 3               ;              8 bit     8 bit
002D17r 3               ;               LSB       MSB
002D17r 3               ; nt_word ->  +--------+--------+
002D17r 3               ;          +0 | Length | Status |
002D17r 3               ;             +--------+--------+
002D17r 3               ;          +2 | Next Header     | -> nt_next_word
002D17r 3               ;             +-----------------+
002D17r 3               ;          +4 | Start of Code   | -> xt_word
002D17r 3               ;             +-----------------+
002D17r 3               ;          +6 | End of Code     | -> z_word
002D17r 3               ;             +--------+--------+
002D17r 3               ;          +8 | Name   |        |
002D17r 3               ;             +--------+--------+
002D17r 3               ;             |        |        |
002D17r 3               ;             +--------+--------+
002D17r 3               ;             |        |  ...   | (name string does not end with a zero)
002D17r 3               ;          +n +--------+--------+
002D17r 3               
002D17r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002D17r 3               ; which are:
002D17r 3               
002D17r 3               ;       CO - Compile Only
002D17r 3               ;       IM - Immediate Word
002D17r 3               ;       NN - Never Native Compile (must always be called by JSR)
002D17r 3               ;       AN - Always Native Compile (may not be called by JSR)
002D17r 3               ;       UF - Contains underflow check
002D17r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002D17r 3               
002D17r 3               ; Note there are currently two bits unused.
002D17r 3               
002D17r 3               ; By default, all existing words can be natively compiled (compiled inline) or
002D17r 3               ; as a subroutine jump target; the system decides which variant to use based on
002D17r 3               ; a threshold the user can set. By default, all user-created words are flagged
002D17r 3               ; never-native. The user can override this by using the always-native word
002D17r 3               ; just after defining their new word.  The NN flag forbids native compiling,
002D17r 3               ; the AN flag forces it.
002D17r 3               
002D17r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002D17r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002D17r 3               ; more common ones first (further down in code) so they are found earlier.
002D17r 3               ; Anything to do with output comes later (further up) because things will
002D17r 3               ; always be slow if there is a human involved.
002D17r 3               
002D17r 3               ; The initial skeleton of this list was automatically generated by a script
002D17r 3               ; in the tools folder and then sorted by hand.
002D17r 3               
002D17r 3               nt_bye:
002D17r 3  03                   .byte 3         ; length of word strings
002D18r 3  00                   .byte 0         ; status byte
002D19r 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002D1Br 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002D1Dr 3  rr rr                .word z_bye     ; end of code (RTS)
002D1Fr 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002D22r 3               
002D22r 3               
002D22r 3               nt_cold:
002D22r 3  04 00                .byte 4, 0
002D24r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
002D28r 3  rr rr        
002D2Ar 3  63 6F 6C 64          .byte "cold"
002D2Er 3               
002D2Er 3               nt_lcdput:
002D2Er 3  06 10                .byte 6, UF
002D30r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002D34r 3  rr rr        
002D36r 3  6C 63 64 70          .byte "lcdput"
002D3Ar 3  75 74        
002D3Cr 3               
002D3Cr 3               nt_lcdprint:
002D3Cr 3  08 10                .byte 8, UF
002D3Er 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
002D42r 3  rr rr        
002D44r 3  6C 63 64 70          .byte "lcdprint"
002D48r 3  72 69 6E 74  
002D4Cr 3               
002D4Cr 3               nt_cls:
002D4Cr 3  03 00                .byte 3, 0
002D4Er 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002D52r 3  rr rr        
002D54r 3  63 6C 73             .byte "cls"
002D57r 3               
002D57r 3               .ifdef VIA1_BASE
002D57r 3               nt_spi_init:
002D57r 3  08 00                .byte 8, 0
002D59r 3  rr rr rr rr          .word nt_cls, xt_spi_init, z_spi_init
002D5Dr 3  rr rr        
002D5Fr 3  73 70 69 5F          .byte "spi_init"
002D63r 3  69 6E 69 74  
002D67r 3               
002D67r 3               
002D67r 3               nt_spi_clk_toggle:
002D67r 3  0E 00                .byte 14, 0
002D69r 3  rr rr rr rr          .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002D6Dr 3  rr rr        
002D6Fr 3  73 70 69 5F          .byte "spi_clk_toggle"
002D73r 3  63 6C 6B 5F  
002D77r 3  74 6F 67 67  
002D7Dr 3               
002D7Dr 3               nt_spi_select:
002D7Dr 3  0A 00                .byte 10, 0
002D7Fr 3  rr rr rr rr          .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002D83r 3  rr rr        
002D85r 3  73 70 69 5F          .byte "spi_select"
002D89r 3  73 65 6C 65  
002D8Dr 3  63 74        
002D8Fr 3               
002D8Fr 3               nt_spi_transceive:
002D8Fr 3  0E 00                .byte 14, 0
002D91r 3  rr rr rr rr          .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002D95r 3  rr rr        
002D97r 3  73 70 69 5F          .byte "spi_transceive"
002D9Br 3  74 72 61 6E  
002D9Fr 3  73 63 65 69  
002DA5r 3               .endif
002DA5r 3               
002DA5r 3               
002DA5r 3               .ifdef CF_ADDRESS
002DA5r 3               nt_cf_info:
002DA5r 3  04 00                .byte 4, 0
002DA7r 3                       .ifdef VIA1_BASE
002DA7r 3  rr rr rr rr          .word nt_spi_select, xt_cf_info, z_cf_info
002DABr 3  rr rr        
002DADr 3                       .else
002DADr 3                       .word nt_cls, xt_cf_info, z_cf_info
002DADr 3                       .endif
002DADr 3  69 6E 66 6F          .byte "info"
002DB1r 3               .endif
002DB1r 3               .ifdef io_read_sector_address
002DB1r 3               nt_io_readblock:
002DB1r 3  02 00                .byte 2, 0
002DB3r 3                       .ifdef CF_ADDRESS
002DB3r 3  rr rr rr rr          .word nt_cf_info, xt_io_readblock, z_io_readblock
002DB7r 3  rr rr        
002DB9r 3                       .elseif .def(VIA1_BASE)
002DB9r 3                       .word nt_spi_transceive, xt_io_readblock, z_io_readblock
002DB9r 3                       .else
002DB9r 3                       .word nt_cls, xt_io_readblock, z_io_readblock
002DB9r 3                       .endif
002DB9r 3  72 62                .byte "rb"
002DBBr 3               nt_io_writeblock:
002DBBr 3  02 00                .byte 2, 0
002DBDr 3  rr rr rr rr          .word nt_io_readblock, xt_io_writeblock, z_io_writeblock
002DC1r 3  rr rr        
002DC3r 3  77 62                .byte "wb"
002DC5r 3               .endif
002DC5r 3               nt_time:
002DC5r 3  04 00                .byte 4, 0
002DC7r 3               .ifdef io_read_sector_address
002DC7r 3  rr rr rr rr          .word nt_io_writeblock, xt_time, z_time
002DCBr 3  rr rr        
002DCDr 3               .elseif .def(CF_ADDRESS)
002DCDr 3                       .word nt_cf_info, xt_time, z_time
002DCDr 3               .elseif .def(VIA1_BASE)
002DCDr 3                       .word nt_spi_transceive, xt_time, z_time
002DCDr 3               .else
002DCDr 3                       .word nt_cls, xt_time, z_time
002DCDr 3               .endif
002DCDr 3  74 69 6D 65          .byte "time"
002DD1r 3               
002DD1r 3               nt_ed:                  ; ed6502
002DD1r 3  02 08                .byte 2, NN
002DD3r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
002DD7r 3  rr rr        
002DD9r 3  65 64                .byte "ed"
002DDBr 3               
002DDBr 3  03 08        nt_see: .byte 3, NN
002DDDr 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002DE1r 3  rr rr        
002DE3r 3  73 65 65             .byte "see"
002DE6r 3               
002DE6r 3               nt_forth:
002DE6r 3  05 00                .byte 5, 0
002DE8r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002DECr 3  rr rr        
002DEEr 3  66 6F 72 74          .byte "forth"
002DF2r 3  68           
002DF3r 3               
002DF3r 3               nt_order:
002DF3r 3  05 00                .byte 5, 0
002DF5r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
002DF9r 3  rr rr        
002DFBr 3  6F 72 64 65          .byte "order"
002DFFr 3  72           
002E00r 3               
002E00r 3               nt_to_order:
002E00r 3  06 00                .byte 6, 0
002E02r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
002E06r 3  rr rr        
002E08r 3  3E 6F 72 64          .byte ">order"
002E0Cr 3  65 72        
002E0Er 3               
002E0Er 3               nt_previous:
002E0Er 3  08 00                .byte 8, 0
002E10r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
002E14r 3  rr rr        
002E16r 3  70 72 65 76          .byte "previous"
002E1Ar 3  69 6F 75 73  
002E1Er 3               
002E1Er 3               nt_also:
002E1Er 3  04 00                .byte 4, 0
002E20r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
002E24r 3  rr rr        
002E26r 3  61 6C 73 6F          .byte "also"
002E2Ar 3               
002E2Ar 3               nt_only:
002E2Ar 3  04 00                .byte 4, 0
002E2Cr 3  rr rr rr rr          .word nt_also, xt_only, z_only
002E30r 3  rr rr        
002E32r 3  6F 6E 6C 79          .byte "only"
002E36r 3               
002E36r 3               nt_forth_wordlist:      ; shares code with ZERO
002E36r 3  0E 00                .byte 14, 0
002E38r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
002E3Cr 3  rr rr        
002E3Er 3  66 6F 72 74          .byte "forth-wordlist"
002E42r 3  68 2D 77 6F  
002E46r 3  72 64 6C 69  
002E4Cr 3               
002E4Cr 3               nt_editor_wordlist:     ; shares code with ONE
002E4Cr 3  0F 00                .byte 15, 0
002E4Er 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
002E52r 3  rr rr        
002E54r 3  65 64 69 74          .byte "editor-wordlist"
002E58r 3  6F 72 2D 77  
002E5Cr 3  6F 72 64 6C  
002E63r 3               
002E63r 3               nt_assembler_wordlist:  ; shares code with TWO
002E63r 3  12 00                .byte 18, 0
002E65r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
002E69r 3  rr rr        
002E6Br 3  61 73 73 65          .byte "assembler-wordlist"
002E6Fr 3  6D 62 6C 65  
002E73r 3  72 2D 77 6F  
002E7Dr 3               
002E7Dr 3               nt_root_wordlist:
002E7Dr 3  0D 00                .byte 13, 0
002E7Fr 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
002E83r 3  rr rr        
002E85r 3  72 6F 6F 74          .byte "root-wordlist"
002E89r 3  2D 77 6F 72  
002E8Dr 3  64 6C 69 73  
002E92r 3               
002E92r 3               nt_get_order:
002E92r 3  09 00                .byte 9, 0
002E94r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
002E98r 3  rr rr        
002E9Ar 3  67 65 74 2D          .byte "get-order"
002E9Er 3  6F 72 64 65  
002EA2r 3  72           
002EA3r 3               
002EA3r 3               nt_set_order:
002EA3r 3  09 00                .byte 9, 0
002EA5r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
002EA9r 3  rr rr        
002EABr 3  73 65 74 2D          .byte "set-order"
002EAFr 3  6F 72 64 65  
002EB3r 3  72           
002EB4r 3               
002EB4r 3               nt_get_current:
002EB4r 3  0B 00                .byte 11, 0
002EB6r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
002EBAr 3  rr rr        
002EBCr 3  67 65 74 2D          .byte "get-current"
002EC0r 3  63 75 72 72  
002EC4r 3  65 6E 74     
002EC7r 3               
002EC7r 3               nt_set_current:
002EC7r 3  0B 10                .byte 11, UF
002EC9r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
002ECDr 3  rr rr        
002ECFr 3  73 65 74 2D          .byte "set-current"
002ED3r 3  63 75 72 72  
002ED7r 3  65 6E 74     
002EDAr 3               
002EDAr 3               nt_search_wordlist:
002EDAr 3  0F 10                .byte 15, UF
002EDCr 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
002EE0r 3  rr rr        
002EE2r 3  73 65 61 72          .byte "search-wordlist"
002EE6r 3  63 68 2D 77  
002EEAr 3  6F 72 64 6C  
002EF1r 3               
002EF1r 3               nt_wordlist:
002EF1r 3  08 00                .byte 8, 0
002EF3r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
002EF7r 3  rr rr        
002EF9r 3  77 6F 72 64          .byte "wordlist"
002EFDr 3  6C 69 73 74  
002F01r 3               
002F01r 3               nt_definitions:
002F01r 3  0B 00                .byte 11, 0
002F03r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
002F07r 3  rr rr        
002F09r 3  64 65 66 69          .byte "definitions"
002F0Dr 3  6E 69 74 69  
002F11r 3  6F 6E 73     
002F14r 3               
002F14r 3               nt_block_ramdrive_init:
002F14r 3  13 10                .byte 19, UF
002F16r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
002F1Ar 3  rr rr        
002F1Cr 3  62 6C 6F 63          .byte "block-ramdrive-init"
002F20r 3  6B 2D 72 61  
002F24r 3  6D 64 72 69  
002F2Fr 3               
002F2Fr 3               nt_list:
002F2Fr 3  04 10                .byte 4, UF
002F31r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
002F35r 3  rr rr        
002F37r 3  6C 69 73 74          .byte "list"
002F3Br 3               
002F3Br 3               nt_thru:
002F3Br 3  04 10                .byte 4, UF
002F3Dr 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
002F41r 3  rr rr        
002F43r 3  74 68 72 75          .byte "thru"
002F47r 3               
002F47r 3               nt_load:
002F47r 3  04 10                .byte 4, UF
002F49r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
002F4Dr 3  rr rr        
002F4Fr 3  6C 6F 61 64          .byte "load"
002F53r 3               
002F53r 3               nt_flush:
002F53r 3  05 00                .byte 5, 0
002F55r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
002F59r 3  rr rr        
002F5Br 3  66 6C 75 73          .byte "flush"
002F5Fr 3  68           
002F60r 3               
002F60r 3               nt_empty_buffers:
002F60r 3  0D 00                .byte 13, 0
002F62r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
002F66r 3  rr rr        
002F68r 3  65 6D 70 74          .byte "empty-buffers"
002F6Cr 3  79 2D 62 75  
002F70r 3  66 66 65 72  
002F75r 3               
002F75r 3               nt_buffer:
002F75r 3  06 00                .byte 6, 0
002F77r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
002F7Br 3  rr rr        
002F7Dr 3  62 75 66 66          .byte "buffer"
002F81r 3  65 72        
002F83r 3               
002F83r 3               nt_update:
002F83r 3  06 00                .byte 6, 0
002F85r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
002F89r 3  rr rr        
002F8Br 3  75 70 64 61          .byte "update"
002F8Fr 3  74 65        
002F91r 3               
002F91r 3               nt_block:
002F91r 3  05 00                .byte 5, 0
002F93r 3  rr rr rr rr          .word nt_update, xt_block, z_block
002F97r 3  rr rr        
002F99r 3  62 6C 6F 63          .byte "block"
002F9Dr 3  6B           
002F9Er 3               
002F9Er 3               nt_save_buffers:
002F9Er 3  0C 00                .byte 12, 0
002FA0r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
002FA4r 3  rr rr        
002FA6r 3  73 61 76 65          .byte "save-buffers"
002FAAr 3  2D 62 75 66  
002FAEr 3  66 65 72 73  
002FB2r 3               
002FB2r 3               nt_block_read_vector:
002FB2r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
002FB4r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
002FB8r 3  rr rr        
002FBAr 3  62 6C 6F 63          .byte "block-read-vector"
002FBEr 3  6B 2D 72 65  
002FC2r 3  61 64 2D 76  
002FCBr 3               
002FCBr 3               nt_block_read:
002FCBr 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
002FCDr 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
002FD1r 3  rr rr        
002FD3r 3  62 6C 6F 63          .byte "block-read"
002FD7r 3  6B 2D 72 65  
002FDBr 3  61 64        
002FDDr 3               
002FDDr 3               nt_block_write_vector:
002FDDr 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
002FDFr 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
002FE3r 3  rr rr        
002FE5r 3  62 6C 6F 63          .byte "block-write-vector"
002FE9r 3  6B 2D 77 72  
002FEDr 3  69 74 65 2D  
002FF7r 3               
002FF7r 3               nt_block_write:
002FF7r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
002FF9r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
002FFDr 3  rr rr        
002FFFr 3  62 6C 6F 63          .byte "block-write"
003003r 3  6B 2D 77 72  
003007r 3  69 74 65     
00300Ar 3               
00300Ar 3               nt_blk:
00300Ar 3  03 00                .byte 3, 0
00300Cr 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003010r 3  rr rr        
003012r 3  62 6C 6B             .byte "blk"
003015r 3               
003015r 3               nt_scr:
003015r 3  03 00                .byte 3, 0
003017r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
00301Br 3  rr rr        
00301Dr 3  73 63 72             .byte "scr"
003020r 3               
003020r 3               nt_blkbuffer:
003020r 3  09 00                .byte 9, 0
003022r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003026r 3  rr rr        
003028r 3  62 6C 6B 62          .byte "blkbuffer"
00302Cr 3  75 66 66 65  
003030r 3  72           
003031r 3               
003031r 3               nt_buffblocknum:
003031r 3  0C 00                .byte 12, 0
003033r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
003037r 3  rr rr        
003039r 3  62 75 66 66          .byte "buffblocknum"
00303Dr 3  62 6C 6F 63  
003041r 3  6B 6E 75 6D  
003045r 3               
003045r 3               nt_buffstatus:
003045r 3  0A 00                .byte 10, 0
003047r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
00304Br 3  rr rr        
00304Dr 3  62 75 66 66          .byte "buffstatus"
003051r 3  73 74 61 74  
003055r 3  75 73        
003057r 3               
003057r 3               nt_buffer_colon:
003057r 3  07 00                .byte 7, 0
003059r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
00305Dr 3  rr rr        
00305Fr 3  62 75 66 66          .byte "buffer:"
003063r 3  65 72 3A     
003066r 3               
003066r 3               nt_useraddr:
003066r 3  08 00                .byte 8, 0
003068r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
00306Cr 3  rr rr        
00306Er 3  75 73 65 72          .byte "useraddr"
003072r 3  61 64 64 72  
003076r 3               
003076r 3               nt_action_of:
003076r 3  09 04                .byte 9, IM
003078r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
00307Cr 3  rr rr        
00307Er 3  61 63 74 69          .byte "action-of"
003082r 3  6F 6E 2D 6F  
003086r 3  66           
003087r 3               
003087r 3               nt_is:
003087r 3  02 04                .byte 2, IM
003089r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
00308Dr 3  rr rr        
00308Fr 3  69 73                .byte "is"
003091r 3               
003091r 3               nt_defer_store:
003091r 3  06 00                .byte 6, 0
003093r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
003097r 3  rr rr        
003099r 3  64 65 66 65          .byte "defer!"
00309Dr 3  72 21        
00309Fr 3               
00309Fr 3               nt_defer_fetch:
00309Fr 3  06 00                .byte 6, 0
0030A1r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
0030A5r 3  rr rr        
0030A7r 3  64 65 66 65          .byte "defer@"
0030ABr 3  72 40        
0030ADr 3               
0030ADr 3               nt_endcase:
0030ADr 3  07 0D                .byte 7, IM+CO+NN
0030AFr 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0030B3r 3  rr rr        
0030B5r 3  65 6E 64 63          .byte "endcase"
0030B9r 3  61 73 65     
0030BCr 3               
0030BCr 3               nt_endof:
0030BCr 3  05 0D                .byte 5, IM+CO+NN
0030BEr 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0030C2r 3  rr rr        
0030C4r 3  65 6E 64 6F          .byte "endof"
0030C8r 3  66           
0030C9r 3               
0030C9r 3               nt_of:
0030C9r 3  02 0D                .byte 2, IM+CO+NN
0030CBr 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0030CFr 3  rr rr        
0030D1r 3  6F 66                .byte "of"
0030D3r 3               
0030D3r 3               nt_case:
0030D3r 3  04 0D                .byte 4, IM+CO+NN
0030D5r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0030D9r 3  rr rr        
0030DBr 3  63 61 73 65          .byte "case"
0030DFr 3               
0030DFr 3               nt_while:
0030DFr 3  05 0D                .byte 5, IM+CO+NN
0030E1r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0030E5r 3  rr rr        
0030E7r 3  77 68 69 6C          .byte "while"
0030EBr 3  65           
0030ECr 3               
0030ECr 3               nt_until:
0030ECr 3  05 0D                .byte 5, IM+CO+NN
0030EEr 3  rr rr rr rr          .word nt_while, xt_until, z_until
0030F2r 3  rr rr        
0030F4r 3  75 6E 74 69          .byte "until"
0030F8r 3  6C           
0030F9r 3               
0030F9r 3               nt_repeat:
0030F9r 3  06 0D                .byte 6, IM+CO+NN
0030FBr 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
0030FFr 3  rr rr        
003101r 3  72 65 70 65          .byte "repeat"
003105r 3  61 74        
003107r 3               
003107r 3               nt_else:
003107r 3  04 0D                .byte 4, IM+CO+NN
003109r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
00310Dr 3  rr rr        
00310Fr 3  65 6C 73 65          .byte "else"
003113r 3               
003113r 3               nt_then:
003113r 3  04 0D                .byte 4, IM+CO+NN
003115r 3  rr rr rr rr          .word nt_else, xt_then, z_then
003119r 3  rr rr        
00311Br 3  74 68 65 6E          .byte "then"
00311Fr 3               
00311Fr 3               nt_if:
00311Fr 3  02 0D                .byte 2, IM+CO+NN
003121r 3  rr rr rr rr          .word nt_then, xt_if, z_if
003125r 3  rr rr        
003127r 3  69 66                .byte "if"
003129r 3               
003129r 3               nt_dot_paren:
003129r 3  02 04                .byte 2, IM
00312Br 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
00312Fr 3  rr rr        
003131r 3  2E 28                .byte ".("
003133r 3               
003133r 3               nt_paren:
003133r 3  01 04                .byte 1, IM
003135r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003139r 3  rr rr        
00313Br 3  28                   .byte "("
00313Cr 3               
00313Cr 3               nt_word:
00313Cr 3  04 10                .byte 4, UF
00313Er 3  rr rr rr rr          .word nt_paren, xt_word, z_word
003142r 3  rr rr        
003144r 3  77 6F 72 64          .byte "word"
003148r 3               
003148r 3               nt_find:
003148r 3  04 10                .byte 4, UF
00314Ar 3  rr rr rr rr          .word nt_word, xt_find, z_find
00314Er 3  rr rr        
003150r 3  66 69 6E 64          .byte "find"
003154r 3               
003154r 3               nt_environment_q:
003154r 3  0C 10                .byte 12, UF
003156r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
00315Ar 3  rr rr        
00315Cr 3  65 6E 76 69          .byte "environment?"
003160r 3  72 6F 6E 6D  
003164r 3  65 6E 74 3F  
003168r 3               
003168r 3               nt_search:
003168r 3  06 18                .byte 6, UF+NN
00316Ar 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
00316Er 3  rr rr        
003170r 3  73 65 61 72          .byte "search"
003174r 3  63 68        
003176r 3               
003176r 3               nt_compare:
003176r 3  07 10                .byte 7, UF
003178r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
00317Cr 3  rr rr        
00317Er 3  63 6F 6D 70          .byte "compare"
003182r 3  61 72 65     
003185r 3               
003185r 3               nt_disasm:
003185r 3  06 10                .byte 6, UF
003187r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
00318Br 3  rr rr        
00318Dr 3  64 69 73 61          .byte "disasm"
003191r 3  73 6D        
003193r 3               
003193r 3               nt_dot_s:
003193r 3  02 00                .byte 2, 0
003195r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
003199r 3  rr rr        
00319Br 3  2E 73                .byte ".s"
00319Dr 3               
00319Dr 3               nt_dump:
00319Dr 3  04 10                .byte 4, UF
00319Fr 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
0031A3r 3  rr rr        
0031A5r 3  64 75 6D 70          .byte "dump"
0031A9r 3               
0031A9r 3               nt_bell:
0031A9r 3  04 00                .byte 4, 0
0031ABr 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0031AFr 3  rr rr        
0031B1r 3  62 65 6C 6C          .byte "bell"
0031B5r 3               
0031B5r 3               nt_align:
0031B5r 3  05 00                .byte 5, 0
0031B7r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0031BBr 3  rr rr        
0031BDr 3  61 6C 69 67          .byte "align"
0031C1r 3  6E           
0031C2r 3               
0031C2r 3               nt_aligned:             ; same code as ALIGN
0031C2r 3  07 00                .byte 7, 0
0031C4r 3  rr rr rr rr          .word nt_align, xt_align, z_align
0031C8r 3  rr rr        
0031CAr 3  61 6C 69 67          .byte "aligned"
0031CEr 3  6E 65 64     
0031D1r 3               
0031D1r 3               nt_wordsize:
0031D1r 3  08 10                .byte 8, UF
0031D3r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0031D7r 3  rr rr        
0031D9r 3  77 6F 72 64          .byte "wordsize"
0031DDr 3  73 69 7A 65  
0031E1r 3               
0031E1r 3               nt_words:
0031E1r 3  05 00                .byte 5, 0
0031E3r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0031E7r 3  rr rr        
0031E9r 3  77 6F 72 64          .byte "words"
0031EDr 3  73           
0031EEr 3               
0031EEr 3               nt_marker:
0031EEr 3  06 04                .byte 6, IM
0031F0r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0031F4r 3  rr rr        
0031F6r 3  6D 61 72 6B          .byte "marker"
0031FAr 3  65 72        
0031FCr 3               
0031FCr 3               nt_at_xy:
0031FCr 3  05 10                .byte 5, UF
0031FEr 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
003202r 3  rr rr        
003204r 3  61 74 2D 78          .byte "at-xy"
003208r 3  79           
003209r 3               
003209r 3               nt_page:
003209r 3  04 00                .byte 4, 0
00320Br 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
00320Fr 3  rr rr        
003211r 3  70 61 67 65          .byte "page"
003215r 3               
003215r 3               nt_cr:
003215r 3  02 00                .byte 2, 0
003217r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
00321Br 3  rr rr        
00321Dr 3  63 72                .byte "cr"
00321Fr 3               
00321Fr 3               nt_input:
00321Fr 3  05 00                .byte 5, 0
003221r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003225r 3  rr rr        
003227r 3  69 6E 70 75          .byte "input"
00322Br 3  74           
00322Cr 3               
00322Cr 3               nt_output:
00322Cr 3  06 00                .byte 6, 0
00322Er 3  rr rr rr rr          .word nt_input, xt_output, z_output
003232r 3  rr rr        
003234r 3  6F 75 74 70          .byte "output"
003238r 3  75 74        
00323Ar 3               
00323Ar 3               nt_sign:
00323Ar 3  04 10                .byte 4, UF
00323Cr 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003240r 3  rr rr        
003242r 3  73 69 67 6E          .byte "sign"
003246r 3               
003246r 3               nt_hold:
003246r 3  04 10                .byte 4, UF
003248r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
00324Cr 3  rr rr        
00324Er 3  68 6F 6C 64          .byte "hold"
003252r 3               
003252r 3               nt_number_sign_greater:
003252r 3  02 10                .byte 2, UF
003254r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003258r 3  rr rr        
00325Ar 3  23 3E                .byte "#>"
00325Cr 3               
00325Cr 3               nt_number_sign_s:
00325Cr 3  02 10                .byte 2, UF
00325Er 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
003262r 3  rr rr        
003264r 3  23 73                .byte "#s"
003266r 3               
003266r 3               nt_number_sign:
003266r 3  01 10                .byte 1, UF
003268r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
00326Cr 3  rr rr        
00326Er 3  23                   .byte "#"
00326Fr 3               
00326Fr 3               nt_less_number_sign:
00326Fr 3  02 00                .byte 2, 0
003271r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003275r 3  rr rr        
003277r 3  3C 23                .byte "<#"
003279r 3               
003279r 3               nt_to_in:
003279r 3  03 00                .byte 3, 0
00327Br 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
00327Fr 3  rr rr        
003281r 3  3E 69 6E             .byte ">in"
003284r 3               
003284r 3               nt_within:
003284r 3  06 10                .byte 6, UF
003286r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
00328Ar 3  rr rr        
00328Cr 3  77 69 74 68          .byte "within"
003290r 3  69 6E        
003292r 3               
003292r 3               nt_hexstore:
003292r 3  08 10                .byte 8, UF
003294r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
003298r 3  rr rr        
00329Ar 3  68 65 78 73          .byte "hexstore"
00329Er 3  74 6F 72 65  
0032A2r 3               
0032A2r 3               nt_cleave:
0032A2r 3  06 10                .byte 6, UF
0032A4r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
0032A8r 3  rr rr        
0032AAr 3  63 6C 65 61          .byte "cleave"
0032AEr 3  76 65        
0032B0r 3               
0032B0r 3               nt_pad:
0032B0r 3  03 00                .byte 3, 0
0032B2r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0032B6r 3  rr rr        
0032B8r 3  70 61 64             .byte "pad"
0032BBr 3               
0032BBr 3               nt_cmove:
0032BBr 3  05 10                .byte 5, UF
0032BDr 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0032C1r 3  rr rr        
0032C3r 3  63 6D 6F 76          .byte "cmove"
0032C7r 3  65           
0032C8r 3               
0032C8r 3               nt_cmove_up:
0032C8r 3  06 10                .byte 6, UF
0032CAr 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0032CEr 3  rr rr        
0032D0r 3  63 6D 6F 76          .byte "cmove>"
0032D4r 3  65 3E        
0032D6r 3               
0032D6r 3               nt_move:
0032D6r 3  04 18                .byte 4, NN+UF
0032D8r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0032DCr 3  rr rr        
0032DEr 3  6D 6F 76 65          .byte "move"
0032E2r 3               
0032E2r 3               nt_backslash:
0032E2r 3  01 04                .byte 1, IM
0032E4r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0032E8r 3  rr rr        
0032EAr 3  5C                   .byte $5c
0032EBr 3               
0032EBr 3               nt_star_slash:
0032EBr 3  02 10                .byte 2, UF
0032EDr 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0032F1r 3  rr rr        
0032F3r 3  2A 2F                .byte "*/"
0032F5r 3               
0032F5r 3               nt_star_slash_mod:
0032F5r 3  05 10                .byte 5, UF
0032F7r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
0032FBr 3  rr rr        
0032FDr 3  2A 2F 6D 6F          .byte "*/mod"
003301r 3  64           
003302r 3               
003302r 3               nt_mod:
003302r 3  03 10                .byte 3, UF
003304r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003308r 3  rr rr        
00330Ar 3  6D 6F 64             .byte "mod"
00330Dr 3               
00330Dr 3               nt_slash_mod:
00330Dr 3  04 10                .byte 4, UF
00330Fr 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
003313r 3  rr rr        
003315r 3  2F 6D 6F 64          .byte "/mod"
003319r 3               
003319r 3               nt_slash:
003319r 3  01 10                .byte 1, UF
00331Br 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
00331Fr 3  rr rr        
003321r 3  2F                   .byte "/"
003322r 3               
003322r 3               nt_fm_slash_mod:
003322r 3  06 10                .byte 6, UF
003324r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003328r 3  rr rr        
00332Ar 3  66 6D 2F 6D          .byte "fm/mod"
00332Er 3  6F 64        
003330r 3               
003330r 3               nt_sm_slash_rem:
003330r 3  06 10                .byte 6, UF
003332r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003336r 3  rr rr        
003338r 3  73 6D 2F 72          .byte "sm/rem"
00333Cr 3  65 6D        
00333Er 3               
00333Er 3               nt_um_slash_mod:
00333Er 3  06 10                .byte 6, UF
003340r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
003344r 3  rr rr        
003346r 3  75 6D 2F 6D          .byte "um/mod"
00334Ar 3  6F 64        
00334Cr 3               
00334Cr 3               nt_star:
00334Cr 3  01 10                .byte 1, UF
00334Er 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
003352r 3  rr rr        
003354r 3  2A                   .byte "*"
003355r 3               
003355r 3               nt_um_star:
003355r 3  03 10                .byte 3, UF
003357r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
00335Br 3  rr rr        
00335Dr 3  75 6D 2A             .byte "um*"
003360r 3               
003360r 3               nt_m_star:
003360r 3  02 10                .byte 2, UF
003362r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
003366r 3  rr rr        
003368r 3  6D 2A                .byte "m*"
00336Ar 3               
00336Ar 3               nt_count:
00336Ar 3  05 10                .byte 5, UF
00336Cr 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
003370r 3  rr rr        
003372r 3  63 6F 75 6E          .byte "count"
003376r 3  74           
003377r 3               
003377r 3               nt_decimal:
003377r 3  07 00                .byte 7, 0
003379r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
00337Dr 3  rr rr        
00337Fr 3  64 65 63 69          .byte "decimal"
003383r 3  6D 61 6C     
003386r 3               
003386r 3               nt_hex:
003386r 3  03 00                .byte 3, 0
003388r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
00338Cr 3  rr rr        
00338Er 3  68 65 78             .byte "hex"
003391r 3               
003391r 3               nt_to_number:
003391r 3  07 10                .byte 7, UF
003393r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
003397r 3  rr rr        
003399r 3  3E 6E 75 6D          .byte ">number"
00339Dr 3  62 65 72     
0033A0r 3               
0033A0r 3               nt_number:
0033A0r 3  06 10                .byte 6, UF
0033A2r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
0033A6r 3  rr rr        
0033A8r 3  6E 75 6D 62          .byte "number"
0033ACr 3  65 72        
0033AEr 3               
0033AEr 3               nt_digit_question:
0033AEr 3  06 10                .byte 6, UF
0033B0r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0033B4r 3  rr rr        
0033B6r 3  64 69 67 69          .byte "digit?"
0033BAr 3  74 3F        
0033BCr 3               
0033BCr 3               nt_base:
0033BCr 3  04 00                .byte 4, 0
0033BEr 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0033C2r 3  rr rr        
0033C4r 3  62 61 73 65          .byte "base"
0033C8r 3               
0033C8r 3               nt_evaluate:
0033C8r 3  08 10                .byte 8, UF
0033CAr 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0033CEr 3  rr rr        
0033D0r 3  65 76 61 6C          .byte "evaluate"
0033D4r 3  75 61 74 65  
0033D8r 3               
0033D8r 3               nt_state:
0033D8r 3  05 00                .byte 5, 0
0033DAr 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0033DEr 3  rr rr        
0033E0r 3  73 74 61 74          .byte "state"
0033E4r 3  65           
0033E5r 3               
0033E5r 3               nt_again:
0033E5r 3  05 17                .byte 5, AN+CO+IM+UF
0033E7r 3  rr rr rr rr          .word nt_state, xt_again, z_again
0033EBr 3  rr rr        
0033EDr 3  61 67 61 69          .byte "again"
0033F1r 3  6E           
0033F2r 3               
0033F2r 3               nt_begin:
0033F2r 3  05 07                .byte 5, AN+CO+IM
0033F4r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
0033F8r 3  rr rr        
0033FAr 3  62 65 67 69          .byte "begin"
0033FEr 3  6E           
0033FFr 3               
0033FFr 3               nt_quit:
0033FFr 3  04 00                .byte 4, 0
003401r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
003405r 3  rr rr        
003407r 3  71 75 69 74          .byte "quit"
00340Br 3               
00340Br 3               nt_recurse:
00340Br 3  07 0D                .byte 7, CO+IM+NN
00340Dr 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003411r 3  rr rr        
003413r 3  72 65 63 75          .byte "recurse"
003417r 3  72 73 65     
00341Ar 3               
00341Ar 3               nt_leave:
00341Ar 3  05 03                .byte 5, AN+CO
00341Cr 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003420r 3  rr rr        
003422r 3  6C 65 61 76          .byte "leave"
003426r 3  65           
003427r 3               
003427r 3               nt_unloop:
003427r 3  06 03                .byte 6, AN+CO
003429r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
00342Dr 3  rr rr        
00342Fr 3  75 6E 6C 6F          .byte "unloop"
003433r 3  6F 70        
003435r 3               
003435r 3               nt_exit:
003435r 3  04 03                .byte 4, AN+CO
003437r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
00343Br 3  rr rr        
00343Dr 3  65 78 69 74          .byte "exit"
003441r 3               
003441r 3               nt_plus_loop:
003441r 3  05 05                .byte 5, CO+IM
003443r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
003447r 3  rr rr        
003449r 3  2B 6C 6F 6F          .byte "+loop"
00344Dr 3  70           
00344Er 3               
00344Er 3               nt_loop:
00344Er 3  04 05                .byte 4, CO+IM
003450r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
003454r 3  rr rr        
003456r 3  6C 6F 6F 70          .byte "loop"
00345Ar 3               
00345Ar 3               nt_j:
00345Ar 3  01 03                .byte 1, AN+CO
00345Cr 3  rr rr rr rr          .word nt_loop, xt_j, z_j
003460r 3  rr rr        
003462r 3  6A                   .byte "j"
003463r 3               
003463r 3               nt_i:
003463r 3  01 03                .byte 1, AN+CO
003465r 3  rr rr rr rr          .word nt_j, xt_i, z_i
003469r 3  rr rr        
00346Br 3  69                   .byte "i"
00346Cr 3               
00346Cr 3               nt_question_do:
00346Cr 3  03 0D                .byte 3, CO+IM+NN
00346Er 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
003472r 3  rr rr        
003474r 3  3F 64 6F             .byte "?do"
003477r 3               
003477r 3               nt_do:
003477r 3  02 0D                .byte 2, CO+IM+NN
003479r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
00347Dr 3  rr rr        
00347Fr 3  64 6F                .byte "do"
003481r 3               
003481r 3               nt_abort_quote:
003481r 3  06 0D                .byte 6, CO+IM+NN
003483r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
003487r 3  rr rr        
003489r 3  61 62 6F 72          .byte "abort", $22
00348Dr 3  74 22        
00348Fr 3               
00348Fr 3               nt_abort:
00348Fr 3  05 00                .byte 5, 0
003491r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003495r 3  rr rr        
003497r 3  61 62 6F 72          .byte "abort"
00349Br 3  74           
00349Cr 3               
00349Cr 3               nt_strip_underflow:
00349Cr 3  0F 00                .byte 15, 0
00349Er 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
0034A2r 3  rr rr        
0034A4r 3  73 74 72 69          .byte "strip-underflow"
0034A8r 3  70 2D 75 6E  
0034ACr 3  64 65 72 66  
0034B3r 3               
0034B3r 3               nt_nc_limit:
0034B3r 3  08 00                .byte 8, 0
0034B5r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0034B9r 3  rr rr        
0034BBr 3  6E 63 2D 6C          .byte "nc-limit"
0034BFr 3  69 6D 69 74  
0034C3r 3               
0034C3r 3               nt_allow_native:
0034C3r 3  0C 00                .byte 12, 0
0034C5r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0034C9r 3  rr rr        
0034CBr 3  61 6C 6C 6F          .byte "allow-native"
0034CFr 3  77 2D 6E 61  
0034D3r 3  74 69 76 65  
0034D7r 3               
0034D7r 3               nt_always_native:
0034D7r 3  0D 00                .byte 13, 0
0034D9r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0034DDr 3  rr rr        
0034DFr 3  61 6C 77 61          .byte "always-native"
0034E3r 3  79 73 2D 6E  
0034E7r 3  61 74 69 76  
0034ECr 3               
0034ECr 3               nt_never_native:
0034ECr 3  0C 00                .byte 12, 0
0034EEr 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0034F2r 3  rr rr        
0034F4r 3  6E 65 76 65          .byte "never-native"
0034F8r 3  72 2D 6E 61  
0034FCr 3  74 69 76 65  
003500r 3               
003500r 3               nt_compile_only:
003500r 3  0C 00                .byte 12, 0
003502r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
003506r 3  rr rr        
003508r 3  63 6F 6D 70          .byte "compile-only"
00350Cr 3  69 6C 65 2D  
003510r 3  6F 6E 6C 79  
003514r 3               
003514r 3               nt_immediate:
003514r 3  09 00                .byte 9, 0
003516r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
00351Ar 3  rr rr        
00351Cr 3  69 6D 6D 65          .byte "immediate"
003520r 3  64 69 61 74  
003524r 3  65           
003525r 3               
003525r 3               nt_postpone:
003525r 3  08 05                .byte 8, IM+CO
003527r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00352Br 3  rr rr        
00352Dr 3  70 6F 73 74          .byte "postpone"
003531r 3  70 6F 6E 65  
003535r 3               
003535r 3               nt_s_backslash_quote:
003535r 3  03 04                .byte 3, IM
003537r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
00353Br 3  rr rr        
00353Dr 3  73 5C 22             .byte "s", $5C, $22
003540r 3               
003540r 3               nt_s_quote:
003540r 3  02 0C                .byte 2, IM+NN
003542r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
003546r 3  rr rr        
003548r 3  73 22                .byte "s", $22
00354Ar 3               
00354Ar 3               nt_dot_quote:
00354Ar 3  02 05                .byte 2, CO+IM
00354Cr 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003550r 3  rr rr        
003552r 3  2E 22                .byte ".", $22
003554r 3               
003554r 3               nt_sliteral:
003554r 3  08 15                .byte 8, CO+IM+UF
003556r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
00355Ar 3  rr rr        
00355Cr 3  73 6C 69 74          .byte "sliteral"
003560r 3  65 72 61 6C  
003564r 3               
003564r 3               nt_literal:
003564r 3  07 15                .byte 7, IM+CO+UF
003566r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
00356Ar 3  rr rr        
00356Cr 3  6C 69 74 65          .byte "literal"
003570r 3  72 61 6C     
003573r 3               
003573r 3               nt_right_bracket:
003573r 3  01 04                .byte 1, IM
003575r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003579r 3  rr rr        
00357Br 3  5D                   .byte "]"
00357Cr 3               
00357Cr 3               nt_left_bracket:
00357Cr 3  01 05                .byte 1, IM+CO
00357Er 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
003582r 3  rr rr        
003584r 3  5B                   .byte "["
003585r 3               
003585r 3               nt_compile_comma:
003585r 3  08 18                .byte 8, UF+NN
003587r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
00358Br 3  rr rr        
00358Dr 3  63 6F 6D 70          .byte "compile,"
003591r 3  69 6C 65 2C  
003595r 3               
003595r 3               nt_colon_noname:
003595r 3  07 00                .byte 7, 0
003597r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
00359Br 3  rr rr        
00359Dr 3  3A 6E 6F 6E          .byte ":noname"
0035A1r 3  61 6D 65     
0035A4r 3               
0035A4r 3               nt_semicolon:
0035A4r 3  01 05                .byte 1, CO+IM
0035A6r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
0035AAr 3  rr rr        
0035ACr 3  3B                   .byte ";"
0035ADr 3               
0035ADr 3               nt_colon:
0035ADr 3  01 00                .byte 1, 0
0035AFr 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0035B3r 3  rr rr        
0035B5r 3  3A                   .byte ":"
0035B6r 3               
0035B6r 3               nt_source_id:
0035B6r 3  09 00                .byte 9, 0
0035B8r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0035BCr 3  rr rr        
0035BEr 3  73 6F 75 72          .byte "source-id"
0035C2r 3  63 65 2D 69  
0035C6r 3  64           
0035C7r 3               
0035C7r 3               nt_source:
0035C7r 3  06 00                .byte 6, 0
0035C9r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0035CDr 3  rr rr        
0035CFr 3  73 6F 75 72          .byte "source"
0035D3r 3  63 65        
0035D5r 3               
0035D5r 3               nt_execute_parsing:
0035D5r 3  0F 10                .byte 15, UF
0035D7r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0035DBr 3  rr rr        
0035DDr 3  65 78 65 63          .byte "execute-parsing"
0035E1r 3  75 74 65 2D  
0035E5r 3  70 61 72 73  
0035ECr 3               
0035ECr 3               nt_parse:
0035ECr 3  05 10                .byte 5, UF
0035EEr 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0035F2r 3  rr rr        
0035F4r 3  70 61 72 73          .byte "parse"
0035F8r 3  65           
0035F9r 3               
0035F9r 3               nt_parse_name:
0035F9r 3  0A 08                .byte 10, NN
0035FBr 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
0035FFr 3  rr rr        
003601r 3  70 61 72 73          .byte "parse-name"
003605r 3  65 2D 6E 61  
003609r 3  6D 65        
00360Br 3               
00360Br 3               nt_latestnt:
00360Br 3  08 00                .byte 8, 0
00360Dr 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003611r 3  rr rr        
003613r 3  6C 61 74 65          .byte "latestnt"
003617r 3  73 74 6E 74  
00361Br 3               
00361Br 3               nt_latestxt:
00361Br 3  08 00                .byte 8, 0
00361Dr 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003621r 3  rr rr        
003623r 3  6C 61 74 65          .byte "latestxt"
003627r 3  73 74 78 74  
00362Br 3               
00362Br 3               nt_defer:
00362Br 3  05 00                .byte 5, 0
00362Dr 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003631r 3  rr rr        
003633r 3  64 65 66 65          .byte "defer"
003637r 3  72           
003638r 3               
003638r 3               nt_to_body:
003638r 3  05 10                .byte 5, UF
00363Ar 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
00363Er 3  rr rr        
003640r 3  3E 62 6F 64          .byte ">body"
003644r 3  79           
003645r 3               
003645r 3               nt_name_to_string:
003645r 3  0B 10                .byte 11, UF
003647r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
00364Br 3  rr rr        
00364Dr 3  6E 61 6D 65          .byte "name>string"
003651r 3  3E 73 74 72  
003655r 3  69 6E 67     
003658r 3               
003658r 3               nt_int_to_name:
003658r 3  08 10                .byte 8, UF
00365Ar 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
00365Er 3  rr rr        
003660r 3  69 6E 74 3E          .byte "int>name"
003664r 3  6E 61 6D 65  
003668r 3               
003668r 3               nt_name_to_int:
003668r 3  08 10                .byte 8, UF
00366Ar 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
00366Er 3  rr rr        
003670r 3  6E 61 6D 65          .byte "name>int"
003674r 3  3E 69 6E 74  
003678r 3               
003678r 3               nt_bracket_tick:
003678r 3  03 05                .byte 3, CO+IM
00367Ar 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
00367Er 3  rr rr        
003680r 3  5B 27 5D             .byte "[']"
003683r 3               
003683r 3               nt_tick:
003683r 3  01 00                .byte 1, 0
003685r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003689r 3  rr rr        
00368Br 3  27                   .byte "'"
00368Cr 3               
00368Cr 3               nt_find_name:
00368Cr 3  09 10                .byte 9, UF
00368Er 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003692r 3  rr rr        
003694r 3  66 69 6E 64          .byte "find-name"
003698r 3  2D 6E 61 6D  
00369Cr 3  65           
00369Dr 3               
00369Dr 3               nt_fill:
00369Dr 3  04 10                .byte 4, UF
00369Fr 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
0036A3r 3  rr rr        
0036A5r 3  66 69 6C 6C          .byte "fill"
0036A9r 3               
0036A9r 3               nt_blank:
0036A9r 3  05 00                .byte 5, 0     ; underflow checked by FILL
0036ABr 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
0036AFr 3  rr rr        
0036B1r 3  62 6C 61 6E          .byte "blank"
0036B5r 3  6B           
0036B6r 3               
0036B6r 3               nt_erase:
0036B6r 3  05 00                .byte 5, 0      ; underflow checked by FILL
0036B8r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0036BCr 3  rr rr        
0036BEr 3  65 72 61 73          .byte "erase"
0036C2r 3  65           
0036C3r 3               
0036C3r 3               nt_d_plus:
0036C3r 3  02 10                .byte 2, UF
0036C5r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
0036C9r 3  rr rr        
0036CBr 3  64 2B                .byte "d+"
0036CDr 3               
0036CDr 3               nt_d_minus:
0036CDr 3  02 10                .byte 2, UF
0036CFr 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
0036D3r 3  rr rr        
0036D5r 3  64 2D                .byte "d-"
0036D7r 3               
0036D7r 3               nt_d_to_s:
0036D7r 3  03 10                .byte 3, UF
0036D9r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
0036DDr 3  rr rr        
0036DFr 3  64 3E 73             .byte "d>s"
0036E2r 3               
0036E2r 3               nt_s_to_d:
0036E2r 3  03 10                .byte 3, UF
0036E4r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
0036E8r 3  rr rr        
0036EAr 3  73 3E 64             .byte "s>d"
0036EDr 3               
0036EDr 3               nt_to:
0036EDr 3  02 0C                .byte 2, NN+IM
0036EFr 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
0036F3r 3  rr rr        
0036F5r 3  74 6F                .byte "to"
0036F7r 3               
0036F7r 3               nt_value:               ; same code as CONSTANT
0036F7r 3  05 10                .byte 5, UF
0036F9r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
0036FDr 3  rr rr        
0036FFr 3  76 61 6C 75          .byte "value"
003703r 3  65           
003704r 3               
003704r 3               nt_constant:
003704r 3  08 10                .byte 8, UF
003706r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
00370Ar 3  rr rr        
00370Cr 3  63 6F 6E 73          .byte "constant"
003710r 3  74 61 6E 74  
003714r 3               
003714r 3               nt_variable:
003714r 3  08 00                .byte 8, 0
003716r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
00371Ar 3  rr rr        
00371Cr 3  76 61 72 69          .byte "variable"
003720r 3  61 62 6C 65  
003724r 3               
003724r 3               nt_does:
003724r 3  05 05                .byte 5, CO+IM
003726r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
00372Ar 3  rr rr        
00372Cr 3  64 6F 65 73          .byte "does>"
003730r 3  3E           
003731r 3               
003731r 3               nt_create:
003731r 3  06 00                .byte 6, 0
003733r 3  rr rr rr rr          .word nt_does, xt_create, z_create
003737r 3  rr rr        
003739r 3  63 72 65 61          .byte "create"
00373Dr 3  74 65        
00373Fr 3               
00373Fr 3               nt_allot:
00373Fr 3  05 10                .byte 5, UF
003741r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003745r 3  rr rr        
003747r 3  61 6C 6C 6F          .byte "allot"
00374Br 3  74           
00374Cr 3               
00374Cr 3               nt_key:
00374Cr 3  03 00                .byte 3, 0
00374Er 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003752r 3  rr rr        
003754r 3  6B 65 79             .byte "key"
003757r 3               
003757r 3               nt_depth:
003757r 3  05 00                .byte 5, 0
003759r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
00375Dr 3  rr rr        
00375Fr 3  64 65 70 74          .byte "depth"
003763r 3  68           
003764r 3               
003764r 3               nt_unused:
003764r 3  06 00                .byte 6, 0
003766r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
00376Ar 3  rr rr        
00376Cr 3  75 6E 75 73          .byte "unused"
003770r 3  65 64        
003772r 3               
003772r 3               nt_r_to_input:
003772r 3  07 08                .byte 7, NN
003774r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003778r 3  rr rr        
00377Ar 3  72 3E 69 6E          .byte "r>input"
00377Er 3  70 75 74     
003781r 3               
003781r 3               nt_input_to_r:
003781r 3  07 08                .byte 7, NN
003783r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
003787r 3  rr rr        
003789r 3  69 6E 70 75          .byte "input>r"
00378Dr 3  74 3E 72     
003790r 3               
003790r 3               nt_accept:
003790r 3  06 18                .byte 6, UF+NN
003792r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
003796r 3  rr rr        
003798r 3  61 63 63 65          .byte "accept"
00379Cr 3  70 74        
00379Er 3               
00379Er 3               nt_refill:
00379Er 3  06 00                .byte 6, 0
0037A0r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
0037A4r 3  rr rr        
0037A6r 3  72 65 66 69          .byte "refill"
0037AAr 3  6C 6C        
0037ACr 3               
0037ACr 3               nt_slash_string:
0037ACr 3  07 10                .byte 7, UF
0037AEr 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
0037B2r 3  rr rr        
0037B4r 3  2F 73 74 72          .byte "/string"
0037B8r 3  69 6E 67     
0037BBr 3               
0037BBr 3               nt_minus_leading:
0037BBr 3  08 10                .byte 8, UF
0037BDr 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
0037C1r 3  rr rr        
0037C3r 3  2D 6C 65 61          .byte "-leading"
0037C7r 3  64 69 6E 67  
0037CBr 3               
0037CBr 3               nt_minus_trailing:
0037CBr 3  09 10                .byte 9, UF
0037CDr 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
0037D1r 3  rr rr        
0037D3r 3  2D 74 72 61          .byte "-trailing"
0037D7r 3  69 6C 69 6E  
0037DBr 3  67           
0037DCr 3               
0037DCr 3               nt_bl:
0037DCr 3  02 00                .byte 2, 0
0037DEr 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
0037E2r 3  rr rr        
0037E4r 3  62 6C                .byte "bl"
0037E6r 3               
0037E6r 3               nt_spaces:
0037E6r 3  06 10                .byte 6, UF
0037E8r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
0037ECr 3  rr rr        
0037EEr 3  73 70 61 63          .byte "spaces"
0037F2r 3  65 73        
0037F4r 3               
0037F4r 3               nt_bounds:
0037F4r 3  06 10                .byte 6, UF
0037F6r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
0037FAr 3  rr rr        
0037FCr 3  62 6F 75 6E          .byte "bounds"
003800r 3  64 73        
003802r 3               
003802r 3               nt_c_comma:
003802r 3  02 10                .byte 2, UF
003804r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003808r 3  rr rr        
00380Ar 3  63 2C                .byte "c,"
00380Cr 3               
00380Cr 3               nt_dnegate:
00380Cr 3  07 10                .byte 7, UF
00380Er 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003812r 3  rr rr        
003814r 3  64 6E 65 67          .byte "dnegate"
003818r 3  61 74 65     
00381Br 3               
00381Br 3               nt_negate:
00381Br 3  06 10                .byte 6, UF
00381Dr 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003821r 3  rr rr        
003823r 3  6E 65 67 61          .byte "negate"
003827r 3  74 65        
003829r 3               
003829r 3               nt_invert:
003829r 3  06 10                .byte 6, UF
00382Br 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
00382Fr 3  rr rr        
003831r 3  69 6E 76 65          .byte "invert"
003835r 3  72 74        
003837r 3               
003837r 3               nt_two_to_r:
003837r 3  03 11                .byte 3, CO+UF          ; native is special case
003839r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
00383Dr 3  rr rr        
00383Fr 3  32 3E 72             .byte "2>r"
003842r 3               
003842r 3               nt_two_r_from:
003842r 3  03 01                .byte 3, CO             ; native is special case
003844r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003848r 3  rr rr        
00384Ar 3  32 72 3E             .byte "2r>"
00384Dr 3               
00384Dr 3               nt_two_r_fetch:
00384Dr 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
00384Fr 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003853r 3  rr rr        
003855r 3  32 72 40             .byte "2r@"
003858r 3               
003858r 3               nt_two_literal:
003858r 3  08 14                .byte 8, UF+IM
00385Ar 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
00385Er 3  rr rr        
003860r 3  32 6C 69 74          .byte "2literal"
003864r 3  65 72 61 6C  
003868r 3               
003868r 3               nt_two_constant:
003868r 3  09 10                .byte 9, UF
00386Ar 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
00386Er 3  rr rr        
003870r 3  32 63 6F 6E          .byte "2constant"
003874r 3  73 74 61 6E  
003878r 3  74           
003879r 3               
003879r 3               nt_two_variable:
003879r 3  09 00                .byte 9, 0
00387Br 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
00387Fr 3  rr rr        
003881r 3  32 76 61 72          .byte "2variable"
003885r 3  69 61 62 6C  
003889r 3  65           
00388Ar 3               
00388Ar 3               nt_two_fetch:
00388Ar 3  02 10                .byte 2, UF
00388Cr 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003890r 3  rr rr        
003892r 3  32 40                .byte "2@"
003894r 3               
003894r 3               nt_two_store:
003894r 3  02 10                .byte 2, UF
003896r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
00389Ar 3  rr rr        
00389Cr 3  32 21                .byte "2!"
00389Er 3               
00389Er 3               nt_two_over:
00389Er 3  05 10                .byte 5, UF
0038A0r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
0038A4r 3  rr rr        
0038A6r 3  32 6F 76 65          .byte "2over"
0038AAr 3  72           
0038ABr 3               
0038ABr 3               nt_two_swap:
0038ABr 3  05 10                .byte 5, UF
0038ADr 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
0038B1r 3  rr rr        
0038B3r 3  32 73 77 61          .byte "2swap"
0038B7r 3  70           
0038B8r 3               
0038B8r 3               nt_two_drop:
0038B8r 3  05 10                .byte 5, UF
0038BAr 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
0038BEr 3  rr rr        
0038C0r 3  32 64 72 6F          .byte "2drop"
0038C4r 3  70           
0038C5r 3               
0038C5r 3               nt_max:
0038C5r 3  03 10                .byte 3, UF
0038C7r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
0038CBr 3  rr rr        
0038CDr 3  6D 61 78             .byte "max"
0038D0r 3               
0038D0r 3               nt_min:
0038D0r 3  03 10                .byte 3, UF
0038D2r 3  rr rr rr rr          .word nt_max, xt_min, z_min
0038D6r 3  rr rr        
0038D8r 3  6D 69 6E             .byte "min"
0038DBr 3               
0038DBr 3               nt_zero_less:
0038DBr 3  02 10                .byte 2, UF
0038DDr 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
0038E1r 3  rr rr        
0038E3r 3  30 3C                .byte "0<"
0038E5r 3               
0038E5r 3               nt_zero_greater:
0038E5r 3  02 10                .byte 2, UF
0038E7r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
0038EBr 3  rr rr        
0038EDr 3  30 3E                .byte "0>"
0038EFr 3               
0038EFr 3               nt_zero_unequal:
0038EFr 3  03 10                .byte 3, UF
0038F1r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
0038F5r 3  rr rr        
0038F7r 3  30 3C 3E             .byte "0<>"
0038FAr 3               
0038FAr 3               nt_zero_equal:
0038FAr 3  02 10                .byte 2, UF
0038FCr 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003900r 3  rr rr        
003902r 3  30 3D                .byte "0="
003904r 3               
003904r 3               nt_greater_than:
003904r 3  01 10                .byte 1, UF
003906r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
00390Ar 3  rr rr        
00390Cr 3  3E                   .byte ">"
00390Dr 3               
00390Dr 3               nt_u_greater_than:
00390Dr 3  02 10                .byte 2, UF
00390Fr 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003913r 3  rr rr        
003915r 3  75 3E                .byte "u>"
003917r 3               
003917r 3               nt_u_less_than:
003917r 3  02 10                .byte 2, UF
003919r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
00391Dr 3  rr rr        
00391Fr 3  75 3C                .byte "u<"
003921r 3               
003921r 3               nt_less_than:
003921r 3  01 10                .byte 1, UF
003923r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003927r 3  rr rr        
003929r 3  3C                   .byte "<"
00392Ar 3               
00392Ar 3               nt_not_equals:
00392Ar 3  02 10                .byte 2, UF
00392Cr 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003930r 3  rr rr        
003932r 3  3C 3E                .byte "<>"
003934r 3               
003934r 3               nt_equal:
003934r 3  01 10                .byte 1, UF
003936r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
00393Ar 3  rr rr        
00393Cr 3  3D                   .byte "="
00393Dr 3               
00393Dr 3               nt_two_slash:
00393Dr 3  02 10                .byte 2, UF
00393Fr 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003943r 3  rr rr        
003945r 3  32 2F                .byte "2/"
003947r 3               
003947r 3               nt_two_star:
003947r 3  02 10                .byte 2, UF
003949r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
00394Dr 3  rr rr        
00394Fr 3  32 2A                .byte "2*"
003951r 3               
003951r 3               nt_one_plus:
003951r 3  02 10                .byte 2, UF
003953r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003957r 3  rr rr        
003959r 3  31 2B                .byte "1+"
00395Br 3               
00395Br 3               nt_one_minus:
00395Br 3  02 10                .byte 2, UF
00395Dr 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003961r 3  rr rr        
003963r 3  31 2D                .byte "1-"
003965r 3               
003965r 3               nt_here:
003965r 3  04 00                .byte 4, 0
003967r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
00396Br 3  rr rr        
00396Dr 3  68 65 72 65          .byte "here"
003971r 3               
003971r 3               nt_cell_plus:
003971r 3  05 10                .byte 5, UF
003973r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003977r 3  rr rr        
003979r 3  63 65 6C 6C          .byte "cell+"
00397Dr 3  2B           
00397Er 3               
00397Er 3               nt_cells:
00397Er 3  05 00                .byte 5, 0
003980r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003984r 3  rr rr        
003986r 3  63 65 6C 6C          .byte "cells"
00398Ar 3  73           
00398Br 3               
00398Br 3               nt_chars:
00398Br 3  05 12                .byte 5, AN+UF   ; deleted during compile
00398Dr 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003991r 3  rr rr        
003993r 3  63 68 61 72          .byte "chars"
003997r 3  73           
003998r 3               
003998r 3               nt_char_plus:
003998r 3  05 00                .byte 5, 0
00399Ar 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
00399Er 3  rr rr        
0039A0r 3  63 68 61 72          .byte "char+"
0039A4r 3  2B           
0039A5r 3               
0039A5r 3               nt_bracket_char:
0039A5r 3  06 05                .byte 6, CO+IM
0039A7r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
0039ABr 3  rr rr        
0039ADr 3  5B 63 68 61          .byte "[char]"
0039B1r 3  72 5D        
0039B3r 3               
0039B3r 3               nt_char:
0039B3r 3  04 00                .byte 4, 0
0039B5r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
0039B9r 3  rr rr        
0039BBr 3  63 68 61 72          .byte "char"
0039BFr 3               
0039BFr 3               nt_pick:
0039BFr 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
0039C1r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
0039C5r 3  rr rr        
0039C7r 3  70 69 63 6B          .byte "pick"
0039CBr 3               
0039CBr 3               nt_lshift:
0039CBr 3  06 10                .byte 6, UF
0039CDr 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
0039D1r 3  rr rr        
0039D3r 3  6C 73 68 69          .byte "lshift"
0039D7r 3  66 74        
0039D9r 3               
0039D9r 3               nt_rshift:
0039D9r 3  06 10                .byte 6, UF
0039DBr 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
0039DFr 3  rr rr        
0039E1r 3  72 73 68 69          .byte "rshift"
0039E5r 3  66 74        
0039E7r 3               
0039E7r 3               nt_xor:
0039E7r 3  03 10                .byte 3, UF
0039E9r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
0039EDr 3  rr rr        
0039EFr 3  78 6F 72             .byte "xor"
0039F2r 3               
0039F2r 3               nt_or:
0039F2r 3  02 10                .byte 2, UF
0039F4r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
0039F8r 3  rr rr        
0039FAr 3  6F 72                .byte "or"
0039FCr 3               
0039FCr 3               nt_and:
0039FCr 3  03 10                .byte 3, UF
0039FEr 3  rr rr rr rr          .word nt_or, xt_and, z_and
003A02r 3  rr rr        
003A04r 3  61 6E 64             .byte "and"
003A07r 3               
003A07r 3               nt_dabs:
003A07r 3  04 10                .byte 4, UF
003A09r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003A0Dr 3  rr rr        
003A0Fr 3  64 61 62 73          .byte "dabs"
003A13r 3               
003A13r 3               nt_abs:
003A13r 3  03 10                .byte 3, UF
003A15r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003A19r 3  rr rr        
003A1Br 3  61 62 73             .byte "abs"
003A1Er 3               
003A1Er 3               nt_minus:
003A1Er 3  01 10                .byte 1, UF
003A20r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003A24r 3  rr rr        
003A26r 3  2D                   .byte "-"
003A27r 3               
003A27r 3               nt_plus:
003A27r 3  01 10                .byte 1, UF
003A29r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003A2Dr 3  rr rr        
003A2Fr 3  2B                   .byte "+"
003A30r 3               
003A30r 3               nt_question_dup:
003A30r 3  04 10                .byte 4, UF
003A32r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003A36r 3  rr rr        
003A38r 3  3F 64 75 70          .byte "?dup"
003A3Cr 3               
003A3Cr 3               nt_two_dup:
003A3Cr 3  04 10                .byte 4, UF
003A3Er 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003A42r 3  rr rr        
003A44r 3  32 64 75 70          .byte "2dup"
003A48r 3               
003A48r 3               nt_two:
003A48r 3  01 00                .byte 1, 0
003A4Ar 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003A4Er 3  rr rr        
003A50r 3  32                   .byte "2"
003A51r 3               
003A51r 3               nt_one:
003A51r 3  01 00                .byte 1, 0
003A53r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003A57r 3  rr rr        
003A59r 3  31                   .byte "1"
003A5Ar 3               
003A5Ar 3               nt_zero:
003A5Ar 3  01 00                .byte 1, 0
003A5Cr 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003A60r 3  rr rr        
003A62r 3  30                   .byte "0"
003A63r 3               
003A63r 3               nt_space:
003A63r 3  05 00                .byte 5, 0
003A65r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003A69r 3  rr rr        
003A6Br 3  73 70 61 63          .byte "space"
003A6Fr 3  65           
003A70r 3               
003A70r 3               nt_true:
003A70r 3  04 00                .byte 4, 0
003A72r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003A76r 3  rr rr        
003A78r 3  74 72 75 65          .byte "true"
003A7Cr 3               
003A7Cr 3               nt_false:
003A7Cr 3  05 00                .byte 5, 0
003A7Er 3  rr rr rr rr          .word nt_true, xt_false, z_false
003A82r 3  rr rr        
003A84r 3  66 61 6C 73          .byte "false"
003A88r 3  65           
003A89r 3               
003A89r 3               nt_question:
003A89r 3  01 00                .byte 1, 0
003A8Br 3  rr rr rr rr          .word nt_false, xt_question, z_question
003A8Fr 3  rr rr        
003A91r 3  3F                   .byte "?"
003A92r 3               
003A92r 3               nt_ud_dot_r:
003A92r 3  04 10                .byte 4, UF
003A94r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003A98r 3  rr rr        
003A9Ar 3  75 64 2E 72          .byte "ud.r"
003A9Er 3               
003A9Er 3               nt_ud_dot:
003A9Er 3  03 10                .byte 3, UF
003AA0r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003AA4r 3  rr rr        
003AA6r 3  75 64 2E             .byte "ud."
003AA9r 3               
003AA9r 3               nt_d_dot_r:
003AA9r 3  03 10                .byte 3, UF
003AABr 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003AAFr 3  rr rr        
003AB1r 3  64 2E 72             .byte "d.r"
003AB4r 3               
003AB4r 3               nt_d_dot:
003AB4r 3  02 10                .byte 2, UF
003AB6r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003ABAr 3  rr rr        
003ABCr 3  64 2E                .byte "d."
003ABEr 3               
003ABEr 3               nt_dot_r:
003ABEr 3  02 10                .byte 2, UF
003AC0r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003AC4r 3  rr rr        
003AC6r 3  2E 72                .byte ".r"
003AC8r 3               
003AC8r 3               nt_u_dot_r:
003AC8r 3  03 10                .byte 3, UF
003ACAr 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003ACEr 3  rr rr        
003AD0r 3  75 2E 72             .byte "u.r"
003AD3r 3               
003AD3r 3               nt_u_dot:
003AD3r 3  02 10                .byte 2, UF
003AD5r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003AD9r 3  rr rr        
003ADBr 3  75 2E                .byte "u."
003ADDr 3               
003ADDr 3               nt_dot:
003ADDr 3  01 10                .byte 1, UF
003ADFr 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003AE3r 3  rr rr        
003AE5r 3  2E                   .byte "."
003AE6r 3               
003AE6r 3               nt_type:
003AE6r 3  04 10                .byte 4, UF
003AE8r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003AECr 3  rr rr        
003AEEr 3  74 79 70 65          .byte "type"
003AF2r 3               
003AF2r 3               nt_emit:
003AF2r 3  04 18                .byte 4, NN+UF
003AF4r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003AF8r 3  rr rr        
003AFAr 3  65 6D 69 74          .byte "emit"
003AFEr 3               
003AFEr 3               nt_execute:
003AFEr 3  07 10                .byte 7, UF
003B00r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003B04r 3  rr rr        
003B06r 3  65 78 65 63          .byte "execute"
003B0Ar 3  75 74 65     
003B0Dr 3               
003B0Dr 3               nt_plus_store:
003B0Dr 3  02 10                .byte 2, UF
003B0Fr 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003B13r 3  rr rr        
003B15r 3  2B 21                .byte "+!"
003B17r 3               
003B17r 3               nt_c_store:
003B17r 3  02 10                .byte 2, UF
003B19r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003B1Dr 3  rr rr        
003B1Fr 3  63 21                .byte "c!"
003B21r 3               
003B21r 3               nt_c_fetch:
003B21r 3  02 10                .byte 2, UF
003B23r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003B27r 3  rr rr        
003B29r 3  63 40                .byte "c@"
003B2Br 3               
003B2Br 3               nt_comma:
003B2Br 3  01 10                .byte 1, UF
003B2Dr 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003B31r 3  rr rr        
003B33r 3  2C                   .byte ","
003B34r 3               
003B34r 3               nt_tuck:
003B34r 3  04 10                .byte 4, UF
003B36r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003B3Ar 3  rr rr        
003B3Cr 3  74 75 63 6B          .byte "tuck"
003B40r 3               
003B40r 3               nt_not_rote:
003B40r 3  04 10                .byte 4, UF
003B42r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003B46r 3  rr rr        
003B48r 3  2D 72 6F 74          .byte "-rot"
003B4Cr 3               
003B4Cr 3               nt_rot:
003B4Cr 3  03 10                .byte 3, UF
003B4Er 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003B52r 3  rr rr        
003B54r 3  72 6F 74             .byte "rot"
003B57r 3               
003B57r 3               nt_nip:
003B57r 3  03 10                .byte 3, UF
003B59r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003B5Dr 3  rr rr        
003B5Fr 3  6E 69 70             .byte "nip"
003B62r 3               
003B62r 3               nt_r_fetch:
003B62r 3  02 01                .byte 2, CO    ; native is special case
003B64r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003B68r 3  rr rr        
003B6Ar 3  72 40                .byte "r@"
003B6Cr 3               
003B6Cr 3               nt_r_from:
003B6Cr 3  02 01                .byte 2, CO    ; native is special case
003B6Er 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003B72r 3  rr rr        
003B74r 3  72 3E                .byte "r>"
003B76r 3               
003B76r 3               nt_to_r:
003B76r 3  02 11                .byte 2, CO+UF ; native is special case
003B78r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003B7Cr 3  rr rr        
003B7Er 3  3E 72                .byte ">r"
003B80r 3               
003B80r 3               nt_over:
003B80r 3  04 10                .byte 4, UF
003B82r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003B86r 3  rr rr        
003B88r 3  6F 76 65 72          .byte "over"
003B8Cr 3               
003B8Cr 3               nt_fetch:
003B8Cr 3  01 10                .byte 1, UF
003B8Er 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003B92r 3  rr rr        
003B94r 3  40                   .byte "@"
003B95r 3               
003B95r 3               nt_store:
003B95r 3  01 10                .byte 1, UF
003B97r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003B9Br 3  rr rr        
003B9Dr 3  21                   .byte "!"
003B9Er 3               
003B9Er 3               nt_swap:
003B9Er 3  04 10                .byte 4, UF
003BA0r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003BA4r 3  rr rr        
003BA6r 3  73 77 61 70          .byte "swap"
003BAAr 3               
003BAAr 3               nt_dup:
003BAAr 3  03 10                .byte 3, UF
003BACr 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003BB0r 3  rr rr        
003BB2r 3  64 75 70             .byte "dup"
003BB5r 3               
003BB5r 3               ; DROP is always the first native word in the Dictionary
003BB5r 3               dictionary_start:
003BB5r 3               nt_drop:
003BB5r 3  04 10                .byte 4, UF
003BB7r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003BBBr 3  rr rr        
003BBDr 3  64 72 6F 70          .byte "drop"
003BC1r 3               
003BC1r 3               ; END of FORTH-WORDLIST
003BC1r 3               
003BC1r 3               
003BC1r 3               ; ROOT-WORDLIST
003BC1r 3                       ; This is a short wordlist that has just the words needed to
003BC1r 3                       ; set the wordlists. These words are also included in the
003BC1r 3                       ; FORTH-WORDLIST as well.
003BC1r 3               
003BC1r 3               nt_root_words:
003BC1r 3  05 00                .byte 5, 0
003BC3r 3  00 00 rr rr          .word 0000, xt_words, z_words
003BC7r 3  rr rr        
003BC9r 3  77 6F 72 64          .byte "words"
003BCDr 3  73           
003BCEr 3               
003BCEr 3               nt_root_forth_wordlist: ; shares code with ZERO
003BCEr 3  0E 00                .byte 14, 0
003BD0r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003BD4r 3  rr rr        
003BD6r 3  66 6F 72 74          .byte "forth-wordlist"
003BDAr 3  68 2D 77 6F  
003BDEr 3  72 64 6C 69  
003BE4r 3               
003BE4r 3               nt_root_forth:
003BE4r 3  05 00                .byte 5, 0
003BE6r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003BEAr 3  rr rr        
003BECr 3  66 6F 72 74          .byte "forth"
003BF0r 3  68           
003BF1r 3               
003BF1r 3               root_dictionary_start:
003BF1r 3               nt_root_set_order:
003BF1r 3  09 00                .byte 9, 0
003BF3r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003BF7r 3  rr rr        
003BF9r 3  73 65 74 2D          .byte "set-order"
003BFDr 3  6F 72 64 65  
003C01r 3  72           
003C02r 3               
003C02r 3               ; END of ROOT-WORDLIST
003C02r 3               
003C02r 3               
003C02r 3               ; EDITOR-WORDLIST
003C02r 3               
003C02r 3               nt_editor_enter_screen:
003C02r 3  0C 00                .byte 12, 0
003C04r 3  00 00 rr rr          .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003C08r 3  rr rr        
003C0Ar 3  65 6E 74 65          .byte "enter-screen"
003C0Er 3  72 2D 73 63  
003C12r 3  72 65 65 6E  
003C16r 3               
003C16r 3               nt_editor_erase_screen:
003C16r 3  0C 00                .byte 12, 0
003C18r 3  rr rr rr rr          .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003C1Cr 3  rr rr        
003C1Er 3  65 72 61 73          .byte "erase-screen"
003C22r 3  65 2D 73 63  
003C26r 3  72 65 65 6E  
003C2Ar 3               
003C2Ar 3               nt_editor_el:
003C2Ar 3  02 00                .byte 2, 0
003C2Cr 3  rr rr rr rr          .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003C30r 3  rr rr        
003C32r 3  65 6C                .byte "el"
003C34r 3               
003C34r 3               nt_editor_l:
003C34r 3  01 00                .byte 1, 0
003C36r 3  rr rr rr rr          .word nt_editor_el, xt_editor_l, z_editor_l
003C3Ar 3  rr rr        
003C3Cr 3  6C                   .byte "l"
003C3Dr 3               
003C3Dr 3               nt_editor_line:
003C3Dr 3  04 10                .byte 4, UF
003C3Fr 3  rr rr rr rr          .word nt_editor_l, xt_editor_line, z_editor_line
003C43r 3  rr rr        
003C45r 3  6C 69 6E 65          .byte "line"
003C49r 3               
003C49r 3               editor_dictionary_start:
003C49r 3               nt_editor_o:
003C49r 3  01 00                .byte 1, 0
003C4Br 3  rr rr rr rr          .word nt_editor_line, xt_editor_o, z_editor_o
003C4Fr 3  rr rr        
003C51r 3  6F                   .byte "o"
003C52r 3               
003C52r 3               ; END of EDITOR-WORDLIST
003C52r 3               
003C52r 3               
003C52r 3               ; ; ASSEMBLER-WORDLIST
003C52r 3               
003C52r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003C52r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003C52r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003C52r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003C52r 3               .ifdef TALI_OPTIONAL_ASSEMBLER
003C52r 3               assembler_dictionary_start:
003C52r 3               nt_asm_adc_h:
003C52r 3  05 04        		.byte 5, IM
003C54r 3  rr rr                        .word nt_asm_adc_x
003C56r 3  rr rr rr rr  		.word xt_asm_adc_h, z_asm_adc_h
003C5Ar 3  61 64 63 2E  		.byte "adc.#"
003C5Er 3  23           
003C5Fr 3               
003C5Fr 3               nt_asm_adc_x:
003C5Fr 3  05 04        		.byte 5, IM
003C61r 3  rr rr                        .word nt_asm_adc_y
003C63r 3  rr rr rr rr  		.word xt_asm_adc_x, z_asm_adc_x
003C67r 3  61 64 63 2E  		.byte "adc.x"
003C6Br 3  78           
003C6Cr 3               
003C6Cr 3               nt_asm_adc_y:
003C6Cr 3  05 04        		.byte 5, IM
003C6Er 3  rr rr                        .word nt_asm_adc_z
003C70r 3  rr rr rr rr  		.word xt_asm_adc_y, z_asm_adc_y
003C74r 3  61 64 63 2E  		.byte "adc.y"
003C78r 3  79           
003C79r 3               
003C79r 3               nt_asm_adc_z:
003C79r 3  05 04        		.byte 5, IM
003C7Br 3  rr rr                        .word nt_asm_adc_zi
003C7Dr 3  rr rr rr rr  		.word xt_asm_adc_z, z_asm_adc_z
003C81r 3  61 64 63 2E  		.byte "adc.z"
003C85r 3  7A           
003C86r 3               
003C86r 3               nt_asm_adc_zi:
003C86r 3  06 04        		.byte 6, IM
003C88r 3  rr rr                        .word nt_asm_adc_ziy
003C8Ar 3  rr rr rr rr  		.word xt_asm_adc_zi, z_asm_adc_zi
003C8Er 3  61 64 63 2E  		.byte "adc.zi"
003C92r 3  7A 69        
003C94r 3               
003C94r 3               nt_asm_adc_ziy:
003C94r 3  07 04        		.byte 7, IM
003C96r 3  rr rr                        .word nt_asm_adc_zx
003C98r 3  rr rr rr rr  		.word xt_asm_adc_ziy, z_asm_adc_ziy
003C9Cr 3  61 64 63 2E  		.byte "adc.ziy"
003CA0r 3  7A 69 79     
003CA3r 3               
003CA3r 3               nt_asm_adc_zx:
003CA3r 3  06 04        		.byte 6, IM
003CA5r 3  rr rr                        .word nt_asm_adc_zxi
003CA7r 3  rr rr rr rr  		.word xt_asm_adc_zx, z_asm_adc_zx
003CABr 3  61 64 63 2E  		.byte "adc.zx"
003CAFr 3  7A 78        
003CB1r 3               
003CB1r 3               nt_asm_adc_zxi:
003CB1r 3  07 04        		.byte 7, IM
003CB3r 3  rr rr                        .word nt_asm_and
003CB5r 3  rr rr rr rr  		.word xt_asm_adc_zxi, z_asm_adc_zxi
003CB9r 3  61 64 63 2E  		.byte "adc.zxi"
003CBDr 3  7A 78 69     
003CC0r 3               
003CC0r 3               nt_asm_and:     ; not "and" because of conflicts with Forth word
003CC0r 3  04 04        		.byte 4, IM
003CC2r 3  rr rr                        .word nt_asm_and_h
003CC4r 3  rr rr rr rr  		.word xt_asm_and, z_asm_and
003CC8r 3  61 6E 64 2E  		.byte "and."
003CCCr 3               
003CCCr 3               nt_asm_and_h:
003CCCr 3  05 04        		.byte 5, IM
003CCEr 3  rr rr                        .word nt_asm_and_x
003CD0r 3  rr rr rr rr  		.word xt_asm_and_h, z_asm_and_h
003CD4r 3  61 6E 64 2E  		.byte "and.#"
003CD8r 3  23           
003CD9r 3               
003CD9r 3               nt_asm_and_x:
003CD9r 3  05 04        		.byte 5, IM
003CDBr 3  rr rr                        .word nt_asm_and_y
003CDDr 3  rr rr rr rr  		.word xt_asm_and_x, z_asm_and_x
003CE1r 3  61 6E 64 2E  		.byte "and.x"
003CE5r 3  78           
003CE6r 3               
003CE6r 3               nt_asm_and_y:
003CE6r 3  05 04        		.byte 5, IM
003CE8r 3  rr rr                        .word nt_asm_and_z
003CEAr 3  rr rr rr rr  		.word xt_asm_and_y, z_asm_and_y
003CEEr 3  61 6E 64 2E  		.byte "and.y"
003CF2r 3  79           
003CF3r 3               
003CF3r 3               nt_asm_and_z:
003CF3r 3  05 04        		.byte 5, IM
003CF5r 3  rr rr                        .word nt_asm_and_zi
003CF7r 3  rr rr rr rr  		.word xt_asm_and_z, z_asm_and_z
003CFBr 3  61 6E 64 2E  		.byte "and.z"
003CFFr 3  7A           
003D00r 3               
003D00r 3               nt_asm_and_zi:
003D00r 3  06 04        		.byte 6, IM
003D02r 3  rr rr                        .word nt_asm_and_ziy
003D04r 3  rr rr rr rr  		.word xt_asm_and_zi, z_asm_and_zi
003D08r 3  61 6E 64 2E  		.byte "and.zi"
003D0Cr 3  7A 69        
003D0Er 3               
003D0Er 3               nt_asm_and_ziy:
003D0Er 3  07 04        		.byte 7, IM
003D10r 3  rr rr                        .word nt_asm_and_zx
003D12r 3  rr rr rr rr  		.word xt_asm_and_ziy, z_asm_and_ziy
003D16r 3  61 6E 64 2E  		.byte "and.ziy"
003D1Ar 3  7A 69 79     
003D1Dr 3               
003D1Dr 3               nt_asm_and_zx:
003D1Dr 3  06 04        		.byte 6, IM
003D1Fr 3  rr rr                        .word nt_asm_and_zxi
003D21r 3  rr rr rr rr  		.word xt_asm_and_zx, z_asm_and_zx
003D25r 3  61 6E 64 2E  		.byte "and.zx"
003D29r 3  7A 78        
003D2Br 3               
003D2Br 3               nt_asm_and_zxi:
003D2Br 3  07 04        		.byte 7, IM
003D2Dr 3  rr rr                        .word nt_asm_asl
003D2Fr 3  rr rr rr rr  		.word xt_asm_and_zxi, z_asm_and_zxi
003D33r 3  61 6E 64 2E  		.byte "and.zxi"
003D37r 3  7A 78 69     
003D3Ar 3               
003D3Ar 3               nt_asm_asl:
003D3Ar 3  03 04        		.byte 3, IM
003D3Cr 3  rr rr                        .word nt_asm_asl_a
003D3Er 3  rr rr rr rr  		.word xt_asm_asl, z_asm_asl
003D42r 3  61 73 6C     		.byte "asl"
003D45r 3               
003D45r 3               nt_asm_asl_a:
003D45r 3  05 04        		.byte 5, IM
003D47r 3  rr rr                        .word nt_asm_asl_x
003D49r 3  rr rr rr rr  		.word xt_asm_asl_a, z_asm_asl_a
003D4Dr 3  61 73 6C 2E  		.byte "asl.a"
003D51r 3  61           
003D52r 3               
003D52r 3               nt_asm_asl_x:
003D52r 3  05 04        		.byte 5, IM
003D54r 3  rr rr                        .word nt_asm_asl_z
003D56r 3  rr rr rr rr  		.word xt_asm_asl_x, z_asm_asl_x
003D5Ar 3  61 73 6C 2E  		.byte "asl.x"
003D5Er 3  78           
003D5Fr 3               
003D5Fr 3               nt_asm_asl_z:
003D5Fr 3  05 04        		.byte 5, IM
003D61r 3  rr rr                        .word nt_asm_asl_zx
003D63r 3  rr rr rr rr  		.word xt_asm_asl_z, z_asm_asl_z
003D67r 3  61 73 6C 2E  		.byte "asl.z"
003D6Br 3  7A           
003D6Cr 3               
003D6Cr 3               nt_asm_asl_zx:
003D6Cr 3  06 04        		.byte 6, IM
003D6Er 3  rr rr                        .word nt_asm_bcc
003D70r 3  rr rr rr rr  		.word xt_asm_asl_zx, z_asm_asl_zx
003D74r 3  61 73 6C 2E  		.byte "asl.zx"
003D78r 3  7A 78        
003D7Ar 3               
003D7Ar 3               nt_asm_bcc:
003D7Ar 3  03 04        		.byte 3, IM
003D7Cr 3  rr rr                        .word nt_asm_bcs
003D7Er 3  rr rr rr rr  		.word xt_asm_bcc, z_asm_bcc
003D82r 3  62 63 63     		.byte "bcc"
003D85r 3               
003D85r 3               nt_asm_bcs:
003D85r 3  03 04        		.byte 3, IM
003D87r 3  rr rr                        .word nt_asm_beq
003D89r 3  rr rr rr rr  		.word xt_asm_bcs, z_asm_bcs
003D8Dr 3  62 63 73     		.byte "bcs"
003D90r 3               
003D90r 3               nt_asm_beq:
003D90r 3  03 04        		.byte 3, IM
003D92r 3  rr rr                        .word nt_asm_bit
003D94r 3  rr rr rr rr  		.word xt_asm_beq, z_asm_beq
003D98r 3  62 65 71     		.byte "beq"
003D9Br 3               
003D9Br 3               nt_asm_bit:
003D9Br 3  03 04        		.byte 3, IM
003D9Dr 3  rr rr                        .word nt_asm_bit_h
003D9Fr 3  rr rr rr rr  		.word xt_asm_bit, z_asm_bit
003DA3r 3  62 69 74     		.byte "bit"
003DA6r 3               
003DA6r 3               nt_asm_bit_h:
003DA6r 3  05 04        		.byte 5, IM
003DA8r 3  rr rr                        .word nt_asm_bit_x
003DAAr 3  rr rr rr rr  		.word xt_asm_bit_h, z_asm_bit_h
003DAEr 3  62 69 74 2E  		.byte "bit.#"
003DB2r 3  23           
003DB3r 3               
003DB3r 3               nt_asm_bit_x:
003DB3r 3  05 04        		.byte 5, IM
003DB5r 3  rr rr                        .word nt_asm_bit_z
003DB7r 3  rr rr rr rr  		.word xt_asm_bit_x, z_asm_bit_x
003DBBr 3  62 69 74 2E  		.byte "bit.x"
003DBFr 3  78           
003DC0r 3               
003DC0r 3               nt_asm_bit_z:
003DC0r 3  05 04        		.byte 5, IM
003DC2r 3  rr rr                        .word nt_asm_bit_zx
003DC4r 3  rr rr rr rr  		.word xt_asm_bit_z, z_asm_bit_z
003DC8r 3  62 69 74 2E  		.byte "bit.z"
003DCCr 3  7A           
003DCDr 3               
003DCDr 3               nt_asm_bit_zx:
003DCDr 3  06 04        		.byte 6, IM
003DCFr 3  rr rr                        .word nt_asm_bmi
003DD1r 3  rr rr rr rr  		.word xt_asm_bit_zx, z_asm_bit_zx
003DD5r 3  62 69 74 2E  		.byte "bit.zx"
003DD9r 3  7A 78        
003DDBr 3               
003DDBr 3               nt_asm_bmi:
003DDBr 3  03 04        		.byte 3, IM
003DDDr 3  rr rr                        .word nt_asm_bne
003DDFr 3  rr rr rr rr  		.word xt_asm_bmi, z_asm_bmi
003DE3r 3  62 6D 69     		.byte "bmi"
003DE6r 3               
003DE6r 3               nt_asm_bne:
003DE6r 3  03 04        		.byte 3, IM
003DE8r 3  rr rr                        .word nt_asm_bpl
003DEAr 3  rr rr rr rr  		.word xt_asm_bne, z_asm_bne
003DEEr 3  62 6E 65     		.byte "bne"
003DF1r 3               
003DF1r 3               nt_asm_bpl:
003DF1r 3  03 04        		.byte 3, IM
003DF3r 3  rr rr                        .word nt_asm_bra
003DF5r 3  rr rr rr rr  		.word xt_asm_bpl, z_asm_bpl
003DF9r 3  62 70 6C     		.byte "bpl"
003DFCr 3               
003DFCr 3               nt_asm_bra:
003DFCr 3  03 04        		.byte 3, IM
003DFEr 3  rr rr                        .word nt_asm_brk
003E00r 3  rr rr rr rr  		.word xt_asm_bra, z_asm_bra
003E04r 3  62 72 61     		.byte "bra"
003E07r 3               
003E07r 3               nt_asm_brk:
003E07r 3  03 04        		.byte 3, IM
003E09r 3  rr rr                        .word nt_asm_bvc
003E0Br 3  rr rr rr rr  		.word xt_asm_brk, z_asm_brk
003E0Fr 3  62 72 6B     		.byte "brk"
003E12r 3               
003E12r 3               nt_asm_bvc:
003E12r 3  03 04        		.byte 3, IM
003E14r 3  rr rr                        .word nt_asm_bvs
003E16r 3  rr rr rr rr  		.word xt_asm_bvc, z_asm_bvc
003E1Ar 3  62 76 63     		.byte "bvc"
003E1Dr 3               
003E1Dr 3               nt_asm_bvs:
003E1Dr 3  03 04        		.byte 3, IM
003E1Fr 3  rr rr                        .word nt_asm_clc
003E21r 3  rr rr rr rr  		.word xt_asm_bvs, z_asm_bvs
003E25r 3  62 76 73     		.byte "bvs"
003E28r 3               
003E28r 3               nt_asm_clc:
003E28r 3  03 04        		.byte 3, IM
003E2Ar 3  rr rr                        .word nt_asm_cld
003E2Cr 3  rr rr rr rr  		.word xt_asm_clc, z_asm_clc
003E30r 3  63 6C 63     		.byte "clc"
003E33r 3               
003E33r 3               nt_asm_cld:
003E33r 3  03 04        		.byte 3, IM
003E35r 3  rr rr                        .word nt_asm_cli
003E37r 3  rr rr rr rr  		.word xt_asm_cld, z_asm_cld
003E3Br 3  63 6C 64     		.byte "cld"
003E3Er 3               
003E3Er 3               nt_asm_cli:
003E3Er 3  03 04        		.byte 3, IM
003E40r 3  rr rr                        .word nt_asm_clv
003E42r 3  rr rr rr rr  		.word xt_asm_cli, z_asm_cli
003E46r 3  63 6C 69     		.byte "cli"
003E49r 3               
003E49r 3               nt_asm_clv:
003E49r 3  03 04        		.byte 3, IM
003E4Br 3  rr rr                        .word nt_asm_cmp
003E4Dr 3  rr rr rr rr  		.word xt_asm_clv, z_asm_clv
003E51r 3  63 6C 76     		.byte "clv"
003E54r 3               
003E54r 3               nt_asm_cmp:
003E54r 3  03 04        		.byte 3, IM
003E56r 3  rr rr                        .word nt_asm_cmp_h
003E58r 3  rr rr rr rr  		.word xt_asm_cmp, z_asm_cmp
003E5Cr 3  63 6D 70     		.byte "cmp"
003E5Fr 3               
003E5Fr 3               nt_asm_cmp_h:
003E5Fr 3  05 04        		.byte 5, IM
003E61r 3  rr rr                        .word nt_asm_cmp_x
003E63r 3  rr rr rr rr  		.word xt_asm_cmp_h, z_asm_cmp_h
003E67r 3  63 6D 70 2E  		.byte "cmp.#"
003E6Br 3  23           
003E6Cr 3               
003E6Cr 3               nt_asm_cmp_x:
003E6Cr 3  05 04        		.byte 5, IM
003E6Er 3  rr rr                        .word nt_asm_cmp_y
003E70r 3  rr rr rr rr  		.word xt_asm_cmp_x, z_asm_cmp_x
003E74r 3  63 6D 70 2E  		.byte "cmp.x"
003E78r 3  78           
003E79r 3               
003E79r 3               nt_asm_cmp_y:
003E79r 3  05 04        		.byte 5, IM
003E7Br 3  rr rr                        .word nt_asm_cmp_z
003E7Dr 3  rr rr rr rr  		.word xt_asm_cmp_y, z_asm_cmp_y
003E81r 3  63 6D 70 2E  		.byte "cmp.y"
003E85r 3  79           
003E86r 3               
003E86r 3               nt_asm_cmp_z:
003E86r 3  05 04        		.byte 5, IM
003E88r 3  rr rr                        .word nt_asm_cmp_zi
003E8Ar 3  rr rr rr rr  		.word xt_asm_cmp_z, z_asm_cmp_z
003E8Er 3  63 6D 70 2E  		.byte "cmp.z"
003E92r 3  7A           
003E93r 3               
003E93r 3               nt_asm_cmp_zi:
003E93r 3  06 04        		.byte 6, IM
003E95r 3  rr rr                        .word nt_asm_cmp_ziy
003E97r 3  rr rr rr rr  		.word xt_asm_cmp_zi, z_asm_cmp_zi
003E9Br 3  63 6D 70 2E  		.byte "cmp.zi"
003E9Fr 3  7A 69        
003EA1r 3               
003EA1r 3               nt_asm_cmp_ziy:
003EA1r 3  07 04        		.byte 7, IM
003EA3r 3  rr rr                        .word nt_asm_cmp_zx
003EA5r 3  rr rr rr rr  		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003EA9r 3  63 6D 70 2E  		.byte "cmp.ziy"
003EADr 3  7A 69 79     
003EB0r 3               
003EB0r 3               nt_asm_cmp_zx:
003EB0r 3  06 04        		.byte 6, IM
003EB2r 3  rr rr                        .word nt_asm_cmp_zxi
003EB4r 3  rr rr rr rr  		.word xt_asm_cmp_zx, z_asm_cmp_zx
003EB8r 3  63 6D 70 2E  		.byte "cmp.zx"
003EBCr 3  7A 78        
003EBEr 3               
003EBEr 3               nt_asm_cmp_zxi:
003EBEr 3  07 04        		.byte 7, IM
003EC0r 3  rr rr                        .word nt_asm_cpx
003EC2r 3  rr rr rr rr  		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003EC6r 3  63 6D 70 2E  		.byte "cmp.zxi"
003ECAr 3  7A 78 69     
003ECDr 3               
003ECDr 3               nt_asm_cpx:
003ECDr 3  03 04        		.byte 3, IM
003ECFr 3  rr rr                        .word nt_asm_cpx_h
003ED1r 3  rr rr rr rr  		.word xt_asm_cpx, z_asm_cpx
003ED5r 3  63 70 78     		.byte "cpx"
003ED8r 3               
003ED8r 3               nt_asm_cpx_h:
003ED8r 3  05 04        		.byte 5, IM
003EDAr 3  rr rr                        .word nt_asm_cpx_z
003EDCr 3  rr rr rr rr  		.word xt_asm_cpx_h, z_asm_cpx_h
003EE0r 3  63 70 78 2E  		.byte "cpx.#"
003EE4r 3  23           
003EE5r 3               
003EE5r 3               nt_asm_cpx_z:
003EE5r 3  05 04        		.byte 5, IM
003EE7r 3  rr rr                        .word nt_asm_cpy
003EE9r 3  rr rr rr rr  		.word xt_asm_cpx_z, z_asm_cpx_z
003EEDr 3  63 70 78 2E  		.byte "cpx.z"
003EF1r 3  7A           
003EF2r 3               
003EF2r 3               nt_asm_cpy:
003EF2r 3  03 04        		.byte 3, IM
003EF4r 3  rr rr                        .word nt_asm_cpy_h
003EF6r 3  rr rr rr rr  		.word xt_asm_cpy, z_asm_cpy
003EFAr 3  63 70 79     		.byte "cpy"
003EFDr 3               
003EFDr 3               nt_asm_cpy_h:
003EFDr 3  05 04        		.byte 5, IM
003EFFr 3  rr rr                        .word nt_asm_cpy_z
003F01r 3  rr rr rr rr  		.word xt_asm_cpy_h, z_asm_cpy_h
003F05r 3  63 70 79 2E  		.byte "cpy.#"
003F09r 3  23           
003F0Ar 3               
003F0Ar 3               nt_asm_cpy_z:
003F0Ar 3  05 04        		.byte 5, IM
003F0Cr 3  rr rr                        .word nt_asm_dec
003F0Er 3  rr rr rr rr  		.word xt_asm_cpy_z, z_asm_cpy_z
003F12r 3  63 70 79 2E  		.byte "cpy.z"
003F16r 3  7A           
003F17r 3               
003F17r 3               nt_asm_dec:
003F17r 3  03 04        		.byte 3, IM
003F19r 3  rr rr                        .word nt_asm_dec_a
003F1Br 3  rr rr rr rr  		.word xt_asm_dec, z_asm_dec
003F1Fr 3  64 65 63     		.byte "dec"
003F22r 3               
003F22r 3               nt_asm_dec_a:
003F22r 3  05 04        		.byte 5, IM
003F24r 3  rr rr                        .word nt_asm_dec_x
003F26r 3  rr rr rr rr  		.word xt_asm_dec_a, z_asm_dec_a
003F2Ar 3  64 65 63 2E  		.byte "dec.a"
003F2Er 3  61           
003F2Fr 3               
003F2Fr 3               nt_asm_dec_x:
003F2Fr 3  05 04        		.byte 5, IM
003F31r 3  rr rr                        .word nt_asm_dec_z
003F33r 3  rr rr rr rr  		.word xt_asm_dec_x, z_asm_dec_x
003F37r 3  64 65 63 2E  		.byte "dec.x"
003F3Br 3  78           
003F3Cr 3               
003F3Cr 3               nt_asm_dec_z:
003F3Cr 3  05 04        		.byte 5, IM
003F3Er 3  rr rr                        .word nt_asm_dec_zx
003F40r 3  rr rr rr rr  		.word xt_asm_dec_z, z_asm_dec_z
003F44r 3  64 65 63 2E  		.byte "dec.z"
003F48r 3  7A           
003F49r 3               
003F49r 3               nt_asm_dec_zx:
003F49r 3  06 04        		.byte 6, IM
003F4Br 3  rr rr                        .word nt_asm_dex
003F4Dr 3  rr rr rr rr  		.word xt_asm_dec_zx, z_asm_dec_zx
003F51r 3  64 65 63 2E  		.byte "dec.zx"
003F55r 3  7A 78        
003F57r 3               
003F57r 3               nt_asm_dex:
003F57r 3  03 04        		.byte 3, IM
003F59r 3  rr rr                        .word nt_asm_dey
003F5Br 3  rr rr rr rr  		.word xt_asm_dex, z_asm_dex
003F5Fr 3  64 65 78     		.byte "dex"
003F62r 3               
003F62r 3               nt_asm_dey:
003F62r 3  03 04        		.byte 3, IM
003F64r 3  rr rr                        .word nt_asm_eor
003F66r 3  rr rr rr rr  		.word xt_asm_dey, z_asm_dey
003F6Ar 3  64 65 79     		.byte "dey"
003F6Dr 3               
003F6Dr 3               nt_asm_eor:
003F6Dr 3  03 04        		.byte 3, IM
003F6Fr 3  rr rr                        .word nt_asm_eor_h
003F71r 3  rr rr rr rr  		.word xt_asm_eor, z_asm_eor
003F75r 3  65 6F 72     		.byte "eor"
003F78r 3               
003F78r 3               nt_asm_eor_h:
003F78r 3  05 04        		.byte 5, IM
003F7Ar 3  rr rr                        .word nt_asm_eor_x
003F7Cr 3  rr rr rr rr  		.word xt_asm_eor_h, z_asm_eor_h
003F80r 3  65 6F 72 2E  		.byte "eor.#"
003F84r 3  23           
003F85r 3               
003F85r 3               nt_asm_eor_x:
003F85r 3  05 04        		.byte 5, IM
003F87r 3  rr rr                        .word nt_asm_eor_y
003F89r 3  rr rr rr rr  		.word xt_asm_eor_x, z_asm_eor_x
003F8Dr 3  65 6F 72 2E  		.byte "eor.x"
003F91r 3  78           
003F92r 3               
003F92r 3               nt_asm_eor_y:
003F92r 3  05 04        		.byte 5, IM
003F94r 3  rr rr                        .word nt_asm_eor_z
003F96r 3  rr rr rr rr  		.word xt_asm_eor_y, z_asm_eor_y
003F9Ar 3  65 6F 72 2E  		.byte "eor.y"
003F9Er 3  79           
003F9Fr 3               
003F9Fr 3               nt_asm_eor_z:
003F9Fr 3  05 04        		.byte 5, IM
003FA1r 3  rr rr                        .word nt_asm_eor_zi
003FA3r 3  rr rr rr rr  		.word xt_asm_eor_z, z_asm_eor_z
003FA7r 3  65 6F 72 2E  		.byte "eor.z"
003FABr 3  7A           
003FACr 3               
003FACr 3               nt_asm_eor_zi:
003FACr 3  06 04        		.byte 6, IM
003FAEr 3  rr rr                        .word nt_asm_eor_ziy
003FB0r 3  rr rr rr rr  		.word xt_asm_eor_zi, z_asm_eor_zi
003FB4r 3  65 6F 72 2E  		.byte "eor.zi"
003FB8r 3  7A 69        
003FBAr 3               
003FBAr 3               nt_asm_eor_ziy:
003FBAr 3  07 04        		.byte 7, IM
003FBCr 3  rr rr                        .word nt_asm_eor_zx
003FBEr 3  rr rr rr rr  		.word xt_asm_eor_ziy, z_asm_eor_ziy
003FC2r 3  65 6F 72 2E  		.byte "eor.ziy"
003FC6r 3  7A 69 79     
003FC9r 3               
003FC9r 3               nt_asm_eor_zx:
003FC9r 3  06 04        		.byte 6, IM
003FCBr 3  rr rr                        .word nt_asm_eor_zxi
003FCDr 3  rr rr rr rr  		.word xt_asm_eor_zx, z_asm_eor_zx
003FD1r 3  65 6F 72 2E  		.byte "eor.zx"
003FD5r 3  7A 78        
003FD7r 3               
003FD7r 3               nt_asm_eor_zxi:
003FD7r 3  07 04        		.byte 7, IM
003FD9r 3  rr rr                        .word nt_asm_inc
003FDBr 3  rr rr rr rr  		.word xt_asm_eor_zxi, z_asm_eor_zxi
003FDFr 3  65 6F 72 2E  		.byte "eor.zxi"
003FE3r 3  7A 78 69     
003FE6r 3               
003FE6r 3               nt_asm_inc:
003FE6r 3  03 04        		.byte 3, IM
003FE8r 3  rr rr                        .word nt_asm_inc_a
003FEAr 3  rr rr rr rr  		.word xt_asm_inc, z_asm_inc
003FEEr 3  69 6E 63     		.byte "inc"
003FF1r 3               
003FF1r 3               nt_asm_inc_a:
003FF1r 3  05 04        		.byte 5, IM
003FF3r 3  rr rr                        .word nt_asm_inc_x
003FF5r 3  rr rr rr rr  		.word xt_asm_inc_a, z_asm_inc_a
003FF9r 3  69 6E 63 2E  		.byte "inc.a"
003FFDr 3  61           
003FFEr 3               
003FFEr 3               nt_asm_inc_x:
003FFEr 3  05 04        		.byte 5, IM
004000r 3  rr rr                        .word nt_asm_inc_z
004002r 3  rr rr rr rr  		.word xt_asm_inc_x, z_asm_inc_x
004006r 3  69 6E 63 2E  		.byte "inc.x"
00400Ar 3  78           
00400Br 3               
00400Br 3               nt_asm_inc_z:
00400Br 3  05 04        		.byte 5, IM
00400Dr 3  rr rr                        .word nt_asm_inc_zx
00400Fr 3  rr rr rr rr  		.word xt_asm_inc_z, z_asm_inc_z
004013r 3  69 6E 63 2E  		.byte "inc.z"
004017r 3  7A           
004018r 3               
004018r 3               nt_asm_inc_zx:
004018r 3  06 04        		.byte 6, IM
00401Ar 3  rr rr                        .word nt_asm_inx
00401Cr 3  rr rr rr rr  		.word xt_asm_inc_zx, z_asm_inc_zx
004020r 3  69 6E 63 2E  		.byte "inc.zx"
004024r 3  7A 78        
004026r 3               
004026r 3               nt_asm_inx:
004026r 3  03 04        		.byte 3, IM
004028r 3  rr rr                        .word nt_asm_iny
00402Ar 3  rr rr rr rr  		.word xt_asm_inx, z_asm_inx
00402Er 3  69 6E 78     		.byte "inx"
004031r 3               
004031r 3               nt_asm_iny:
004031r 3  03 04        		.byte 3, IM
004033r 3  rr rr                        .word nt_asm_jmp
004035r 3  rr rr rr rr  		.word xt_asm_iny, z_asm_iny
004039r 3  69 6E 79     		.byte "iny"
00403Cr 3               
00403Cr 3               nt_asm_jmp:
00403Cr 3  03 04        		.byte 3, IM
00403Er 3  rr rr                        .word nt_asm_jmp_i
004040r 3  rr rr rr rr  		.word xt_asm_jmp, z_asm_jmp
004044r 3  6A 6D 70     		.byte "jmp"
004047r 3               
004047r 3               nt_asm_jmp_i:
004047r 3  05 04        		.byte 5, IM
004049r 3  rr rr                        .word nt_asm_jmp_xi
00404Br 3  rr rr rr rr  		.word xt_asm_jmp_i, z_asm_jmp_i
00404Fr 3  6A 6D 70 2E  		.byte "jmp.i"
004053r 3  69           
004054r 3               
004054r 3               nt_asm_jmp_xi:
004054r 3  06 04        		.byte 6, IM
004056r 3  rr rr                        .word nt_asm_jsr
004058r 3  rr rr rr rr  		.word xt_asm_jmp_xi, z_asm_jmp_xi
00405Cr 3  6A 6D 70 2E  		.byte "jmp.xi"
004060r 3  78 69        
004062r 3               
004062r 3               nt_asm_jsr:
004062r 3  03 04        		.byte 3, IM
004064r 3  rr rr                        .word nt_asm_lda
004066r 3  rr rr rr rr  		.word xt_asm_jsr, z_asm_jsr
00406Ar 3  6A 73 72     		.byte "jsr"
00406Dr 3               
00406Dr 3               nt_asm_lda:
00406Dr 3  03 04        		.byte 3, IM
00406Fr 3  rr rr                        .word nt_asm_lda_h
004071r 3  rr rr rr rr  		.word xt_asm_lda, z_asm_lda
004075r 3  6C 64 61     		.byte "lda"
004078r 3               
004078r 3               nt_asm_lda_h:
004078r 3  05 04        		.byte 5, IM
00407Ar 3  rr rr                        .word nt_asm_lda_x
00407Cr 3  rr rr rr rr  		.word xt_asm_lda_h, z_asm_lda_h
004080r 3  6C 64 61 2E  		.byte "lda.#"
004084r 3  23           
004085r 3               
004085r 3               nt_asm_lda_x:
004085r 3  05 04        		.byte 5, IM
004087r 3  rr rr                        .word nt_asm_lda_y
004089r 3  rr rr rr rr  		.word xt_asm_lda_x, z_asm_lda_x
00408Dr 3  6C 64 61 2E  		.byte "lda.x"
004091r 3  78           
004092r 3               
004092r 3               nt_asm_lda_y:
004092r 3  05 04        		.byte 5, IM
004094r 3  rr rr                        .word nt_asm_lda_z
004096r 3  rr rr rr rr  		.word xt_asm_lda_y, z_asm_lda_y
00409Ar 3  6C 64 61 2E  		.byte "lda.y"
00409Er 3  79           
00409Fr 3               
00409Fr 3               nt_asm_lda_z:
00409Fr 3  05 04        		.byte 5, IM
0040A1r 3  rr rr                        .word nt_asm_lda_zi
0040A3r 3  rr rr rr rr  		.word xt_asm_lda_z, z_asm_lda_z
0040A7r 3  6C 64 61 2E  		.byte "lda.z"
0040ABr 3  7A           
0040ACr 3               
0040ACr 3               nt_asm_lda_zi:
0040ACr 3  06 04        		.byte 6, IM
0040AEr 3  rr rr                        .word nt_asm_lda_ziy
0040B0r 3  rr rr rr rr  		.word xt_asm_lda_zi, z_asm_lda_zi
0040B4r 3  6C 64 61 2E  		.byte "lda.zi"
0040B8r 3  7A 69        
0040BAr 3               
0040BAr 3               nt_asm_lda_ziy:
0040BAr 3  07 04        		.byte 7, IM
0040BCr 3  rr rr                        .word nt_asm_lda_zx
0040BEr 3  rr rr rr rr  		.word xt_asm_lda_ziy, z_asm_lda_ziy
0040C2r 3  6C 64 61 2E  		.byte "lda.ziy"
0040C6r 3  7A 69 79     
0040C9r 3               
0040C9r 3               nt_asm_lda_zx:
0040C9r 3  06 04        		.byte 6, IM
0040CBr 3  rr rr                        .word nt_asm_lda_zxi
0040CDr 3  rr rr rr rr  		.word xt_asm_lda_zx, z_asm_lda_zx
0040D1r 3  6C 64 61 2E  		.byte "lda.zx"
0040D5r 3  7A 78        
0040D7r 3               
0040D7r 3               nt_asm_lda_zxi:
0040D7r 3  07 04        		.byte 7, IM
0040D9r 3  rr rr                        .word nt_asm_ldx
0040DBr 3  rr rr rr rr  		.word xt_asm_lda_zxi, z_asm_lda_zxi
0040DFr 3  6C 64 61 2E  		.byte "lda.zxi"
0040E3r 3  7A 78 69     
0040E6r 3               
0040E6r 3               nt_asm_ldx:
0040E6r 3  03 04        		.byte 3, IM
0040E8r 3  rr rr                        .word nt_asm_ldx_h
0040EAr 3  rr rr rr rr  		.word xt_asm_ldx, z_asm_ldx
0040EEr 3  6C 64 78     		.byte "ldx"
0040F1r 3               
0040F1r 3               nt_asm_ldx_h:
0040F1r 3  05 04        		.byte 5, IM
0040F3r 3  rr rr                        .word nt_asm_ldx_y
0040F5r 3  rr rr rr rr  		.word xt_asm_ldx_h, z_asm_ldx_h
0040F9r 3  6C 64 78 2E  		.byte "ldx.#"
0040FDr 3  23           
0040FEr 3               
0040FEr 3               nt_asm_ldx_y:
0040FEr 3  05 04        		.byte 5, IM
004100r 3  rr rr                        .word nt_asm_ldx_z
004102r 3  rr rr rr rr  		.word xt_asm_ldx_y, z_asm_ldx_y
004106r 3  6C 64 78 2E  		.byte "ldx.y"
00410Ar 3  79           
00410Br 3               
00410Br 3               nt_asm_ldx_z:
00410Br 3  05 04        		.byte 5, IM
00410Dr 3  rr rr                        .word nt_asm_ldx_zy
00410Fr 3  rr rr rr rr  		.word xt_asm_ldx_z, z_asm_ldx_z
004113r 3  6C 64 78 2E  		.byte "ldx.z"
004117r 3  7A           
004118r 3               
004118r 3               nt_asm_ldx_zy:
004118r 3  06 04        		.byte 6, IM
00411Ar 3  rr rr                        .word nt_asm_ldy
00411Cr 3  rr rr rr rr  		.word xt_asm_ldx_zy, z_asm_ldx_zy
004120r 3  6C 64 78 2E  		.byte "ldx.zy"
004124r 3  7A 79        
004126r 3               
004126r 3               nt_asm_ldy:
004126r 3  03 04        		.byte 3, IM
004128r 3  rr rr                        .word nt_asm_ldy_h
00412Ar 3  rr rr rr rr  		.word xt_asm_ldy, z_asm_ldy
00412Er 3  6C 64 79     		.byte "ldy"
004131r 3               
004131r 3               nt_asm_ldy_h:
004131r 3  05 04        		.byte 5, IM
004133r 3  rr rr                        .word nt_asm_ldy_x
004135r 3  rr rr rr rr  		.word xt_asm_ldy_h, z_asm_ldy_h
004139r 3  6C 64 79 2E  		.byte "ldy.#"
00413Dr 3  23           
00413Er 3               
00413Er 3               nt_asm_ldy_x:
00413Er 3  05 04        		.byte 5, IM
004140r 3  rr rr                        .word nt_asm_ldy_z
004142r 3  rr rr rr rr  		.word xt_asm_ldy_x, z_asm_ldy_x
004146r 3  6C 64 79 2E  		.byte "ldy.x"
00414Ar 3  78           
00414Br 3               
00414Br 3               nt_asm_ldy_z:
00414Br 3  05 04        		.byte 5, IM
00414Dr 3  rr rr                        .word nt_asm_ldy_zx
00414Fr 3  rr rr rr rr  		.word xt_asm_ldy_z, z_asm_ldy_z
004153r 3  6C 64 79 2E  		.byte "ldy.z"
004157r 3  7A           
004158r 3               
004158r 3               nt_asm_ldy_zx:
004158r 3  06 04        		.byte 6, IM
00415Ar 3  rr rr                        .word nt_asm_lsr
00415Cr 3  rr rr rr rr  		.word xt_asm_ldy_zx, z_asm_ldy_zx
004160r 3  6C 64 79 2E  		.byte "ldy.zx"
004164r 3  7A 78        
004166r 3               
004166r 3               nt_asm_lsr:
004166r 3  03 04        		.byte 3, IM
004168r 3  rr rr                        .word nt_asm_lsr_a
00416Ar 3  rr rr rr rr  		.word xt_asm_lsr, z_asm_lsr
00416Er 3  6C 73 72     		.byte "lsr"
004171r 3               
004171r 3               nt_asm_lsr_a:
004171r 3  05 04        		.byte 5, IM
004173r 3  rr rr                        .word nt_asm_lsr_x
004175r 3  rr rr rr rr  		.word xt_asm_lsr_a, z_asm_lsr_a
004179r 3  6C 73 72 2E  		.byte "lsr.a"
00417Dr 3  61           
00417Er 3               
00417Er 3               nt_asm_lsr_x:
00417Er 3  05 04        		.byte 5, IM
004180r 3  rr rr                        .word nt_asm_lsr_z
004182r 3  rr rr rr rr  		.word xt_asm_lsr_x, z_asm_lsr_x
004186r 3  6C 73 72 2E  		.byte "lsr.x"
00418Ar 3  78           
00418Br 3               
00418Br 3               nt_asm_lsr_z:
00418Br 3  05 04        		.byte 5, IM
00418Dr 3  rr rr                        .word nt_asm_lsr_zx
00418Fr 3  rr rr rr rr  		.word xt_asm_lsr_z, z_asm_lsr_z
004193r 3  6C 73 72 2E  		.byte "lsr.z"
004197r 3  7A           
004198r 3               
004198r 3               nt_asm_lsr_zx:
004198r 3  06 04        		.byte 6, IM
00419Ar 3  rr rr                        .word nt_asm_nop
00419Cr 3  rr rr rr rr  		.word xt_asm_lsr_zx, z_asm_lsr_zx
0041A0r 3  6C 73 72 2E  		.byte "lsr.zx"
0041A4r 3  7A 78        
0041A6r 3               
0041A6r 3               nt_asm_nop:
0041A6r 3  03 04        		.byte 3, IM
0041A8r 3  rr rr                        .word nt_asm_ora
0041AAr 3  rr rr rr rr  		.word xt_asm_nop, z_asm_nop
0041AEr 3  6E 6F 70     		.byte "nop"
0041B1r 3               
0041B1r 3               nt_asm_ora:
0041B1r 3  03 04        		.byte 3, IM
0041B3r 3  rr rr                        .word nt_asm_ora_h
0041B5r 3  rr rr rr rr  		.word xt_asm_ora, z_asm_ora
0041B9r 3  6F 72 61     		.byte "ora"
0041BCr 3               
0041BCr 3               nt_asm_ora_h:
0041BCr 3  05 04        		.byte 5, IM
0041BEr 3  rr rr                        .word nt_asm_ora_x
0041C0r 3  rr rr rr rr  		.word xt_asm_ora_h, z_asm_ora_h
0041C4r 3  6F 72 61 2E  		.byte "ora.#"
0041C8r 3  23           
0041C9r 3               
0041C9r 3               nt_asm_ora_x:
0041C9r 3  05 04        		.byte 5, IM
0041CBr 3  rr rr                        .word nt_asm_ora_y
0041CDr 3  rr rr rr rr  		.word xt_asm_ora_x, z_asm_ora_x
0041D1r 3  6F 72 61 2E  		.byte "ora.x"
0041D5r 3  78           
0041D6r 3               
0041D6r 3               nt_asm_ora_y:
0041D6r 3  05 04        		.byte 5, IM
0041D8r 3  rr rr                        .word nt_asm_ora_z
0041DAr 3  rr rr rr rr  		.word xt_asm_ora_y, z_asm_ora_y
0041DEr 3  6F 72 61 2E  		.byte "ora.y"
0041E2r 3  79           
0041E3r 3               
0041E3r 3               nt_asm_ora_z:
0041E3r 3  05 04        		.byte 5, IM
0041E5r 3  rr rr                        .word nt_asm_ora_zi
0041E7r 3  rr rr rr rr  		.word xt_asm_ora_z, z_asm_ora_z
0041EBr 3  6F 72 61 2E  		.byte "ora.z"
0041EFr 3  7A           
0041F0r 3               
0041F0r 3               nt_asm_ora_zi:
0041F0r 3  06 04        		.byte 6, IM
0041F2r 3  rr rr                        .word nt_asm_ora_ziy
0041F4r 3  rr rr rr rr  		.word xt_asm_ora_zi, z_asm_ora_zi
0041F8r 3  6F 72 61 2E  		.byte "ora.zi"
0041FCr 3  7A 69        
0041FEr 3               
0041FEr 3               nt_asm_ora_ziy:
0041FEr 3  07 04        		.byte 7, IM
004200r 3  rr rr                        .word nt_asm_ora_zx
004202r 3  rr rr rr rr  		.word xt_asm_ora_ziy, z_asm_ora_ziy
004206r 3  6F 72 61 2E  		.byte "ora.ziy"
00420Ar 3  7A 69 79     
00420Dr 3               
00420Dr 3               nt_asm_ora_zx:
00420Dr 3  06 04        		.byte 6, IM
00420Fr 3  rr rr                        .word nt_asm_ora_zxi
004211r 3  rr rr rr rr  		.word xt_asm_ora_zx, z_asm_ora_zx
004215r 3  6F 72 61 2E  		.byte "ora.zx"
004219r 3  7A 78        
00421Br 3               
00421Br 3               nt_asm_ora_zxi:
00421Br 3  07 04        		.byte 7, IM
00421Dr 3  rr rr                        .word nt_asm_pha
00421Fr 3  rr rr rr rr  		.word xt_asm_ora_zxi, z_asm_ora_zxi
004223r 3  6F 72 61 2E  		.byte "ora.zxi"
004227r 3  7A 78 69     
00422Ar 3               
00422Ar 3               nt_asm_pha:
00422Ar 3  03 04        		.byte 3, IM
00422Cr 3  rr rr                        .word nt_asm_php
00422Er 3  rr rr rr rr  		.word xt_asm_pha, z_asm_pha
004232r 3  70 68 61     		.byte "pha"
004235r 3               
004235r 3               nt_asm_php:
004235r 3  03 04        		.byte 3, IM
004237r 3  rr rr                        .word nt_asm_phx
004239r 3  rr rr rr rr  		.word xt_asm_php, z_asm_php
00423Dr 3  70 68 70     		.byte "php"
004240r 3               
004240r 3               nt_asm_phx:
004240r 3  03 04        		.byte 3, IM
004242r 3  rr rr                        .word nt_asm_phy
004244r 3  rr rr rr rr  		.word xt_asm_phx, z_asm_phx
004248r 3  70 68 78     		.byte "phx"
00424Br 3               
00424Br 3               nt_asm_phy:
00424Br 3  03 04        		.byte 3, IM
00424Dr 3  rr rr                        .word nt_asm_pla
00424Fr 3  rr rr rr rr  		.word xt_asm_phy, z_asm_phy
004253r 3  70 68 79     		.byte "phy"
004256r 3               
004256r 3               nt_asm_pla:
004256r 3  03 04        		.byte 3, IM
004258r 3  rr rr                        .word nt_asm_plp
00425Ar 3  rr rr rr rr  		.word xt_asm_pla, z_asm_pla
00425Er 3  70 6C 61     		.byte "pla"
004261r 3               
004261r 3               nt_asm_plp:
004261r 3  03 04        		.byte 3, IM
004263r 3  rr rr                        .word nt_asm_plx
004265r 3  rr rr rr rr  		.word xt_asm_plp, z_asm_plp
004269r 3  70 6C 70     		.byte "plp"
00426Cr 3               
00426Cr 3               nt_asm_plx:
00426Cr 3  03 04        		.byte 3, IM
00426Er 3  rr rr                        .word nt_asm_ply
004270r 3  rr rr rr rr  		.word xt_asm_plx, z_asm_plx
004274r 3  70 6C 78     		.byte "plx"
004277r 3               
004277r 3               nt_asm_ply:
004277r 3  03 04        		.byte 3, IM
004279r 3  rr rr                        .word nt_asm_rol
00427Br 3  rr rr rr rr  		.word xt_asm_ply, z_asm_ply
00427Fr 3  70 6C 79     		.byte "ply"
004282r 3               
004282r 3               nt_asm_rol:
004282r 3  03 04        		.byte 3, IM
004284r 3  rr rr                        .word nt_asm_rol_a
004286r 3  rr rr rr rr  		.word xt_asm_rol, z_asm_rol
00428Ar 3  72 6F 6C     		.byte "rol"
00428Dr 3               
00428Dr 3               nt_asm_rol_a:
00428Dr 3  05 04        		.byte 5, IM
00428Fr 3  rr rr                        .word nt_asm_rol_x
004291r 3  rr rr rr rr  		.word xt_asm_rol_a, z_asm_rol_a
004295r 3  72 6F 6C 2E  		.byte "rol.a"
004299r 3  61           
00429Ar 3               
00429Ar 3               nt_asm_rol_x:
00429Ar 3  05 04        		.byte 5, IM
00429Cr 3  rr rr                        .word nt_asm_rol_z
00429Er 3  rr rr rr rr  		.word xt_asm_rol_x, z_asm_rol_x
0042A2r 3  72 6F 6C 2E  		.byte "rol.x"
0042A6r 3  78           
0042A7r 3               
0042A7r 3               nt_asm_rol_z:
0042A7r 3  05 04        		.byte 5, IM
0042A9r 3  rr rr                        .word nt_asm_rol_zx
0042ABr 3  rr rr rr rr  		.word xt_asm_rol_z, z_asm_rol_z
0042AFr 3  72 6F 6C 2E  		.byte "rol.z"
0042B3r 3  7A           
0042B4r 3               
0042B4r 3               nt_asm_rol_zx:
0042B4r 3  06 04        		.byte 6, IM
0042B6r 3  rr rr                        .word nt_asm_ror
0042B8r 3  rr rr rr rr  		.word xt_asm_rol_zx, z_asm_rol_zx
0042BCr 3  72 6F 6C 2E  		.byte "rol.zx"
0042C0r 3  7A 78        
0042C2r 3               
0042C2r 3               nt_asm_ror:
0042C2r 3  03 04        		.byte 3, IM
0042C4r 3  rr rr                        .word nt_asm_ror_a
0042C6r 3  rr rr rr rr  		.word xt_asm_ror, z_asm_ror
0042CAr 3  72 6F 72     		.byte "ror"
0042CDr 3               
0042CDr 3               nt_asm_ror_a:
0042CDr 3  05 04        		.byte 5, IM
0042CFr 3  rr rr                        .word nt_asm_ror_x
0042D1r 3  rr rr rr rr  		.word xt_asm_ror_a, z_asm_ror_a
0042D5r 3  72 6F 72 2E  		.byte "ror.a"
0042D9r 3  61           
0042DAr 3               
0042DAr 3               nt_asm_ror_x:
0042DAr 3  05 04        		.byte 5, IM
0042DCr 3  rr rr                        .word nt_asm_ror_z
0042DEr 3  rr rr rr rr  		.word xt_asm_ror_x, z_asm_ror_x
0042E2r 3  72 6F 72 2E  		.byte "ror.x"
0042E6r 3  78           
0042E7r 3               
0042E7r 3               nt_asm_ror_z:
0042E7r 3  05 04        		.byte 5, IM
0042E9r 3  rr rr                        .word nt_asm_ror_zx
0042EBr 3  rr rr rr rr  		.word xt_asm_ror_z, z_asm_ror_z
0042EFr 3  72 6F 72 2E  		.byte "ror.z"
0042F3r 3  7A           
0042F4r 3               
0042F4r 3               nt_asm_ror_zx:
0042F4r 3  06 04        		.byte 6, IM
0042F6r 3  rr rr                        .word nt_asm_rti
0042F8r 3  rr rr rr rr  		.word xt_asm_ror_zx, z_asm_ror_zx
0042FCr 3  72 6F 72 2E  		.byte "ror.zx"
004300r 3  7A 78        
004302r 3               
004302r 3               nt_asm_rti:
004302r 3  03 04        		.byte 3, IM
004304r 3  rr rr                        .word nt_asm_rts
004306r 3  rr rr rr rr  		.word xt_asm_rti, z_asm_rti
00430Ar 3  72 74 69     		.byte "rti"
00430Dr 3               
00430Dr 3               nt_asm_rts:
00430Dr 3  03 04        		.byte 3, IM
00430Fr 3  rr rr                        .word nt_asm_sbc
004311r 3  rr rr rr rr  		.word xt_asm_rts, z_asm_rts
004315r 3  72 74 73     		.byte "rts"
004318r 3               
004318r 3               nt_asm_sbc:
004318r 3  03 04        		.byte 3, IM
00431Ar 3  rr rr                        .word nt_asm_sbc_h
00431Cr 3  rr rr rr rr  		.word xt_asm_sbc, z_asm_sbc
004320r 3  73 62 63     		.byte "sbc"
004323r 3               
004323r 3               nt_asm_sbc_h:
004323r 3  05 04        		.byte 5, IM
004325r 3  rr rr                        .word nt_asm_sbc_x
004327r 3  rr rr rr rr  		.word xt_asm_sbc_h, z_asm_sbc_h
00432Br 3  73 62 63 2E  		.byte "sbc.#"
00432Fr 3  23           
004330r 3               
004330r 3               nt_asm_sbc_x:
004330r 3  05 04        		.byte 5, IM
004332r 3  rr rr                        .word nt_asm_sbc_y
004334r 3  rr rr rr rr  		.word xt_asm_sbc_x, z_asm_sbc_x
004338r 3  73 62 63 2E  		.byte "sbc.x"
00433Cr 3  78           
00433Dr 3               
00433Dr 3               nt_asm_sbc_y:
00433Dr 3  05 04        		.byte 5, IM
00433Fr 3  rr rr                        .word nt_asm_sbc_z
004341r 3  rr rr rr rr  		.word xt_asm_sbc_y, z_asm_sbc_y
004345r 3  73 62 63 2E  		.byte "sbc.y"
004349r 3  79           
00434Ar 3               
00434Ar 3               nt_asm_sbc_z:
00434Ar 3  05 04        		.byte 5, IM
00434Cr 3  rr rr                        .word nt_asm_sbc_zi
00434Er 3  rr rr rr rr  		.word xt_asm_sbc_z, z_asm_sbc_z
004352r 3  73 62 63 2E  		.byte "sbc.z"
004356r 3  7A           
004357r 3               
004357r 3               nt_asm_sbc_zi:
004357r 3  06 04        		.byte 6, IM
004359r 3  rr rr                        .word nt_asm_sbc_ziy
00435Br 3  rr rr rr rr  		.word xt_asm_sbc_zi, z_asm_sbc_zi
00435Fr 3  73 62 63 2E  		.byte "sbc.zi"
004363r 3  7A 69        
004365r 3               
004365r 3               nt_asm_sbc_ziy:
004365r 3  07 04        		.byte 7, IM
004367r 3  rr rr                        .word nt_asm_sbc_zx
004369r 3  rr rr rr rr  		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
00436Dr 3  73 62 63 2E  		.byte "sbc.ziy"
004371r 3  7A 69 79     
004374r 3               
004374r 3               nt_asm_sbc_zx:
004374r 3  06 04        		.byte 6, IM
004376r 3  rr rr                        .word nt_asm_sbc_zxi
004378r 3  rr rr rr rr  		.word xt_asm_sbc_zx, z_asm_sbc_zx
00437Cr 3  73 62 63 2E  		.byte "sbc.zx"
004380r 3  7A 78        
004382r 3               
004382r 3               nt_asm_sbc_zxi:
004382r 3  07 04        		.byte 7, IM
004384r 3  rr rr                        .word nt_asm_sec
004386r 3  rr rr rr rr  		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
00438Ar 3  73 62 63 2E  		.byte "sbc.zxi"
00438Er 3  7A 78 69     
004391r 3               
004391r 3               nt_asm_sec:
004391r 3  03 04        		.byte 3, IM
004393r 3  rr rr                        .word nt_asm_sed
004395r 3  rr rr rr rr  		.word xt_asm_sec, z_asm_sec
004399r 3  73 65 63     		.byte "sec"
00439Cr 3               
00439Cr 3               nt_asm_sed:
00439Cr 3  03 04        		.byte 3, IM
00439Er 3  rr rr                        .word nt_asm_sei
0043A0r 3  rr rr rr rr  		.word xt_asm_sed, z_asm_sed
0043A4r 3  73 65 64     		.byte "sed"
0043A7r 3               
0043A7r 3               nt_asm_sei:
0043A7r 3  03 04        		.byte 3, IM
0043A9r 3  rr rr                        .word nt_asm_sta
0043ABr 3  rr rr rr rr  		.word xt_asm_sei, z_asm_sei
0043AFr 3  73 65 69     		.byte "sei"
0043B2r 3               
0043B2r 3               nt_asm_sta:
0043B2r 3  03 04        		.byte 3, IM
0043B4r 3  rr rr                        .word nt_asm_sta_x
0043B6r 3  rr rr rr rr  		.word xt_asm_sta, z_asm_sta
0043BAr 3  73 74 61     		.byte "sta"
0043BDr 3               
0043BDr 3               nt_asm_sta_x:
0043BDr 3  05 04        		.byte 5, IM
0043BFr 3  rr rr                        .word nt_asm_sta_y
0043C1r 3  rr rr rr rr  		.word xt_asm_sta_x, z_asm_sta_x
0043C5r 3  73 74 61 2E  		.byte "sta.x"
0043C9r 3  78           
0043CAr 3               
0043CAr 3               nt_asm_sta_y:
0043CAr 3  05 04        		.byte 5, IM
0043CCr 3  rr rr                        .word nt_asm_sta_z
0043CEr 3  rr rr rr rr  		.word xt_asm_sta_y, z_asm_sta_y
0043D2r 3  73 74 61 2E  		.byte "sta.y"
0043D6r 3  79           
0043D7r 3               
0043D7r 3               nt_asm_sta_z:
0043D7r 3  05 04        		.byte 5, IM
0043D9r 3  rr rr                        .word nt_asm_sta_zi
0043DBr 3  rr rr rr rr  		.word xt_asm_sta_z, z_asm_sta_z
0043DFr 3  73 74 61 2E  		.byte "sta.z"
0043E3r 3  7A           
0043E4r 3               
0043E4r 3               nt_asm_sta_zi:
0043E4r 3  06 04        		.byte 6, IM
0043E6r 3  rr rr                        .word nt_asm_sta_ziy
0043E8r 3  rr rr rr rr  		.word xt_asm_sta_zi, z_asm_sta_zi
0043ECr 3  73 74 61 2E  		.byte "sta.zi"
0043F0r 3  7A 69        
0043F2r 3               
0043F2r 3               nt_asm_sta_ziy:
0043F2r 3  07 04        		.byte 7, IM
0043F4r 3  rr rr                        .word nt_asm_sta_zx
0043F6r 3  rr rr rr rr  		.word xt_asm_sta_ziy, z_asm_sta_ziy
0043FAr 3  73 74 61 2E  		.byte "sta.ziy"
0043FEr 3  7A 69 79     
004401r 3               
004401r 3               nt_asm_sta_zx:
004401r 3  06 04        		.byte 6, IM
004403r 3  rr rr                        .word nt_asm_sta_zxi
004405r 3  rr rr rr rr  		.word xt_asm_sta_zx, z_asm_sta_zx
004409r 3  73 74 61 2E  		.byte "sta.zx"
00440Dr 3  7A 78        
00440Fr 3               
00440Fr 3               nt_asm_sta_zxi:
00440Fr 3  07 04        		.byte 7, IM
004411r 3  rr rr                        .word nt_asm_stx
004413r 3  rr rr rr rr  		.word xt_asm_sta_zxi, z_asm_sta_zxi
004417r 3  73 74 61 2E  		.byte "sta.zxi"
00441Br 3  7A 78 69     
00441Er 3               
00441Er 3               nt_asm_stx:
00441Er 3  03 04        		.byte 3, IM
004420r 3  rr rr                        .word nt_asm_stx_z
004422r 3  rr rr rr rr  		.word xt_asm_stx, z_asm_stx
004426r 3  73 74 78     		.byte "stx"
004429r 3               
004429r 3               nt_asm_stx_z:
004429r 3  05 04        		.byte 5, IM
00442Br 3  rr rr                        .word nt_asm_stx_zy
00442Dr 3  rr rr rr rr  		.word xt_asm_stx_z, z_asm_stx_z
004431r 3  73 74 78 2E  		.byte "stx.z"
004435r 3  7A           
004436r 3               
004436r 3               nt_asm_stx_zy:
004436r 3  06 04        		.byte 6, IM
004438r 3  rr rr                        .word nt_asm_sty
00443Ar 3  rr rr rr rr  		.word xt_asm_stx_zy, z_asm_stx_zy
00443Er 3  73 74 78 2E  		.byte "stx.zy"
004442r 3  7A 79        
004444r 3               
004444r 3               nt_asm_sty:
004444r 3  03 04        		.byte 3, IM
004446r 3  rr rr                        .word nt_asm_sty_z
004448r 3  rr rr rr rr  		.word xt_asm_sty, z_asm_sty
00444Cr 3  73 74 79     		.byte "sty"
00444Fr 3               
00444Fr 3               nt_asm_sty_z:
00444Fr 3  05 04        		.byte 5, IM
004451r 3  rr rr                        .word nt_asm_sty_zx
004453r 3  rr rr rr rr  		.word xt_asm_sty_z, z_asm_sty_z
004457r 3  73 74 79 2E  		.byte "sty.z"
00445Br 3  7A           
00445Cr 3               
00445Cr 3               nt_asm_sty_zx:
00445Cr 3  06 04        		.byte 6, IM
00445Er 3  rr rr                        .word nt_asm_stz
004460r 3  rr rr rr rr  		.word xt_asm_sty_zx, z_asm_sty_zx
004464r 3  73 74 79 2E  		.byte "sty.zx"
004468r 3  7A 78        
00446Ar 3               
00446Ar 3               nt_asm_stz:
00446Ar 3  03 04        		.byte 3, IM
00446Cr 3  rr rr                        .word nt_asm_stz_x
00446Er 3  rr rr rr rr  		.word xt_asm_stz, z_asm_stz
004472r 3  73 74 7A     		.byte "stz"
004475r 3               
004475r 3               nt_asm_stz_x:
004475r 3  05 04        		.byte 5, IM
004477r 3  rr rr                        .word nt_asm_stz_z
004479r 3  rr rr rr rr  		.word xt_asm_stz_x, z_asm_stz_x
00447Dr 3  73 74 7A 2E  		.byte "stz.x"
004481r 3  78           
004482r 3               
004482r 3               nt_asm_stz_z:
004482r 3  05 04        		.byte 5, IM
004484r 3  rr rr                        .word nt_asm_stz_zx
004486r 3  rr rr rr rr  		.word xt_asm_stz_z, z_asm_stz_z
00448Ar 3  73 74 7A 2E  		.byte "stz.z"
00448Er 3  7A           
00448Fr 3               
00448Fr 3               nt_asm_stz_zx:
00448Fr 3  06 04        		.byte 6, IM
004491r 3  rr rr                        .word nt_asm_tax
004493r 3  rr rr rr rr  		.word xt_asm_stz_zx, z_asm_stz_zx
004497r 3  73 74 7A 2E  		.byte "stz.zx"
00449Br 3  7A 78        
00449Dr 3               
00449Dr 3               nt_asm_tax:
00449Dr 3  03 04        		.byte 3, IM
00449Fr 3  rr rr                        .word nt_asm_tay
0044A1r 3  rr rr rr rr  		.word xt_asm_tax, z_asm_tax
0044A5r 3  74 61 78     		.byte "tax"
0044A8r 3               
0044A8r 3               nt_asm_tay:
0044A8r 3  03 04        		.byte 3, IM
0044AAr 3  rr rr                        .word nt_asm_trb
0044ACr 3  rr rr rr rr  		.word xt_asm_tay, z_asm_tay
0044B0r 3  74 61 79     		.byte "tay"
0044B3r 3               
0044B3r 3               nt_asm_trb:
0044B3r 3  03 04        		.byte 3, IM
0044B5r 3  rr rr                        .word nt_asm_trb_z
0044B7r 3  rr rr rr rr  		.word xt_asm_trb, z_asm_trb
0044BBr 3  74 72 62     		.byte "trb"
0044BEr 3               
0044BEr 3               nt_asm_trb_z:
0044BEr 3  05 04        		.byte 5, IM
0044C0r 3  rr rr                        .word nt_asm_tsb
0044C2r 3  rr rr rr rr  		.word xt_asm_trb_z, z_asm_trb_z
0044C6r 3  74 72 62 2E  		.byte "trb.z"
0044CAr 3  7A           
0044CBr 3               
0044CBr 3               nt_asm_tsb:
0044CBr 3  03 04        		.byte 3, IM
0044CDr 3  rr rr                        .word nt_asm_tsb_z
0044CFr 3  rr rr rr rr  		.word xt_asm_tsb, z_asm_tsb
0044D3r 3  74 73 62     		.byte "tsb"
0044D6r 3               
0044D6r 3               nt_asm_tsb_z:
0044D6r 3  05 04        		.byte 5, IM
0044D8r 3  rr rr                        .word nt_asm_tsx
0044DAr 3  rr rr rr rr  		.word xt_asm_tsb_z, z_asm_tsb_z
0044DEr 3  74 73 62 2E  		.byte "tsb.z"
0044E2r 3  7A           
0044E3r 3               
0044E3r 3               nt_asm_tsx:
0044E3r 3  03 04        		.byte 3, IM
0044E5r 3  rr rr                        .word nt_asm_txa
0044E7r 3  rr rr rr rr  		.word xt_asm_tsx, z_asm_tsx
0044EBr 3  74 73 78     		.byte "tsx"
0044EEr 3               
0044EEr 3               nt_asm_txa:
0044EEr 3  03 04        		.byte 3, IM
0044F0r 3  rr rr                        .word nt_asm_txs
0044F2r 3  rr rr rr rr  		.word xt_asm_txa, z_asm_txa
0044F6r 3  74 78 61     		.byte "txa"
0044F9r 3               
0044F9r 3               nt_asm_txs:
0044F9r 3  03 04        		.byte 3, IM
0044FBr 3  rr rr                        .word nt_asm_tya
0044FDr 3  rr rr rr rr  		.word xt_asm_txs, z_asm_txs
004501r 3  74 78 73     		.byte "txs"
004504r 3               
004504r 3               nt_asm_tya:
004504r 3  03 04        		.byte 3, IM
004506r 3  rr rr                        .word nt_asm_arrow
004508r 3  rr rr rr rr  		.word xt_asm_tya, z_asm_tya
00450Cr 3  74 79 61     		.byte "tya"
00450Fr 3               
00450Fr 3               ; Assembler pseudo-instructions, directives and macros
00450Fr 3               
00450Fr 3               nt_asm_arrow:   ; uses same code as HERE, but immediate
00450Fr 3  03 04                        .byte 3, IM
004511r 3  rr rr                        .word nt_asm_back_jump
004513r 3  rr rr rr rr                  .word xt_asm_arrow, z_asm_arrow
004517r 3  2D 2D 3E                     .byte "-->"
00451Ar 3               
00451Ar 3               
00451Ar 3               nt_asm_back_jump:  ; syntactic sugar, does nothing
00451Ar 3  02 04                        .byte 2, IM
00451Cr 3  rr rr                        .word nt_asm_back_branch
00451Er 3  rr rr rr rr                  .word xt_asm_back_jump, z_asm_back_jump
004522r 3  3C 6A                        .byte "<j"
004524r 3               
004524r 3               nt_asm_back_branch:
004524r 3  02 04                        .byte 2, IM
004526r 3  rr rr                        .word nt_asm_push_a
004528r 3  rr rr rr rr                  .word xt_asm_back_branch, z_asm_back_branch
00452Cr 3  3C 62                        .byte "<b"
00452Er 3               
00452Er 3               nt_asm_push_a:
00452Er 3  06 04                        .byte 6, IM
004530r 3  00 00                        .word 0000
004532r 3  rr rr rr rr                  .word xt_asm_push_a, z_asm_push_a
004536r 3  70 75 73 68                  .byte "push-a"
00453Ar 3  2D 61        
00453Cr 3               
00453Cr 3               .endif
00453Cr 3               
00453Cr 3               ; END of ASSEMBLER-WORDLIST
00453Cr 3               
00453Cr 3               ; END
00453Cr 3               
00453Cr 2                   .include "strings.s"          ; Headers of native words
00453Cr 3               ; List of Strings for Tali Forth 2
00453Cr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00453Cr 3               ; First version: 01. Apr 2016 (for Liara Forth)
00453Cr 3               ; This version: 28. Dec 2018
00453Cr 3               
00453Cr 3               ; This file is included by taliforth.asm
00453Cr 3               
00453Cr 3               ; ## GENERAL STRINGS
00453Cr 3               
00453Cr 3               ; All general strings must be zero-terminated, names start with "s_",
00453Cr 3               ; aliases with "str_"
00453Cr 3               
00453Cr 3               str_ok =              0
00453Cr 3               str_compile =         1
00453Cr 3               str_redefined =       2
00453Cr 3               str_wid_forth =       3
00453Cr 3               str_abc_lower =       4
00453Cr 3               str_abc_upper =       5
00453Cr 3               str_wid_editor =      6
00453Cr 3               str_wid_assembler =   7
00453Cr 3               str_wid_root =        8
00453Cr 3               str_see_flags =       9
00453Cr 3               str_see_nt =         10
00453Cr 3               str_see_xt =         11
00453Cr 3               str_see_size =       12
00453Cr 3               str_disasm_lit     = 13
00453Cr 3               str_disasm_sdc     = 14
00453Cr 3               str_disasm_bra     = 15
00453Cr 3               
00453Cr 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
00453Cr 3               ; to tables as error and string numbers.
00453Cr 3               string_table:
00453Cr 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
004540r 3  rr rr rr rr  
004544r 3  rr rr        
004546r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
00454Ar 3  rr rr rr rr  
00454Er 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
004552r 3  rr rr rr rr  
004556r 3               
004556r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
00455Ar 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
00455Er 3  70 69 6C 65  
004562r 3  64 00        
004564r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
004568r 3  66 69 6E 65  
00456Cr 3  64 20 00     
00456Fr 3               
00456Fr 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
004573r 3  34 35 36 37  
004577r 3  38 39 61 62  
004593r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
004597r 3  34 35 36 37  
00459Br 3  38 39 41 42  
0045B7r 3               
0045B7r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
0045BBr 3  6D 62 6C 65  
0045BFr 3  72 20 00     
0045C2r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
0045C6r 3  6F 72 20 00  
0045CAr 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
0045CEr 3  68 20 00     
0045D1r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
0045D5r 3  20 00        
0045D7r 3               
0045D7r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
0045DBr 3  73 20 28 43  
0045DFr 3  4F 20 41 4E  
0045F3r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
0045F7r 3  00           
0045F8r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
0045FCr 3  00           
0045FDr 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
004601r 3  20 28 64 65  
004605r 3  63 69 6D 61  
00460Er 3  4C 49 54 45  s_disasm_lit: .byte "LITERAL ", 0
004612r 3  52 41 4C 20  
004616r 3  00           
004617r 3  53 54 41 43  s_disasm_sdc: .byte "STACK DEPTH CHECK", 0
00461Br 3  4B 20 44 45  
00461Fr 3  50 54 48 20  
004629r 3  42 52 41 4E  s_disasm_bra: .byte "BRANCH ",0
00462Dr 3  43 48 20 00  
004631r 3               
004631r 3               
004631r 3               ; ## ERROR STRINGS
004631r 3               
004631r 3               ; All error strings must be zero-terminated, all names start with "es_",
004631r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
004631r 3               ; as well
004631r 3               
004631r 3               err_allot =        0
004631r 3               err_badsource =    1
004631r 3               err_compileonly =  2
004631r 3               err_defer =        3
004631r 3               err_divzero =      4
004631r 3               err_noname =       5
004631r 3               err_refill =       6
004631r 3               err_state =        7
004631r 3               err_syntax =       8
004631r 3               err_underflow =    9
004631r 3               err_negallot =     10
004631r 3               err_wordlist =     11
004631r 3               err_blockwords =   12
004631r 3               
004631r 3               error_table:
004631r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
004635r 3  rr rr rr rr  
004639r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
00463Dr 3  rr rr rr rr  
004641r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
004645r 3  rr rr rr rr  
004649r 3  rr rr                .word es_blockwords                                    ; 12
00464Br 3               
00464Br 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
00464Fr 3  54 20 75 73  
004653r 3  69 6E 67 20  
00466Cr 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
004670r 3  67 61 6C 20  
004674r 3  53 4F 55 52  
00468Cr 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
004690r 3  72 70 72 65  
004694r 3  74 69 6E 67  
0046ADr 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
0046B1r 3  52 65 64 20  
0046B5r 3  77 6F 72 64  
0046CAr 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
0046CEr 3  73 69 6F 6E  
0046D2r 3  20 62 79 20  
0046DBr 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
0046DFr 3  69 6E 67 20  
0046E3r 3  66 61 69 6C  
0046EBr 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
0046EFr 3  20 63 6F 75  
0046F3r 3  6C 64 20 6E  
004719r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
00471Dr 3  61 64 79 20  
004721r 3  69 6E 20 63  
004731r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
004735r 3  66 69 6E 65  
004739r 3  64 20 77 6F  
004740r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
004744r 3  6B 20 75 6E  
004748r 3  64 65 72 66  
004750r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
004754r 3  6D 65 6D 6F  
004758r 3  72 79 20 66  
00476Cr 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
004770r 3  6F 72 64 6C  
004774r 3  69 73 74 73  
004783r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
004787r 3  73 65 20 61  
00478Br 3  73 73 69 67  
0047C2r 3               
0047C2r 3               ; ## ENVIRONMENT STRINGS
0047C2r 3               
0047C2r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
0047C2r 3               ; Length byte first, then the string itself that is not rpt. not
0047C2r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
0047C2r 3               ; "envs_".
0047C2r 3               
0047C2r 3               ; These return a single-cell number
0047C2r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
0047C6r 3  55 4E 54 45  
0047CAr 3  44 2D 53 54  
0047D2r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
0047D6r 3  4C 44        
0047D8r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
0047DCr 3  44           
0047DDr 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
0047E1r 3  52 45 53 53  
0047E5r 3  2D 55 4E 49  
0047EFr 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
0047F3r 3  4F 52 45 44  
0047F7r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
0047FBr 3  2D 43 48 41  
0047FFr 3  52           
004800r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
004804r 3  2D 4E        
004806r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
00480Ar 3  2D 55        
00480Cr 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
004810r 3  55 52 4E 2D  
004814r 3  53 54 41 43  
00481Fr 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
004823r 3  43 4B 2D 43  
004827r 3  45 4C 4C 53  
00482Br 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
00482Fr 3  44 4C 49 53  
004833r 3  54 53        
004835r 3               
004835r 3               ; These return a double-cell number
004835r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
004839r 3  2D 44        
00483Br 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
00483Fr 3  2D 55 44     
004842r 3               
004842r 3               ; END
004842r 3               
004842r 2               
004842r 2               ; High-level Forth words, see forth_code/README.md
004842r 2               forth_words_start:
004842r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
004846r 2  2E 28 20 52  
00484Ar 2  65 61 64 79  
004854r 2               forth_words_end:
004854r 2               
004854r 2               ; User-defined Forth words, see forth_code/README.md
004854r 2               user_words_start:
004854r 2  20 32 30 20  .incbin "forth_code/user_words.asc"
004858r 2  63 6F 6E 73  
00485Cr 2  74 61 6E 74  
004F0Fr 2               user_words_end:
004F0Fr 2               
004F0Fr 2               
004F0Fr 2               ; =====================================================================
004F0Fr 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
004F0Fr 2               
004F0Fr 2               ; These three routines compile instructions such as "jsr xt_words" into a word
004F0Fr 2               ; at compile time so they are available at run time. Words that use this
004F0Fr 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
004F0Fr 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
004F0Fr 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
004F0Fr 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
004F0Fr 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
004F0Fr 2               ; Bowie.
004F0Fr 2               
004F0Fr 2               ;               ldy #>addr      ; MSB   ; "Young"
004F0Fr 2               ;               lda #<addr      ; LSB   ; "Americans"
004F0Fr 2               ;               jsr cmpl_subroutine
004F0Fr 2               
004F0Fr 2               ; Also, we keep a routine here to compile a single byte passed through A.
004F0Fr 2               
004F0Fr 2               cmpl_subroutine:
004F0Fr 2                   ; This is the entry point to compile JSR <ADDR>
004F0Fr 2  48               pha             ; save LSB of address
004F10r 2  A9 20            lda #$20        ; load opcode for JSR
004F12r 2  80 03            bra cmpl_common
004F14r 2               cmpl_jump:
004F14r 2                   ; This is the entry point to compile JMP <ADDR>
004F14r 2  48               pha             ; save LSB of address
004F15r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
004F17r 2               cmpl_common:
004F17r 2                   ; At this point, A contains the opcode to be compiled,
004F17r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
004F17r 2                   ; the address is in Y
004F17r 2  20 rr rr         jsr cmpl_a      ; compile opcode
004F1Ar 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
004F1Br 2               cmpl_word:
004F1Br 2                   ; This is the entry point to compile a word (little-endian)
004F1Br 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
004F1Er 2  98               tya             ; fall thru for MSB
004F1Fr 2               cmpl_a:
004F1Fr 2                   ; This is the entry point to compile a single byte which
004F1Fr 2                   ; is passed in A. The built-in assembler assumes that this
004F1Fr 2                   ; routine does not modify Y.
004F1Fr 2  92 rr            sta (cp)
004F21r 2  E6 rr            inc cp
004F23r 2  D0 02            bne _done
004F25r 2  E6 rr            inc cp+1
004F27r 2               _done:
004F27r 2  60               rts
004F28r 2               
004F28r 2               
004F28r 2               
004F28r 2               ; =====================================================================
004F28r 2               ; CODE FIELD ROUTINES
004F28r 2               
004F28r 2               doconst:
004F28r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
004F28r 2               ; the Data Field onto the Data Stack
004F28r 2               ; """
004F28r 2  CA               dex             ; make room for constant
004F29r 2  CA               dex
004F2Ar 2               
004F2Ar 2                   ; The value we need is stored in the two bytes after the
004F2Ar 2                   ; JSR return address, which in turn is what is on top of
004F2Ar 2                   ; the Return Stack
004F2Ar 2  68               pla             ; LSB of return address
004F2Br 2  85 rr            sta tmp1
004F2Dr 2  68               pla             ; MSB of return address
004F2Er 2  85 rr            sta tmp1+1
004F30r 2               
004F30r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
004F30r 2                   ; the return address on the 65c02
004F30r 2  A0 01            ldy #1
004F32r 2  B1 rr            lda (tmp1),y
004F34r 2  95 00            sta 0,x
004F36r 2  C8               iny
004F37r 2  B1 rr            lda (tmp1),y
004F39r 2  95 01            sta 1,x
004F3Br 2               
004F3Br 2                   ; This takes us back to the original caller, not the
004F3Br 2                   ; DOCONST caller
004F3Br 2  60               rts
004F3Cr 2               
004F3Cr 2               
004F3Cr 2               dodefer:
004F3Cr 2               ; """Execute a DEFER statement at runtime: Execute the address we
004F3Cr 2               ; find after the caller in the Data Field
004F3Cr 2               ; """
004F3Cr 2                   ; The xt we need is stored in the two bytes after the JSR
004F3Cr 2                   ; return address, which is what is on top of the Return
004F3Cr 2                   ; Stack. So all we have to do is replace our return jump
004F3Cr 2                   ; with what we find there
004F3Cr 2  68               pla             ; LSB
004F3Dr 2  85 rr            sta tmp1
004F3Fr 2  68               pla             ; MSB
004F40r 2  85 rr            sta tmp1+1
004F42r 2               
004F42r 2  A0 01            ldy #1
004F44r 2  B1 rr            lda (tmp1),y
004F46r 2  85 rr            sta tmp2
004F48r 2  C8               iny
004F49r 2  B1 rr            lda (tmp1),y
004F4Br 2  85 rr            sta tmp2+1
004F4Dr 2               
004F4Dr 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
004F50r 2               
004F50r 2               defer_error:
004F50r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
004F50r 2  A9 03            lda #err_defer
004F52r 2  4C rr rr         jmp error
004F55r 2               
004F55r 2               dodoes:
004F55r 2               ; """Execute the runtime portion of DOES>. See DOES> and
004F55r 2               ; docs/create-does.txt for details and
004F55r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
004F55r 2               ; """
004F55r 2                   ; Assumes the address of the CFA of the original defining word
004F55r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
004F55r 2                   ; for a later jump, adding one byte because of the way the
004F55r 2                   ; 6502 works
004F55r 2  7A               ply             ; LSB
004F56r 2  68               pla             ; MSB
004F57r 2  C8               iny
004F58r 2  D0 01            bne @1
004F5Ar 2  1A               inc
004F5Br 2               @1:
004F5Br 2  84 rr            sty tmp2
004F5Dr 2  85 rr            sta tmp2+1
004F5Fr 2               
004F5Fr 2                   ; Next on the Return Stack should be the address of the PFA of
004F5Fr 2                   ; the calling defined word (say, the name of whatever constant we
004F5Fr 2                   ; just defined). Move this to the Data Stack, again adding one.
004F5Fr 2  CA               dex
004F60r 2  CA               dex
004F61r 2               
004F61r 2  7A               ply
004F62r 2  68               pla
004F63r 2  C8               iny
004F64r 2  D0 01            bne @2
004F66r 2  1A               inc
004F67r 2               @2:
004F67r 2  94 00            sty 0,x         ; LSB
004F69r 2  95 01            sta 1,x         ; MSB
004F6Br 2               
004F6Br 2                   ; This leaves the return address from the original main routine
004F6Br 2                   ; on top of the Return Stack. We leave that untouched and jump
004F6Br 2                   ; to the special code of the defining word. It's RTS instruction
004F6Br 2                   ; will take us back to the main routine
004F6Br 2  6C rr rr         jmp (tmp2)
004F6Er 2               
004F6Er 2               
004F6Er 2               dovar:
004F6Er 2               ; """Execute a variable: Push the address of the first bytes of
004F6Er 2               ; the Data Field onto the stack. This is called with JSR so we
004F6Er 2               ; can pick up the address of the calling variable off the 65c02's
004F6Er 2               ; stack. The final RTS takes us to the original caller of the
004F6Er 2               ; routine that itself called DOVAR. This is the default
004F6Er 2               ; routine installed with CREATE.
004F6Er 2               ; """
004F6Er 2                   ; Pull the return address off the machine's stack, adding
004F6Er 2                   ; one because of the way the 65c02 handles subroutines
004F6Er 2  7A               ply             ; LSB
004F6Fr 2  68               pla             ; MSB
004F70r 2  C8               iny
004F71r 2  D0 01            bne @1
004F73r 2  1A               inc
004F74r 2               @1:
004F74r 2  CA               dex
004F75r 2  CA               dex
004F76r 2               
004F76r 2  95 01            sta 1,x
004F78r 2  98               tya
004F79r 2  95 00            sta 0,x
004F7Br 2               
004F7Br 2  60               rts
004F7Cr 2               
004F7Cr 2               ; =====================================================================
004F7Cr 2               ; LOW LEVEL HELPER FUNCTIONS
004F7Cr 2               
004F7Cr 2               byte_to_ascii:
004F7Cr 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
004F7Cr 2               .scope
004F7Cr 2  48               pha
004F7Dr 2  4A               lsr             ; convert high nibble first
004F7Er 2  4A               lsr
004F7Fr 2  4A               lsr
004F80r 2  4A               lsr
004F81r 2  20 rr rr         jsr _nibble_to_ascii
004F84r 2  68               pla
004F85r 2               
004F85r 2                   ; fall through to _nibble_to_ascii
004F85r 2               
004F85r 2               _nibble_to_ascii:
004F85r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
004F85r 2               ; of A and and EMIT it. This does the actual work.
004F85r 2               ; """
004F85r 2  29 0F            and #$0F
004F87r 2  09 30            ora #'0'
004F89r 2  C9 3A            cmp #$3A        ; '9+1
004F8Br 2  90 02            bcc @1
004F8Dr 2  69 06            adc #$06
004F8Fr 2               
004F8Fr 2  4C rr rr     @1:               jmp emit_a
004F92r 2               
004F92r 2  60               rts
004F93r 2               .endscope
004F93r 2               
004F93r 2               compare_16bit:
004F93r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
004F93r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
004F93r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
004F93r 2               ; For signed numbers, Z signals equality and N which number is larger:
004F93r 2               ;       if TOS = NOS: Z=1 and N=0
004F93r 2               ;       if TOS > NOS: Z=0 and N=0
004F93r 2               ;       if TOS < NOS: Z=0 and N=1
004F93r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
004F93r 2               ;       if TOS = NOS: Z=1 and N=0
004F93r 2               ;       if TOS > NOS: Z=0 and C=1
004F93r 2               ;       if TOS < NOS: Z=0 and C=0
004F93r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
004F93r 2               ;                               WORD2 (SUBTRAHEND) is NOS
004F93r 2               ; """
004F93r 2               .scope
004F93r 2                   ; Compare LSB first to set the carry flag
004F93r 2  B5 00            lda 0,x                 ; LSB of TOS
004F95r 2  D5 02            cmp 2,x                 ; LSB of NOS
004F97r 2  F0 0A            beq _equal
004F99r 2               
004F99r 2                   ; LSBs are not equal, compare MSB
004F99r 2  B5 01            lda 1,x                 ; MSB of TOS
004F9Br 2  F5 03            sbc 3,x                 ; MSB of NOS
004F9Dr 2  09 01            ora #1                  ; Make zero flag 0 because not equal
004F9Fr 2  70 08            bvs _overflow
004FA1r 2  80 08            bra _not_equal
004FA3r 2               _equal:
004FA3r 2                   ; Low bytes are equal, so we compare high bytes
004FA3r 2  B5 01            lda 1,x                 ; MSB of TOS
004FA5r 2  F5 03            sbc 3,x                 ; MSB of NOS
004FA7r 2  50 04            bvc _done
004FA9r 2               _overflow:
004FA9r 2                   ; Handle overflow because we use signed numbers
004FA9r 2  49 80            eor #$80                ; complement negative flag
004FABr 2               _not_equal:
004FABr 2  09 01            ora #1                  ; if overflow, we can't be eqal
004FADr 2               _done:
004FADr 2  60               rts
004FAEr 2               .endscope
004FAEr 2               
004FAEr 2               current_to_dp:
004FAEr 2               ; """Look up the current (compilation) dictionary pointer
004FAEr 2               ; in the wordlist set and put it into the dp zero-page
004FAEr 2               ; variable. Uses A and Y.
004FAEr 2               ; """
004FAEr 2                   ; Determine which wordlist is current
004FAEr 2  A0 04            ldy #current_offset
004FB0r 2  B1 rr            lda (up),y      ; current is a byte variable
004FB2r 2  0A               asl             ; turn it into an offset (in cells)
004FB3r 2               
004FB3r 2                   ; Get the dictionary pointer for that wordlist.
004FB3r 2  18               clc
004FB4r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004FB6r 2  A8               tay
004FB7r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
004FB9r 2  85 rr            sta dp
004FBBr 2  C8               iny
004FBCr 2  B1 rr            lda (up),y
004FBEr 2  85 rr            sta dp+1
004FC0r 2               
004FC0r 2  60               rts
004FC1r 2               
004FC1r 2               
004FC1r 2               dp_to_current:
004FC1r 2               ; """Look up which wordlist is current and update its pointer
004FC1r 2               ; with the value in dp. Uses A and Y.
004FC1r 2               ; """
004FC1r 2                   ; Determine which wordlist is current
004FC1r 2  A0 04            ldy #current_offset
004FC3r 2  B1 rr            lda (up),y      ; current is a byte variable
004FC5r 2  0A               asl             ; turn it into an offset (in cells)
004FC6r 2               
004FC6r 2                   ; Get the dictionary pointer for that wordlist.
004FC6r 2  18               clc
004FC7r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004FC9r 2  A8               tay
004FCAr 2  A5 rr            lda dp
004FCCr 2  91 rr            sta (up),y              ; get the dp for that wordlist.
004FCEr 2  C8               iny
004FCFr 2  A5 rr            lda dp+1
004FD1r 2  91 rr            sta (up),y
004FD3r 2               
004FD3r 2  60               rts
004FD4r 2               
004FD4r 2               interpret:
004FD4r 2               .scope
004FD4r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
004FD4r 2               ; Process one line only. Assumes that the address of name is in
004FD4r 2               ; cib and the length of the whole input line string is in ciblen
004FD4r 2               ; """
004FD4r 2                   ; Normally we would use PARSE here with the SPACE character as
004FD4r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
004FD4r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
004FD4r 2                   ; delimiters per default and skips any leading spaces, which
004FD4r 2                   ; PARSE doesn't
004FD4r 2               _loop:
004FD4r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
004FD7r 2               
004FD7r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
004FD7r 2                   ; in the line and we need to go get a new line
004FD7r 2  B5 00            lda 0,x
004FD9r 2  15 01            ora 1,x
004FDBr 2  F0 70            beq _line_done
004FDDr 2               
004FDDr 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
004FDDr 2                   ; make a copy of the address in case it isn't a word we know and
004FDDr 2                   ; we have to go see if it is a number
004FDDr 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
004FE0r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
004FE3r 2               
004FE3r 2                   ; A zero signals that we didn't find a word in the Dictionary
004FE3r 2  B5 00            lda 0,x
004FE5r 2  15 01            ora 1,x
004FE7r 2  D0 28            bne _got_name_token
004FE9r 2               
004FE9r 2                   ; We didn't get any nt we know of, so let's see if this is
004FE9r 2                   ; a number.
004FE9r 2  E8               inx                     ; ( addr u 0 -- addr u )
004FEAr 2  E8               inx
004FEBr 2               
004FEBr 2                   ; If the number conversion doesn't work, NUMBER will do the
004FEBr 2                   ; complaining for us
004FEBr 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
004FEEr 2               
004FEEr 2                   ; Otherweise, if we're interpreting, we're done
004FEEr 2  A5 rr            lda state
004FF0r 2  F0 E2            beq _loop
004FF2r 2               
004FF2r 2                   ; We're compiling, so there is a bit more work.  Check
004FF2r 2                   ; status bit 5 to see if it's a single or double-cell
004FF2r 2                   ; number.
004FF2r 2  A9 20            lda #$20
004FF4r 2  24 rr            bit status
004FF6r 2  F0 0D            beq _single_number
004FF8r 2               
004FF8r 2                   ; It's a double cell number.  If we swap the
004FF8r 2                   ; upper and lower half, we can use the literal_runtime twice
004FF8r 2                   ; to compile it into the dictionary.
004FF8r 2  20 rr rr         jsr xt_swap
004FFBr 2  A0 rr            ldy #>literal_runtime
004FFDr 2  A9 rr            lda #<literal_runtime
004FFFr 2  20 rr rr         jsr cmpl_subroutine
005002r 2               
005002r 2                   ; compile our number
005002r 2  20 rr rr         jsr xt_comma
005005r 2               
005005r 2                   ; Fall into _single_number to process the other half.
005005r 2               _single_number:
005005r 2  A0 rr            ldy #>literal_runtime
005007r 2  A9 rr            lda #<literal_runtime
005009r 2  20 rr rr         jsr cmpl_subroutine
00500Cr 2               
00500Cr 2                   ; compile our number
00500Cr 2  20 rr rr         jsr xt_comma
00500Fr 2               
00500Fr 2                   ; That was so much fun, let's do it again!
00500Fr 2  80 C3            bra _loop
005011r 2               
005011r 2               _got_name_token:
005011r 2                   ; We have a known word's nt TOS. We're going to need its xt
005011r 2                   ; though, which is four bytes father down.
005011r 2               
005011r 2                   ; We arrive here with ( addr u nt ), so we NIP twice
005011r 2  B5 00            lda 0,x
005013r 2  95 04            sta 4,x
005015r 2  B5 01            lda 1,x
005017r 2  95 05            sta 5,x
005019r 2               
005019r 2  E8               inx
00501Ar 2  E8               inx
00501Br 2  E8               inx
00501Cr 2  E8               inx                     ; ( nt )
00501Dr 2               
00501Dr 2                   ; Save a version of nt for error handling and compilation stuff
00501Dr 2  B5 00            lda 0,x
00501Fr 2  85 rr            sta tmpbranch
005021r 2  B5 01            lda 1,x
005023r 2  85 rr            sta tmpbranch+1
005025r 2               
005025r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
005028r 2               
005028r 2                   ; See if we are in interpret or compile mode, 0 is interpret
005028r 2  A5 rr            lda state
00502Ar 2  D0 13            bne _compile
00502Cr 2               
00502Cr 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
00502Cr 2                   ; though, see if this isn't a compile-only word, which would be
00502Cr 2                   ; illegal. The status byte is the second one of the header.
00502Cr 2  A0 01            ldy #1
00502Er 2  B1 rr            lda (tmpbranch),y
005030r 2  29 01            and #CO                 ; mask everything but Compile Only bit
005032r 2  F0 05            beq _interpret
005034r 2               
005034r 2  A9 02            lda #err_compileonly
005036r 2  4C rr rr         jmp error
005039r 2               
005039r 2               _interpret:
005039r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
005039r 2                   ; the RTS of the word we're executing will bring us back here,
005039r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
005039r 2                   ; xt directly, we have to fool around with the Return Stack
005039r 2                   ; instead, which is actually slightly slower
005039r 2  20 rr rr         jsr xt_execute
00503Cr 2               
00503Cr 2                   ; That's quite enough for this word, let's get the next one
00503Cr 2  4C rr rr         jmp _loop
00503Fr 2               
00503Fr 2               _compile:
00503Fr 2                   ; We're compiling! However, we need to see if this is an
00503Fr 2                   ; IMMEDIATE word, which would mean we execute it right now even
00503Fr 2                   ; during compilation mode. Fortunately, we saved the nt so life
00503Fr 2                   ; is easier. The flags are in the second byte of the header
00503Fr 2  A0 01            ldy #1
005041r 2  B1 rr            lda (tmpbranch),y
005043r 2  29 04            and #IM                 ; Mask all but IM bit
005045r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
005047r 2               
005047r 2                   ; Compile the xt into the Dictionary with COMPILE,
005047r 2  20 rr rr         jsr xt_compile_comma
00504Ar 2  4C rr rr         jmp _loop
00504Dr 2               
00504Dr 2               _line_done:
00504Dr 2                   ; drop stuff from PARSE_NAME
00504Dr 2  E8               inx
00504Er 2  E8               inx
00504Fr 2  E8               inx
005050r 2  E8               inx
005051r 2               
005051r 2  60               rts
005052r 2               .endscope
005052r 2               
005052r 2               
005052r 2               is_printable:
005052r 2               .scope
005052r 2               ; """Given a character in A, check if it is a printable ASCII
005052r 2               ; character in the range from $20 to $7E inclusive. Returns the
005052r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
005052r 2               ; is printable. Keeps A. See
005052r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
005052r 2               ; discussion of various ways to do this
005052r 2  C9 20            cmp #AscSP              ; $20
005054r 2  90 08            bcc _done
005056r 2  C9 7F            cmp #'~' + 1             ; $7E
005058r 2  B0 03            bcs _failed
00505Ar 2               
00505Ar 2  38               sec
00505Br 2  80 01            bra _done
00505Dr 2               _failed:
00505Dr 2  18               clc
00505Er 2               _done:
00505Er 2  60               rts
00505Fr 2               .endscope
00505Fr 2               
00505Fr 2               
00505Fr 2               is_whitespace:
00505Fr 2               .scope
00505Fr 2               ; """Given a character in A, check if it is a whitespace
00505Fr 2               ; character, that is, an ASCII value from 0 to 32 (where
00505Fr 2               ; 32 is SPACE). Returns the result in the Carry Flag:
00505Fr 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
00505Fr 2               ; that it is whitespace. See PARSE and PARSE-NAME for
00505Fr 2               ; a discussion of the uses. Does not change A or Y.
00505Fr 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
005061r 2  90 08            bcc _done
005063r 2               
005063r 2  C9 21            cmp #AscSP+1
005065r 2  B0 03            bcs _failed
005067r 2               
005067r 2  38               sec
005068r 2  80 01            bra _done
00506Ar 2               _failed:
00506Ar 2  18               clc
00506Br 2               _done:
00506Br 2  60               rts
00506Cr 2               .endscope
00506Cr 2               
00506Cr 2               
00506Cr 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
00506Cr 2               ; required for the word. This routine flows into the generic error handling
00506Cr 2               ; code
00506Cr 2               underflow_1:
00506Cr 2               ; """Make sure we have at least one cell on the Data Stack"""
00506Cr 2  E0 rr            cpx #dsp0-1
00506Er 2  10 10            bpl underflow_error
005070r 2  60               rts
005071r 2               underflow_2:
005071r 2               ; """Make sure we have at least two cells on the Data Stack"""
005071r 2  E0 rr            cpx #dsp0-3
005073r 2  10 0B            bpl underflow_error
005075r 2  60               rts
005076r 2               underflow_3:
005076r 2               ; """Make sure we have at least three cells on the Data Stack"""
005076r 2  E0 rr            cpx #dsp0-5
005078r 2  10 06            bpl underflow_error
00507Ar 2  60               rts
00507Br 2               underflow_4:
00507Br 2               ; """Make sure we have at least four cells on the Data Stack"""
00507Br 2  E0 rr            cpx #dsp0-7
00507Dr 2  10 01            bpl underflow_error
00507Fr 2  60               rts
005080r 2               
005080r 2               underflow_error:
005080r 2                   ; Entry for COLD/ABORT/QUIT
005080r 2  A9 09            lda #err_underflow      ; fall through to error
005082r 2               
005082r 2               error:
005082r 2               ; """Given the error number in a, print the associated error string and
005082r 2               ; call abort. Uses tmp3.
005082r 2               ; """
005082r 2  0A               asl
005083r 2  A8               tay
005084r 2  B9 rr rr         lda error_table,y
005087r 2  85 rr            sta tmp3                ; LSB
005089r 2  C8               iny
00508Ar 2  B9 rr rr         lda error_table,y
00508Dr 2  85 rr            sta tmp3+1              ; MSB
00508Fr 2               
00508Fr 2  20 rr rr         jsr print_common
005092r 2  20 rr rr         jsr xt_cr
005095r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
005098r 2               
005098r 2               
005098r 2               ; =====================================================================
005098r 2               ; PRINTING ROUTINES
005098r 2               
005098r 2               ; We distinguish two types of print calls, both of which take the string number
005098r 2               ; (see strings.asm) in A:
005098r 2               
005098r 2               ;       print_string       - with a line feed
005098r 2               ;       print_string_no_lf - without a line feed
005098r 2               
005098r 2               ; In addition, print_common provides a lower-level alternative for error
005098r 2               ; handling and anything else that provides the address of the
005098r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
005098r 2               ; printing should be more concerned with size than speed, because anything to
005098r 2               ; do with humans reading text is going to be slow.
005098r 2               
005098r 2               print_string_no_lf:
005098r 2               ; """Given the number of a zero-terminated string in A, print it to the
005098r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
005098r 2               ; through to print_common
005098r 2               ; """
005098r 2                   ; Get the entry from the string table
005098r 2  0A               asl
005099r 2  A8               tay
00509Ar 2  B9 rr rr         lda string_table,y
00509Dr 2  85 rr            sta tmp3                ; LSB
00509Fr 2  C8               iny
0050A0r 2  B9 rr rr         lda string_table,y
0050A3r 2  85 rr            sta tmp3+1              ; MSB
0050A5r 2               
0050A5r 2                   ; fall through to print_common
0050A5r 2               print_common:
0050A5r 2               ; """Common print routine used by both the print functions and
0050A5r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
0050A5r 2               ; Y.
0050A5r 2               ; """
0050A5r 2               .scope
0050A5r 2  A0 00            ldy #0
0050A7r 2               _loop:
0050A7r 2  B1 rr            lda (tmp3),y
0050A9r 2  F0 06            beq _done               ; strings are zero-terminated
0050ABr 2               
0050ABr 2  20 rr rr         jsr emit_a              ; allows vectoring via output
0050AEr 2  C8               iny
0050AFr 2  80 F6            bra _loop
0050B1r 2               _done:
0050B1r 2  60               rts
0050B2r 2               .endscope
0050B2r 2               
0050B2r 2               print_string:
0050B2r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
0050B2r 2               ; We do not check to see if the index is out of range. Uses tmp3.
0050B2r 2               ; """
0050B2r 2  20 rr rr         jsr print_string_no_lf
0050B5r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
0050B8r 2               
0050B8r 2               
0050B8r 2               print_u:
0050B8r 2               ; """basic printing routine used by higher-level constructs,
0050B8r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
0050B8r 2               ; basically u. without the space at the end. used for various
0050B8r 2               ; outputs
0050B8r 2               ; """
0050B8r 2  20 rr rr         jsr xt_zero                     ; 0
0050BBr 2  20 rr rr         jsr xt_less_number_sign         ; <#
0050BEr 2  20 rr rr         jsr xt_number_sign_s            ; #S
0050C1r 2  20 rr rr         jsr xt_number_sign_greater      ; #>
0050C4r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
0050C7r 2               
0050C7r 2               ; END
0050C7r 2               
0050C7r 1               
0050C7r 1               .segment "DATA"
0050C7r 1               
0050C7r 1               .ifdef TALI_OPTIONAL_ASSEMBLER
0050C7r 1               .include "../../assembler.s"
0050C7r 2               ; Assembler for Tali Forth 2
0050C7r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0050C7r 2               ; First version: 07. Nov 2014 (as tasm65c02)
0050C7r 2               ; This version: 03. Jan 2019
0050C7r 2               
0050C7r 2               ; This is the built-in assembler for Tali Forth 2. Once the assembler wordlist
0050C7r 2               ; is included with
0050C7r 2               
0050C7r 2               ;       assembler-wordlist >order
0050C7r 2               
0050C7r 2               ; the opcodes are available as normal Forth words. The format is Simpler
0050C7r 2               ; Assembler Notation (SAN) which separates the opcode completely from the
0050C7r 2               ; operand (see https://github.com/scotws/SAN). In this case, the operand is
0050C7r 2               ; entered before the opcode in the postfix Forth notation (for example, "2000
0050C7r 2               ; lda.#"). See the assembler documenation in the manual for more detail.
0050C7r 2               
0050C7r 2               ; The code here was originally used in A Typist's Assembler for the 65c02
0050C7r 2               ; (tasm65c02), see https://github.com/scotws/tasm65c02 for the standalone
0050C7r 2               ; version. Tasm65c02 is in the public domain.
0050C7r 2               
0050C7r 2               ; This code makes use of the opcode tables stored as part of the disassembler.
0050C7r 2               
0050C7r 2               ; ==========================================================
0050C7r 2               ; MNEMONICS
0050C7r 2               
0050C7r 2               ; The assembler instructions are realized as individual Forth words with
0050C7r 2               ; entries in the assembler wordlist (see header.asm). We pass the opcode in A.
0050C7r 2               
0050C7r 2               ; An alterantive method would have been along the lines of
0050C7r 2               
0050C7r 2               ;               jsr asm_common
0050C7r 2               ;               .byte $EA
0050C7r 2               
0050C7r 2               ; where the asm_common then uses the address on the Return Stack to pick up the
0050C7r 2               ; opcode and the length. Though this uses fewer resources, the current version
0050C7r 2               ; makes up for this by simplifying the code of asm_common.
0050C7r 2               
0050C7r 2               ; The routines are organized alphabetically by SAN mnemonic, not by opcode. The
0050C7r 2               ; SAN and traditional mnemonics are listed after the opcode load instruction.
0050C7r 2               ; This list was generated by a Python script in the tools folder, see there for
0050C7r 2               ; more detail.
0050C7r 2               
0050C7r 2               assembler:              ; used to calculate size of assembler code
0050C7r 2               .ifdef TALI_OPTIONAL_ASSEMBLER
0050C7r 2               xt_asm_adc_h:   ; adc.# \ ADC #nn
0050C7r 2  A9 69                        lda #$69
0050C9r 2  4C rr rr                     jmp asm_common
0050CCr 2               z_asm_adc_h:
0050CCr 2               
0050CCr 2               xt_asm_adc_x:   ; adc.x \ ADC nnnn,X
0050CCr 2  A9 7D                        lda #$7D
0050CEr 2  4C rr rr                     jmp asm_common
0050D1r 2               z_asm_adc_x:
0050D1r 2               
0050D1r 2               xt_asm_adc_y:   ; adc.y \ ADC nnnn,Y
0050D1r 2  A9 79                        lda #$79
0050D3r 2  4C rr rr                     jmp asm_common
0050D6r 2               z_asm_adc_y:
0050D6r 2               
0050D6r 2               xt_asm_adc_z:   ; adc.z \ ADC nn
0050D6r 2  A9 65                        lda #$65
0050D8r 2  4C rr rr                     jmp asm_common
0050DBr 2               z_asm_adc_z:
0050DBr 2               
0050DBr 2               xt_asm_adc_zi:  ; adc.zi \ ADC (nn)
0050DBr 2  A9 72                        lda #$72
0050DDr 2  4C rr rr                     jmp asm_common
0050E0r 2               z_asm_adc_zi:
0050E0r 2               
0050E0r 2               xt_asm_adc_ziy: ; adc.ziy \ ADC (nn),Y
0050E0r 2  A9 71                        lda #$71
0050E2r 2  4C rr rr                     jmp asm_common
0050E5r 2               z_asm_adc_ziy:
0050E5r 2               
0050E5r 2               xt_asm_adc_zx:  ; adc.zx \ ADC nn,X
0050E5r 2  A9 75                        lda #$75
0050E7r 2  4C rr rr                     jmp asm_common
0050EAr 2               z_asm_adc_zx:
0050EAr 2               
0050EAr 2               xt_asm_adc_zxi: ; adc.zxi \ ADC (nn,X)
0050EAr 2  A9 61                        lda #$61
0050ECr 2  4C rr rr                     jmp asm_common
0050EFr 2               z_asm_adc_zxi:
0050EFr 2               
0050EFr 2               xt_asm_and:     ; and. \ AND nnnn
0050EFr 2  A9 2D                        lda #$2D
0050F1r 2  4C rr rr                     jmp asm_common
0050F4r 2               z_asm_and:
0050F4r 2               
0050F4r 2               xt_asm_and_h:   ; and.# \ AND #nn
0050F4r 2  A9 29                        lda #$29
0050F6r 2  4C rr rr                     jmp asm_common
0050F9r 2               z_asm_and_h:
0050F9r 2               
0050F9r 2               xt_asm_and_x:   ; and.x \ AND nnnn,X
0050F9r 2  A9 3D                        lda #$3D
0050FBr 2  4C rr rr                     jmp asm_common
0050FEr 2               z_asm_and_x:
0050FEr 2               
0050FEr 2               xt_asm_and_y:   ; and.y \ AND nnnn,Y
0050FEr 2  A9 39                        lda #$39
005100r 2  4C rr rr                     jmp asm_common
005103r 2               z_asm_and_y:
005103r 2               
005103r 2               xt_asm_and_z:   ; and.z \ AND nn
005103r 2  A9 25                        lda #$25
005105r 2  4C rr rr                     jmp asm_common
005108r 2               z_asm_and_z:
005108r 2               
005108r 2               xt_asm_and_zi:  ; and.zi \ AND (nn)
005108r 2  A9 32                        lda #$32
00510Ar 2  4C rr rr                     jmp asm_common
00510Dr 2               z_asm_and_zi:
00510Dr 2               
00510Dr 2               xt_asm_and_ziy: ; and.ziy \ AND (nn),Y
00510Dr 2  A9 31                        lda #$31
00510Fr 2  4C rr rr                     jmp asm_common
005112r 2               z_asm_and_ziy:
005112r 2               
005112r 2               xt_asm_and_zx:  ; and.zx \ AND nn,X
005112r 2  A9 35                        lda #$35
005114r 2  4C rr rr                     jmp asm_common
005117r 2               z_asm_and_zx:
005117r 2               
005117r 2               xt_asm_and_zxi: ; and.zxi \ AND (nn,X)
005117r 2  A9 21                        lda #$21
005119r 2  4C rr rr                     jmp asm_common
00511Cr 2               z_asm_and_zxi:
00511Cr 2               
00511Cr 2               xt_asm_asl:     ; asl \ ASL nnnn
00511Cr 2  A9 0E                        lda #$0E
00511Er 2  4C rr rr                     jmp asm_common
005121r 2               z_asm_asl:
005121r 2               
005121r 2               xt_asm_asl_a:   ; asl.a \ ASL
005121r 2  A9 0A                        lda #$0A
005123r 2  4C rr rr                     jmp asm_common
005126r 2               z_asm_asl_a:
005126r 2               
005126r 2               xt_asm_asl_x:   ; asl.x \ ASL nnnn,X
005126r 2  A9 1E                        lda #$1E
005128r 2  4C rr rr                     jmp asm_common
00512Br 2               z_asm_asl_x:
00512Br 2               
00512Br 2               xt_asm_asl_z:   ; asl.z \ ASL nn
00512Br 2  A9 06                        lda #$06
00512Dr 2  4C rr rr                     jmp asm_common
005130r 2               z_asm_asl_z:
005130r 2               
005130r 2               xt_asm_asl_zx:  ; asl.zx \ ASL nn,X
005130r 2  A9 16                        lda #$16
005132r 2  4C rr rr                     jmp asm_common
005135r 2               z_asm_asl_zx:
005135r 2               
005135r 2               xt_asm_bcc:     ; bcc \ BCC
005135r 2  A9 90                        lda #$90
005137r 2  4C rr rr                     jmp asm_common
00513Ar 2               z_asm_bcc:
00513Ar 2               
00513Ar 2               xt_asm_bcs:     ; bcs \ BCS
00513Ar 2  A9 B0                        lda #$B0
00513Cr 2  A0 02                        ldy #2
00513Er 2  4C rr rr                     jmp asm_common
005141r 2               z_asm_bcs:
005141r 2               
005141r 2               xt_asm_beq:     ; beq \ BEQ
005141r 2  A9 F0                        lda #$F0
005143r 2  4C rr rr                     jmp asm_common
005146r 2               z_asm_beq:
005146r 2               
005146r 2               xt_asm_bit:     ; bit \ BIT nnnn
005146r 2  A9 2C                        lda #$2C
005148r 2  4C rr rr                     jmp asm_common
00514Br 2               z_asm_bit:
00514Br 2               
00514Br 2               xt_asm_bit_h:   ; bit.# \ BIT #nn
00514Br 2  A9 89                        lda #$89
00514Dr 2  4C rr rr                     jmp asm_common
005150r 2               z_asm_bit_h:
005150r 2               
005150r 2               xt_asm_bit_x:   ; bit.x \ BIT nnnn,X
005150r 2  A9 3C                        lda #$3C
005152r 2  4C rr rr                     jmp asm_common
005155r 2               z_asm_bit_x:
005155r 2               
005155r 2               xt_asm_bit_z:   ; bit.z \ BIT nn
005155r 2  A9 24                        lda #$24
005157r 2  4C rr rr                     jmp asm_common
00515Ar 2               z_asm_bit_z:
00515Ar 2               
00515Ar 2               xt_asm_bit_zx:  ; bit.zx \ BIT nn,X
00515Ar 2  A9 34                        lda #$34
00515Cr 2  4C rr rr                     jmp asm_common
00515Fr 2               z_asm_bit_zx:
00515Fr 2               
00515Fr 2               xt_asm_bmi:     ; bmi \ BMI
00515Fr 2  A9 30                        lda #$30
005161r 2  4C rr rr                     jmp asm_common
005164r 2               z_asm_bmi:
005164r 2               
005164r 2               xt_asm_bne:     ; bne \ BNE
005164r 2  A9 D0                        lda #$D0
005166r 2  4C rr rr                     jmp asm_common
005169r 2               z_asm_bne:
005169r 2               
005169r 2               xt_asm_bpl:     ; bpl \ BPL
005169r 2  A9 10                        lda #$10
00516Br 2  4C rr rr                     jmp asm_common
00516Er 2               z_asm_bpl:
00516Er 2               
00516Er 2               xt_asm_bra:     ; bra \ BRA
00516Er 2  A9 80                        lda #$80
005170r 2  4C rr rr                     jmp asm_common
005173r 2               z_asm_bra:
005173r 2               
005173r 2               xt_asm_brk:     ; brk \ BRK
005173r 2  A9 00                        lda #$00
005175r 2  4C rr rr                     jmp asm_common
005178r 2               z_asm_brk:
005178r 2               
005178r 2               xt_asm_bvc:     ; bvc \ BVC
005178r 2  A9 50                        lda #$50
00517Ar 2  4C rr rr                     jmp asm_common
00517Dr 2               z_asm_bvc:
00517Dr 2               
00517Dr 2               xt_asm_bvs:     ; bvs \ BVS
00517Dr 2  A9 70                        lda #$70
00517Fr 2  4C rr rr                     jmp asm_common
005182r 2               z_asm_bvs:
005182r 2               
005182r 2               xt_asm_clc:     ; clc \ CLC
005182r 2  A9 18                        lda #$18
005184r 2  4C rr rr                     jmp asm_common
005187r 2               z_asm_clc:
005187r 2               
005187r 2               xt_asm_cld:     ; cld \ CLD
005187r 2  A9 D8                        lda #$D8
005189r 2  4C rr rr                     jmp asm_common
00518Cr 2               z_asm_cld:
00518Cr 2               
00518Cr 2               xt_asm_cli:     ; cli \ CLI
00518Cr 2  A9 58                        lda #$58
00518Er 2  4C rr rr                     jmp asm_common
005191r 2               z_asm_cli:
005191r 2               
005191r 2               xt_asm_clv:     ; clv \ CLV
005191r 2  A9 B8                        lda #$B8
005193r 2  4C rr rr                     jmp asm_common
005196r 2               z_asm_clv:
005196r 2               
005196r 2               xt_asm_cmp:     ; cmp \ CMP nnnn
005196r 2  A9 CD                        lda #$CD
005198r 2  4C rr rr                     jmp asm_common
00519Br 2               z_asm_cmp:
00519Br 2               
00519Br 2               xt_asm_cmp_h:   ; cmp.# \ CMP #nn
00519Br 2  A9 C9                        lda #$C9
00519Dr 2  4C rr rr                     jmp asm_common
0051A0r 2               z_asm_cmp_h:
0051A0r 2               
0051A0r 2               xt_asm_cmp_x:   ; cmp.x \ CMP nnnn,X
0051A0r 2  A9 DD                        lda #$DD
0051A2r 2  4C rr rr                     jmp asm_common
0051A5r 2               z_asm_cmp_x:
0051A5r 2               
0051A5r 2               xt_asm_cmp_y:   ; cmp.y \ CMP nnnn,Y
0051A5r 2  A9 D9                        lda #$D9
0051A7r 2  4C rr rr                     jmp asm_common
0051AAr 2               z_asm_cmp_y:
0051AAr 2               
0051AAr 2               xt_asm_cmp_z:   ; cmp.z \ CMP nn
0051AAr 2  A9 C5                        lda #$C5
0051ACr 2  4C rr rr                     jmp asm_common
0051AFr 2               z_asm_cmp_z:
0051AFr 2               
0051AFr 2               xt_asm_cmp_zi:  ; cmp.zi \ CMP (nn)
0051AFr 2  A9 D2                        lda #$D2
0051B1r 2  4C rr rr                     jmp asm_common
0051B4r 2               z_asm_cmp_zi:
0051B4r 2               
0051B4r 2               xt_asm_cmp_ziy: ; cmp.ziy \ CMP (nn),Y
0051B4r 2  A9 D1                        lda #$D1
0051B6r 2  4C rr rr                     jmp asm_common
0051B9r 2               z_asm_cmp_ziy:
0051B9r 2               
0051B9r 2               xt_asm_cmp_zx:  ; cmp.zx \ CMP nn,X
0051B9r 2  A9 D5                        lda #$D5
0051BBr 2  4C rr rr                     jmp asm_common
0051BEr 2               z_asm_cmp_zx:
0051BEr 2               
0051BEr 2               xt_asm_cmp_zxi: ; cmp.zxi \ CMP (nn,X)
0051BEr 2  A9 C1                        lda #$C1
0051C0r 2  4C rr rr                     jmp asm_common
0051C3r 2               z_asm_cmp_zxi:
0051C3r 2               
0051C3r 2               xt_asm_cpx:     ; cpx \ CPX nnnn
0051C3r 2  A9 EC                        lda #$EC
0051C5r 2  4C rr rr                     jmp asm_common
0051C8r 2               z_asm_cpx:
0051C8r 2               
0051C8r 2               xt_asm_cpx_h:   ; cpx.# \ CPX #nn
0051C8r 2  A9 E0                        lda #$E0
0051CAr 2  4C rr rr                     jmp asm_common
0051CDr 2               z_asm_cpx_h:
0051CDr 2               
0051CDr 2               xt_asm_cpx_z:   ; cpx.z \ CPX nn
0051CDr 2  A9 E4                        lda #$E4
0051CFr 2  4C rr rr                     jmp asm_common
0051D2r 2               z_asm_cpx_z:
0051D2r 2               
0051D2r 2               xt_asm_cpy:     ; cpy \ CPY
0051D2r 2  A9 CC                        lda #$CC
0051D4r 2  A0 03                        ldy #3
0051D6r 2  4C rr rr                     jmp asm_common
0051D9r 2               z_asm_cpy:
0051D9r 2               
0051D9r 2               xt_asm_cpy_h:   ; cpy.# \ CPY #nn
0051D9r 2  A9 C0                        lda #$C0
0051DBr 2  4C rr rr                     jmp asm_common
0051DEr 2               z_asm_cpy_h:
0051DEr 2               
0051DEr 2               xt_asm_cpy_z:   ; cpy.z \ CPY nn
0051DEr 2  A9 C4                        lda #$C4
0051E0r 2  4C rr rr                     jmp asm_common
0051E3r 2               z_asm_cpy_z:
0051E3r 2               
0051E3r 2               xt_asm_dec:     ; dec \ DEC nnnn
0051E3r 2  A9 CE                        lda #$CE
0051E5r 2  4C rr rr                     jmp asm_common
0051E8r 2               z_asm_dec:
0051E8r 2               
0051E8r 2               xt_asm_dec_a:   ; dec.a \ DEC
0051E8r 2  A9 3A                        lda #$3A
0051EAr 2  4C rr rr                     jmp asm_common
0051EDr 2               z_asm_dec_a:
0051EDr 2               
0051EDr 2               xt_asm_dec_x:   ; dec.x \ DEC nnnn,X
0051EDr 2  A9 DE                        lda #$DE
0051EFr 2  4C rr rr                     jmp asm_common
0051F2r 2               z_asm_dec_x:
0051F2r 2               
0051F2r 2               xt_asm_dec_z:   ; dec.z \ DEC nn
0051F2r 2  A9 C6                        lda #$C6
0051F4r 2  4C rr rr                     jmp asm_common
0051F7r 2               z_asm_dec_z:
0051F7r 2               
0051F7r 2               xt_asm_dec_zx:  ; dec.zx \ DEC nn,X
0051F7r 2  A9 D6                        lda #$D6
0051F9r 2  4C rr rr                     jmp asm_common
0051FCr 2               z_asm_dec_zx:
0051FCr 2               
0051FCr 2               xt_asm_dex:     ; dex \ DEX
0051FCr 2  A9 CA                        lda #$CA
0051FEr 2  4C rr rr                     jmp asm_common
005201r 2               z_asm_dex:
005201r 2               
005201r 2               xt_asm_dey:     ; dey \ DEY
005201r 2  A9 88                        lda #$88
005203r 2  4C rr rr                     jmp asm_common
005206r 2               z_asm_dey:
005206r 2               
005206r 2               xt_asm_eor:     ; eor \ EOR nnnn
005206r 2  A9 4D                        lda #$4D
005208r 2  4C rr rr                     jmp asm_common
00520Br 2               z_asm_eor:
00520Br 2               
00520Br 2               xt_asm_eor_h:   ; eor.# \ EOR #nn
00520Br 2  A9 49                        lda #$49
00520Dr 2  4C rr rr                     jmp asm_common
005210r 2               z_asm_eor_h:
005210r 2               
005210r 2               xt_asm_eor_x:   ; eor.x \ EOR nnnn,X
005210r 2  A9 5D                        lda #$5D
005212r 2  4C rr rr                     jmp asm_common
005215r 2               z_asm_eor_x:
005215r 2               
005215r 2               xt_asm_eor_y:   ; eor.y \ EOR nnnn,Y
005215r 2  A9 59                        lda #$59
005217r 2  4C rr rr                     jmp asm_common
00521Ar 2               z_asm_eor_y:
00521Ar 2               
00521Ar 2               xt_asm_eor_z:   ; eor.z \ EOR nn
00521Ar 2  A9 45                        lda #$45
00521Cr 2  4C rr rr                     jmp asm_common
00521Fr 2               z_asm_eor_z:
00521Fr 2               
00521Fr 2               xt_asm_eor_zi:  ; eor.zi \ EOR (nn)
00521Fr 2  A9 52                        lda #$52
005221r 2  4C rr rr                     jmp asm_common
005224r 2               z_asm_eor_zi:
005224r 2               
005224r 2               xt_asm_eor_ziy: ; eor.ziy \ EOR (nn),Y
005224r 2  A9 51                        lda #$51
005226r 2  4C rr rr                     jmp asm_common
005229r 2               z_asm_eor_ziy:
005229r 2               
005229r 2               xt_asm_eor_zx:  ; eor.zx \ EOR nn,X
005229r 2  A9 55                        lda #$55
00522Br 2  4C rr rr                     jmp asm_common
00522Er 2               z_asm_eor_zx:
00522Er 2               
00522Er 2               xt_asm_eor_zxi: ; eor.zxi \ EOR (nn,X)
00522Er 2  A9 41                        lda #$41
005230r 2  4C rr rr                     jmp asm_common
005233r 2               z_asm_eor_zxi:
005233r 2               
005233r 2               xt_asm_inc:     ; inc \ INC nnnn
005233r 2  A9 EE                        lda #$EE
005235r 2  4C rr rr                     jmp asm_common
005238r 2               z_asm_inc:
005238r 2               
005238r 2               xt_asm_inc_a:   ; inc.a \ INC
005238r 2  A9 1A                        lda #$1A
00523Ar 2  4C rr rr                     jmp asm_common
00523Dr 2               z_asm_inc_a:
00523Dr 2               
00523Dr 2               xt_asm_inc_x:   ; inc.x \ INC nnnn,X
00523Dr 2  A9 FE                        lda #$FE
00523Fr 2  4C rr rr                     jmp asm_common
005242r 2               z_asm_inc_x:
005242r 2               
005242r 2               xt_asm_inc_z:   ; inc.z \ INC nn
005242r 2  A9 E6                        lda #$E6
005244r 2  4C rr rr                     jmp asm_common
005247r 2               z_asm_inc_z:
005247r 2               
005247r 2               xt_asm_inc_zx:  ; inc.zx \ INC nn,X
005247r 2  A9 F6                        lda #$F6
005249r 2  4C rr rr                     jmp asm_common
00524Cr 2               z_asm_inc_zx:
00524Cr 2               
00524Cr 2               xt_asm_inx:     ; inx \ INX
00524Cr 2  A9 E8                        lda #$E8
00524Er 2  4C rr rr                     jmp asm_common
005251r 2               z_asm_inx:
005251r 2               
005251r 2               xt_asm_iny:     ; iny \ INY
005251r 2  A9 C8                        lda #$C8
005253r 2  4C rr rr                     jmp asm_common
005256r 2               z_asm_iny:
005256r 2               
005256r 2               xt_asm_jmp:     ; jmp \ JMP nnnn
005256r 2  A9 4C                        lda #$4C
005258r 2  4C rr rr                     jmp asm_common
00525Br 2               z_asm_jmp:
00525Br 2               
00525Br 2               xt_asm_jmp_i:   ; jmp.i \ JMP (nnnn)
00525Br 2  A9 6C                        lda #$6C
00525Dr 2  4C rr rr                     jmp asm_common
005260r 2               z_asm_jmp_i:
005260r 2               
005260r 2               xt_asm_jmp_xi:  ; jmp.xi \ JMP (nnnn,X)
005260r 2  A9 7C                        lda #$7C
005262r 2  4C rr rr                     jmp asm_common
005265r 2               z_asm_jmp_xi:
005265r 2               
005265r 2               xt_asm_jsr:     ; jsr \ JSR nnnn
005265r 2  A9 20                        lda #$20
005267r 2  4C rr rr                     jmp asm_common
00526Ar 2               z_asm_jsr:
00526Ar 2               
00526Ar 2               xt_asm_lda:     ; lda \ LDA nnnn
00526Ar 2  A9 AD                        lda #$AD
00526Cr 2  4C rr rr                     jmp asm_common
00526Fr 2               z_asm_lda:
00526Fr 2               
00526Fr 2               xt_asm_lda_h:   ; lda.# \ LDA #nn
00526Fr 2  A9 A9                        lda #$A9
005271r 2  4C rr rr                     jmp asm_common
005274r 2               z_asm_lda_h:
005274r 2               
005274r 2               xt_asm_lda_x:   ; lda.x \ LDA nnnn,X
005274r 2  A9 BD                        lda #$BD
005276r 2  4C rr rr                     jmp asm_common
005279r 2               z_asm_lda_x:
005279r 2               
005279r 2               xt_asm_lda_y:   ; lda.y \ LDA nnnn,Y
005279r 2  A9 B9                        lda #$B9
00527Br 2  4C rr rr                     jmp asm_common
00527Er 2               z_asm_lda_y:
00527Er 2               
00527Er 2               xt_asm_lda_z:   ; lda.z \ LDA nn
00527Er 2  A9 A5                        lda #$A5
005280r 2  4C rr rr                     jmp asm_common
005283r 2               z_asm_lda_z:
005283r 2               
005283r 2               xt_asm_lda_zi:  ; lda.zi \ LDA (nn)
005283r 2  A9 B2                        lda #$B2
005285r 2  4C rr rr                     jmp asm_common
005288r 2               z_asm_lda_zi:
005288r 2               
005288r 2               xt_asm_lda_ziy: ; lda.ziy \ LDA (nn),Y
005288r 2  A9 B1                        lda #$B1
00528Ar 2  4C rr rr                     jmp asm_common
00528Dr 2               z_asm_lda_ziy:
00528Dr 2               
00528Dr 2               xt_asm_lda_zx:  ; lda.zx \ LDA nn,X
00528Dr 2  A9 B5                        lda #$B5
00528Fr 2  4C rr rr                     jmp asm_common
005292r 2               z_asm_lda_zx:
005292r 2               
005292r 2               xt_asm_lda_zxi: ; lda.zxi \ LDA (nn,X)
005292r 2  A9 A1                        lda #$A1
005294r 2  4C rr rr                     jmp asm_common
005297r 2               z_asm_lda_zxi:
005297r 2               
005297r 2               xt_asm_ldx:     ; ldx \ LDX nnnn
005297r 2  A9 AE                        lda #$AE
005299r 2  4C rr rr                     jmp asm_common
00529Cr 2               z_asm_ldx:
00529Cr 2               
00529Cr 2               xt_asm_ldx_h:   ; ldx.# \ LDX #nn
00529Cr 2  A9 A2                        lda #$A2
00529Er 2  4C rr rr                     jmp asm_common
0052A1r 2               z_asm_ldx_h:
0052A1r 2               
0052A1r 2               xt_asm_ldx_y:   ; ldx.y \ LDX nnnn,Y
0052A1r 2  A9 BE                        lda #$BE
0052A3r 2  4C rr rr                     jmp asm_common
0052A6r 2               z_asm_ldx_y:
0052A6r 2               
0052A6r 2               xt_asm_ldx_z:   ; ldx.z \ LDX nn
0052A6r 2  A9 A6                        lda #$A6
0052A8r 2  4C rr rr                     jmp asm_common
0052ABr 2               z_asm_ldx_z:
0052ABr 2               
0052ABr 2               xt_asm_ldx_zy:  ; ldx.zy \ LDX nn,Y
0052ABr 2  A9 B6                        lda #$B6
0052ADr 2  4C rr rr                     jmp asm_common
0052B0r 2               z_asm_ldx_zy:
0052B0r 2               
0052B0r 2               xt_asm_ldy:     ; ldy \ LDY nnnn
0052B0r 2  A9 AC                        lda #$AC
0052B2r 2  4C rr rr                     jmp asm_common
0052B5r 2               z_asm_ldy:
0052B5r 2               
0052B5r 2               xt_asm_ldy_h:   ; ldy.# \ LDY #nn
0052B5r 2  A9 A0                        lda #$A0
0052B7r 2  4C rr rr                     jmp asm_common
0052BAr 2               z_asm_ldy_h:
0052BAr 2               
0052BAr 2               xt_asm_ldy_x:   ; ldy.x \ LDY nnnn,X
0052BAr 2  A9 BC                        lda #$BC
0052BCr 2  4C rr rr                     jmp asm_common
0052BFr 2               z_asm_ldy_x:
0052BFr 2               
0052BFr 2               xt_asm_ldy_z:   ; ldy.z \ LDY nn
0052BFr 2  A9 A4                        lda #$A4
0052C1r 2  4C rr rr                     jmp asm_common
0052C4r 2               z_asm_ldy_z:
0052C4r 2               
0052C4r 2               xt_asm_ldy_zx:  ; ldy.zx \ LDY nn,X
0052C4r 2  A9 B4                        lda #$B4
0052C6r 2  4C rr rr                     jmp asm_common
0052C9r 2               z_asm_ldy_zx:
0052C9r 2               
0052C9r 2               xt_asm_lsr:     ; lsr \ LSR nnnn
0052C9r 2  A9 4E                        lda #$4E
0052CBr 2  4C rr rr                     jmp asm_common
0052CEr 2               z_asm_lsr:
0052CEr 2               
0052CEr 2               xt_asm_lsr_a:   ; lsr.a \ LSR
0052CEr 2  A9 4A                        lda #$4A
0052D0r 2  4C rr rr                     jmp asm_common
0052D3r 2               z_asm_lsr_a:
0052D3r 2               
0052D3r 2               xt_asm_lsr_x:   ; lsr.x \ LSR nnnn,X
0052D3r 2  A9 5E                        lda #$5E
0052D5r 2  4C rr rr                     jmp asm_common
0052D8r 2               z_asm_lsr_x:
0052D8r 2               
0052D8r 2               xt_asm_lsr_z:   ; lsr.z \ LSR nn
0052D8r 2  A9 46                        lda #$46
0052DAr 2  4C rr rr                     jmp asm_common
0052DDr 2               z_asm_lsr_z:
0052DDr 2               
0052DDr 2               xt_asm_lsr_zx:  ; lsr.zx \ LSR nn,X
0052DDr 2  A9 56                        lda #$56
0052DFr 2  4C rr rr                     jmp asm_common
0052E2r 2               z_asm_lsr_zx:
0052E2r 2               
0052E2r 2               xt_asm_nop:     ; nop \ NOP
0052E2r 2  A9 EA                        lda #$EA
0052E4r 2  4C rr rr                     jmp asm_common
0052E7r 2               z_asm_nop:
0052E7r 2               
0052E7r 2               xt_asm_ora:     ; ora \ ORA nnnn
0052E7r 2  A9 0D                        lda #$0D
0052E9r 2  4C rr rr                     jmp asm_common
0052ECr 2               z_asm_ora:
0052ECr 2               
0052ECr 2               xt_asm_ora_h:   ; ora.# \ ORA #nn
0052ECr 2  A9 09                        lda #$09
0052EEr 2  4C rr rr                     jmp asm_common
0052F1r 2               z_asm_ora_h:
0052F1r 2               
0052F1r 2               xt_asm_ora_x:   ; ora.x \ ORA nnnn,X
0052F1r 2  A9 1D                        lda #$1D
0052F3r 2  4C rr rr                     jmp asm_common
0052F6r 2               z_asm_ora_x:
0052F6r 2               
0052F6r 2               xt_asm_ora_y:   ; ora.y \ ORA nnnn,Y
0052F6r 2  A9 19                        lda #$19
0052F8r 2  4C rr rr                     jmp asm_common
0052FBr 2               z_asm_ora_y:
0052FBr 2               
0052FBr 2               xt_asm_ora_z:   ; ora.z \ ORA nn
0052FBr 2  A9 05                        lda #$05
0052FDr 2  4C rr rr                     jmp asm_common
005300r 2               z_asm_ora_z:
005300r 2               
005300r 2               xt_asm_ora_zi:  ; ora.zi \ ORA.ZI
005300r 2  A9 12                        lda #$12
005302r 2  A0 02                        ldy #2
005304r 2  4C rr rr                     jmp asm_common
005307r 2               z_asm_ora_zi:
005307r 2               
005307r 2               xt_asm_ora_ziy: ; ora.ziy \ ORA (nn),Y
005307r 2  A9 11                        lda #$11
005309r 2  4C rr rr                     jmp asm_common
00530Cr 2               z_asm_ora_ziy:
00530Cr 2               
00530Cr 2               xt_asm_ora_zx:  ; ora.zx \ ORA nn,X
00530Cr 2  A9 15                        lda #$15
00530Er 2  4C rr rr                     jmp asm_common
005311r 2               z_asm_ora_zx:
005311r 2               
005311r 2               xt_asm_ora_zxi: ; ora.zxi \ ORA (nn,X)
005311r 2  A9 01                        lda #$01
005313r 2  4C rr rr                     jmp asm_common
005316r 2               z_asm_ora_zxi:
005316r 2               
005316r 2               xt_asm_pha:     ; pha \ PHA
005316r 2  A9 48                        lda #$48
005318r 2  4C rr rr                     jmp asm_common
00531Br 2               z_asm_pha:
00531Br 2               
00531Br 2               xt_asm_php:     ; php \ PHP
00531Br 2  A9 08                        lda #$08
00531Dr 2  4C rr rr                     jmp asm_common
005320r 2               z_asm_php:
005320r 2               
005320r 2               xt_asm_phx:     ; phx \ PHX
005320r 2  A9 DA                        lda #$DA
005322r 2  4C rr rr                     jmp asm_common
005325r 2               z_asm_phx:
005325r 2               
005325r 2               xt_asm_phy:     ; phy \ PHY
005325r 2  A9 5A                        lda #$5A
005327r 2  4C rr rr                     jmp asm_common
00532Ar 2               z_asm_phy:
00532Ar 2               
00532Ar 2               xt_asm_pla:     ; pla \ PLA
00532Ar 2  A9 68                        lda #$68
00532Cr 2  4C rr rr                     jmp asm_common
00532Fr 2               z_asm_pla:
00532Fr 2               
00532Fr 2               xt_asm_plp:     ; plp \ PLP
00532Fr 2  A9 28                        lda #$28
005331r 2  4C rr rr                     jmp asm_common
005334r 2               z_asm_plp:
005334r 2               
005334r 2               xt_asm_plx:     ; plx \ PLX
005334r 2  A9 FA                        lda #$FA
005336r 2  4C rr rr                     jmp asm_common
005339r 2               z_asm_plx:
005339r 2               
005339r 2               xt_asm_ply:     ; ply \ PLY
005339r 2  A9 7A                        lda #$7A
00533Br 2  4C rr rr                     jmp asm_common
00533Er 2               z_asm_ply:
00533Er 2               
00533Er 2               xt_asm_rol:     ; rol \ ROL nnnn
00533Er 2  A9 2E                        lda #$2E
005340r 2  4C rr rr                     jmp asm_common
005343r 2               z_asm_rol:
005343r 2               
005343r 2               xt_asm_rol_a:   ; rol.a \ ROL
005343r 2  A9 2A                        lda #$2A
005345r 2  4C rr rr                     jmp asm_common
005348r 2               z_asm_rol_a:
005348r 2               
005348r 2               xt_asm_rol_x:   ; rol.x \ ROL nnnn,X
005348r 2  A9 3E                        lda #$3E
00534Ar 2  4C rr rr                     jmp asm_common
00534Dr 2               z_asm_rol_x:
00534Dr 2               
00534Dr 2               xt_asm_rol_z:   ; rol.z \ ROL nn
00534Dr 2  A9 26                        lda #$26
00534Fr 2  4C rr rr                     jmp asm_common
005352r 2               z_asm_rol_z:
005352r 2               
005352r 2               xt_asm_rol_zx:  ; rol.zx \ ROL nn,X
005352r 2  A9 36                        lda #$36
005354r 2  4C rr rr                     jmp asm_common
005357r 2               z_asm_rol_zx:
005357r 2               
005357r 2               xt_asm_ror:     ; ror \ ROR nnnn
005357r 2  A9 6E                        lda #$6E
005359r 2  4C rr rr                     jmp asm_common
00535Cr 2               z_asm_ror:
00535Cr 2               
00535Cr 2               xt_asm_ror_a:   ; ror.a \ ROR
00535Cr 2  A9 6A                        lda #$6A
00535Er 2  4C rr rr                     jmp asm_common
005361r 2               z_asm_ror_a:
005361r 2               
005361r 2               xt_asm_ror_x:   ; ror.x \ ROR nnnn,X
005361r 2  A9 7E                        lda #$7E
005363r 2  4C rr rr                     jmp asm_common
005366r 2               z_asm_ror_x:
005366r 2               
005366r 2               xt_asm_ror_z:   ; ror.z \ ROR nn
005366r 2  A9 66                        lda #$66
005368r 2  4C rr rr                     jmp asm_common
00536Br 2               z_asm_ror_z:
00536Br 2               
00536Br 2               xt_asm_ror_zx:  ; ror.zx \ ROR nn,X
00536Br 2  A9 76                        lda #$76
00536Dr 2  4C rr rr                     jmp asm_common
005370r 2               z_asm_ror_zx:
005370r 2               
005370r 2               xt_asm_rti:     ; rti \ RTI
005370r 2  A9 40                        lda #$40
005372r 2  4C rr rr                     jmp asm_common
005375r 2               z_asm_rti:
005375r 2               
005375r 2               xt_asm_rts:     ; rts \ RTS
005375r 2  A9 60                        lda #$60
005377r 2  4C rr rr                     jmp asm_common
00537Ar 2               z_asm_rts:
00537Ar 2               
00537Ar 2               xt_asm_sbc:     ; sbc \ SBC nnnn
00537Ar 2  A9 ED                        lda #$ED
00537Cr 2  4C rr rr                     jmp asm_common
00537Fr 2               z_asm_sbc:
00537Fr 2               
00537Fr 2               xt_asm_sbc_h:   ; sbc.# \ SBC #nn
00537Fr 2  A9 E9                        lda #$E9
005381r 2  4C rr rr                     jmp asm_common
005384r 2               z_asm_sbc_h:
005384r 2               
005384r 2               xt_asm_sbc_x:   ; sbc.x \ SBC nnnn,X
005384r 2  A9 FD                        lda #$FD
005386r 2  4C rr rr                     jmp asm_common
005389r 2               z_asm_sbc_x:
005389r 2               
005389r 2               xt_asm_sbc_y:   ; sbc.y \ SBC nnnn,Y
005389r 2  A9 F9                        lda #$F9
00538Br 2  4C rr rr                     jmp asm_common
00538Er 2               z_asm_sbc_y:
00538Er 2               
00538Er 2               xt_asm_sbc_z:   ; sbc.z \ SBC nn
00538Er 2  A9 E5                        lda #$E5
005390r 2  4C rr rr                     jmp asm_common
005393r 2               z_asm_sbc_z:
005393r 2               
005393r 2               xt_asm_sbc_zi:  ; sbc.zi \ SBC (nn)
005393r 2  A9 F2                        lda #$F2
005395r 2  4C rr rr                     jmp asm_common
005398r 2               z_asm_sbc_zi:
005398r 2               
005398r 2               xt_asm_sbc_ziy: ; sbc.ziy \ SBC (nn),Y
005398r 2  A9 F1                        lda #$F1
00539Ar 2  4C rr rr                     jmp asm_common
00539Dr 2               z_asm_sbc_ziy:
00539Dr 2               
00539Dr 2               xt_asm_sbc_zx:  ; sbc.zx \ SBC nn,X
00539Dr 2  A9 F5                        lda #$F5
00539Fr 2  4C rr rr                     jmp asm_common
0053A2r 2               z_asm_sbc_zx:
0053A2r 2               
0053A2r 2               xt_asm_sbc_zxi: ; sbc.zxi \ SBC (nn,X)
0053A2r 2  A9 E1                        lda #$E1
0053A4r 2  80 7C                        bra asm_common  ; <-- limit for BRA instead of JMP
0053A6r 2               z_asm_sbc_zxi:
0053A6r 2               
0053A6r 2               xt_asm_sec:     ; sec \ SEC
0053A6r 2  A9 38                        lda #$38
0053A8r 2  80 78                        bra asm_common
0053AAr 2               z_asm_sec:
0053AAr 2               
0053AAr 2               xt_asm_sed:     ; sed \ SED
0053AAr 2  A9 F8                        lda #$F8
0053ACr 2  80 74                        bra asm_common
0053AEr 2               z_asm_sed:
0053AEr 2               
0053AEr 2               xt_asm_sei:     ; sei \ SEI
0053AEr 2  A9 78                        lda #$78
0053B0r 2  80 70                        bra asm_common
0053B2r 2               z_asm_sei:
0053B2r 2               
0053B2r 2               xt_asm_sta:     ; sta \ STA nnnn
0053B2r 2  A9 8D                        lda #$8D
0053B4r 2  80 6C                        bra asm_common
0053B6r 2               z_asm_sta:
0053B6r 2               
0053B6r 2               xt_asm_sta_x:   ; sta.x \ STA nnnn,X
0053B6r 2  A9 9D                        lda #$9D
0053B8r 2  80 68                        bra asm_common
0053BAr 2               z_asm_sta_x:
0053BAr 2               
0053BAr 2               xt_asm_sta_y:   ; sta.y \ STA nnnn,Y
0053BAr 2  A9 99                        lda #$99
0053BCr 2  80 64                        bra asm_common
0053BEr 2               z_asm_sta_y:
0053BEr 2               
0053BEr 2               xt_asm_sta_z:   ; sta.z \ STA nn
0053BEr 2  A9 85                        lda #$85
0053C0r 2  80 60                        bra asm_common
0053C2r 2               z_asm_sta_z:
0053C2r 2               
0053C2r 2               xt_asm_sta_zi:  ; sta.zi \ STA (nn)
0053C2r 2  A9 92                        lda #$92
0053C4r 2  80 5C                        bra asm_common
0053C6r 2               z_asm_sta_zi:
0053C6r 2               
0053C6r 2               xt_asm_sta_ziy: ; sta.ziy \ STA (nn),Y
0053C6r 2  A9 91                        lda #$91
0053C8r 2  80 58                        bra asm_common
0053CAr 2               z_asm_sta_ziy:
0053CAr 2               
0053CAr 2               xt_asm_sta_zx:  ; sta.zx \ STA nn,X
0053CAr 2  A9 95                        lda #$95
0053CCr 2  80 54                        bra asm_common
0053CEr 2               z_asm_sta_zx:
0053CEr 2               
0053CEr 2               xt_asm_sta_zxi: ; sta.zxi \ STA (nn,X)
0053CEr 2  A9 81                        lda #$81
0053D0r 2  80 50                        bra asm_common
0053D2r 2               z_asm_sta_zxi:
0053D2r 2               
0053D2r 2               xt_asm_stx:     ; stx \ STX nnnn
0053D2r 2  A9 8E                        lda #$8E
0053D4r 2  80 4C                        bra asm_common
0053D6r 2               z_asm_stx:
0053D6r 2               
0053D6r 2               xt_asm_stx_z:   ; stx.z \ STX nn
0053D6r 2  A9 86                        lda #$86
0053D8r 2  80 48                        bra asm_common
0053DAr 2               z_asm_stx_z:
0053DAr 2               
0053DAr 2               xt_asm_stx_zy:  ; stx.zy \ STX nn,Y
0053DAr 2  A9 96                        lda #$96
0053DCr 2  80 44                        bra asm_common
0053DEr 2               z_asm_stx_zy:
0053DEr 2               
0053DEr 2               xt_asm_sty:     ; sty \ STY nnnn
0053DEr 2  A9 8C                        lda #$8C
0053E0r 2  80 40                        bra asm_common
0053E2r 2               z_asm_sty:
0053E2r 2               
0053E2r 2               xt_asm_sty_z:   ; sty.z \ STY nn
0053E2r 2  A9 84                        lda #$84
0053E4r 2  80 3C                        bra asm_common
0053E6r 2               z_asm_sty_z:
0053E6r 2               
0053E6r 2               xt_asm_sty_zx:  ; sty.zx \ STY nn,X
0053E6r 2  A9 94                        lda #$94
0053E8r 2  80 38                        bra asm_common
0053EAr 2               z_asm_sty_zx:
0053EAr 2               
0053EAr 2               xt_asm_stz:     ; stz \ STZ nnnn
0053EAr 2  A9 9C                        lda #$9C
0053ECr 2  80 34                        bra asm_common
0053EEr 2               z_asm_stz:
0053EEr 2               
0053EEr 2               xt_asm_stz_x:   ; stz.x \ STZ nnnn,X
0053EEr 2  A9 9E                        lda #$9E
0053F0r 2  80 30                        bra asm_common
0053F2r 2               z_asm_stz_x:
0053F2r 2               
0053F2r 2               xt_asm_stz_z:   ; stz.z \ STZ nn
0053F2r 2  A9 64                        lda #$64
0053F4r 2  80 2C                        bra asm_common
0053F6r 2               z_asm_stz_z:
0053F6r 2               
0053F6r 2               xt_asm_stz_zx:  ; stz.zx \ STZ nn,X
0053F6r 2  A9 74                        lda #$74
0053F8r 2  80 28                        bra asm_common
0053FAr 2               z_asm_stz_zx:
0053FAr 2               
0053FAr 2               xt_asm_tax:     ; tax \ TAX
0053FAr 2  A9 AA                        lda #$AA
0053FCr 2  80 24                        bra asm_common
0053FEr 2               z_asm_tax:
0053FEr 2               
0053FEr 2               xt_asm_tay:     ; tay \ TAY
0053FEr 2  A9 A8                        lda #$A8
005400r 2  80 20                        bra asm_common
005402r 2               z_asm_tay:
005402r 2               
005402r 2               xt_asm_trb:     ; trb \ TRB nnnn
005402r 2  A9 1C                        lda #$1C
005404r 2  80 1C                        bra asm_common
005406r 2               z_asm_trb:
005406r 2               
005406r 2               xt_asm_trb_z:   ; trb.z \ TRB nn
005406r 2  A9 14                        lda #$14
005408r 2  80 18                        bra asm_common
00540Ar 2               z_asm_trb_z:
00540Ar 2               
00540Ar 2               xt_asm_tsb:     ; tsb \ TSB nnnn
00540Ar 2  A9 0C                        lda #$0C
00540Cr 2  80 14                        bra asm_common
00540Er 2               z_asm_tsb:
00540Er 2               
00540Er 2               xt_asm_tsb_z:   ; tsb.z \ TSB nn
00540Er 2  A9 04                        lda #$04
005410r 2  80 10                        bra asm_common
005412r 2               z_asm_tsb_z:
005412r 2               
005412r 2               xt_asm_tsx:     ; tsx \ TSX
005412r 2  A9 BA                        lda #$BA
005414r 2  80 0C                        bra asm_common
005416r 2               z_asm_tsx:
005416r 2               
005416r 2               xt_asm_txa:     ; txa \ TXA
005416r 2  A9 8A                        lda #$8A
005418r 2  80 08                        bra asm_common
00541Ar 2               z_asm_txa:
00541Ar 2               
00541Ar 2               xt_asm_txs:     ; txs \ TXS
00541Ar 2  A9 9A                        lda #$9A
00541Cr 2  80 04                        bra asm_common
00541Er 2               z_asm_txs:
00541Er 2               
00541Er 2               xt_asm_tya:     ; tya \ TYA
00541Er 2  A9 98                        lda #$98
005420r 2  80 00                        bra asm_common
005422r 2               z_asm_tya:
005422r 2               
005422r 2               
005422r 2               ; ==========================================================
005422r 2               ; ASSEMBLER HELPER FUNCTIONS
005422r 2               
005422r 2               asm_common:
005422r 2               
005422r 2                       ; """Common routine for all opcodes. We arrive here with the opcode in
005422r 2                       ; A. We do not need to check for the correct values because we are
005422r 2                       ; coming from the assembler Dictionary and trust our external test
005422r 2                       ; suite.
005422r 2                       ; """
005422r 2                               ; Compile opcode. Note cmpl_a does not use Y
005422r 2  A8                           tay
005423r 2  20 rr rr                     jsr cmpl_a
005426r 2               
005426r 2                               ; We get the length of the opcode from the table included in
005426r 2                               ; the disassembler. We use the opcode value as the offset in
005426r 2                               ; the oc_index_table. We have 256 entries, each two bytes
005426r 2                               ; long, so we can't just use an index with Y. We use tmp2 for
005426r 2                               ; this.
005426r 2  A9 rr                        lda #<oc_index_table
005428r 2  85 rr                        sta tmp2
00542Ar 2  A9 rr                        lda #>oc_index_table
00542Cr 2  85 rr                        sta tmp2+1
00542Er 2               
00542Er 2  98                           tya             ; retrieve opcode
00542Fr 2  0A                           asl             ; times two for offset
005430r 2  90 02                        bcc @m
005432r 2  E6 rr                        inc tmp2+1
005434r 2               @m:
005434r 2  A8                           tay             ; use Y as the index
005435r 2               
005435r 2                               ; Get address of the entry in the opcode table. We put it in
005435r 2                               ; tmp3 and push a copy of it to the stack to be able to print
005435r 2                               ; the opcode later
005435r 2  B1 rr                        lda (tmp2),y    ; LSB
005437r 2  85 rr                        sta tmp3
005439r 2  C8                           iny
00543Ar 2  B1 rr                        lda (tmp2),y    ; MSB
00543Cr 2  85 rr                        sta tmp3+1
00543Er 2               
00543Er 2  B2 rr                        lda (tmp3)      ; get "lengths byte"
005440r 2               
005440r 2                               ; The length of the instruction is stored in bits 7 and 6.
005440r 2                               ; Rotate them through the carry flag and mask the rest
005440r 2  2A                           rol
005441r 2  2A                           rol
005442r 2  2A                           rol             ; Three times because we go through Carry
005443r 2  29 03                        and #%00000011
005445r 2  A8                           tay
005446r 2               
005446r 2                               ; One byte means no operand, we're done. Use DEY as CPY #1
005446r 2  88                           dey
005447r 2  F0 12                        beq @done
005449r 2               
005449r 2                               ; We have an operand which must be TOS
005449r 2  20 rr rr                     jsr underflow_1
00544Cr 2               
00544Cr 2                               ; We compile the LSB of TOS as the operand we definitely have
00544Cr 2                               ; before we even test if this is a two- or three-byte
00544Cr 2                               ; instruction. Little endian CPU means we store this byte first
00544Cr 2  B5 00                        lda 0,x
00544Er 2  20 rr rr                     jsr cmpl_a      ; does not use Y
005451r 2               
005451r 2                               ; If this is a two-byte instruction, we're done. If we landed
005451r 2                               ; here, we've already decremented Y by one, so this is
005451r 2                               ; the equivalent to CPY #2
005451r 2  88                           dey
005452r 2  F0 05                        beq @done_drop
005454r 2               
005454r 2                               ; This must be a three-byte instruction, get the MSB.
005454r 2  B5 01                        lda 1,x
005456r 2  20 rr rr                     jsr cmpl_a      ; Fall through to _done_drop
005459r 2               
005459r 2               @done_drop:
005459r 2  E8                           inx
00545Ar 2  E8                           inx             ; Fall through to _done
00545Br 2               @done:
00545Br 2  60                           rts             ; Returns to original caller
00545Cr 2               
00545Cr 2               
00545Cr 2               ; ==========================================================
00545Cr 2               ; PSEUDO-INSTRUCTIONS AND MACROS
00545Cr 2               
00545Cr 2               xt_asm_push_a:
00545Cr 2                       ; """push-a puts the content of the 65c02 Accumulator on the Forth
00545Cr 2                       ; data stack as the TOS. This is a convience routine that encodes the
00545Cr 2                       ; instructions  DEX  DEX  STA 0,X  STZ 1,X
00545Cr 2                       ; """
00545Cr 2  A0 00                        ldy #0
00545Er 2               _loop:
00545Er 2  B9 rr rr                     lda asm_push_a_data,y
005461r 2  C9 FF                        cmp #$FF
005463r 2  F0 06                        beq @done
005465r 2               
005465r 2  20 rr rr                     jsr cmpl_a      ; does not change Y
005468r 2  C8                           iny
005469r 2  80 F3                        bra _loop
00546Br 2               @done:
00546Br 2               z_asm_push_a:
00546Br 2  60                           rts
00546Cr 2               asm_push_a_data:
00546Cr 2                       ; We can't use 00 as a terminator because STA 0,X assembles to 95 00
00546Cr 2  CA CA 95 00          .byte $CA, $CA, $95, 00, $74, $01
005470r 2  74 01        
005472r 2  FF                   .byte $FF               ; terminator
005473r 2               
005473r 2               
005473r 2               
005473r 2               ; ==========================================================
005473r 2               ; DIRECTIVES
005473r 2               
005473r 2               ; The "<J" directive (back jump) is a dummy instruction (syntactic sugar) to
005473r 2               ; make clear that the JMP or JSR instructions are using the address that had
005473r 2               ; been placed on the stack by "-->" (the "arrow" directive).
005473r 2               xt_asm_back_jump:
005473r 2               z_asm_back_jump:
005473r 2  60                           rts
005474r 2               
005474r 2               ; The "<B" directive (back branch) takes an address that was placed on the Data
005474r 2               ; Stack by the anonymous label directive "-->" (the "arrow") and the current
005474r 2               ; address (via HERE) to calculate a backward branch offset. This is then stored
005474r 2               ; by a following branch instruction.
005474r 2               xt_asm_back_branch:
005474r 2                               ; We arrive here with ( addr-l ) of the label on the stack and
005474r 2                               ; then subtract the current address
005474r 2  20 rr rr                     jsr xt_here             ; ( addr-l addr-h )
005477r 2  20 rr rr                     jsr xt_minus            ; ( offset )
00547Ar 2               
00547Ar 2                               ; We subtract two more because of the branch instruction itself
00547Ar 2  3A                           dea
00547Br 2  3A                           dea
00547Cr 2               
00547Cr 2               z_asm_back_branch:
00547Cr 2  60                           rts
00547Dr 2               .endif
00547Dr 2               assembler_end:
00547Dr 2               
00547Dr 2               ; END
00547Dr 2               
00547Dr 1               .include "../../disassembler.s"
00547Dr 2               ; Disassembler for Tali Forth 2
00547Dr 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00547Dr 2               ; Updated by Sam Colwell
00547Dr 2               ; First version: 28. Apr 2018
00547Dr 2               ; This version: 31. Dec 2022
00547Dr 2               
00547Dr 2               ; This is the default disassembler for Tali Forth 2. Use by passing
00547Dr 2               ; the address and length of the block of memory to be disassembled:
00547Dr 2               ;
00547Dr 2               ;       disasm ( addr x -- )
00547Dr 2               
00547Dr 2               ; The underflow checking is handled by the word's stub in native_words.asm, see
00547Dr 2               ; there for more information.
00547Dr 2               
00547Dr 2               ; The code is disassembled in Simpler Assembler Notation (SAN), because that
00547Dr 2               ; is, uh, simpler. See the documentation and https://github.com/scotws/SAN for
00547Dr 2               ; more information. Because disassemblers are used interactively with slow
00547Dr 2               ; humans, we don't care that much about speed and put the emphasis at being
00547Dr 2               ; small.
00547Dr 2               
00547Dr 2               ; Uses: tmp3, tmp2, tmp1 (xt_u_dot_r uses xt_type which uses tmp1)
00547Dr 2               ;       scratch (used for handling literals and JSRs)
00547Dr 2               
00547Dr 2               disassembler:
00547Dr 2  20 rr rr                     jsr xt_cr       ; ( addr u )
005480r 2               _byte_loop:
005480r 2                               ; Print address at start of the line. Note we use whatever
005480r 2                               ; number base the user has
005480r 2  20 rr rr                     jsr xt_over     ; ( addr u addr )
005483r 2  20 rr rr                     jsr xt_u_dot    ; ( addr u )
005486r 2  20 rr rr                     jsr xt_space
005489r 2               
005489r 2                               ; We use the opcode value as the offset in the oc_index_table.
005489r 2                               ; We have 256 entries, each two bytes long, so we can't just
005489r 2                               ; use an index with Y. We use tmp2 for this.
005489r 2  A9 rr                        lda #<oc_index_table
00548Br 2  85 rr                        sta tmp2
00548Dr 2  A9 rr                        lda #>oc_index_table
00548Fr 2  85 rr                        sta tmp2+1
005491r 2               
005491r 2  A1 02                        lda (2,x)       ; get opcode that addr points to
005493r 2  85 rr                        sta scratch     ; Save opcode
005495r 2               
005495r 2  0A                           asl             ; multiply by two for offset
005496r 2  90 02                        bcc @ok
005498r 2  E6 rr                        inc tmp2+1      ; we're on second page
00549Ar 2               @ok:
00549Ar 2  A8                           tay             ; use Y as the index
00549Br 2               
00549Br 2                               ; Get address of the entry in the opcode table. We put it
00549Br 2                               ; in tmp3 and push a copy of it to the stack to be able to
00549Br 2                               ; print the opcode later
00549Br 2  B1 rr                        lda (tmp2),y    ; LSB
00549Dr 2  85 rr                        sta tmp3
00549Fr 2  48                           pha
0054A0r 2               
0054A0r 2  C8                           iny
0054A1r 2               
0054A1r 2  B1 rr                        lda (tmp2),y    ; MSB
0054A3r 2  85 rr                        sta tmp3+1
0054A5r 2  48                           pha
0054A6r 2               
0054A6r 2                               ; The first byte is the "lengths byte" which is coded so
0054A6r 2                               ; that bits 7 to 6 are the length of the instruction (1 to
0054A6r 2                               ; 3 bytes) and 2 to 0 are the length of the mnemonic.
0054A6r 2  B2 rr                        lda (tmp3)
0054A8r 2  A8                           tay                     ; save copy of lengths byte
0054A9r 2               
0054A9r 2                               ; Since this is Simpler Assembler Notation (SAN) in a Forth
0054A9r 2                               ; system, we want to print any operand before we print the
0054A9r 2                               ; mnemonic ('1000 sta' instead of 'sta 1000'). This allows us
0054A9r 2                               ; to copy and paste directly from the disassembler to the
0054A9r 2                               ; assembler.
0054A9r 2               
0054A9r 2                               ; What happens next depends on the length of the instruction in
0054A9r 2                               ; bytes:
0054A9r 2               
0054A9r 2                               ;   1 byte:  OPC          -->          OPC  bit sequence: %01
0054A9r 2                               ;   2 bytes: OPC LSB      -->    0 LSB OPC  bit sequence: %10
0054A9r 2                               ;   3 bytes: OPC LSB MSB  -->  MSB LSB OPC  bit sequence: %11
0054A9r 2               
0054A9r 2                               ; We can distinguish between the first case, where there is
0054A9r 2                               ; only the mnemonic, and the second and third cases, where we
0054A9r 2                               ; have an operand. We do this by use of the bit sequence in
0054A9r 2                               ; bits 7 and 6.
0054A9r 2  10 3C                        bpl _no_operand         ; bit 7 clear, single-byte instruction
0054ABr 2               
0054ABr 2                               ; We have an operand. Prepare the Data Stack
0054ABr 2  20 rr rr                     jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
0054AEr 2               
0054AEr 2                               ; Because of the glory of a little endian CPU, we can start
0054AEr 2                               ; with the next byte regardless if this is a one or two byte
0054AEr 2                               ; operand, because we'll need the LSB one way or the other.
0054AEr 2                               ; We have a copy of the opcode on the stack, so we can now move
0054AEr 2                               ; to the next byte
0054AEr 2  F6 04                        inc 4,x
0054B0r 2  D0 02                        bne @l1
0054B2r 2  F6 05                        inc 5,x                 ; ( addr+1 u 0 )
0054B4r 2               @l1:
0054B4r 2  B5 02                        lda 2,x
0054B6r 2  D0 02                        bne @l2
0054B8r 2  D6 03                        dec 3,x
0054BAr 2               @l2:
0054BAr 2  D6 02                        dec 2,x                 ; ( addr+1 u-1 0 )
0054BCr 2               
0054BCr 2  A1 04                        lda (4,x)
0054BEr 2  95 00                        sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
0054C0r 2  85 rr                        sta scratch+1           ; Save a copy in the scratch buffer
0054C2r 2               
0054C2r 2                               ; We still have a copy of the lengths byte in Y, which we use
0054C2r 2                               ; to see if we have a one-byte operand (and are done already)
0054C2r 2                               ; or a two-byte operand
0054C2r 2  98                           tya                     ; retrieve copy of lengths byte
0054C3r 2  2A                           rol                     ; shift bit 6 to bit 7
0054C4r 2  10 14                        bpl _print_operand
0054C6r 2               
0054C6r 2                               ; We have a three-byte instruction, so we need to get the MSB
0054C6r 2                               ; of the operand. Move to the next byte
0054C6r 2  F6 04                        inc 4,x
0054C8r 2  D0 02                        bne @l3
0054CAr 2  F6 05                        inc 5,x                 ; ( addr+2 u-1 LSB )
0054CCr 2               @l3:
0054CCr 2  B5 02                        lda 2,x
0054CEr 2  D0 02                        bne @l4
0054D0r 2  D6 03                        dec 3,x
0054D2r 2               @l4:
0054D2r 2  D6 02                        dec 2,x                 ; ( addr+2 u-2 LSB )
0054D4r 2               
0054D4r 2  A1 04                        lda (4,x)
0054D6r 2  95 01                        sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
0054D8r 2  85 rr                        sta scratch+2           ; Save a copy in the scratch buffer
0054DAr 2               
0054DAr 2                               ; fall through to _print_operand
0054DAr 2               
0054DAr 2               _print_operand:
0054DAr 2               
0054DAr 2                               ; We arrive here with the lengths byte in Y, the address of the
0054DAr 2                               ; opcode table entry for the instruction on the stack ( addr+n
0054DAr 2                               ; u-n opr). We want the output to be nicely formatted in
0054DAr 2                               ; columns, so we use U.R. The maximal width of the number in
0054DAr 2                               ; decimal on an 16-bit addressed machine is five characters
0054DAr 2  CA                           dex
0054DBr 2  CA                           dex
0054DCr 2  A9 05                        lda #5
0054DEr 2  95 00                        sta 0,x
0054E0r 2  74 01                        stz 1,x                 ; ( addr+n u-n opr 5 )
0054E2r 2               
0054E2r 2  20 rr rr                     jsr xt_u_dot_r          ; U.R ( addr+n u-n )
0054E5r 2               
0054E5r 2  80 0B                        bra _print_mnemonic
0054E7r 2               
0054E7r 2               _no_operand:
0054E7r 2                               ; We arrive here with the opcode table address on the stack,
0054E7r 2                               ; the lengths byte in Y and ( addr u ). Since we want to have
0054E7r 2                               ; a nicely formatted output, we need to indent the mnemonic by
0054E7r 2                               ; five spaces.
0054E7r 2  CA                           dex
0054E8r 2  CA                           dex
0054E9r 2  A9 05                        lda #5
0054EBr 2  95 00                        sta 0,x
0054EDr 2  74 01                        stz 1,x                 ; ( addr u 5 )
0054EFr 2               
0054EFr 2  20 rr rr                     jsr xt_spaces           ; ( addr u )
0054F2r 2               
0054F2r 2                               ; fall through to _print_mnemonic
0054F2r 2               
0054F2r 2               _print_mnemonic:
0054F2r 2                               ; We arrive here with the opcode table address on the stack and
0054F2r 2                               ; ( addr u | addr+n u-n ). Time to print the mnemonic.
0054F2r 2  20 rr rr                     jsr xt_space
0054F5r 2               
0054F5r 2  CA                           dex
0054F6r 2  CA                           dex                     ; ( addr u ? )
0054F7r 2  68                           pla                     ; MSB
0054F8r 2  95 01                        sta 1,x                 ; ( addr u MSB )
0054FAr 2  68                           pla                     ; LSB
0054FBr 2  95 00                        sta 0,x                 ; ( addr u addr-o )
0054FDr 2               
0054FDr 2  20 rr rr                     jsr xt_count            ; ( addr u addr-o u-o )
005500r 2               
005500r 2                               ; The length of the mnemnonic string is in bits 2 to 0
005500r 2  74 01                        stz 1,x                 ; paranoid
005502r 2  B5 00                        lda 0,x
005504r 2  29 07                        and #%00000111          ; ( addr u addr-o u-o )
005506r 2  95 00                        sta 0,x
005508r 2               
005508r 2  20 rr rr                     jsr xt_type             ; ( addr u )
00550Br 2               
00550Br 2                               ; Handle JSR by printing name of function, if available.
00550Br 2                               ; scratch has opcode ($20 for JSR)
00550Br 2                               ; scratch+1 and scratch+2 have address if it's a JSR.
00550Br 2  A5 rr                        lda scratch
00550Dr 2  C9 20                        cmp #$20
00550Fr 2  D0 59                        bne _not_jsr
005511r 2               
005511r 2                               ; It's a JSR.  Print 5 spaces as an offset.
005511r 2  CA                           dex
005512r 2  CA                           dex
005513r 2  A9 05                        lda #5
005515r 2  95 00                        sta 0,x
005517r 2  74 01                        stz 1,x
005519r 2  20 rr rr                     jsr xt_spaces
00551Cr 2               
00551Cr 2               ; Special handlers
00551Cr 2                               ; Handle literals specially.
00551Cr 2  A9 rr                        lda #<literal_runtime
00551Er 2  C5 rr                        cmp scratch+1
005520r 2  D0 0C                        bne _not_literal
005522r 2  A9 rr                        lda #>literal_runtime
005524r 2  C5 rr                        cmp scratch+2
005526r 2  D0 06                        bne _not_literal
005528r 2                               ; It's a literal.
005528r 2  20 rr rr                     jsr disasm_literal
00552Br 2  4C rr rr                     jmp _printing_done
00552Er 2               
00552Er 2               _not_literal:
00552Er 2                               ; Handle string literals specially.
00552Er 2  A9 rr                        lda #<sliteral_runtime
005530r 2  C5 rr                        cmp scratch+1
005532r 2  D0 0C                        bne _not_sliteral
005534r 2  A9 rr                        lda #>sliteral_runtime
005536r 2  C5 rr                        cmp scratch+2
005538r 2  D0 06                        bne _not_sliteral
00553Ar 2                               ; It's a literal.
00553Ar 2  20 rr rr                     jsr disasm_sliteral
00553Dr 2  4C rr rr                     jmp _printing_done
005540r 2               _not_sliteral:
005540r 2                               ; Handle 0branch
005540r 2  A9 rr                        lda #<zero_branch_runtime
005542r 2  C5 rr                        cmp scratch+1
005544r 2  D0 0C                        bne _not_0branch
005546r 2  A9 rr                        lda #>zero_branch_runtime
005548r 2  C5 rr                        cmp scratch+2
00554Ar 2  D0 06                        bne _not_0branch
00554Cr 2                               ; It's a 0branch.
00554Cr 2  20 rr rr                     jsr disasm_0branch
00554Fr 2  4C rr rr                     jmp _printing_done
005552r 2               _not_0branch:
005552r 2                               ; Handle branch
005552r 2  A9 rr                        lda #<branch_runtime
005554r 2  C5 rr                        cmp scratch+1
005556r 2  D0 0C                        bne _not_branch
005558r 2  A9 rr                        lda #>branch_runtime
00555Ar 2  C5 rr                        cmp scratch+2
00555Cr 2  D0 06                        bne _not_branch
00555Er 2                               ; It's a branch.
00555Er 2  20 rr rr                     jsr disasm_branch
005561r 2  4C rr rr                     jmp _printing_done
005564r 2               _not_branch:
005564r 2                               ; Try the generic JSR handler, which will use the target of the
005564r 2                               ; JSR as an XT and print the name if it exists.
005564r 2  20 rr rr                     jsr disasm_jsr
005567r 2  4C rr rr                     jmp _printing_done
00556Ar 2               
00556Ar 2               _not_jsr:
00556Ar 2                               ; See if the instruction is a jump (instruction still in A)
00556Ar 2                               ; (Strings start with a jump over the data.)
00556Ar 2  C9 4C                        cmp #$4C
00556Cr 2  D0 29                        bne _printing_done
00556Er 2               
00556Er 2                               ; We have a branch.  See if it's a string by looking for
00556Er 2                               ; a JSR sliteral_runtime at the jump target address.
00556Er 2                               ; The target address is in scratch+1 and scratch+2
00556Er 2                               ; Use scratch+3 and scratch+4 here as we need to move
00556Er 2                               ; the pointer.
00556Er 2  A5 rr                        lda scratch+1   ; Copy the pointer.
005570r 2  85 rr                        sta scratch+3
005572r 2  A5 rr                        lda scratch+2
005574r 2  85 rr                        sta scratch+4
005576r 2               
005576r 2                               ; Get the first byte at the jmp target address.
005576r 2  B2 rr                        lda (scratch+3)
005578r 2               
005578r 2  C9 20                        cmp #$20 ; check for JSR
00557Ar 2  D0 1B                        bne _printing_done
00557Cr 2                               ; Next byte
00557Cr 2  E6 rr                        inc scratch+3
00557Er 2  D0 02                        bne @l1
005580r 2  E6 rr                        inc scratch+4
005582r 2               @l1:
005582r 2                               ; Check for string literal runtime
005582r 2  B2 rr                        lda (scratch+3)
005584r 2               
005584r 2  C9 rr                        cmp #<sliteral_runtime
005586r 2  D0 0F                        bne _printing_done
005588r 2                               ; Next byte
005588r 2  E6 rr                        inc scratch+3
00558Ar 2  D0 02                        bne @l2
00558Cr 2  E6 rr                        inc scratch+4
00558Er 2               @l2:
00558Er 2  B2 rr                        lda (scratch+3)
005590r 2               
005590r 2  C9 rr                        cmp #>sliteral_runtime
005592r 2  D0 03                        bne _printing_done
005594r 2               
005594r 2                               ; It's a string literal jump.
005594r 2  20 rr rr                     jsr disasm_sliteral_jump
005597r 2               _printing_done:
005597r 2  20 rr rr                     jsr xt_cr
00559Ar 2               
00559Ar 2                               ; Housekeeping: Next byte
00559Ar 2  F6 02                        inc 2,x
00559Cr 2  D0 02                        bne @l3
00559Er 2  F6 03                        inc 3,x                 ; ( addr+1 u )
0055A0r 2               @l3:
0055A0r 2  20 rr rr                     jsr xt_one_minus        ; ( addr+1 u-1 )
0055A3r 2               
0055A3r 2  B5 00                        lda 0,x                 ; All done?
0055A5r 2  15 01                        ora 1,x
0055A7r 2  F0 07                        beq @done
0055A9r 2               
0055A9r 2  B5 01                        lda 1,x                 ; Catch mid-instruction ranges
0055ABr 2  30 03                        bmi @done
0055ADr 2               
0055ADr 2  4C rr rr                     jmp _byte_loop          ; out of range for BRA
0055B0r 2               @done:
0055B0r 2                               ; Clean up and leave
0055B0r 2  4C rr rr                     jmp xt_two_drop         ; JSR/RTS
0055B3r 2               
0055B3r 2               ; Handlers for various special disassembled instructions:
0055B3r 2               ; String literal handler (both for inline strings and sliteral)
0055B3r 2               disasm_sliteral_jump:
0055B3r 2                               ; If we get here, we are at the jump for a constant string.
0055B3r 2                               ; Strings are compiled into the dictionary like so:
0055B3r 2                               ;           jmp a
0055B3r 2                               ;           <string data bytes>
0055B3r 2                               ;  a -->    jsr sliteral_runtime
0055B3r 2                               ;           <string address>
0055B3r 2                               ;           <string length>
0055B3r 2                               ;
0055B3r 2                               ; We have ( addr n ) on the stack where addr is the last
0055B3r 2                               ; byte of the address a in the above jmp instruction.
0055B3r 2                               ; Address a is in scratch+1 scratch+2.
0055B3r 2               
0055B3r 2                               ; Determine the distance of the jump so we end on the byte
0055B3r 2                               ; just before the JSR (sets us up for SLITERAL on next loop)
0055B3r 2  20 rr rr                     jsr xt_swap
0055B6r 2  CA                           dex
0055B7r 2  CA                           dex
0055B8r 2  A5 rr                        lda scratch+1
0055BAr 2  95 00                        sta 0,x
0055BCr 2  A5 rr                        lda scratch+2
0055BEr 2  95 01                        sta 1,x
0055C0r 2  20 rr rr                     jsr xt_swap
0055C3r 2  20 rr rr                     jsr xt_minus
0055C6r 2  20 rr rr                     jsr xt_one_minus
0055C9r 2                               ; (n jump_distance)
0055C9r 2                               ; Subtract the jump distance from the bytes left.
0055C9r 2  20 rr rr                     jsr xt_minus
0055CCr 2                               ; ( new_n )
0055CCr 2                               ; Move to one byte before the target address
0055CCr 2  CA                           dex
0055CDr 2  CA                           dex
0055CEr 2  A5 rr                        lda scratch+1
0055D0r 2  95 00                        sta 0,x
0055D2r 2  A5 rr                        lda scratch+2
0055D4r 2  95 01                        sta 1,x
0055D6r 2  20 rr rr                     jsr xt_one_minus
0055D9r 2  20 rr rr                     jsr xt_swap ; ( new_addr new_n )
0055DCr 2  60                           rts
0055DDr 2               
0055DDr 2               ; String literal handler
0055DDr 2               disasm_sliteral:
0055DDr 2  A9 53                        lda #'S'
0055DFr 2  20 rr rr                     jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
0055E2r 2  A9 0D                        lda #str_disasm_lit     ; "LITERAL "
0055E4r 2  20 rr rr                     jsr print_string_no_lf
0055E7r 2               
0055E7r 2                               ; ( addr u ) address of last byte of JSR address and bytes left on the stack.
0055E7r 2                               ; We need to print the two values just after addr and move along two bytes
0055E7r 2                               ; for each value.
0055E7r 2  20 rr rr                     jsr xt_swap             ; switch to (u addr)
0055EAr 2  20 rr rr                     jsr xt_one_plus
0055EDr 2               
0055EDr 2  20 rr rr                     jsr xt_dup
0055F0r 2  20 rr rr                     jsr xt_fetch
0055F3r 2  20 rr rr                     jsr xt_u_dot            ; Print the address of the string
0055F6r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
0055F6r 2  20 rr rr                     jsr xt_two
0055F9r 2  20 rr rr                     jsr xt_plus
0055FCr 2               
0055FCr 2  20 rr rr                     jsr xt_dup
0055FFr 2  20 rr rr                     jsr xt_question         ; Print the length of the string
005602r 2                               ; Move along to the very last byte of the data.
005602r 2  20 rr rr                     jsr xt_one_plus
005605r 2               
005605r 2                               ; ( u addr+4 )
005605r 2                               ; Fix up the number of bytes left.
005605r 2  20 rr rr                     jsr xt_swap            ; ( addr+4 u )
005608r 2  CA                           dex
005609r 2  CA                           dex
00560Ar 2  A9 04                        lda #4
00560Cr 2  95 00                        sta 0,x
00560Er 2  74 01                        stz 1,x
005610r 2  20 rr rr                     jsr xt_minus            ; ( addr+4 u-4 )
005613r 2  60                           rts
005614r 2               
005614r 2               
005614r 2               ; 0BRANCH handler
005614r 2               disasm_0branch:
005614r 2  A9 30                        lda #'0'
005616r 2  20 rr rr                     jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
005619r 2                               ; All other processing is identical, so fall into BRANCH handler
005619r 2               ; BRANCH handler
005619r 2               disasm_branch:
005619r 2  A9 0F                        lda #str_disasm_bra
00561Br 2  20 rr rr                     jsr print_string_no_lf ; "BRANCH "
00561Er 2                               ; The address after the 0BRANCH is handled the same as a literal.
00561Er 2  80 05                        bra disasm_print_literal
005620r 2               
005620r 2               ; Literal handler
005620r 2               disasm_literal:
005620r 2  A9 0D                        lda #str_disasm_lit
005622r 2  20 rr rr                     jsr print_string_no_lf ; "LITERAL "
005625r 2               disasm_print_literal:
005625r 2                               ; ( addr u ) address of last byte of JSR and bytes left on the stack.
005625r 2                               ; We need to print the value just after the address and move along two bytes.
005625r 2  20 rr rr                     jsr xt_swap ; switch to (u addr)
005628r 2  20 rr rr                     jsr xt_one_plus
00562Br 2               
00562Br 2  20 rr rr                     jsr xt_dup
00562Er 2  20 rr rr                     jsr xt_question ; Print the value at the adress
005631r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
005631r 2  20 rr rr                     jsr xt_one_plus
005634r 2  20 rr rr                     jsr xt_swap ; (addr+2 u)
005637r 2  20 rr rr                     jsr xt_one_minus
00563Ar 2  20 rr rr                     jsr xt_one_minus ; (addr+2 u-2)
00563Dr 2  60                           rts
00563Er 2               
00563Er 2               ; JSR handler
00563Er 2               disasm_jsr:
00563Er 2                               ; The address of the JSR is in scratch+1 and scratch+2.
00563Er 2                               ; The current stack is already ( addr u ) where addr is the address of the last byte of
00563Er 2                               ; the JSR target address, and we want to leave it like that so moving on to the next byte
00563Er 2                               ; works properly.
00563Er 2                               ; Put the target address on the stack and see if it's an XT.
00563Er 2  CA                           dex
00563Fr 2  CA                           dex
005640r 2  A5 rr                        lda scratch+1
005642r 2  95 00                        sta 0,x
005644r 2  A5 rr                        lda scratch+2
005646r 2  95 01                        sta 1,x
005648r 2                               ; ( xt )
005648r 2  20 rr rr                     jsr xt_int_to_name
00564Br 2                               ; int>name returns zero if we just don't know.
00564Br 2  B5 00                        lda 0,x
00564Dr 2  15 01                        ora 1,x
00564Fr 2  F0 07                        beq _disasm_no_nt
005651r 2                               ; We now have a name token ( nt ) on the stack.
005651r 2                               ; Change it into the name and print it.
005651r 2  20 rr rr                     jsr xt_name_to_string
005654r 2  20 rr rr                     jsr xt_type
005657r 2  60                           rts
005658r 2               
005658r 2               _disasm_no_nt:
005658r 2  20 rr rr                     jsr xt_drop ; the 0 indicating no name token
00565Br 2                               ; See if the address is between underflow_1 and underflow_4,
00565Br 2                               ; inclusive.
00565Br 2  CA                           dex
00565Cr 2  CA                           dex
00565Dr 2  A5 rr                        lda scratch+1
00565Fr 2  95 00                        sta 0,x
005661r 2  A5 rr                        lda scratch+2
005663r 2  95 01                        sta 1,x
005665r 2                               ; ( jsr_address )
005665r 2                               ; Compare to lower underflow address
005665r 2  CA                           dex
005666r 2  CA                           dex
005667r 2  A9 rr                        lda #<underflow_1
005669r 2  95 00                        sta 0,x
00566Br 2  A9 rr                        lda #>underflow_1
00566Dr 2  95 01                        sta 1,x
00566Fr 2  20 rr rr                     jsr compare_16bit
005672r 2  F0 02                        beq _disasm_jsr_uflow_check_upper
005674r 2  B0 14                        bcs _disasm_jsr_unknown
005676r 2               _disasm_jsr_uflow_check_upper:
005676r 2                               ; Compare to upper underflow addresses
005676r 2  A9 rr                        lda #<underflow_4
005678r 2  95 00                        sta 0,x
00567Ar 2  A9 rr                        lda #>underflow_4
00567Cr 2  95 01                        sta 1,x
00567Er 2  20 rr rr                     jsr compare_16bit
005681r 2  F0 02                        beq _disasm_jsr_soc
005683r 2  90 05                        bcc _disasm_jsr_unknown
005685r 2               _disasm_jsr_soc:
005685r 2                               ; It's an underflow check.
005685r 2  A9 0E                        lda #str_disasm_sdc
005687r 2  20 rr rr                     jsr print_string_no_lf  ; "STACK DEPTH CHECK"
00568Ar 2               _disasm_jsr_unknown:
00568Ar 2  20 rr rr                     jsr xt_two_drop
00568Dr 2  60                           rts
00568Er 2               
00568Er 2               
00568Er 2               ; =========================================================
00568Er 2               oc_index_table:
00568Er 2                       ; Lookup table for the instruction data (length of instruction in
00568Er 2                       ; bytes, length of mnemonic in bytes, mnemonic string). This is used by
00568Er 2                       ; the assembler as well.
00568Er 2               
00568Er 2                       ; Opcodes 00-0F
00568Er 2  rr rr rr rr          .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
005692r 2  rr rr rr rr  
005696r 2  rr rr rr rr  
00569Er 2  rr rr rr rr          .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
0056A2r 2  rr rr rr rr  
0056A6r 2  rr rr rr rr  
0056AEr 2               
0056AEr 2                       ; Opcodes 10-1F
0056AEr 2  rr rr rr rr          .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
0056B2r 2  rr rr rr rr  
0056B6r 2  rr rr rr rr  
0056BEr 2  rr rr rr rr          .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
0056C2r 2  rr rr rr rr  
0056C6r 2  rr rr rr rr  
0056CEr 2               
0056CEr 2                       ; Opcodes 20-2F
0056CEr 2  rr rr rr rr          .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
0056D2r 2  rr rr rr rr  
0056D6r 2  rr rr rr rr  
0056DEr 2  rr rr rr rr          .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
0056E2r 2  rr rr rr rr  
0056E6r 2  rr rr rr rr  
0056EEr 2               
0056EEr 2                       ; Opcodes 30-3F
0056EEr 2  rr rr rr rr          .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
0056F2r 2  rr rr rr rr  
0056F6r 2  rr rr rr rr  
0056FEr 2  rr rr rr rr          .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
005702r 2  rr rr rr rr  
005706r 2  rr rr rr rr  
00570Er 2               
00570Er 2                       ; Opcodes 40-4F
00570Er 2  rr rr rr rr          .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
005712r 2  rr rr rr rr  
005716r 2  rr rr rr rr  
00571Er 2  rr rr rr rr          .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
005722r 2  rr rr rr rr  
005726r 2  rr rr rr rr  
00572Er 2               
00572Er 2                       ; Opcodes 50-5F
00572Er 2  rr rr rr rr          .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
005732r 2  rr rr rr rr  
005736r 2  rr rr rr rr  
00573Er 2  rr rr rr rr          .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
005742r 2  rr rr rr rr  
005746r 2  rr rr rr rr  
00574Er 2               
00574Er 2                       ; Opcodes 60-6F
00574Er 2  rr rr rr rr          .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
005752r 2  rr rr rr rr  
005756r 2  rr rr rr rr  
00575Er 2  rr rr rr rr          .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
005762r 2  rr rr rr rr  
005766r 2  rr rr rr rr  
00576Er 2               
00576Er 2                       ; Opcodes 70-7F
00576Er 2  rr rr rr rr          .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
005772r 2  rr rr rr rr  
005776r 2  rr rr rr rr  
00577Er 2  rr rr rr rr          .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
005782r 2  rr rr rr rr  
005786r 2  rr rr rr rr  
00578Er 2               
00578Er 2                       ; Opcodes 80-8F
00578Er 2  rr rr rr rr          .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
005792r 2  rr rr rr rr  
005796r 2  rr rr rr rr  
00579Er 2  rr rr rr rr          .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
0057A2r 2  rr rr rr rr  
0057A6r 2  rr rr rr rr  
0057AEr 2               
0057AEr 2                       ; Opcodes 90-9F
0057AEr 2  rr rr rr rr          .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
0057B2r 2  rr rr rr rr  
0057B6r 2  rr rr rr rr  
0057BEr 2  rr rr rr rr          .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
0057C2r 2  rr rr rr rr  
0057C6r 2  rr rr rr rr  
0057CEr 2               
0057CEr 2                       ; Opcodes A0-AF
0057CEr 2  rr rr rr rr          .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
0057D2r 2  rr rr rr rr  
0057D6r 2  rr rr rr rr  
0057DEr 2  rr rr rr rr          .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
0057E2r 2  rr rr rr rr  
0057E6r 2  rr rr rr rr  
0057EEr 2               
0057EEr 2                       ; Opcodes B0-BF
0057EEr 2  rr rr rr rr          .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
0057F2r 2  rr rr rr rr  
0057F6r 2  rr rr rr rr  
0057FEr 2  rr rr rr rr          .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
005802r 2  rr rr rr rr  
005806r 2  rr rr rr rr  
00580Er 2               
00580Er 2                       ; Opcodes C0-CF
00580Er 2  rr rr rr rr          .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
005812r 2  rr rr rr rr  
005816r 2  rr rr rr rr  
00581Er 2  rr rr rr rr          .word occ8, occ9, occa, oc__, occc, occd, occe, occf
005822r 2  rr rr rr rr  
005826r 2  rr rr rr rr  
00582Er 2               
00582Er 2                       ; Opcodes D0-DF
00582Er 2  rr rr rr rr          .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
005832r 2  rr rr rr rr  
005836r 2  rr rr rr rr  
00583Er 2  rr rr rr rr          .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
005842r 2  rr rr rr rr  
005846r 2  rr rr rr rr  
00584Er 2               
00584Er 2                       ; Opcodes E0-EF
00584Er 2  rr rr rr rr          .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
005852r 2  rr rr rr rr  
005856r 2  rr rr rr rr  
00585Er 2  rr rr rr rr          .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
005862r 2  rr rr rr rr  
005866r 2  rr rr rr rr  
00586Er 2               
00586Er 2                       ; Opcodes F0-FF
00586Er 2  rr rr rr rr          .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
005872r 2  rr rr rr rr  
005876r 2  rr rr rr rr  
00587Er 2  rr rr rr rr          .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
005882r 2  rr rr rr rr  
005886r 2  rr rr rr rr  
00588Er 2               
00588Er 2               
00588Er 2               ; =========================================================
00588Er 2               oc_table:
00588Er 2                       ; Opcode data table for the disassember, which is also used by the
00588Er 2                       ; assembler. Each entry starts with a "lengths byte":
00588Er 2               
00588Er 2                       ;       bit 7-6:  Length of instruction in bytes (1 to 3 for the 65c02)
00588Er 2                       ;       bit 5-3:  unused
00588Er 2                       ;       bit 2-0:  Length of mnemonic in chars (3 to 7)
00588Er 2               
00588Er 2                       ; To convert a line in this table to a Forth string of the mnemonic,
00588Er 2                       ; use the COUNT word on the address of the lengths byte to get
00588Er 2                       ; ( addr u ) and then mask all but the bits 2-0 of the TOS.
00588Er 2               
00588Er 2                       ; To make debugging easier, we keep the raw numbers for the lengths of
00588Er 2                       ; the instruction and mnemonicis and let the assembler do the math
00588Er 2                       ; required to shift and add. The actual mnemonic string follows after
00588Er 2                       ; and is not zero terminated because we have the length in bits 2 to 0.
00588Er 2               
00588Er 2  83 62 72 6B  	oc00:	.byte 2*64+3, "brk"              ; enforce the signature byte
005892r 2  87 6F 72 61  	oc01:	.byte 2*64+7, "ora.zxi"
005896r 2  2E 7A 78 69  
00589Ar 2               ;      (oc02)
00589Ar 2               ;      (oc03)
00589Ar 2  85 74 73 62          oc04:   .byte 2*64+5, "tsb.z"
00589Er 2  2E 7A        
0058A0r 2  85 6F 72 61  	oc05:	.byte 2*64+5, "ora.z"
0058A4r 2  2E 7A        
0058A6r 2  85 61 73 6C  	oc06:	.byte 2*64+5, "asl.z"
0058AAr 2  2E 7A        
0058ACr 2               ;      (oc07)
0058ACr 2  43 70 68 70  	oc08:	.byte 1*64+3, "php"
0058B0r 2  85 6F 72 61  	oc09:	.byte 2*64+5, "ora.#"
0058B4r 2  2E 23        
0058B6r 2  45 61 73 6C  	oc0a:	.byte 1*64+5, "asl.a"
0058BAr 2  2E 61        
0058BCr 2               ;      (oc0b)
0058BCr 2  C3 74 73 62  	oc0c:	.byte 3*64+3, "tsb"
0058C0r 2  C3 6F 72 61  	oc0d:	.byte 3*64+3, "ora"
0058C4r 2  C3 61 73 6C  	oc0e:	.byte 3*64+3, "asl"
0058C8r 2  C4 62 62 72  	oc0f:	.byte 3*64+4, "bbr0"
0058CCr 2  30           
0058CDr 2               
0058CDr 2  83 62 70 6C  	oc10:	.byte 2*64+3, "bpl"
0058D1r 2  87 6F 72 61  	oc11:	.byte 2*64+7, "ora.ziy"
0058D5r 2  2E 7A 69 79  
0058D9r 2  86 6F 72 61  	oc12:	.byte 2*64+6, "ora.zi"
0058DDr 2  2E 7A 69     
0058E0r 2               ;      (oc13:)
0058E0r 2  85 74 72 62  	oc14:	.byte 2*64+5, "trb.z"
0058E4r 2  2E 7A        
0058E6r 2  86 6F 72 61  	oc15:	.byte 2*64+6, "ora.zx"
0058EAr 2  2E 7A 78     
0058EDr 2  86 61 73 6C  	oc16:	.byte 2*64+6, "asl.zx"
0058F1r 2  2E 7A 78     
0058F4r 2  86 72 6D 62  	oc17:	.byte 2*64+6, "rmb1.z"
0058F8r 2  31 2E 7A     
0058FBr 2  43 63 6C 63  	oc18:	.byte 1*64+3, "clc"
0058FFr 2  C5 6F 72 61  	oc19:	.byte 3*64+5, "ora.y"
005903r 2  2E 79        
005905r 2  45 69 6E 63  	oc1a:	.byte 1*64+5, "inc.a"
005909r 2  2E 61        
00590Br 2               ;      (oc1b:)
00590Br 2  C3 74 72 62  	oc1c:	.byte 3*64+3, "trb"
00590Fr 2  C5 6F 72 61  	oc1d:	.byte 3*64+5, "ora.x"
005913r 2  2E 78        
005915r 2               ;      (oc1e:)
005915r 2  C5 61 73 6C  	oc1f:	.byte 3*64+5, "asl.x"
005919r 2  2E 78        
00591Br 2               
00591Br 2  C3 6A 73 72  	oc20:	.byte 3*64+3, "jsr"
00591Fr 2  87 61 6E 64  	oc21:	.byte 2*64+7, "and.zxi"
005923r 2  2E 7A 78 69  
005927r 2               ;      (oc22:)
005927r 2               ;      (oc23:)
005927r 2  85 62 69 74  	oc24:	.byte 2*64+5, "bit.z"
00592Br 2  2E 7A        
00592Dr 2  85 61 6E 64  	oc25:	.byte 2*64+5, "and.z"
005931r 2  2E 7A        
005933r 2  85 72 6F 6C  	oc26:	.byte 2*64+5, "rol.z"
005937r 2  2E 7A        
005939r 2  86 72 6D 62  	oc27:	.byte 2*64+6, "rmb2.z"
00593Dr 2  32 2E 7A     
005940r 2  43 70 6C 70  	oc28:	.byte 1*64+3, "plp"
005944r 2  85 61 6E 64  	oc29:	.byte 2*64+5, "and.#"
005948r 2  2E 23        
00594Ar 2  45 72 6F 6C  	oc2a:	.byte 1*64+5, "rol.a"
00594Er 2  2E 61        
005950r 2               ;      (oc2b:)
005950r 2  C3 62 69 74  	oc2c:	.byte 3*64+3, "bit"
005954r 2  C4 61 6E 64  	oc2d:	.byte 3*64+4, "and."
005958r 2  2E           
005959r 2  C3 72 6F 6C  	oc2e:	.byte 3*64+3, "rol"
00595Dr 2  C4 62 62 72  	oc2f:	.byte 3*64+4, "bbr2"
005961r 2  32           
005962r 2               
005962r 2  83 62 6D 69  	oc30:	.byte 2*64+3, "bmi"
005966r 2  87 61 6E 64  	oc31:	.byte 2*64+7, "and.ziy"
00596Ar 2  2E 7A 69 79  
00596Er 2  86 61 6E 64  	oc32:	.byte 2*64+6, "and.zi"
005972r 2  2E 7A 69     
005975r 2               ;      (oc33:)
005975r 2  87 62 69 74  	oc34:	.byte 2*64+7, "bit.zxi"
005979r 2  2E 7A 78 69  
00597Dr 2  86 61 6E 64  	oc35:	.byte 2*64+6, "and.zx"
005981r 2  2E 7A 78     
005984r 2  86 72 6F 6C  	oc36:	.byte 2*64+6, "rol.zx"
005988r 2  2E 7A 78     
00598Br 2  86 72 6D 62  	oc37:	.byte 2*64+6, "rmb3.z"
00598Fr 2  33 2E 7A     
005992r 2  43 73 65 63  	oc38:	.byte 1*64+3, "sec"
005996r 2  C5 61 6E 64  	oc39:	.byte 3*64+5, "and.y"
00599Ar 2  2E 79        
00599Cr 2  45 64 65 63  	oc3a:	.byte 1*64+5, "dec.a"
0059A0r 2  2E 61        
0059A2r 2               ;      (oc3b:)
0059A2r 2  C5 62 69 74  	oc3c:	.byte 3*64+5, "bit.x"
0059A6r 2  2E 78        
0059A8r 2  C5 61 6E 64  	oc3d:	.byte 3*64+5, "and.x"
0059ACr 2  2E 78        
0059AEr 2  C5 72 6F 6C  	oc3e:	.byte 3*64+5, "rol.x"
0059B2r 2  2E 78        
0059B4r 2  C4 62 62 72  	oc3f:	.byte 3*64+4, "bbr3"
0059B8r 2  33           
0059B9r 2               
0059B9r 2  43 72 74 69  	oc40:	.byte 1*64+3, "rti"
0059BDr 2  87 65 6F 72  	oc41:	.byte 2*64+7, "eor.zxi"
0059C1r 2  2E 7A 78 69  
0059C5r 2               ;      (oc42:)
0059C5r 2               ;      (oc43:)
0059C5r 2               ;      (oc44:)
0059C5r 2  85 65 6F 72  	oc45:	.byte 2*64+5, "eor.z"
0059C9r 2  2E 7A        
0059CBr 2  85 6C 73 72  	oc46:	.byte 2*64+5, "lsr.z"
0059CFr 2  2E 7A        
0059D1r 2  86 72 62 6D  	oc47:	.byte 2*64+6, "rbm4.z"
0059D5r 2  34 2E 7A     
0059D8r 2  43 70 68 61  	oc48:	.byte 1*64+3, "pha"
0059DCr 2  85 65 6F 72  	oc49:	.byte 2*64+5, "eor.#"
0059E0r 2  2E 23        
0059E2r 2  45 6C 73 72  	oc4a:	.byte 1*64+5, "lsr.a"
0059E6r 2  2E 61        
0059E8r 2               ;      (oc4b:)
0059E8r 2  C3 6A 6D 70  	oc4c:	.byte 3*64+3, "jmp"
0059ECr 2  C3 65 6F 72  	oc4d:	.byte 3*64+3, "eor"
0059F0r 2  C3 6C 73 72  	oc4e:	.byte 3*64+3, "lsr"
0059F4r 2  C4 62 62 72  	oc4f:	.byte 3*64+4, "bbr4"
0059F8r 2  34           
0059F9r 2               
0059F9r 2  83 62 76 63  	oc50:	.byte 2*64+3, "bvc"
0059FDr 2  87 65 6F 72  	oc51:	.byte 2*64+7, "eor.ziy"
005A01r 2  2E 7A 69 79  
005A05r 2  86 65 6F 72  	oc52:	.byte 2*64+6, "eor.zi"
005A09r 2  2E 7A 69     
005A0Cr 2               ;      (oc53:)
005A0Cr 2               ;      (oc54:)
005A0Cr 2  86 65 6F 72  	oc55:	.byte 2*64+6, "eor.zx"
005A10r 2  2E 7A 78     
005A13r 2  86 6C 73 72  	oc56:	.byte 2*64+6, "lsr.zx"
005A17r 2  2E 7A 78     
005A1Ar 2  86 72 62 6D  	oc57:	.byte 2*64+6, "rbm5.z"
005A1Er 2  35 2E 7A     
005A21r 2  43 63 6C 69  	oc58:	.byte 1*64+3, "cli"
005A25r 2  C5 65 6F 72  	oc59:	.byte 3*64+5, "eor.y"
005A29r 2  2E 79        
005A2Br 2  43 70 68 79  	oc5a:	.byte 1*64+3, "phy"
005A2Fr 2               ;      (oc5b:)
005A2Fr 2               ;      (oc5c:)
005A2Fr 2  C5 65 6F 72  	oc5d:	.byte 3*64+5, "eor.x"
005A33r 2  2E 78        
005A35r 2  C5 6C 73 72  	oc5e:	.byte 3*64+5, "lsr.x"
005A39r 2  2E 78        
005A3Br 2  C4 62 62 72  	oc5f:	.byte 3*64+4, "bbr5"
005A3Fr 2  35           
005A40r 2               
005A40r 2  43 72 74 73  	oc60:	.byte 1*64+3, "rts"
005A44r 2  87 61 64 63  	oc61:	.byte 2*64+7, "adc.zxi"
005A48r 2  2E 7A 78 69  
005A4Cr 2               ;      (oc62:)
005A4Cr 2               ;      (oc63:)
005A4Cr 2  85 73 74 7A  	oc64:	.byte 2*64+5, "stz.z"
005A50r 2  2E 7A        
005A52r 2  85 61 64 63  	oc65:	.byte 2*64+5, "adc.z"
005A56r 2  2E 7A        
005A58r 2  85 72 6F 72  	oc66:	.byte 2*64+5, "ror.z"
005A5Cr 2  2E 7A        
005A5Er 2  86 72 6D 62  	oc67:	.byte 2*64+6, "rmb6.z"
005A62r 2  36 2E 7A     
005A65r 2  43 70 6C 61  	oc68:	.byte 1*64+3, "pla"
005A69r 2  85 61 64 63  	oc69:	.byte 2*64+5, "adc.#"
005A6Dr 2  2E 23        
005A6Fr 2  45 72 6F 72  	oc6a:	.byte 1*64+5, "ror.a"
005A73r 2  2E 61        
005A75r 2               ;      (oc6b:)
005A75r 2  C5 6A 6D 70  	oc6c:	.byte 3*64+5, "jmp.i"
005A79r 2  2E 69        
005A7Br 2  C3 61 64 63  	oc6d:	.byte 3*64+3, "adc"
005A7Fr 2  C3 72 6F 72  	oc6e:	.byte 3*64+3, "ror"
005A83r 2  C4 62 62 72  	oc6f:	.byte 3*64+4, "bbr6"
005A87r 2  36           
005A88r 2               
005A88r 2  83 62 76 73  	oc70:	.byte 2*64+3, "bvs"
005A8Cr 2  87 61 64 63  	oc71:	.byte 2*64+7, "adc.ziy"
005A90r 2  2E 7A 69 79  
005A94r 2  86 61 64 63  	oc72:	.byte 2*64+6, "adc.zi"
005A98r 2  2E 7A 69     
005A9Br 2               ;      (oc73:)
005A9Br 2  86 73 74 7A  	oc74:	.byte 2*64+6, "stz.zx"
005A9Fr 2  2E 7A 78     
005AA2r 2  86 61 64 63  	oc75:	.byte 2*64+6, "adc.zx"
005AA6r 2  2E 7A 78     
005AA9r 2  86 72 6F 72  	oc76:	.byte 2*64+6, "ror.zx"
005AADr 2  2E 7A 78     
005AB0r 2  86 72 6D 62  	oc77:	.byte 2*64+6, "rmb7.z"
005AB4r 2  37 2E 7A     
005AB7r 2  43 73 65 69  	oc78:	.byte 1*64+3, "sei"
005ABBr 2  C5 61 64 63  	oc79:	.byte 3*64+5, "adc.y"
005ABFr 2  2E 79        
005AC1r 2  43 70 6C 79  	oc7a:	.byte 1*64+3, "ply"
005AC5r 2               ;      (oc7b:)
005AC5r 2  C6 6A 6D 70  	oc7c:	.byte 3*64+6, "jmp.xi"
005AC9r 2  2E 78 69     
005ACCr 2  C5 61 64 63  	oc7d:	.byte 3*64+5, "adc.x"
005AD0r 2  2E 78        
005AD2r 2  C5 72 6F 72  	oc7e:	.byte 3*64+5, "ror.x"
005AD6r 2  2E 78        
005AD8r 2  C4 62 62 72  	oc7f:	.byte 3*64+4, "bbr7"
005ADCr 2  37           
005ADDr 2               
005ADDr 2  83 62 72 61  	oc80:	.byte 2*64+3, "bra"
005AE1r 2  87 73 74 61  	oc81:	.byte 2*64+7, "sta.zxi"
005AE5r 2  2E 7A 78 69  
005AE9r 2               ;      (oc82:)
005AE9r 2               ;      (oc83:)
005AE9r 2  85 73 74 79  	oc84:	.byte 2*64+5, "sty.z"
005AEDr 2  2E 7A        
005AEFr 2  85 73 74 61  	oc85:	.byte 2*64+5, "sta.z"
005AF3r 2  2E 7A        
005AF5r 2  85 73 74 78  	oc86:	.byte 2*64+5, "stx.z"
005AF9r 2  2E 7A        
005AFBr 2               ;      (oc87:)
005AFBr 2  43 64 65 79  	oc88:	.byte 1*64+3, "dey"
005AFFr 2  85 62 69 74  	oc89:	.byte 2*64+5, "bit.#"
005B03r 2  2E 23        
005B05r 2  43 74 78 61  	oc8a:	.byte 1*64+3, "txa"
005B09r 2               ;      (oc8b:)
005B09r 2  C3 73 74 79  	oc8c:	.byte 3*64+3, "sty"
005B0Dr 2  C3 73 74 61  	oc8d:	.byte 3*64+3, "sta"
005B11r 2  C3 73 74 78  	oc8e:	.byte 3*64+3, "stx"
005B15r 2  C4 62 62 73  	oc8f:	.byte 3*64+4, "bbs0"
005B19r 2  30           
005B1Ar 2               
005B1Ar 2  83 62 63 63  	oc90:	.byte 2*64+3, "bcc"
005B1Er 2  87 73 74 61  	oc91:	.byte 2*64+7, "sta.ziy"
005B22r 2  2E 7A 69 79  
005B26r 2  86 73 74 61  	oc92:	.byte 2*64+6, "sta.zi"
005B2Ar 2  2E 7A 69     
005B2Dr 2               ;      (oc93:)
005B2Dr 2  86 73 74 79  	oc94:	.byte 2*64+6, "sty.zx"
005B31r 2  2E 7A 78     
005B34r 2  86 73 74 61  	oc95:	.byte 2*64+6, "sta.zx"
005B38r 2  2E 7A 78     
005B3Br 2  86 73 74 78  	oc96:	.byte 2*64+6, "stx.zy"
005B3Fr 2  2E 7A 79     
005B42r 2  86 73 6D 62  	oc97:	.byte 2*64+6, "smb1.z"
005B46r 2  31 2E 7A     
005B49r 2  43 74 79 61  	oc98:	.byte 1*64+3, "tya"
005B4Dr 2  C5 73 74 61  	oc99:	.byte 3*64+5, "sta.y"
005B51r 2  2E 79        
005B53r 2  43 74 78 73  	oc9a:	.byte 1*64+3, "txs"
005B57r 2               ;      (oc9b:)
005B57r 2  C3 73 74 7A  	oc9c:	.byte 3*64+3, "stz"
005B5Br 2  C5 73 74 61  	oc9d:	.byte 3*64+5, "sta.x"
005B5Fr 2  2E 78        
005B61r 2  C5 73 74 7A  	oc9e:	.byte 3*64+5, "stz.x"
005B65r 2  2E 78        
005B67r 2  C4 62 62 73  	oc9f:	.byte 3*64+4, "bbs1"
005B6Br 2  31           
005B6Cr 2               
005B6Cr 2  85 6C 64 79  	oca0:	.byte 2*64+5, "ldy.#"
005B70r 2  2E 23        
005B72r 2  87 6C 64 61  	oca1:	.byte 2*64+7, "lda.zxi"
005B76r 2  2E 7A 78 69  
005B7Ar 2  85 6C 64 78  	oca2:	.byte 2*64+5, "ldx.#"
005B7Er 2  2E 23        
005B80r 2               ;      (oca3:)
005B80r 2  85 6C 64 79  	oca4:	.byte 2*64+5, "ldy.z"
005B84r 2  2E 7A        
005B86r 2  85 6C 64 61  	oca5:	.byte 2*64+5, "lda.z"
005B8Ar 2  2E 7A        
005B8Cr 2  85 6C 64 78  	oca6:	.byte 2*64+5, "ldx.z"
005B90r 2  2E 7A        
005B92r 2  86 73 6D 62  	oca7:	.byte 2*64+6, "smb2.z"
005B96r 2  32 2E 7A     
005B99r 2  43 74 61 79  	oca8:	.byte 1*64+3, "tay"
005B9Dr 2  85 6C 64 61  	oca9:	.byte 2*64+5, "lda.#"
005BA1r 2  2E 23        
005BA3r 2  43 74 61 78  	ocaa:	.byte 1*64+3, "tax"
005BA7r 2               ;      (ocab:)
005BA7r 2  C3 6C 64 79  	ocac:	.byte 3*64+3, "ldy"
005BABr 2  C3 6C 64 61  	ocad:	.byte 3*64+3, "lda"
005BAFr 2  C3 6C 64 78  	ocae:	.byte 3*64+3, "ldx"
005BB3r 2  C4 62 62 73  	ocaf:	.byte 3*64+4, "bbs2"
005BB7r 2  32           
005BB8r 2               
005BB8r 2  83 62 63 73  	ocb0:	.byte 2*64+3, "bcs"
005BBCr 2  87 6C 64 61  	ocb1:	.byte 2*64+7, "lda.ziy"
005BC0r 2  2E 7A 69 79  
005BC4r 2  86 6C 64 61  	ocb2:	.byte 2*64+6, "lda.zi"
005BC8r 2  2E 7A 69     
005BCBr 2               ;      (ocb3:)
005BCBr 2  86 6C 64 79  	ocb4:	.byte 2*64+6, "ldy.zx"
005BCFr 2  2E 7A 78     
005BD2r 2  86 6C 64 61  	ocb5:	.byte 2*64+6, "lda.zx"
005BD6r 2  2E 7A 78     
005BD9r 2  86 6C 64 78  	ocb6:	.byte 2*64+6, "ldx.zy"
005BDDr 2  2E 7A 79     
005BE0r 2  86 73 6D 62  	ocb7:	.byte 2*64+6, "smb3.z"
005BE4r 2  33 2E 7A     
005BE7r 2  43 63 6C 76  	ocb8:	.byte 1*64+3, "clv"
005BEBr 2  C5 6C 64 61  	ocb9:	.byte 3*64+5, "lda.y"
005BEFr 2  2E 79        
005BF1r 2  43 74 73 78  	ocba:	.byte 1*64+3, "tsx"
005BF5r 2               ;      (ocbb:)
005BF5r 2  C5 6C 64 79  	ocbc:	.byte 3*64+5, "ldy.x"
005BF9r 2  2E 78        
005BFBr 2  C5 6C 64 61  	ocbd:	.byte 3*64+5, "lda.x"
005BFFr 2  2E 78        
005C01r 2  C5 6C 64 78  	ocbe:	.byte 3*64+5, "ldx.y"
005C05r 2  2E 79        
005C07r 2  C4 62 62 73  	ocbf:	.byte 3*64+4, "bbs4"
005C0Br 2  34           
005C0Cr 2               
005C0Cr 2  85 63 70 79  	occ0:	.byte 2*64+5, "cpy.#"
005C10r 2  2E 23        
005C12r 2  87 63 6D 70  	occ1:	.byte 2*64+7, "cmp.zxi"
005C16r 2  2E 7A 78 69  
005C1Ar 2               ;      (occ2:)
005C1Ar 2               ;      (occ3:)
005C1Ar 2  85 63 70 79  	occ4:	.byte 2*64+5, "cpy.z"
005C1Er 2  2E 7A        
005C20r 2  85 63 6D 70  	occ5:	.byte 2*64+5, "cmp.z"
005C24r 2  2E 7A        
005C26r 2  85 64 65 63  	occ6:	.byte 2*64+5, "dec.z"
005C2Ar 2  2E 7A        
005C2Cr 2  86 73 6D 62  	occ7:	.byte 2*64+6, "smb4.z"
005C30r 2  34 2E 7A     
005C33r 2  43 69 6E 79  	occ8:	.byte 1*64+3, "iny"
005C37r 2  85 63 6D 70  	occ9:	.byte 2*64+5, "cmp.#"
005C3Br 2  2E 23        
005C3Dr 2  43 64 65 78  	occa:	.byte 1*64+3, "dex"
005C41r 2               ;      (occb:)
005C41r 2  C3 63 70 79  	occc:	.byte 3*64+3, "cpy"
005C45r 2  C3 63 6D 70  	occd:	.byte 3*64+3, "cmp"
005C49r 2  C3 64 65 63  	occe:	.byte 3*64+3, "dec"
005C4Dr 2  C4 62 62 73  	occf:	.byte 3*64+4, "bbs4"
005C51r 2  34           
005C52r 2               
005C52r 2  83 62 6E 65  	ocd0:	.byte 2*64+3, "bne"
005C56r 2  87 63 6D 70  	ocd1:	.byte 2*64+7, "cmp.ziy"
005C5Ar 2  2E 7A 69 79  
005C5Er 2  86 63 6D 70  	ocd2:	.byte 2*64+6, "cmp.zi"
005C62r 2  2E 7A 69     
005C65r 2               ;      (ocd3:)
005C65r 2               ;      (ocd4:)
005C65r 2  86 63 6D 70  	ocd5:	.byte 2*64+6, "cmp.zx"
005C69r 2  2E 7A 78     
005C6Cr 2  86 64 65 63  	ocd6:	.byte 2*64+6, "dec.zx"
005C70r 2  2E 7A 78     
005C73r 2  86 73 6D 62  	ocd7:	.byte 2*64+6, "smb5.z"
005C77r 2  35 2E 7A     
005C7Ar 2  43 63 6C 64  	ocd8:	.byte 1*64+3, "cld"
005C7Er 2  C5 63 6D 70  	ocd9:	.byte 3*64+5, "cmp.y"
005C82r 2  2E 79        
005C84r 2  43 70 68 78  	ocda:	.byte 1*64+3, "phx"
005C88r 2               ;      (ocdb:)
005C88r 2               ;      (ocdc:)
005C88r 2  C5 63 6D 70  	ocdd:	.byte 3*64+5, "cmp.x"
005C8Cr 2  2E 78        
005C8Er 2  C5 64 65 63  	ocde:	.byte 3*64+5, "dec.x"
005C92r 2  2E 78        
005C94r 2  C4 62 62 73  	ocdf:	.byte 3*64+4, "bbs5"
005C98r 2  35           
005C99r 2               
005C99r 2  85 63 70 78  	oce0:	.byte 2*64+5, "cpx.#"
005C9Dr 2  2E 23        
005C9Fr 2  87 73 62 63  	oce1:	.byte 2*64+7, "sbc.zxi"
005CA3r 2  2E 7A 78 69  
005CA7r 2               ;      (oce2:)
005CA7r 2               ;      (oce3:)
005CA7r 2  85 63 70 78  	oce4:	.byte 2*64+5, "cpx.z"
005CABr 2  2E 7A        
005CADr 2  85 73 62 63  	oce5:	.byte 2*64+5, "sbc.z"
005CB1r 2  2E 7A        
005CB3r 2  85 69 6E 63  	oce6:	.byte 2*64+5, "inc.z"
005CB7r 2  2E 7A        
005CB9r 2  86 73 6D 62  	oce7:	.byte 2*64+6, "smb6.z"
005CBDr 2  36 2E 7A     
005CC0r 2  43 69 6E 78  	oce8:	.byte 1*64+3, "inx"
005CC4r 2  85 73 62 63  	oce9:	.byte 2*64+5, "sbc.#"
005CC8r 2  2E 23        
005CCAr 2  43 6E 6F 70  	ocea:	.byte 1*64+3, "nop"
005CCEr 2               ;      (oceb:)
005CCEr 2  C3 63 70 78  	ocec:	.byte 3*64+3, "cpx"
005CD2r 2  C3 73 62 63  	oced:	.byte 3*64+3, "sbc"
005CD6r 2  C3 69 6E 63  	ocee:	.byte 3*64+3, "inc"
005CDAr 2  C4 62 62 73  	ocef:	.byte 3*64+4, "bbs6"
005CDEr 2  36           
005CDFr 2               
005CDFr 2  83 62 65 71  	ocf0:	.byte 2*64+3, "beq"
005CE3r 2  87 73 62 63  	ocf1:	.byte 2*64+7, "sbc.ziy"
005CE7r 2  2E 7A 69 79  
005CEBr 2  86 73 62 63  	ocf2:	.byte 2*64+6, "sbc.zi"
005CEFr 2  2E 7A 69     
005CF2r 2               ;      (ocf3:)
005CF2r 2               ;      (ocf4:)
005CF2r 2  86 73 62 63  	ocf5:	.byte 2*64+6, "sbc.zx"
005CF6r 2  2E 7A 78     
005CF9r 2  86 69 6E 63  	ocf6:	.byte 2*64+6, "inc.zx"
005CFDr 2  2E 7A 78     
005D00r 2  86 73 6D 62  	ocf7:	.byte 2*64+6, "smb7.z"
005D04r 2  37 2E 7A     
005D07r 2  43 73 65 64  	ocf8:	.byte 1*64+3, "sed"
005D0Br 2  C5 73 62 63  	ocf9:	.byte 3*64+5, "sbc.y"
005D0Fr 2  2E 79        
005D11r 2  43 70 6C 78  	ocfa:	.byte 1*64+3, "plx"
005D15r 2               ;      (ocfb:)
005D15r 2               ;      (ocfc:)
005D15r 2  C5 73 62 63  	ocfd:	.byte 3*64+5, "sbc.x"
005D19r 2  2E 78        
005D1Br 2  C5 69 6E 63  	ocfe:	.byte 3*64+5, "inc.x"
005D1Fr 2  2E 78        
005D21r 2  C4 62 62 73  	ocff:	.byte 3*64+4, "bbs7"
005D25r 2  37           
005D26r 2               
005D26r 2                       ; Common routine for opcodes that are not supported by the 65c02
005D26r 2  01 3F        	oc__:	.byte 1, "?"
005D28r 2               
005D28r 2               ; used to calculate size of assembled disassembler code
005D28r 2               disassembler_end:
005D28r 2               
005D28r 1               .endif
005D28r 1               
005D28r 1               
005D28r 1               platform_bye:
005D28r 1               kernel_init:
005D28r 1                   ; setup IRQ vectors first
005D28r 1  A9 rr            lda #<v_irq
005D2Ar 1  85 rr            sta IRQ_VEC
005D2Cr 1  A9 rr            lda #>v_irq
005D2Er 1  85 rr            sta IRQ_VEC + 1
005D30r 1  A9 rr            lda #<v_nmi
005D32r 1  85 rr            sta NMI_VEC
005D34r 1  A9 rr            lda #>v_nmi
005D36r 1  85 rr            sta NMI_VEC + 1
005D38r 1               
005D38r 1               .ifdef VIA1_BASE
005D38r 1  A9 FF            lda #$FF
005D3Ar 1  8D 82 FF         sta DDRB
005D3Dr 1  8D 83 FF         sta DDRA
005D40r 1  A9 01            lda #1
005D42r 1  8D 80 FF         sta PORTB
005D45r 1  9C 81 FF         stz PORTA
005D48r 1               .endif
005D48r 1               
005D48r 1  20 rr rr     jsr acia_init
005D4Br 1               .ifdef timer_init
005D4Br 1  20 rr rr         jsr timer_init
005D4Er 1               .endif
005D4Er 1               .ifdef video_init
005D4Er 1                   jsr video_init
005D4Er 1               .endif
005D4Er 1               .ifdef ps2_init
005D4Er 1                   jsr ps2_init
005D4Er 1               .endif
005D4Er 1               .ifdef cf_init
005D4Er 1  20 rr rr         jsr cf_init
005D51r 1               .endif
005D51r 1               .ifdef lcd_init
005D51r 1                   jsr lcd_init
005D51r 1               .endif
005D51r 1               .ifdef spi_init
005D51r 1  20 rr rr         jsr spi_init
005D54r 1               .endif
005D54r 1               .ifdef kb_init
005D54r 1                   jsr kb_init
005D54r 1               .endif
005D54r 1               
005D54r 1  DA A2 00 BD      printascii welcome_message
005D58r 1  rr rr F0 06  
005D5Cr 1  20 rr rr E8  
005D63r 1               
005D63r 1                   ; lda #<dictionary
005D63r 1                   ; sta util_tmp
005D63r 1                   ; lda #>dictionary
005D63r 1                   ; sta util_tmp + 1
005D63r 1               
005D63r 1                   ; jsr calculate_free_mem
005D63r 1                   ; lda tmp_var + 1
005D63r 1                   ; ldx tmp_var
005D63r 1                   ; jsr print16
005D63r 1               
005D63r 1                   ; printascii free_message
005D63r 1               
005D63r 1               
005D63r 1  4C rr rr         jmp forth
005D66r 1               
005D66r 1               v_nmi:
005D66r 1               
005D66r 1                   ; jsr calculate_free_mem
005D66r 1                   ; lda tmp_var + 1
005D66r 1                   ; ldx tmp_var
005D66r 1                   ; jsr print16
005D66r 1               
005D66r 1                   ; printascii free_message
005D66r 1  DA A2 00 BD      printascii ready_message
005D6Ar 1  rr rr F0 06  
005D6Er 1  20 rr rr E8  
005D75r 1               
005D75r 1  4C rr rr         jmp xt_abort
005D78r 1               
005D78r 1               
005D78r 1               
005D78r 1               
005D78r 1               io_read_sector:
005D78r 1  4C rr rr         jmp io_read_sector_address        ; jump to read sector routine
005D7Br 1               
005D7Br 1               io_write_sector:
005D7Br 1  4C rr rr         jmp io_write_sector_address        ; jump to read sector routine
005D7Er 1               
005D7Er 1               
005D7Er 1               
005D7Er 1               kernel_putc:
005D7Er 1                   ; """Print a single character to the console. """
005D7Er 1                   ;; Send_Char - send character in A out serial port.
005D7Er 1                   ;; Uses: A (original value restored)
005D7Er 1               send_char:
005D7Er 1  48               pha
005D7Fr 1                   .ifdef char_out
005D7Fr 1                   jsr char_out
005D7Fr 1                   .endif
005D7Fr 1                   .ifdef acia_out
005D7Fr 1  20 rr rr         jsr acia_out
005D82r 1                   .endif
005D82r 1               send_char_exit:
005D82r 1               .ifdef lcd_print
005D82r 1                   ; jsr lcd_print
005D82r 1               .endif
005D82r 1  68               pla
005D83r 1  60               rts
005D84r 1               
005D84r 1               
005D84r 1                       ;; Get_Char - get a character from the serial port into A.
005D84r 1                       ;; Set the carry flag if char is valid.
005D84r 1                       ;; Return immediately with carry flag clear if no char available.
005D84r 1                       ;; Uses: A (return value)
005D84r 1               
005D84r 1               Get_Char:
005D84r 1  20 rr rr         jsr acia_getc
005D87r 1  90 02            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
005D89r 1  38               sec                             ; Set Carry to show we got a character
005D8Ar 1  60               rts                             ; Return
005D8Br 1               
005D8Br 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
005D8Br 1               .ifdef ps2_get_char
005D8Br 1                   jsr ps2_get_char
005D8Br 1               .endif
005D8Br 1  90 02            bcc get_kb_char
005D8Dr 1  38               sec
005D8Er 1               
005D8Er 1  60               rts
005D8Fr 1               get_kb_char:
005D8Fr 1                   .ifdef kb_get_char
005D8Fr 1               
005D8Fr 1                   ; ldy #5
005D8Fr 1                   ; jsr delay_short
005D8Fr 1                   ; ply
005D8Fr 1                       jsr kb_get_char
005D8Fr 1               
005D8Fr 1                   .endif
005D8Fr 1               exit:                         ; Indicate no char available.
005D8Fr 1  60               rts                             ; return
005D90r 1               
005D90r 1               kernel_getc:
005D90r 1                   ; """Get a single character from the keyboard (waits for key).
005D90r 1                   ; """
005D90r 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
005D90r 1                   ;; Uses: A (return value)
005D90r 1               Get_Char_Wait:
005D90r 1  20 rr rr         jsr Get_Char
005D93r 1  90 FB            bcc Get_Char_Wait
005D95r 1  60               rts
005D96r 1               
005D96r 1               
005D96r 1               v_irq:                          ; IRQ handler
005D96r 1  48                   pha
005D97r 1  5A                   phy
005D98r 1                       ; lda #'.'
005D98r 1                       ; jsr kernel_putc
005D98r 1                       ; check if bit 7 of IFR is set
005D98r 1               .ifdef IFR
005D98r 1  AD 8D FF             lda IFR
005D9Br 1  10 0B                bpl irq_not_from_via  ; Interrupt not from VIA, exit
005D9Dr 1               
005D9Dr 1  29 08                and #$08        ; ps2 has priority
005D9Fr 1  D0 07                bne v_irq_ps2
005DA1r 1  AD 8D FF             lda IFR
005DA4r 1  29 40                and #$40
005DA6r 1  D0 02                bne v_irq_timer
005DA8r 1               irq_not_from_via:
005DA8r 1               .endif
005DA8r 1               .ifdef KB_IFR
005DA8r 1               v_kb_irq:
005DA8r 1                       lda KB_IFR
005DA8r 1                       bpl v_irq_exit
005DA8r 1                       and #$40
005DA8r 1                       bne v_kb_irq_timer
005DA8r 1                       bra v_irq_exit
005DA8r 1               .endif
005DA8r 1               
005DA8r 1               v_irq_ps2:
005DA8r 1                   .ifdef ps2_irq
005DA8r 1                       lda time
005DA8r 1                       sta last_ps2_time
005DA8r 1                       lda time+1
005DA8r 1                       sta last_ps2_time+1
005DA8r 1                       lda time+2
005DA8r 1                       sta last_ps2_time+2
005DA8r 1                       lda time+3
005DA8r 1                       sta last_ps2_time+3
005DA8r 1               
005DA8r 1                       jsr ps2_irq
005DA8r 1               
005DA8r 1                   .endif
005DA8r 1  80 27                bra v_irq_exit
005DAAr 1               
005DAAr 1               .ifdef T1CL
005DAAr 1               v_irq_timer:
005DAAr 1  AD 84 FF             lda T1CL
005DADr 1                       ; clear timer interrupt
005DADr 1                   .ifdef timer_irq
005DADr 1  20 rr rr             jsr timer_irq
005DB0r 1                   .endif
005DB0r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
005DB3r 1                       ; check if there is a char waiting to be printed to the lcd
005DB3r 1                       ; lda lcd_char
005DB3r 1                       ; beq v_exit
005DB3r 1                       ; jsr lcd_print
005DB3r 1                       ; stz lcd_char
005DB3r 1               
005DB3r 1               
005DB3r 1  90 1C                bcc v_irq_exit      ; no character waiting, exit normally
005DB5r 1  C9 03                cmp #$03            ; check if CTRL-C
005DB7r 1  D0 18                bne v_irq_exit      ; not CTRL-C, exit normally
005DB9r 1  DA A2 00 BD          printascii abort_message    ; was a CTRL_C
005DBDr 1  rr rr F0 06  
005DC1r 1  20 rr rr E8  
005DC8r 1  7A                   ply                         ; pull what the ISR pushed
005DC9r 1  68                   pla
005DCAr 1  28                   plp                         ; pull status register
005DCBr 1  68                   pla                         ; pull return address
005DCCr 1  68                   pla
005DCDr 1               
005DCDr 1  58                   cli                         ; clear interrupt diabled bit
005DCEr 1  4C rr rr             jmp xt_abort
005DD1r 1               
005DD1r 1               .endif
005DD1r 1               v_kb_irq_timer:
005DD1r 1               .ifdef kb_time
005DD1r 1                   lda KB_T1CL ; clear timer interrupt
005DD1r 1                   inc kb_time
005DD1r 1                   bne v_irq_exit
005DD1r 1               .endif
005DD1r 1                   ;jsr kb_scan
005DD1r 1               v_irq_exit:
005DD1r 1  7A               ply
005DD2r 1  68               pla
005DD3r 1  40               rti
005DD4r 1               
005DD4r 1  20 62 79 74  free_message: .byte " bytes free", $0D, 0
005DD8r 1  65 73 20 66  
005DDCr 1  72 65 65 0D  
005DE1r 1  52 65 61 64  ready_message: .byte "Ready", $0D, 0
005DE5r 1  79 0D 00     
005DE8r 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", $0D, 0
005DECr 1  6F 6D 65 20  
005DF0r 1  74 6F 20 50  
005E21r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
005E24r 1               
005E24r 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word kernel_init
000004r 1  rr rr        .word v_irq
000004r 1               
